package GestioIP;


#use diagnostics;
use warnings;
use strict;
use Carp;
use POSIX;
use POSIX qw(strftime);
use Time::Local;
use vars qw($VERSION);
use DBI;
use Net::IP;
use Net::IP qw(:PROC);
use File::Find;
use Socket;
use SNMP::Info;
use Math::BigInt;
use Data::Dumper;
#use WWW::CSRF qw(generate_csrf_token check_csrf_token CSRF_OK);
use lib ".";
use GipTemplate;


$VERSION = "3.5";
my $PATCH_VERSION=7;
my $SUB_VERSION=0;
my $DEBUG=0;


sub debug(@){
    return if ! $DEBUG;
    foreach ( @_ ) {
        print STDERR "DEBUG: $_\n" if $_ !~ /GestioIP=HASH/;
    }
}

###
# new() creates a new object, getting and hashref as an argument
###
sub new {
	my ($class, $args) = @_;
	
	# if args is undef, then use a default emtpy hashref
	# otherwise it must be an hashref
	$args ||= {};
	if (ref($args) ne "HASH") {
		print("LOG: args should be an hashref\n");
		return undef;
	}
	# set  default values
	my %tmp = (
		'debug' =>0,
		'format'=>'html',
		%{$args}
	);
	my $self = \%tmp;
	
	# create an object starting from the hashref $self
	bless($self, $class);	

	return($self);
}


#
# Get variables from a file
#
sub _get_vars {
	my ( $self, $vars_file ) = @_;

	my $format=$self->{'format'};
	my $error;
	my %vars;
	open(VARS,"<$vars_file") or $error="Can not open vars_file $vars_file: $!";

	if ( $format eq 'html' && $error ) {
		croak $self->print_error("1","$error");
	}

	while (<VARS>) { 
		chomp;
		next if /^#/;
		s/^\s+//;
		s/\s+$//;
		next unless length;
		my ($var, $value) = split(/\s*=\s*/, $_, 2);
		$vars{$var} = $value;
	}
	close VARS;
	return %vars;
}


sub _mysql_connection {
	my ($self,$config_file) = @_;
	$config_file = $self->_get_config_file() if ! $config_file;
	my %config = $self->_get_vars("$config_file");
	$config{sid} = "gestioip" if ! $config{sid};
	$config{bbdd_host} = "127.0.0.1" if ! $config{bbdd_host};
	$config{bbdd_port} = "3306" if ! $config{bbdd_port};
	my $connect_error = "0";
	my $dbh = DBI->connect("DBI:mysql:$config{sid}:$config{bbdd_host}:$config{bbdd_port}",$config{user},$config{password},{
                PrintError => 1,
                RaiseError => 0
        } ) or $connect_error = "$DBI::errstr\n";
	if ( $connect_error =~ /Unknown database|Can't connect to MySQL server|Access denied for user/i ) {
		my $uri = $self->get_uri();
		my $server_proto=$self->get_server_proto();
		my $stylesheet="stylesheet.css";
		my $path;
		if ( $0 =~ /res\/cm/ ) {
			$path="../..";
		} elsif ( $0 =~ /res|login/ ) {
			$path="..";
		} else {
			$path=".";
		}
print <<EOF;
Content-type: text/html\n
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<head><title>Gesti&oacute;IP</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<link rel="stylesheet" type="text/css" href="$path/$stylesheet">
EOF
		croak $self->print_error("1","Can not connect to database<p>$DBI::errstr <p><br>Did you followed the instructions of the web based installation (<a href=\"$server_proto://$uri/install\">$server_proto://$uri/install</a>)?");
	} elsif ( $connect_error =~ /Lost connection to MySQL server at 'reading authorization packet/ ) {
#		print "Mysql connection error - device ignorado $$lang_vars{ignorado_message}<br>\n";
	} elsif ( $connect_error ne "0" ) {
		my $stylesheet="stylesheet.css";
		my $path;
		if ( $0 =~ /res\/cm/ ) {
			$path="../..";
		} elsif ( $0 =~ /res|login/ ) {
			$path="..";
		} else {
			$path=".";
		}
print <<EOF;
Content-type: text/html\n
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<head><title>Gesti&oacute;IP</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<link rel="stylesheet" type="text/css" href="$path/$stylesheet">
<script src="$path/js/jquery-3.3.1.min.js"></script>


EOF
		croak $self->print_error("1","Can not connect to database<p>$DBI::errstr");
	}
	return $dbh;
}

sub _get_config_file {
	my $self = shift;
	my $conf_path="priv";
	if ( $0 =~ /res\/cm/ ) {
		$conf_path="../../priv";
	} elsif ( $0 =~ /res|login/ ) {
		$conf_path="../priv";
#API
 	} elsif ( $0 =~ /api\/intapi/ ) {
 		$conf_path="../priv";
 	} elsif ( $0 =~ /intapi/ ) {
 		$conf_path="./priv";
 	} elsif ( $0 =~ /api/ ) {
 		$conf_path="../priv";
	}
	my $config_file="$conf_path/ip_config";
	return $config_file;
}

sub get_ip_version_ele {
	my $self = shift;
	my $ip_version_ele = "";
	if ( defined($ENV{'HTTP_COOKIE'}) ) {
		if ( $ENV{'HTTP_COOKIE'} =~ /.*IPVersionEle=(\w{2}).*/ ) {
			$ENV{'HTTP_COOKIE'} =~ /.*IPVersionEle=(\w{2}).*/;
			$ip_version_ele = $1;
		}
	}
	$ip_version_ele = "v4" if $ip_version_ele !~ /^(v4|v6|46)$/;
	return $ip_version_ele;
}

sub set_ip_version_ele {
	my ($self,$ip_version_ele) = @_;
	$ip_version_ele = "v4" if ! $ip_version_ele;
	if ( defined($ENV{'HTTP_COOKIE'}) ) {
		if ( $ENV{'HTTP_COOKIE'} =~ /.*IPVersionEle=(\w{2}).*/ ) {
			$ENV{'HTTP_COOKIE'} =~ /.*IPVersionEle=(\w{2}).*/;
			my $ip_version_ele_new = $1 || "v4";
			if ( $ip_version_ele ne $ip_version_ele_new ) {
				my $fut_time=gmtime(time()+365*24*3600)." GMT";
				my $cookie = "IPVersionEle=$ip_version_ele; path=/; expires=$fut_time; SameSite=Strict; 0";
				print "Set-Cookie: " . $cookie . "\n";
			}
#			$ip_version_ele = $ip_version_ele_new;
		} else {
			$ip_version_ele = "v4" if ! $ip_version_ele;
			my $fut_time=gmtime(time()+365*24*3600)." GMT";
			my $cookie = "IPVersionEle=$ip_version_ele; path=/; expires=$fut_time; SameSite=Strict; 0";
			print "Set-Cookie: " . $cookie . "\n";
		}
	} else {
		$ip_version_ele = "v4" if ! $ip_version_ele;
		my $fut_time=gmtime(time()+365*24*3600)." GMT";
		my $cookie = "IPVersionEle=$ip_version_ele; path=/; expires=$fut_time; SameSite=Strict; 0";
		print "Set-Cookie: " . $cookie . "\n";
	}
	return $ip_version_ele;
}

sub get_show_rootnet_val {
	my $self = shift;
	my $show_rootnet = "";
	if ( defined($ENV{'HTTP_COOKIE'}) ) {
		if ( $ENV{'HTTP_COOKIE'} =~ /.*ShowRootNet=(\d{1}).*/ ) {
			$ENV{'HTTP_COOKIE'} =~ /.*ShowRootNet=(\d{1}).*/;
			$show_rootnet = $1;
		}
	}
	$show_rootnet = "0" if $show_rootnet !~ /^(0|1)$/;
	return $show_rootnet;
}

sub set_show_rootnet_val {
	my ($self,$show_rootnet) = @_;
	my $fut_time=gmtime(time()+365*24*3600)." GMT";
	my $cookie = "ShowRootNet=$show_rootnet; path=/; expires=$fut_time; SameSite=Strict; 0";
	print "Set-Cookie: " . $cookie . "\n";
}

sub get_show_endnet_val {
	my $self = shift;
	my $show_endnet = "";
	if ( defined($ENV{'HTTP_COOKIE'}) ) {
		if ( $ENV{'HTTP_COOKIE'} =~ /.*ShowEndNet=(\d{1}).*/ ) {
			$ENV{'HTTP_COOKIE'} =~ /.*ShowEndNet=(\d{1}).*/;
			$show_endnet = $1;
		}
	}
	$show_endnet = "0" if $show_endnet !~ /^(0|1)$/;
	return $show_endnet;
}

sub set_show_endnet_val {
	my ($self,$show_endnet) = @_;
	my $fut_time=gmtime(time()+365*24*3600)." GMT";
	my $cookie = "ShowEndNet=$show_endnet; path=/; expires=$fut_time; SameSite=Strict; 0";
	print "Set-Cookie: " . $cookie . "\n";
}

sub get_hide_not_rooted_val {
	my $self = shift;
	my $hide_not_rooted = "";
	if ( defined($ENV{'HTTP_COOKIE'}) ) {
		if ( $ENV{'HTTP_COOKIE'} =~ /.*HideNotRootedNet=(\d{1}).*/ ) {
			$ENV{'HTTP_COOKIE'} =~ /.*HideNotRootedNet=(\d{1}).*/;
			$hide_not_rooted = $1;
		}
	}
	$hide_not_rooted = "0" if $hide_not_rooted !~ /^(0|1)$/;
	return $hide_not_rooted;
}

sub set_hide_not_rooted_val {
	my ($self,$hide_not_rooted) = @_;
	my $fut_time=gmtime(time()+365*24*3600)." GMT";
	my $cookie = "HideNotRootedNet=$hide_not_rooted; path=/; expires=$fut_time; SameSite=Strict; 0";
	print "Set-Cookie: " . $cookie . "\n";
}

sub get_quick_search_val {
	my ($self, $vars_file) = @_;

	my %lang_vars = $self->_get_vars("$vars_file");
	my $value = "";
	if ( defined($ENV{'HTTP_COOKIE'}) ) {
		if ( $ENV{'HTTP_COOKIE'} =~ /.*quickSearch=($lang_vars{network_search_message}|$lang_vars{host_search_message}|$lang_vars{vlan_search_message}|$lang_vars{site_search_message}|$lang_vars{line_search_message}|$lang_vars{mac_search_message}).*/ ) {
			$ENV{'HTTP_COOKIE'} =~ /.*quickSearch=($lang_vars{network_search_message}|$lang_vars{host_search_message}|$lang_vars{vlan_search_message}|$lang_vars{site_search_message}|$lang_vars{line_search_message}|$lang_vars{mac_search_message}).*/;
			$value = $1;
		}
	}
	$value = $lang_vars{network_search_message} if ! $value;
	return $value;
}

sub set_quick_search_val {
	my ($self, $quick_search) = @_;
	my $fut_time=gmtime(time()+365*24*3600)." GMT";
	my $cookie = "quickSearch=$quick_search; path=/; expires=$fut_time; SameSite=Strict; 0";
	print "Set-Cookie: " . $cookie . "\n";
}


sub get_local_filter_enabled_val {
	my $self = shift;
	my $local_filter_enabled = "";
	if ( defined($ENV{'HTTP_COOKIE'}) ) {
		if ( $ENV{'HTTP_COOKIE'} =~ /.*LocalFilterEnabled=(\d{1}).*/ ) {
			$ENV{'HTTP_COOKIE'} =~ /.*LocalFilterEnabled=(\d{1}).*/;
			$local_filter_enabled = $1;
		}
	}
	$local_filter_enabled = "0" if $local_filter_enabled !~ /^(0|1)$/;
	return $local_filter_enabled;
}

sub set_local_filter_enabled_val {
	my ($self,$local_filter_enabled) = @_;
	my $fut_time=gmtime(time()+365*24*3600)." GMT";
	my $cookie = "LocalFilterEnabled=$local_filter_enabled; path=/; expires=$fut_time; SameSite=Strict; 0";
	print "Set-Cookie: " . $cookie . "\n";
}




sub get_collapse_networks_val {
	my $self = shift;
	my $collapse_networks = "";
	if ( defined($ENV{'HTTP_COOKIE'}) ) {
		if ( $ENV{'HTTP_COOKIE'} =~ /.*CollapseNetworks=(\d{1}).*/ ) {
			$ENV{'HTTP_COOKIE'} =~ /.*CollapseNetworks=(\d{1}).*/;
			$collapse_networks = $1;
		}
	}
	$collapse_networks = 0 if $collapse_networks !~ /^(0|1)$/;
	return $collapse_networks;
}

sub set_collapse_networks_val {
	my ($self,$collapse_networks_val) = @_;
	my $fut_time=gmtime(time()+365*24*3600)." GMT";
	my $cookie = "CollapseNetworks=$collapse_networks_val; path=/; expires=$fut_time; SameSite=Strict; 0";
	print "Set-Cookie: " . $cookie . "\n";
}

sub get_entries_host_por_site {
	my $self = shift;
	my $entry = "";
	if ( defined($ENV{'HTTP_COOKIE'}) ) {
		if ( $ENV{'HTTP_COOKIE'} =~ /.*EntriesHostPorSite=(\d{1,4}).*/ ) {
			$ENV{'HTTP_COOKIE'} =~ /.*EntriesHostPorSite=(\d{1,4}).*/;
			$entry = $1;
		}
	}
	$entry = "254" if $entry !~ /^\d+$/;
	return $entry;
}

sub set_entries_host_por_site {
	my ($self,$entry) = @_;
	my $fut_time=gmtime(time()+365*24*3600)." GMT";
	my $cookie = "EntriesHostPorSite=$entry; path=/; expires=$fut_time; SameSite=Strict; 0";
	print "Set-Cookie: " . $cookie . "\n";
	debug("Set-Cookie: " . $cookie);
}


sub get_lang_simple {
	my $self = shift;
	my $lang = "";
	if ( defined($ENV{'HTTP_COOKIE'}) ) {
		if ( $ENV{'HTTP_COOKIE'} =~ /.*GestioIPLang=\w{2,3}/ ) {
			$ENV{'HTTP_COOKIE'} =~ /.*GestioIPLang=(\w{2,3}).*/;
			$lang=$1;
		}
	}
	$lang = "en" if ! $lang;
	return $lang;
}

sub delete_session_cookie {
	my ($self) = @_;
	my $fut_time=gmtime(time()+365*24*3600)." GMT";
	my $cookie = "session='XXXXXXX'; path=/; expires=$fut_time; SameSite=Strict; 0";
	print "Set-Cookie: " . $cookie . "\n";
	my $cookie1 = "session_test='BOLLAAAAAAA'; path=/; expires=$fut_time; SameSite=Strict; 0";
	print "Set-Cookie: " . $cookie1 . "\n";
}

#
# Check if the script context is local or web
#
sub _get_script_context(){
	if ( $0 =~ m/\.cgi$/) {
		return ($0, $ENV{'SCRIPT_NAME'});
	} else {
		return (".", $ENV{'SCRIPT_NAME'});
	}
	
}


sub get_lang {
	my ($self,$entries_red_por_page,$lang) = @_;
	my $cgi_dir = $self->get_cgi_dir();
	my $cgi_base_dir = $cgi_dir;
	$cgi_base_dir =~ s/\/res\/cm//;
	$cgi_base_dir =~ s/\/res//;
	$cgi_base_dir =~ s/\/login//;
	my ($DOCUMENT_ROOT, $SCRIPT_NAME) = _get_script_context();

	##### CHANGE
	$SCRIPT_NAME =~ s/^\/*(\/.*)/$1/;
	$DOCUMENT_ROOT =~ s/$SCRIPT_NAME//;
	my $fut_time=gmtime(time()+365*24*3600)." GMT";
	my ( $cookie,$vars_file,$vars_path,$conf_path);
#	my $entries_por_page_given="1";
	if ( $lang ) {
		if ( defined($ENV{'HTTP_COOKIE'}) ) {
			$ENV{'HTTP_COOKIE'} =~ /.*EntriesRedPorPage=(\d{1,3}).*/;
			if ( ! $entries_red_por_page ) {
				$entries_red_por_page=$1 || "500";
			}
		}
		my $cookie1 = "GestioIPLang=$lang; path=/; expires=$fut_time; SameSite=Strict; 0";
		my $cookie2 = "EntriesRedPorPage=$entries_red_por_page; path=/; expires=$fut_time; SameSite=Strict; 0";
		print "Set-Cookie: " . $cookie1 . "\n";
		print "Set-Cookie: " . $cookie2 . "\n";
	} else {
		if ( ! $ENV{'HTTP_COOKIE'} ) {
			$entries_red_por_page="500" if ! $entries_red_por_page;
			$lang="en" if ! $lang;
			my $cookie1 = "GestioIPLang=$lang; path=/; expires=$fut_time; SameSite=Strict; 0";
			my $cookie2 = "EntriesRedPorPage=$entries_red_por_page; path=/; expires=$fut_time; SameSite=Strict; 0";
			print "Set-Cookie: " . $cookie1 . "\n";
			print "Set-Cookie: " . $cookie2 . "\n";
		} else {
			$ENV{'HTTP_COOKIE'} =~ /.*EntriesRedPorPage=(\d{1,3}).*/;
			if ( ! $entries_red_por_page ) {
				$entries_red_por_page=$1 || "500";
#				$entries_por_page_given="0";
				$cookie = "EntriesRedPorPage=$entries_red_por_page; path=/; expires=$fut_time; SameSite=Strict; 0";
				print "Set-Cookie: " . $cookie . "\n";
			} else {
				$cookie = "EntriesRedPorPage=$entries_red_por_page; path=/; expires=$fut_time; SameSite=Strict; 0";
				print "Set-Cookie: " . $cookie . "\n";
			}
#### CHANGE
			if ( $ENV{'HTTP_COOKIE'} =~ /.*GestioIPLang=\w{2,3}/ ) {
					$ENV{'HTTP_COOKIE'} =~ /.*GestioIPLang=(\w{2,3}).*/;
					$lang=$1;
			} else {
					$lang="en";
					my $cookie1 = "GestioIPLang=$lang; path=/; expires=$fut_time; SameSite=Strict; 0";
					print "Set-Cookie: " . $cookie1 . "\n";
			}
		}
	}

	$entries_red_por_page ||= "500";

	if ( ! $lang ) {
		if ( $ENV{HTTP_ACCEPT_LANGUAGE} ) {
			$lang=$ENV{HTTP_ACCEPT_LANGUAGE};
			$lang =~ /(^\w{2}\w?).*/;
			$lang = $2 || "es";
		} else {
			$lang = "en";
		}
	}
		
	opendir DIR, "$DOCUMENT_ROOT/$cgi_base_dir/vars" or die "Can't open vars dir \"$DOCUMENT_ROOT/$cgi_base_dir/vars\": $!\n";
	rewinddir DIR;
	while ( $vars_file = readdir(DIR) ) {
		if ( $vars_file =~ /^vars_$lang$/ ) {
			last;
		}
	}
	closedir DIR;
	$vars_path = "./vars";
	if ( $0 =~ /res\/cm/ ) {
		$vars_path="../../vars";
	} elsif ( $0 =~ /res|error|login/ ) {
		$vars_path="../vars";
	}
	$vars_file = "$vars_path/$vars_file";
	my %lang_vars = $self->_get_vars("$vars_file");

    $self->{vars_file} = $vars_file;

	return (\%lang_vars,$vars_file,$entries_red_por_page,$lang);
}

sub get_params {
	my $self = shift;
	my $config_file = $self->_get_config_file();
	my %params = $self->_get_vars("$config_file");
	return %params;
}

sub get_cgi_dir {
        my $cgi_dir = $ENV{'SCRIPT_NAME'};
        $cgi_dir =~ s/^\/*(\/.*)/$1/;
        if ( $cgi_dir =~ /^\/res\// ) {
                $cgi_dir = "/res";
        } elsif ( $cgi_dir =~ /\/res\// ) {
		$cgi_dir =~ s/\/*(.*\/res)\/.*/$1/;
	} elsif ( $cgi_dir =~ /^\/cm\// ) {
		$cgi_dir = "/res/cm";
	} elsif ( $cgi_dir =~ /\/cm\// ) {
		$cgi_dir =~ s/\/*(.*\/res\/cm)\/.*/$1/;
        } else {
                if ( $cgi_dir =~ /^\/[0-9a-z_]+\.cgi$/ ) {
                        $cgi_dir = "/";
                } else {
                        $cgi_dir =~ s/\/(.*)\/[0-9a-z_]+\.cgi/$1/;
                }
        }
        return $cgi_dir;
}

sub get_uri {
        my $self = shift;
        my $uri;
        my $cgi_dir = $self->get_cgi_dir();
        if ( ! $cgi_dir || $cgi_dir eq "/" ) {
                $uri="$ENV{HTTP_HOST}";
        } else {
                $cgi_dir =~ s/^\/*//;
                $uri="$ENV{HTTP_HOST}/$cgi_dir";
        }
        return $uri;
}

sub get_base_uri {
        my $self = shift;
        my $base_uri;
        my $cgi_dir = $self->get_cgi_dir();
        $cgi_dir =~ s/\/res\/cm//;
        $cgi_dir =~ s/\/res//;
        $cgi_dir =~ s/\/login//;
        if ( ! $cgi_dir || $cgi_dir eq "/" ) {
                $base_uri="$ENV{HTTP_HOST}";
        } else {
                $base_uri="$ENV{HTTP_HOST}/$cgi_dir";
        }
        return $base_uri;
}


sub print_error {
	my ( $self,$client_id,$error,$no_back_link ) = @_;

	my $lang=$self->get_lang_simple() || "en";

	my $ori="left";
	if ( $lang eq "he" ) {
		$ori="right";
		my $rtl_helper="<font color=\"white\">x</font>";
		print "<h3 style=\"float: $ori\">ERROR</h3><font color=\"white\">x</font><br><p><br>$rtl_helper<br><p><span style=\"float: $ori\">$error${rtl_helper}<span style=\"float: $ori\"></span><br><p>\n";
	} else {
		print "<h3>ERROR</h3> $error<p>\n";
	}

    debug("$error");

	if ( $error =~ "Can not connect to database" ) {
		$self->print_end("$client_id");
	}
	if ( $ENV{'SCRIPT_NAME'} =~ /ip_insertred_calculate.cgi/ ) {	
		print "<p><br><p><br><p><br><span class=\"close_window\" onClick=\"window.close()\" style=\"cursor:pointer;\" style=\"float: $ori\"> close </span>\n";
		$self->print_end("$client_id");
	} elsif ( $ENV{'SCRIPT_NAME'} =~ /ip_calculatered.cgi/ && $ENV{HTTP_REFERER} !~ /ip_insertred_form.cgi/ ) {
		print "<p><br><p><FORM><INPUT TYPE=\"BUTTON\" VALUE=\"back\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM>\n";
		print "<p><br><p><br><p><br><span class=\"close_window\" onClick=\"window.close()\" style=\"cursor:pointer; float:$ori\"> close </span>\n";
		$self->print_end("$client_id");
	} elsif ( $ENV{'SCRIPT_NAME'} =~ /ip_calculatered.cgi/ ) {
		print "<p><br><p><br><p><br><span class=\"close_window\" onClick=\"window.close()\" style=\"cursor:pointer; float:$ori\"> close </span>\n";
		$self->print_end("$client_id");
	} else {
		print "<p><br><p><br><span style=\"float: $ori\"><FORM style=\"float: $ori\"><INPUT TYPE=\"BUTTON\" VALUE=\"back\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM></span>\n" if ! $no_back_link;
		$self->print_end("$client_id");
	}
}

sub get_server_proto {
        my $self = shift;
	my $server_proto="http";
	if ( $ENV{HTTPS} ) {
		$server_proto = "https" if $ENV{HTTPS} =~ /on/i;
	}
	return $server_proto
}


sub check_parameters {
    my $self = shift;
	my %args = @_;

	my $error_message = "";
    my $vars_file = "";
    if ( $self->{vars_file} ) {
        $vars_file = $self->{vars_file};
    } else {
        $vars_file = $args{vars_file} || "";
    }
	if ( ! $vars_file ) {
		$error_message="no vars-file found";
		return ($error_message);
	}
	my %lang_vars = $self->_get_vars("$vars_file");

	my $ip_version = $args{ip_version} || "";
	my $ip_version1 = $args{ip_version1} || "";
	my $ip_version2 = $args{ip_version2} || "";
	my $ip = $args{ip} || "";
	my $ip1 = $args{ip} || "";
	my $ip2 = $args{ip} || "";
	my $ip3 = $args{cm_server_ip} || "";

	while ( my ($key, $value) = each(%args) ) {
		# values is a number between 0 and 999999
		if ( $key =~ /^(digest6|id[0-9]?|client_id|entries_per_page|start_entry|rootnet_num|red_num|host_id.{0,5}|vlan_id|device_user_group_id|cm_server_id|job_id.{0,5}|job_group|device_type_group_id|snmp_port|id|id1)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (1a) $value - $key" if $value !~ /^\d{1,7}$/;
				return ($error_message) if $error_message;
			}
		}

		# values is a number with up to 35 numbers
		if ( $key =~ /^(start_entry_hosts|digest8)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (1b)" if $value !~ /^\d{1,35}$/;
				return ($error_message) if $error_message;
			}
		}

		# value is 0 or 1
		if ( $key =~ /^(one_or_cero|collapse_networks|bignet)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (2c) $value" if $value !~ /^1$/;
				return ($error_message) if $error_message;
			}
		}

		# values is a number with up to 35 numbers and \s or + or _ or -
		if ( $key =~ /^(phone)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{wrong_phone_number_message} (1c)" if $value !~ /^(\d|\s|\+|-|_){1,35}$/;
				return ($error_message) if $error_message;
			}
		}

		# values is a valid email addresss
		if ( $key =~ /^(email)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{no_valid_email_message}" if $value !~ /^[\w\.-]+\@[\w\.-]+\.\w{1,5}$/;
				return ($error_message) if $error_message;
			}
		}

		# values is a valid email list
		if ( $key =~ /^(email_list)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{no_valid_email_message}" if $value !~ /^[\w\.-@\s,]{5,150}$/;
				return ($error_message) if $error_message;
			}
		}


		# value is 1-3 \w
		if ( $key =~ /^(lang|update_type_audit|ping_status_only|rootnet|snmp_version|rootnet_BM)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (2a)" if $value !~ /^\w{1,3}$/;
				return ($error_message) if $error_message;
			}
		}

		# value is 1-12 \w
		if ( $key =~ /^(search_index|auth_proto|priv_proto|mode|log_mode|ttl|dns_type)$/ ) {
			if ( $value ) {
                if ( $key eq "ttl" ) {
                    $error_message="$lang_vars{ttl_error_message}" if $value !~ /^\w{1,12}$/;
                } else {
                    $error_message="$lang_vars{formato_malo_message} (2b)" if $value !~ /^\w{1,12}$/;
                }
				return ($error_message) if $error_message;
			}
		}

		# value is 1-20 \w and _
		if ( $key =~ /^(admin_type)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (2c)" if $value !~ /^(\w|_){1,20}$/;
				return ($error_message) if $error_message;
			}
		}

		# value is 1-50 \w and _ 
		if ( $key =~ /^(diff_host1|diff_host2)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (2d)" if $value !~ /^(\w|_){1,50}$/;
				return ($error_message) if $error_message;
			}
		}


		if ( $key =~ /^(ip_version)\d{0,2}$/ ) {
			if ( $ip_version || $ip_version1 || $ip_version2) {
				$error_message="$lang_vars{formato_malo_message} (2)" if $value !~ /^(ip)?v(4|6)$/;
				return ($error_message) if $error_message;
			}
		}

		if ( $key =~ /^(ip_version_ele)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (2d)" if $value !~ /^(ip)?v(4|6)$/;
				return ($error_message) if $error_message;
			}
		}

		if ( defined($args{ip}) && ! defined($args{ip_version}) ) {
			$error_message="$lang_vars{formato_malo_message} (3)";
			return ($error_message) if $error_message;
		}

		if ( $key =~ /^(ip\d{0,2}|cm_server_ip)$/ ) {
			$ip=$ip1 if $ip1;
			$ip=$ip2 if $ip2;
			if ( $ip3 ) {
				#cm_server_ip
				if ( $ip3 =~ /^(.*)\s/ ) {
					$ip3 =~ /^(.*)\s/;
					$ip=$1 || 0;
				} else {
					$ip=$ip3;
				}
			}
			if ( $ip_version eq "v4" ||  $ip_version2 eq "v4" || $ip_version1 eq "v4" ) {
				if ( $ip !~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ ) {
					$error_message="$lang_vars{ip_invalid_message} - $lang_vars{check_ip_message}";
					return ($error_message) if $error_message;
				}
			} elsif ( $ip_version eq "v6" || $ip_version1 eq "v6" || $ip_version2 eq "v6" ) {
				my $valid_ip = $self->check_valid_ipv6("$ip") || "0";
				if ( $valid_ip != 1 ) {
					$error_message="$lang_vars{IPv6_invalido_message} - $lang_vars{check_ip_message}";
					return ($error_message) if $error_message;
				}
			} else {
				$error_message="$lang_vars{formato_malo_message} (4) $key - $value";
				return ($error_message) if $error_message;
			}
		}


#		# value is up to 20 characters long with specific notification
#		if ( $key =~ /^()$/ ) {
#			if ( $value ) {
#				$error_message="$key: $lang_vars{only_up_to_20_characters_message}" if $value !~ /^.{0,20}$/;
#				return ($error_message) if $error_message;
#			}
#		}

		# value is up to 60 characters long
		if ( $key =~ /^(tipo_ele|loc_ele|order_by|auth_pass|priv_pass|user_group_priv_pass|community|sec_level|hostname|job_name_descr|device_user_group_name|device_user_name|cm_server_name|cm_server_user|device_job|loc|name)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (5) $value" if $value !~ /^.{0,60}$/;
				return ($error_message) if $error_message;
			}
		}

		# value is up to 60 characters long with specific notification
		if ( $key =~ /^(match|login_pass|retype_login_pass|priv_pass|retype_priv_pass|cm_server_root|cm_server_pass|string60|DUID)$/ ) {
			if ( $value ) {
				$error_message="$key: $lang_vars{only_up_to_60_characters_message}" if $value !~ /^.{0,60}$/;
				return ($error_message) if $error_message;
			}
		}

		# value is up to 100 characters long with specific notification
		if ( $key =~ /^(user_group_description|cm_server_description|search_type|search_string|name|handle|api_key|master_key|user_password|device_password)$/ ) {
			if ( $value ) {
				$error_message="$key: $lang_vars{only_up_to_100_characters_message}" if $value !~ /^.{0,100}$/;
				return ($error_message) if $error_message;
			}
		}

		# value is up to 500 characters long with specific notification
		if ( $key =~ /^(comment|description|dyn_dns_server)$/ ) {
			if ( $value ) {
				$error_message="$key: $lang_vars{only_up_to_500_characters_message}" if $value !~ /^.{0,500}$/;
				return ($error_message) if $error_message;
			}
		}

		if ( $key =~ /^(auth_pass|priv_pass)$/ ) {
			if ( $value ) {
				my $error_message_pre="";
				$error_message_pre=$lang_vars{auth_pass_characters_message} if $key eq "auth_pass";
				$error_message_pre=$lang_vars{priv_pass_characters_message} if $key eq "priv_pass";
				$error_message=$error_message_pre if $value !~ /^.{8,50}$/;
				return ($error_message) if $error_message;
			}
		}

		if ( $key =~ /^(red_dat)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (6)" if $value !~ /^\d{6,40}\/[0-9.]{1,40}(e.\d{1,3})?$/;
				return ($error_message) if $error_message;
			}
		}


		# value is 1-50 \w._
		if ( $key =~ /^(do_job|diff_config_1|diff_config_2|w50)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (2c)" if $value !~ /^[\w._]{0,50}$/;
				return ($error_message) if $error_message;
			}
		}

		if ( $key =~ /^(cm_log_file)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (6a)" if $value !~ /^(\d{14})_(\d{1,3})_fetch_config.log(_stdout)?$/;
				return ($error_message) if $error_message;
			}
		}

		if ( $key =~ /^(cm_config_name)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (6b) $value" if $value !~ /^(\d{12})_(\d{1,3})_(\d{1,7})_(\d{1,6})\.(conf|txt)/ && $value ne "all";
													#201312030019_03_91.conf
				return ($error_message) if $error_message;
			}
		}

		# save filename a-zA-Z0-9_
		if ( $key =~ /^(scheduled_job_param|secure_filename_characters|cm_job|save_char)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (7a)" if $value !~ /^[\w.\-_\s]{0,100}$/;
				return ($error_message) if $error_message;
				debug("$error_message: $key - $value");
			}
		}
		# a-zA-Z0-9_.~
		if ( $key =~ /^(azure_secret_key_value)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (7b)" if $value !~ /^[\w\-_~]{0,100}$/;
				return ($error_message) if $error_message;
				debug("$error_message: $key - $value");
			}
		}
		# a-zA-Z0-9_.-/
		if ( $key =~ /^(aws_secret_access_key|network_with_bm)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (7c)" if $value !~ /^[\w.\-_\/]{0,100}$/;
				return ($error_message) if $error_message;
				debug("$error_message: $key - $value");
			}
		}
		# save date a-zA-Z0-9/:\s
		if ( $key =~ /^(date)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (7e)" if $value !~ /^[\w\/:\s]{0,20}$/;
				return ($error_message) if $error_message;
				debug("$error_message: $key - $value");
			}
		}
		# a-zA-Z0-9_.-/:[]
		if ( $key =~ /^(url)$/ ) {
			if ( $value ) {
				$error_message="$lang_vars{formato_malo_message} (7d)" if $value !~ /^[\w.\-_\/:\[\]]{0,200}$/;
				return ($error_message) if $error_message;
				debug("$error_message: $key - $value");
			}
		}
	}

	return ($error_message);
}

sub print_error_with_head {
    my $self = shift;
	my %args = @_;

	my $title = $args{title} || "";
	my $headline = $args{headline} || "";
	my $notification = $args{notification} || "";
	my $vars_file = $args{vars_file} || "";
	my $client_id = $args{client_id} || "";
	my $back_link = $args{back_link} || "";

	my %lang_vars = $self->_get_vars("$vars_file");

	$self->print_init("$title","$headline","$notification","$vars_file","$client_id");
	print "<p><br><p><FORM><INPUT TYPE=\"BUTTON\" VALUE=\"$lang_vars{atras_message}\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM>\n" if $back_link;
    debug("print_error_with_head: $title - $headline - $notification - $back_link");
	$self->print_end("$client_id","$vars_file","");

	exit 1;
}

sub check_cm_enabled {
	my ($self) = @_;

	my @global_config = $self->get_global_config("1");
    my $cm_enabled = "no";
    my $cm_conf_file = "/usr/share/gestioip/etc/cmm.conf";
    if ( -r $cm_conf_file ) {
		my $cm_licence_key_file = "";
        open(CM_CONF, "<$cm_conf_file");
		while (<CM_CONF>) {
			if ( $_ =~ /^cm_license_key/ ) {
				$_ =~ /^cm_license_key=(.*)$/;
				$cm_licence_key_file = $1 || "";
			}
		}
		close CM_CONF;

        $cm_enabled = "yes" if $cm_licence_key_file ;

    } else {
        # compatibiltiy with version <3.5
	    $cm_enabled = $global_config[0]->[8] || "no";
    }
    
    return $cm_enabled;
}

sub print_init {
	my ( $self, $title, $inhalt, $noti, $vars_file, $client_id, $ip_version, $BM_freerange ) = @_;

	return unless $self->{'format'} eq 'html';
	my $session = $ENV{'HTTP_SESSION'} || "";

	$client_id = "" if ! $client_id;
	my %lang_vars = $self->_get_vars("$vars_file");
	my $base_uri = $self->get_base_uri();
	my $cgi_dir = $self->get_cgi_dir();
	my $cgi_base_dir = $cgi_dir;
	$cgi_dir =~ s/\/res\/cm//;
	$cgi_base_dir =~ s/\/res//;
	$cgi_base_dir =~ s/\/login//;
	my ($DOCUMENT_ROOT, $SCRIPT_NAME) = _get_script_context();
	$DOCUMENT_ROOT =~ s/$SCRIPT_NAME//;
	my $server_proto=$self->get_server_proto();

    my $quick_search_cookie_val = $self->get_quick_search_val("$vars_file") || $lang_vars{network_search_message};

    my $template_dir = "$server_proto://$base_uri/templates";
    my $print_sitebar = $self->{print_sitebar};

	my @clients;
	my @global_config = $self->get_global_config("$client_id");
	my $as_enabled = $global_config[0]->[6] || "no";
	my $ll_enabled = $global_config[0]->[7] || "no";
    my $new_apache_config = $self->check_new_apache_config() || 0;

	## CONFIGURATION MANAGEMENT
    my $cm_enabled = $self->check_cm_enabled() || "no";
#    my $cm_conf_file = "/usr/share/gestioip/etc/cmm.conf";
#    if ( -r $cm_conf_file ) {
#		my $cm_licence_key_file = "";
#        open(CM_CONF, "<$cm_conf_file");
#		while (<CM_CONF>) {
#			if ( $_ =~ /^cm_license_key/ ) {
#				$_ =~ /^cm_license_key=(.*)$/;
#				$cm_licence_key_file = $1 || "";
#			}
#		}
#		close CM_CONF;
#
#        $cm_enabled = "yes" if $cm_licence_key_file ;
#
#    } else {
#        # compatibiltiy with version <3.5
#	    $cm_enabled = $global_config[0]->[8] || "no";
#    }

	## USER MANAGEMENT
	my $users_enabled = $global_config[0]->[13] || "no";
	my $site_management_enabled = $global_config[0]->[17] || "0";
	$site_management_enabled=0 if $site_management_enabled eq "no";
	my $password_management = $global_config[0]->[18] || "no";
	#ARIN management
	my $arin_enabled = $global_config[0]->[15] || "no";
	#PRTG Group management
#	my $prtg_group_view_enabled = $global_config[0]->[19] || "no";
	my $dyn_dns_updates_enabled = $global_config[0]->[19] || "no";
	my $acl_management_enabled = $global_config[0]->[20] || "no";
	my $mac_management_enabled = $global_config[0]->[21] || "no";
	my $site_search_main_menu = $global_config[0]->[18] || 0;
	my $line_search_main_menu = $global_config[0]->[7] || 0;
	my $as_search_main_menu = $global_config[0]->[6] || 0;
	my $mac_search_main_menu = $global_config[0]->[21] || 0;

	my $user=$ENV{'REMOTE_USER'};
	my %values_user_group_perms=$self->get_user_group_perms_hash("$vars_file","","$user");
	my $clients_perm=$values_user_group_perms{clients_perm} || "";

	@clients = $self->get_clients();
	my $cgi;
	if ( $ENV{SCRIPT_NAME} =~ /admin_form|ip_modip_form|ip_splitred_form|ip_modred_form|ip_reserverange_form|spreadsheet_form1|ip_discover_net_snmp_form/ || $ENV{SCRIPT_NAME} !~ /form|list|unirvlan/ ) {
		$cgi = "$base_uri/index.cgi";
	} else {
		$cgi = "$ENV{SERVER_NAME}" . "$ENV{SCRIPT_NAME}";
	}
	my $stylesheet="stylesheet.css";
	if ( $vars_file =~ /vars_he$/ ) {
		$stylesheet="stylesheet_rtl.css";
	}
	my $stylesheet_ie_lte_6="stylesheet_ie_lte_6.css";
	my $path;
	if ( $0 =~ /res\/cm/ ) {
		$path="../..";
	} elsif ( $0 =~ /res/ ) {
		$path="..";
	} else {
		$path="."; 
	}
#$|++;
my $onload="";
if ( $ENV{SCRIPT_NAME} =~ /ip_calculatered/ ) {
	$onload=" onLoad=\"JavaScript:checkRefresh('" . $ip_version . "');\"";
} elsif ( $ENV{SCRIPT_NAME} =~ /ip_insertred_form/ ) {
#	$onload=" onLoad=\"JavaScript:checkRefresh('" . $ip_version . "');\"";
	if ( $BM_freerange ) {
		$onload=" onLoad=\"JavaScript:checkRefresh('" . $ip_version . "','" .  $BM_freerange . "');\"";
	} else {
		$onload=" onLoad=\"JavaScript:checkRefresh('" . $ip_version . "');\"";
	}
} elsif ( $ENV{SCRIPT_NAME} =~ /(ip_import_snmp_form|ip_import_vlans_snmp_form|ip_initialize_form|ip_show_zone_form)/) {
	$onload=' onLoad="JavaScript:checkRefresh();"';
}
#$onload=' onLoad="JavaScript:checkRefresh();"' if ( $ENV{SCRIPT_NAME} =~ /(ip_import_snmp_form|ip_import_vlans_snmp_form|ip_insertred_form)/);

# TEST CSRF
#my $csrf_token = $self->{'csrf_token'};

#CSRFToken: $csrf_token




print <<EOF;
Content-type: text/html\n
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
EOF


#print <<EOF;
#<script type="text/javascript">
#
#// When the user scrolls down 20px from the top of the document, show the button
#window.onscroll = function() {scrollFunction()};
#
#function scrollFunction() {
#  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
#    document.getElementById("go_to_top_btn").style.display = "block";
#  } else {
#    document.getElementById("go_to_top_btn").style.display = "none";
#  }
#}
#
#// When the user clicks on the button, scroll to the top of the document
#function topFunction() {
#  document.body.scrollTop = 0; // For Safari
#  document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
#}
#</script>
#EOF


my %search_scripts = (
    $lang_vars{network_search_message} => "ip_searchred.cgi",
    $lang_vars{host_search_message} => "ip_searchip.cgi",
    $lang_vars{vlan_search_message} => "ip_search_vlan.cgi",
    $lang_vars{site_search_message} => "res/ip_manage_sites.cgi",
    $lang_vars{line_search_message} => "show_lines.cgi",
    $lang_vars{as_search_message} => "show_search_as.cgi",
    $lang_vars{mac_search_message} => "ip_search_mac.cgi",
);

open("TEMPL","<$path/templates/gip_main.html") or print STDERR "Can not open template: $!\n"; 

while (<TEMPL>) {
    my $line = $_;
	my $url = "$server_proto://$base_uri";

    if ( $line =~ /\{\{ CLIENT_ID \}\}/ ) {
        $line =~ s/\{\{ CLIENT_ID \}\}/$client_id/;
    }
    if ( $line =~ /\{\{ SERVER_PROTO \}\}/ ) {
        $line =~ s/\{\{ SERVER_PROTO \}\}/$server_proto/;
    }
    if ( $line =~ /\{\{ BASE_URI \}\}/ ) {
        $line =~ s/\{\{ BASE_URI \}\}/$base_uri/;
    }
    if ( $line =~ /\{\{ BODY_ONLOAD \}\}/ ) {
        $line =~ s/\{\{ BODY_ONLOAD \}\}/$onload/;
    }
    if ( $print_sitebar ) {
        if ( $line =~ /\{\{ NETBLOCK_LIST_VIEW_TREE \}\}/ ) {
            my $replace = '<script src="' . $server_proto . '://' . $base_uri . '/js/netblock_list_view_tree.js"></script>';
            $line =~ s/\{\{ NETBLOCK_LIST_VIEW_TREE \}\}/$replace/;
        }
    } else {
        $line =~ s/\{\{ NETBLOCK_LIST_VIEW_TREE \}\}//;
    }
    if ( $line =~ /\{\{ CLIENT_MESSAGE \}\}/ ) {
		if ( scalar(@clients) > 1 ) {
			$line =~ s/\{\{ CLIENT_MESSAGE \}\}/$lang_vars{client_message}/;
		} else {
			$line =~ s/\{\{ CLIENT_MESSAGE \}\}//;
		}
    }

    if ( $line =~ /\{\{ TITLE \}\}/ ) {
        $line =~ s/\{\{ TITLE \}\}/$title/;
    } elsif ( $line =~ /\{\{ NETWORK_SEARCH \}\}/ ) {
        $line =~ s/\{\{ NETWORK_SEARCH \}\}/$lang_vars{'network_search_message'}/;
    } elsif ( $line =~ /\{\{ HOST_SEARCH \}\}/ ) {
        $line =~ s/\{\{ HOST_SEARCH \}\}/$lang_vars{'host_search_message'}/;
    } elsif ( $line =~ /\{\{ QUICK_SEARCH_SCRIPT \}\}/ ) {
			$line =~ s/\{\{ QUICK_SEARCH_SCRIPT \}\}/$search_scripts{$quick_search_cookie_val}/;
    } elsif ( $line =~ /\{\{ QUICK_SEARCH_NAME \}\}/ ) {
			$line =~ s/\{\{ QUICK_SEARCH_NAME \}\}/$quick_search_cookie_val/;
    } elsif ( $line =~ /\{\{ SEARCH_DROPDOWN \}\}/ ) {
        my %items = ();
		my @item_order = ();

        $items{$quick_search_cookie_val} = "$search_scripts{$quick_search_cookie_val}";
        push @item_order, $quick_search_cookie_val;

        if ( $quick_search_cookie_val ne $lang_vars{network_search_message} ) {
            $items{$lang_vars{network_search_message}} = "ip_searchred.cgi";
            push @item_order, $lang_vars{network_search_message};
        }
        if ( $quick_search_cookie_val ne $lang_vars{host_search_message} ) {
            $items{$lang_vars{host_search_message}} = "ip_searchip.cgi";
            push @item_order, $lang_vars{host_search_message};
        }
        if ( $quick_search_cookie_val ne $lang_vars{vlan_search_message} ) {
            $items{$lang_vars{vlan_search_message}} = "ip_search_vlan.cgi";
            push @item_order, $lang_vars{vlan_search_message};
        }
        if ( $site_search_main_menu && $quick_search_cookie_val ne $lang_vars{vlan_search_message} ) {
            $items{$lang_vars{site_search_message}} = "res/ip_manage_sites.cgi";
            push @item_order, $lang_vars{site_search_message};
        }
        if ( $mac_search_main_menu && $quick_search_cookie_val ne $lang_vars{mac_search_message} ) {
            $items{$lang_vars{mac_search_message}} = "ip_search_mac.cgi";
            push @item_order, $lang_vars{mac_search_message};
        }
        if ( $line_search_main_menu && $quick_search_cookie_val ne $lang_vars{line_search_message} ) {
            $items{$lang_vars{line_search_message}} = "show_lines.cgi";
            push @item_order, $lang_vars{line_search_message};
        }
        if ( $as_search_main_menu && $quick_search_cookie_val ne $lang_vars{as_search_message} ) {
            $items{$lang_vars{as_search_message}} = "ip_search_as.cgi";
            push @item_order, $lang_vars{as_search_message};
        }

        my $content = GipTemplate::create_search_field_dropdown_items(
            items => \%items,
            item_order => \@item_order,
        );
        $line =~ s/\{\{ SEARCH_DROPDOWN \}\}/$content/;

#        $self->set_quick_search_val("$quick_search_cookie_val");

    } elsif ( $line =~ /\{\{ NAV_LIST \}\}/ ) {
        my ($name, $content, $m_content, $link );
        my %items;
		my @item_order;

        $name = $lang_vars{networks_message};
        $link = "$url/index.cgi?client_id=$client_id";
        $m_content = GipTemplate::create_nav_link(
            name => $name,
            link => $link,
        );
        $content .= $m_content;

        $name = $lang_vars{vlans_message};
        $link = "$url/show_vlans.cgi?&mode=show&client_id=$client_id";
        $m_content = GipTemplate::create_nav_link(
            name => $name,
            link => $link,
        );
        $content .= $m_content;

        if ( $site_management_enabled ) {
            $name = $lang_vars{locs_message};
            $link = "$url/res/ip_manage_sites.cgi?client_id=$client_id";
            $m_content = GipTemplate::create_nav_link(
                name => $name,
                link => $link,
            );
            $content .= $m_content;
        }

        if ( $ll_enabled eq "yes" ) {
            $name = $lang_vars{LL_message};
            $link = "$url/show_lines.cgi?mode=show&client_id=$client_id";

            $m_content = GipTemplate::create_nav_link(
                name => $name,
                link => $link,
            );
            $content .= $m_content;
        }

        if ( $as_enabled eq "yes" ) {
            $name = $lang_vars{AS_message};
            $link = "$url/show_as.cgi?mode=show&client_id=$client_id";

            $m_content = GipTemplate::create_nav_link(
                name => $name,
                link => $link,
            );
            $content .= $m_content;
        }

        if ( $cm_enabled eq "yes" ) {
            $name = $lang_vars{CM_message};
            %items = ();
            @item_order = ("$lang_vars{dashboard_message}","$lang_vars{show_cm_hosts_message}","$lang_vars{cm_server_message}","$lang_vars{device_user_groups_message}","$lang_vars{job_groups_message}","$lang_vars{job_details_message}","$lang_vars{search_string_cap_message}","$lang_vars{diff_configurations_message}","$lang_vars{show_log_message}");
            $items{$lang_vars{dashboard_message}} = "$url/res/cm/cm_dashboard.cgi?client_id=$client_id&mode=show";
            $items{$lang_vars{show_cm_hosts_message}} = "$url/res/cm/ip_show_cm_hosts.cgi?client_id=$client_id";
            $items{$lang_vars{cm_server_message}} = "$url/res/cm/ip_show_cm_server.cgi?client_id=$client_id";
            $items{$lang_vars{device_user_groups_message}} = "$url/res/cm/ip_show_user_group.cgi?client_id=$client_id";
            $items{$lang_vars{job_groups_message}} = "$url/res/cm/ip_show_job_group.cgi?client_id=$client_id";
            $items{$lang_vars{search_string_cap_message}} = "$url/res/cm/ip_cm_search_string_form.cgi?client_id=$client_id";
            $items{$lang_vars{diff_configurations_message}} = "$url/res/cm/ip_cm_diff_devices_form.cgi?client_id=$client_id";
            $items{$lang_vars{show_log_message}} = "$url/res/cm/ip_show_cm_log_form.cgi?client_id=$client_id";

            $m_content = GipTemplate::create_nav_dropdown(
                name => $name,
                items => \%items,
                item_order => \@item_order,
            );
            $content .= $m_content;
        }

        $name = $lang_vars{import_export_message};
        %items = ();
        @item_order = ("$lang_vars{initialize_gestioip_message}","$lang_vars{import_networks_from_snmp_message}","$lang_vars{import_vlans_from_snmp_message}","$lang_vars{import_spreadsheet_message}","$lang_vars{export_networks_or_hosts_message}");
        push @item_order, "$lang_vars{import_acl_con_message}" if $acl_management_enabled eq "yes";
        $items{$lang_vars{initialize_gestioip_message}} = "$url/res/ip_initialize_form.cgi?client_id=$client_id&mode=show";
        $items{$lang_vars{import_networks_from_snmp_message}} = "$url/res/ip_import_snmp_form.cgi?client_id=$client_id";
        $items{$lang_vars{import_vlans_from_snmp_message}} = "$url/res/ip_import_vlans_snmp_form.cgi?client_id=$client_id&mode=unir";
        $items{$lang_vars{import_spreadsheet_message}} = "$url/res/ip_import_spreadsheet_form.cgi?client_id=$client_id";
        $items{$lang_vars{export_networks_or_hosts_message}} = "$url/res/ip_export_form.cgi?client_id=$client_id";
        $items{$lang_vars{import_acl_con_message}} = "$url/res/ip_import_acl_csv.cgi?client_id=$client_id";

        $m_content = GipTemplate::create_nav_dropdown(
            name => $name,
            items => \%items,
            item_order => \@item_order,
        );
        $content .= $m_content;


        $name = $lang_vars{manage_message};
        %items = ();
		@item_order = ();
        $items{$lang_vars{manage_manage_message}} = "$url/res/ip_manage_gestioip.cgi?client_id=$client_id";
		push @item_order, $lang_vars{manage_manage_message};
		push @item_order, "dropdown-divider";

        $items{$lang_vars{custom_columns_message}} = "$url/res/ip_modcolumns.cgi?client_id=$client_id";
		push @item_order, $lang_vars{custom_columns_message};
        my $category_link_name;
		if ( $site_management_enabled ) {
			$category_link_name = $lang_vars{cats_message};
		} else {
			$category_link_name = $lang_vars{loc_cat_message};
		}
        $items{$category_link_name} = "$url/res/ip_admin.cgi?client_id=$client_id";
		push @item_order, $category_link_name;
        $items{$lang_vars{clients_message}} = "$url/ip_show_clients.cgi?client_id=$client_id";
		push @item_order, $lang_vars{clients_message};
		push @item_order, "dropdown-divider";


        $items{$lang_vars{jobs_message}} = "$url/ip_show_scheduled_jobs.cgi?client_id=$client_id";
		push @item_order, $lang_vars{jobs_message};
		push @item_order, "dropdown-divider";


        $items{$lang_vars{snmp_groups_message}} = "$url/ip_show_snmp_groups.cgi?client_id=$client_id";
        push @item_order, $lang_vars{snmp_groups_message};
        $items{$lang_vars{dns_server_groups_message}} = "$url/show_dns_server_group.cgi?client_id=$client_id";
        push @item_order, $lang_vars{dns_server_groups_message};
        push @item_order, "dropdown-divider";

        $items{$lang_vars{tags_message}} = "$url/show_tags.cgi?client_id=$client_id";
        push @item_order, $lang_vars{tags_message};
        push @item_order, "dropdown-divider";

        $items{$lang_vars{users_message}} = "$url/res/ip_show_user.cgi?client_id=$client_id" if $users_enabled eq "yes" or $new_apache_config;
		push @item_order, $lang_vars{users_message} if $users_enabled eq "yes" or $new_apache_config;
#        $items{$lang_vars{users_message}} = "$url/res/ip_show_user.cgi?client_id=$client_id";
#		push @item_order, $lang_vars{users_message};
        $items{$lang_vars{user_groups_message}} = "$url/res/ip_show_user_group.cgi?client_id=$client_id" if $users_enabled eq "yes";
		push @item_order, $lang_vars{user_groups_message} if $users_enabled eq "yes";
#		push @item_order, "dropdown-divider" if $users_enabled eq "yes";
		push @item_order, "dropdown-divider" if $users_enabled eq "yes" or $new_apache_config;

        $items{$lang_vars{smtp_servers_message}} = "$url/ip_show_smtp_server.cgi?client_id=$client_id";
		push @item_order, $lang_vars{smtp_servers_message};
		push @item_order, "dropdown-divider";

        if ( -e "/usr/share/gestioip/etc/apache/apache-groups" ) {
            $items{$lang_vars{ldap_servers_message}} = "$url/ip_show_ldap_server.cgi?client_id=$client_id";
            push @item_order, $lang_vars{ldap_servers_message};
            $items{$lang_vars{ldap_groups_message}} = "$url/ip_show_ldap_group.cgi?client_id=$client_id";
            push @item_order, $lang_vars{ldap_groups_message};
            push @item_order, "dropdown-divider";
        }

        $items{$lang_vars{password_management_perm_message}} = "$url/res/ip_manage_user_passwords.cgi?client_id=$client_id" if $password_management eq "yes";
		push @item_order, $lang_vars{password_management_perm_message} if $password_management eq "yes";
		push @item_order, "dropdown-divider" if $password_management eq "yes";

#        $items{$lang_vars{dns_zones_message}} = "$url/ip_show_dns_zones.cgi?client_id=$client_id" if $dyn_dns_updates_enabled eq "yes";
#		push @item_order, $lang_vars{dns_zones_message} if $dyn_dns_updates_enabled eq "yes";
        $items{$lang_vars{dns_zones_message}} = "$url/ip_show_dns_zones.cgi?client_id=$client_id";
		push @item_order, $lang_vars{dns_zones_message};
        $items{$lang_vars{dns_user_message}} = "$url/ip_show_dns_user.cgi?client_id=$client_id" if $dyn_dns_updates_enabled eq "yes";
		push @item_order, $lang_vars{dns_user_message} if $dyn_dns_updates_enabled eq "yes";
        $items{$lang_vars{dns_keys_message}} = "$url/ip_show_dns_keys.cgi?client_id=$client_id" if $dyn_dns_updates_enabled eq "yes";
		push @item_order, $lang_vars{dns_keys_message} if $dyn_dns_updates_enabled eq "yes";
#		push @item_order, "dropdown-divider" if $dyn_dns_updates_enabled eq "yes";
		push @item_order, "dropdown-divider";

        $items{$lang_vars{macs_message}} = "$url/ip_show_macs.cgi?client_id=$client_id" if $mac_management_enabled eq "yes";
		push @item_order, $lang_vars{macs_message} if $mac_management_enabled eq "yes";
		push @item_order, "dropdown-divider" if $mac_management_enabled eq "yes";

        $items{$lang_vars{acls_message}} = "$url/ip_show_acl_list.cgi?client_id=$client_id" if $acl_management_enabled eq "yes";
		push @item_order, $lang_vars{acls_message} if $acl_management_enabled eq "yes";
        $items{$lang_vars{acl_connection_message}} = "$url/ip_show_acl_connection_list.cgi?client_id=$client_id" if $acl_management_enabled eq "yes";
		push @item_order, $lang_vars{acl_connection_message} if $acl_management_enabled eq "yes";
		push @item_order, "dropdown-divider" if $acl_management_enabled eq "yes";

        $items{$lang_vars{statistics_message}} = "$url/ip_show_stat.cgi?client_id=$client_id";
		push @item_order, $lang_vars{statistics_message};
        $items{$lang_vars{audit_message}} = "$url/res/show_audit.cgi?client_id=$client_id";
		push @item_order, $lang_vars{audit_message};

        $m_content = GipTemplate::create_nav_dropdown(
            name => $name,
            items => \%items,
			item_order => \@item_order,
        );
        $content .= $m_content;


        $name = $lang_vars{help_message};
        %items = ();
		my %target_blank;
		$target_blank{$lang_vars{check_for_updates_message}}++;
		@item_order = ("$lang_vars{ip_info_message}","$lang_vars{documentation_message}","$lang_vars{check_for_updates_message}","$lang_vars{about_message}");
        $items{$lang_vars{ip_info_message}} = "$url/ip_info.cgi";
        $items{$lang_vars{documentation_message}} = "https://www.gestioip.net/documentation_gestioip_en.html";
        $items{$lang_vars{check_for_updates_message}} = "https://www.gestioip.net//cgi-bin/update_check.cgi?patch_version=$PATCH_VERSION&gip_version=$VERSION&sub_version=$SUB_VERSION";
#        $items{$lang_vars{check_for_updates_message}} = "https://www.gestioip.net/documentation_gestioip_en.html";
        $items{$lang_vars{about_message}} = "$url/about_gestioip.cgi";


        $m_content = GipTemplate::create_nav_dropdown(
            name => $name,
            items => \%items,
			item_order => \@item_order,
			target_blank => \%target_blank,
        );
        $content .= $m_content;


		if ( $session ) {
			$name = "";
			$link = "$url/logout";
			$m_content = GipTemplate::create_nav_link(
				name => $name,
				link => $link,
				glyphicon => "fa fa-sign-out-alt mt-1",
			);
			$content .= $m_content;
		}

        $line =~ s/\{\{ NAV_LIST \}\}/$content/;

    } elsif ( $line =~ /\{\{ CLIENT_SELECT \}\}/ ) {
		my ($content, $m_content);
		$content = $m_content = "";
		my @item_order;
		my %items;
        my $j=0;
		if ( scalar(@clients) > 1 ) {
			foreach (@clients) {

				my $client_id_found = $clients[$j]->[0] || "";
				my $client_name_found = $clients[$j]->[1] || "";
				# do not show client if user does not have permission to manage this client
				if ( $users_enabled eq "yes" ) {
					$clients_perm=~s/_/\|/g;
					if  ( $client_id_found !~ /^($clients_perm)$/ && $clients_perm !~ /^9999$/) {
						$j++;
						next;
					}
				}
				push @item_order, $client_name_found;
				$items{$client_name_found} = $client_id_found;

	#            if ( ! $client_id ) {
	#                print"<option selected></option>\n";
	#            }

				$j++;
			}

			my $onclick = 'onchange="load_client(this, \'' . $url . '/index.cgi?client_id=\');"';

			$m_content .= GipTemplate::create_form_element_select_filter(
#				name => "$lang_vars{client_message}",
				item_order => \@item_order,
				items => \%items,
				id => "client_id",
				selected_value => $client_id,
				onclick => $onclick,
				width => "8em",
			);

			$content .= $m_content;
		}

        $line =~ s/\{\{ CLIENT_SELECT \}\}/$content/;



    } elsif ( $line =~ /\{\{ CUSTOM_LOGO \}\}/ ) {
        if ( -e "$path/imagenes/custom/logo.png") {
			my $content = '<img src="' . $url . '/imagenes/custom/logo.png">';
			$line =~ s/\{\{ CUSTOM_LOGO \}\}/$content/;
        } else {
			$line =~ s/\{\{ CUSTOM_LOGO \}\}//;
		}

    } elsif ( $line =~ /\{\{ NAV_TEXT \}\}/ ) {
        $line =~ s/\{\{ NAV_TEXT \}\}/<div id="nav_text"><h6 style="color: #1b2631;">$inhalt<\/h6><\/div>/;
#    } elsif ( $line =~ /\{\{ ROOTNET_CHAIN \}\}/ ) {
#		my $rootnet_chain = $self->get_rootnet_chain("$client_id", "$ip_version");
#        $line =~ s/\{\{ ROOTNET_CHAIN \}\}/ROOTNET CHAIN: $rootnet_chain/;

    } elsif ( $line =~ /\{\{ NAV_OPTIONS \}\}/ ) {
        my ($name, $content, $m_content, $link, $load_content_only );
        my %items;
		my @item_order;
        my %load_content_only;
        my %link_onclick;
        my %link_style;
        my %link_title;

		if ( $ENV{SCRIPT_NAME} =~ /index.cgi|show_free_range|ip_modred.cgi|ip_insertred.cgi|ip_modred_mass_update.cgi|ip_deletered.cgi|ip_searchred.cgi/ ) {
			$name = $lang_vars{redes_dispo_message};
#			@item_order = ("$lang_vars{nuevo_message}","$lang_vars{modificar_borrar_red_message}","$lang_vars{unir_message}","$lang_vars{show_free_range_message}","$lang_vars{ipv6_address_plan_message}");	
			@item_order = ("$lang_vars{buscar_message}","$lang_vars{nuevo_message}","$lang_vars{modificar_borrar_red_message}","$lang_vars{unir_message}","$lang_vars{ipv6_address_plan_message}","$lang_vars{subnet_calculator_message}");	
			$items{$lang_vars{buscar_message}} = "$url/ip_searchred_form.cgi?client_id=$client_id";
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insertred_form.cgi?client_id=$client_id";
			$items{$lang_vars{unir_message}} = "$url/res/ip_unirred_form.cgi?client_id=$client_id";
#			$items{$lang_vars{show_free_range_message}} = "$url/ip_show_free_range_nohead.cgi?client_id=$client_id";
			$items{$lang_vars{ipv6_address_plan_message}} = "$url/ip_migrate_to_v6_form.cgi?client_id=$client_id";
			$items{$lang_vars{subnet_calculator_message}} = "NO_LINK";
##        $items{$lang_vars{subnet_calculator}} = "$server_proto://$base_uri/res/ip_show_free_range.cgi&client_id=$client_id";

            $load_content_only{$lang_vars{show_free_range_message}}++;
            $link_onclick{$lang_vars{subnet_calculator_message}} = 'ONCLICK="window.open(\'' . $url . '/ip_calculatered.cgi\',\'subnetcalculator\',\'toolbar=0,scrollbars=1,location=1,status=1,menubar=0,directories=0,right=100,top=100,width=500,height=550,resizable\')"';

		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show.cgi|ip_show_red_overview.cgi|ip_searchip.cgi|ip_modip_mass_update.cgi|ip_modip.cgi|ip_deleteip.cgi/ ) {
			@item_order = ("$lang_vars{buscar_message}");
			$items{$lang_vars{buscar_message}} = "$url/ip_searchip_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /show_vlans.cgi|ip_modvlan.cgi|ip_insertvlan.cgi/ ) {
			$name = $lang_vars{vlans_message};
			%items = ();
			@item_order = ("$lang_vars{show_vlan_message}","$lang_vars{nuevo_message}","$lang_vars{unify_vlans_message}","$lang_vars{show_vlan_providers_message}","$lang_vars{new_vlanprovider_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insertvlan_form.cgi?client_id=$client_id";
			$items{$lang_vars{unify_vlans_message}} = "$url/show_vlans.cgi?client_id=$client_id&mode=unir";
			$items{$lang_vars{show_vlan_providers_message}} = "$url/ip_show_vlanproviders.cgi?client_id=$client_id";
			$items{$lang_vars{new_vlanprovider_message}} = "$url/res/ip_insert_vlanclient_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_manage_sites.cgi|ip_insert_site.cgi|ip_mod_site.cgi/ ) {
			$name = $lang_vars{loc_message};
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}","$lang_vars{buscar_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_site_form.cgi?client_id=$client_id";
			$items{$lang_vars{buscar_message}} = "$url/ip_search_site_form.cgi?client_id=$client_id";

		} elsif ( $ENV{SCRIPT_NAME} =~ /show_lines.cgi|ip_search_ll.cgi|ip_insert_ll.cgi|ip_mod_ll_form.cgi|ip_mod_ll.cgi/ ) {
			$name = $lang_vars{LL_message};
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}","$lang_vars{show_ll_clients_message}","$lang_vars{buscar_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_ll_form.cgi?client_id=$client_id";
			$items{$lang_vars{show_ll_clients_message}} = "$url/show_lines_clients.cgi?client_id=$client_id";
			$items{$lang_vars{buscar_message}} = "$url/ip_search_ll_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /show_lines_clients.cgi/ ) {
			$name = $lang_vars{LL_message};
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_llclient_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /show_as.cgi|ip_mod_as.cgi|ip_insert_as.cgi/ ) {
			$name = $lang_vars{AS_message};
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}","$lang_vars{show_as_clients_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_as_form.cgi?client_id=$client_id";
			$items{$lang_vars{show_as_clients_message}} = "$url/show_as_clients.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /show_as_clients.cgi|ip_insert_asclient.cgi|ip_mod_asclient.cgi|ip_delete_asclient.cgi/ ) {
			$name = $lang_vars{AS_clients_message};
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_asclient_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_user.cgi|ip_insert_user.cgi|ip_mod_user.cgi|ip_delete_user.cgi|ip_mod_user_pass.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_user_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /cm\/ip_show_user_group.cgi|cm\/ip_add_user_group.cgi|cm\/ip_mod_user_group.cgi|cm\/ip_delete_user_group.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/cm/ip_add_user_group_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_user_group.cgi|ip_insert_user_group.cgi|ip_mod_user_group.cgi|ip_delete_user_group.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_user_group_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_clients.cgi|ip_insert_client.cgi|ip_mod_client.cgi|ip_delete_client.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_client_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_snmp_groups.cgi|ip_insert_snmp_group.cgi|ip_mod_snmp_group.cgi|ip_delete_snmp_group.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_snmp_group_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /show_dns_server_group.cgi|ip_insert_dns_server_group.cgi|ip_mod_dns_server_group.cgi|ip_delete_dns_server_group.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_dns_server_group_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /show_tags.cgi|ip_insert_tag.cgi|ip_mod_tag.cgi|ip_delete_tag.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_tag_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_cm_server.cgi|ip_insert_cm_server.cgi|ip_mod_cm_server.cgi|ip_delete_cm_server.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/cm/ip_insert_cm_server_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_job_group.cgi|ip_insert_job_group.cgi|ip_mod_job_group.cgi|ip_delete_job_group.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/cm/ip_insert_job_group_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_dns_zones.cgi|ip_insert_dns_zone.cgi|ip_mod_dns_zone.cgi|ip_delete_dns_zone.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_dns_zone_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_dns_user.cgi|ip_insert_dns_user.cgi|ip_mod_dns_user.cgi|ip_delete_dns_user.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_dns_user_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_dns_keys.cgi|ip_insert_dns_key.cgi|ip_mod_dns_key.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_dns_key_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_acl_connection_list.cgi|ip_insert_acl_connection.cgi|ip_mod_acl_connection.cgi|ip_delete_acl_connection_list.cgi|ip_search_acl_connection.cgi|ip_mod_acl_connection_mass_update.cgi/ ) {
			my $csv_file_name="acl_con_all.csv";
			%items = ();
			@item_order = ("$lang_vars{buscar_message}","$lang_vars{nuevo_message}","$lang_vars{diff_acl_connection_message}","$lang_vars{show_acl_connection_acl_message}","$lang_vars{download_csv_file}","$lang_vars{show_highest_acl_number_message}");
            if  ( $ENV{SCRIPT_NAME} =~ /ip_search_acl_connection.cgi/ ) {
                unshift @item_order, $lang_vars{show_message};
                $items{$lang_vars{show_message}} = "$url/ip_show_acl_connection_list.cgi?client_id=$client_id";
            }
			$items{$lang_vars{buscar_message}} = "$url/ip_search_acl_connection_form.cgi?client_id=$client_id";
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_acl_connection_form.cgi?client_id=$client_id";
			$items{$lang_vars{diff_acl_connection_message}} = "$url/ip_diff_acl_connections.cgi?client_id=$client_id";
			$items{$lang_vars{show_acl_connection_acl_message}} = "$url/ip_diff_acl_connections.cgi?client_id=$client_id&show_connection_acl=1";
			$items{$lang_vars{download_csv_file}} = "$url/export/$csv_file_name";
			$items{$lang_vars{show_highest_acl_number_message}} = "NO_LINK";
            $link_onclick{$lang_vars{show_highest_acl_number_message}} = 'ONCLICK="window.open(\'' . $url . '/show_highest_acl_nr.cgi\',\'subnetcalculator\',\'toolbar=0,scrollbars=1,location=1,status=1,menubar=0,directories=0,right=100,top=100,width=350,height=600,resizable\')"';

		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_diff_acl_connections.cgi/ ) {
			@item_order = ("$lang_vars{show_message}");
			$items{$lang_vars{show_message}} = "$url/ip_show_acl_connection_list.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_scheduled_jobs.cgi|ip_insert_scheduled_job.cgi|ip_mod_scheduled_job.cgi|ip_delete_scheduled_job.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}","ICON");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_scheduled_job_form.cgi?client_id=$client_id";
			$items{ICON} = "$url/ip_show_scheduled_jobs.cgi?client_id=$client_id";
			$link_style{ICON} = "text-dark fa fa-sync border-gray-left pr-2 pl-2";
			$link_title{ICON} = "$lang_vars{reload_message}";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_macs.cgi|ip_insert_mac.cgi|ip_mod_mac.cgi|ip_delete_mac.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_mac_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_smtp_server.cgi|ip_insert_smtp_server.cgi|ip_mod_smtp_server.cgi|ip_delete_smtp_server.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_smtp_server_form.cgi?client_id=$client_id";
#		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_ldap_server.cgi|ip_insert_ldap_server.cgi|ip_mod_ldap_server.cgi|ip_delete_ldap_server.cgi|ip_check_ldap_server/ ) {
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_ldap_server.cgi|ip_insert_ldap_server.cgi|ip_mod_ldap_server.cgi|ip_delete_ldap_server.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_ldap_server_form.cgi?client_id=$client_id";
		} elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_ldap_group.cgi|ip_insert_ldap_group.cgi|ip_mod_ldap_group.cgi|ip_delete_ldap_group.cgi/ ) {
			%items = ();
			@item_order = ("$lang_vars{nuevo_message}");
			$items{$lang_vars{nuevo_message}} = "$url/res/ip_insert_ldap_group_form.cgi?client_id=$client_id";
		}

        $load_content_only = \%load_content_only;

        $content = GipTemplate::create_nav_options(
            items => \%items,
            item_order => \@item_order,
            load_content_only => $load_content_only,
            link_onclick => \%link_onclick,
            link_style => \%link_style,
            link_title => \%link_title,
        );
        $line =~ s/\{\{ NAV_OPTIONS \}\}/$content/;

    } elsif ( $line =~ /\{\{ SITEBAR \}\}/ ) {
        my $content = "";
        if ( $print_sitebar ) {
            $content = GipTemplate::create_sitebar();
        }
        $line =~ s/\{\{ SITEBAR \}\}/$content/;
    }

    print $line;
}
close TEMPL;



print <<EOF;
<script type="text/javascript">
document.quick_search.match.focus();
</script>
EOF

    my $div_inhalt;
    my $noti_noti = "";
    if ( $noti ne $inhalt && $noti ne "initial_connect_error" && $noti !~ /history.go/ ) {
        # error notification with back link contains string "back"
        $noti_noti = $noti;
        $div_inhalt = GipTemplate::create_div_inhalt(
            noti => $noti_noti,
        );
    } elsif ( $noti eq $inhalt ) {
        $div_inhalt = GipTemplate::create_div_inhalt(
        );
    } else {
        $div_inhalt = GipTemplate::create_div_inhalt(
        );
        $div_inhalt .= $noti if $noti;
    }
    print "$div_inhalt\n";
}


sub PrintRedTabHead {
	my ( $self,$client_id,$vars_file,$start_entry,$entries_per_page,$pages_links,$tipo_ele,$loc_ele,$ip_version_ele,$show_rootnet, $show_endnet,$hide_not_rooted,$show_fav,$local_filter_enabled) = @_;

	$show_rootnet=1 if ! defined($show_rootnet);
	$show_endnet=1 if ! defined($show_endnet);
	$hide_not_rooted=0 if ! defined($hide_not_rooted);
	$local_filter_enabled=0 if ! defined($local_filter_enabled);
	my $collapse_networks=$self->{collapse_networks} || 0;
	my $local_filter=$self->{local_filter} || 0;
	my $rootnet_num=$self->{rootnet_num} || "";

	my $show_rootnet_checked="";
	my $show_endnet_checked="";
	my $hide_not_rooted_checked="";
	my $local_filter_enabled_checked="";
	my $collapse_networks_checked="";
	$collapse_networks_checked="checked" if $collapse_networks;
	$show_rootnet_checked="checked" if $show_rootnet == "1" || ( $show_rootnet == 0 && $show_endnet == 0);
	$show_endnet_checked="checked" if $show_endnet == "1" || ( $show_rootnet == 0 && $show_endnet == 0);
	$hide_not_rooted_checked="checked" if $hide_not_rooted == "1";
	$local_filter_enabled_checked="checked" if $local_filter_enabled == "1";
	
	my %lang_vars = $self->_get_vars("$vars_file");
	my $uri = $self->get_uri();
	my $base_uri = $self->get_base_uri();
	my @global_config = $self->get_global_config("$client_id");
	my $global_ipv4_only=$global_config[0]->[5] || "v4";
	
	my @values_entries_per_page = ("20","50","100","250","400","500");

	my @values_cat_red = $self->get_cat_net("$client_id");
	my @values_loc=$self->get_loc("$client_id");
	my $server_proto=$self->get_server_proto();

	my @fav_column=$self->get_custom_column_ids_from_name("$client_id","Fav");
	my $fav=$fav_column[0][0] || "";

	my $cgi;
	my $server_port=$ENV{SERVER_PORT} || "";
	if ( $server_port && $server_port ne "80" && $server_port ne "443" ) {
		$cgi = "$ENV{SERVER_NAME}:$server_port" . "$ENV{SCRIPT_NAME}";
	} else {
		$cgi = "$ENV{SERVER_NAME}" . "$ENV{SCRIPT_NAME}";
	}
	$cgi = "$uri/ip_modred_list.cgi" if ( $cgi =~ /ip_modred.cgi/ || $cgi =~ /ip_deletered.cgi/ || $cgi =~ /ip_splitred.cgi/ || $cgi =~ /ip_unirred.cgi/ || $cgi =~ /ip_vaciarred.cgi/ || $cgi =~ /ip_reserverange/ || $cgi =~ /ip_modred_mass_update.cgi/ );
	$cgi = "$base_uri/index.cgi" if ( $cgi =~ /ip_searchred.cgi/ || $cgi =~ /ip_insertred.cgi/ );


	$loc_ele = "NULL" if ! $loc_ele;
	$tipo_ele = "NULL" if ! $tipo_ele;


	my ($form, $form_elements, $name, $select_id, $selected, $hidden_values);

	$form=$form_elements=$name=$select_id=$selected=$hidden_values="";
	my %items;
	my @item_order;

    my $onclick_function_url = $server_proto . '://' . $uri; 
    $onclick_function_url =~ s/\/res//;
    $onclick_function_url .= '/';
    my $onclick = 'onchange="load_content_net(\'' . $onclick_function_url . '\', \'' . $client_id . '\');"';
    my $onclick_select = 'onchange="change_select_color(this); load_content_net(\'' . $onclick_function_url . '\', \'' . $client_id . '\');"';

	if ( $global_ipv4_only ne "yes" ) {

        # IP VERSION
		@item_order = ("v4","v6");
#        my $onclick_ip_version_ele = '';
        my $onclick_ip_version_ele = 'onchange="load_content_net(\'' . $onclick_function_url . '\', \'' . $client_id . '\'); load_jstree(\'refresh\');"';
		
		$form_elements .= GipTemplate::create_form_element_select_filter(
			item_order => \@item_order,
			id => "ip_version_ele",
			selected_value => $ip_version_ele,
			placeholder => "$lang_vars{ip_version_message}",
            onclick => $onclick_ip_version_ele,
			width => "5em",
		);
	} else {
		$hidden_values .= GipTemplate::create_form_element_hidden(
            name => "ip_version_ele",
            value => "v4",
		);
        print "$hidden_values\n";
	}

    my $rootnet_args = "";
	my $j = 0;
	if ( $cgi !~ /(ip_show_free_range)/ ) {

		# select SITE
		@item_order = ();
		$j = 0;
		foreach (@values_loc) {
			my $value = $values_loc[$j]->[0] || "";
			if ( $value eq "NULL" ) {
				$j++;
				next;
			}
			push @item_order, $value;
			$j++;
		}
		
		$form_elements .= GipTemplate::create_form_element_select_filter(
			item_order => \@item_order,
			id => "loc_ele",
			selected_value => $loc_ele,
			placeholder => "$lang_vars{loc_message}",
			onclick => $onclick_select,
			width => "8em",
		);


		# select CAT
		$j = 0;
		@item_order = ();
		foreach (@values_cat_red) {
			my $value = $values_cat_red[$j]->[0] || "";
			if ( $value eq "NULL" ) {
				$j++;
				next;
			}
			push @item_order, $value;
			$j++;
		}
		
		$form_elements .= GipTemplate::create_form_element_select_filter(
			item_order => \@item_order,
			id => "tipo_ele",
			selected_value => $tipo_ele,
			placeholder => "$lang_vars{cat_message}",
			onclick => $onclick_select,
			width => "8em",
		);

		if ( $cgi !~ /(ip_unirred)/ ) {
		
			# SHOW ROOTNETS
			$form_elements .= GipTemplate::create_form_element_checkbox_filter(
				label => $lang_vars{show_rootnets_message},
				value => "create",
				id => "show_rootnet",
				checked => $show_rootnet_checked,
				onclick => $onclick,
			);
		
			# SHOW ENDNETS
			$form_elements .= GipTemplate::create_form_element_checkbox_filter(
				label => $lang_vars{show_endnets_message},
				value => "create",
				id => "show_endnet",
				checked => $show_endnet_checked,
				onclick => $onclick,
			);
		
# TEST no "contract_rootnets in ipv6
			# show endnets
#			if ( $ip_version_ele eq "v4" ) {
#				$onclick = "check_not_rooted_checkbox('" . $lang_vars{hide_not_rooted_endnets} . "')";
#			}
		
#			if ( $ip_version_ele eq "v4" ) {
# TEST DISABLE ELEMENT WHEN v6 IS CHOOSEN?
				# contract rootnets
                my $ip_version_ele_disabled;
                $ip_version_ele_disabled = 1 if $ip_version_ele eq "v6";
				$form_elements .= GipTemplate::create_form_element_checkbox_filter(
					label => $lang_vars{hide_not_rooted_endnets},
					value => "create",
					id => "hide_not_rooted",
					checked => $hide_not_rooted_checked,
                    onclick => $onclick,
                    disabled => $ip_version_ele_disabled,
				);
#			}

            #  SHOW FREERANGE
            my $onclick_freerange_url = $server_proto . '://' . $base_uri . '/'; 
            my $onclick_freerange = 'onclick="load_content_net_freerange(\'' . $onclick_freerange_url . '\', \'' . $client_id . '\');"';
            $form_elements .= GipTemplate::create_form_element_checkbox_filter(
                label => $lang_vars{show_free_range_message},
                value => "create",
                id => "show_free_ranges",
#                checked => $hide_not_rooted_checked,
                onclick => $onclick_freerange,
                autocomplete_off => 1,
            );
		}

	    # ENTRIES PER PAGE	
	    @item_order = ("20","50","100","250","400","500");

		$form_elements .= GipTemplate::create_form_element_select_filter(
			name => $lang_vars{entradas_por_pagina_nowrap_message},
			item_order => \@item_order,
			id => "entries_per_page",
			selected_value => $entries_per_page,
			onclick => $onclick,
			width => "6em",
		);



        # reset button
        # url with default values
        my $onclick_function_url_reset = $server_proto . '://' . $uri;
        $onclick_function_url_reset =~ s/\/res//;
#        $onclick_function_url_reset .= '/index_nohead.cgi?ip_version_ele=' . $ip_version_ele . '&loc_ele=&tipo_ele=&show_rootnet=create&show_endnet=create&hide_not_rooted=&entries_per_page=' . $entries_per_page . '&client_id=' . $client_id; 
        $onclick_function_url_reset .= '/index_nohead.cgi?loc_ele=&tipo_ele=&show_rootnet=create&show_endnet=create&hide_not_rooted=&entries_per_page=' . $entries_per_page . '&client_id=' . $client_id; 
		my $onclick_reset = 'onclick="reset_form(\'printredtabheadform\', \'' . $onclick_function_url_reset . '\');"';
        $form_elements .= GipTemplate::create_form_reset_button(
            text => "$lang_vars{reset_filter_message}",
            onclick => $onclick_reset,
        );
	}

	$form_elements .= GipTemplate::create_form_element_hidden(
		name => "tree_selected_rootnet",
		value => "",
	);

	# Fav button
	my $fav_button = "";
	if ( $fav && ( $cgi =~ /(index)/ || $cgi =~ /(ip_modred_list)/ )  ) {
		my $fav_uri = $server_proto . '://' . $uri;
		$fav_uri =~ s/\/res//;
		$fav_uri .= "/index.cgi";

		$fav_button= "<td align=\"right\"><form name=\"fav_form\" method=\"POST\" action=\"$fav_uri\" style=\"display:inline\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"hidden\" name=\"start_entry\" value=\"$start_entry\"><input type=\"hidden\" name=\"entries_per_page\" value=\"$entries_per_page\"><input type=\"hidden\" name=\"ip_version_ele\" value=\"$ip_version_ele\"><input type=\"hidden\" name=\"loc_ele\" value=\"$loc_ele\"><input type=\"hidden\" name=\"tipo_ele\" value=\"$tipo_ele\"><input type=\"hidden\" name=\"show_rootnet\" value=\"$show_rootnet\"><input type=\"hidden\" name=\"show_endnet\" value=\"$show_endnet\"><input type=\"hidden\" name=\"hide_not_rooted\" value=\"$hide_not_rooted\"><input type=\"hidden\" name=\"show_fav\" value=\"show_fav\"><input type=\"submit\" value=\"\" name=\"B2\" title=\"$lang_vars{fav_expl_message}\" class='fav_button'></form></td>\n";
	}

    $pages_links = "" if $pages_links eq "NO_LINKS";
    $form = GipTemplate::create_red_head_inline_form(

        form_elements => $form_elements,
        form_id => "printredtabheadform",
        link => "$base_uri/index.cgi",
        pages_links => "$pages_links",
        fav_button => "$fav_button",
    );

    print "$form";

    print '<div id="content" class="w-100">';
}


sub PrintRedTab {
	my ( $self,$client_id, $ip, $vars_file, $info, $start_entry, $tipo_ele, $loc_ele,$order_by,$client_independent,$entries_per_page,$ip_version_ele,$show_rootnet,$show_endnet,$changed_red_num,$ignore_first_root_net,$hide_not_rooted ) = @_;
	my $smallest_allowed_list_BM6="64";
	$start_entry='0' if ! $start_entry;
	$tipo_ele="NULL" if ! $tipo_ele;
	$loc_ele="NULL" if ! $loc_ele;
	$order_by="red_auf" if ! $order_by;
	$entries_per_page = "250" if ! $entries_per_page;
	my ( $boton, $script, $boton1, $script1, $boton2, $script2, $boton3, $script3, $boton4, $script4, $boton5, $script5 );
	my %lang_vars = $self->_get_vars("$vars_file");
	my %rangos = $self->get_rangos_hash("$client_id");
	my @config = $self->get_config("$client_id");
	my @custom_columns = $self->get_custom_columns("$client_id");
	my %custom_columns_values=$self->get_custom_column_values_red("$client_id");
	my @cc_ids=$self->get_custom_column_ids("$client_id");
	my $server_proto=$self->get_server_proto();
	my @global_config = $self->get_global_config("$client_id");
	my $arin_enabled=$global_config[0]->[15] || "no";
	my $global_dyn_dns_updates_enabled=$global_config[0]->[19] || "no";
	my $smallest_bm = $config[0]->[0] || "22";
#	my $smallest_bm = "8";
	my $smallest_bmv6 = $config[0]->[7] || "64";
	my %anz_hosts_bm = $self->get_anz_hosts_bm_hash("$client_id","v6");
	my %anz_hosts_bm4 = $self->get_anz_hosts_bm_hash("$client_id","v4");
	my @fav_column=$self->get_custom_column_ids_from_name("$client_id","Fav");
	my $fav=$fav_column[0][0] || "";
    my $cc_id_usage = $self->get_custom_column_id_from_name("$client_id", "usage") || "";
	my $global_limit_cc_output_enabled=$global_config[0]->[24] || "no";
	my %tag_hash_obj = $self->get_tags_hash_object("$client_id", "network");
    my %tag_hash = $self->get_tag_hash("$client_id");
	my @tag_column=$self->get_custom_column_ids_from_name("$client_id","Tag");
	my $tag_cc_id=$tag_column[0][0] || "";
	my %dns_server_groups = $self->get_dns_server_group_hash("$client_id","id");
	my $cc_id_dns_server_groups = $self->get_custom_column_id_from_name("$client_id", "DNSSG") || "";
	my $user_management_enabled=$global_config[0]->[13] || "";
	my $loc_hash=$self->get_loc_hash("$client_id");
	my $locs_ro_perm = $self->{locs_ro_perm} || "";
	my $locs_rw_perm = $self->{locs_rw_perm} || "";
	my $parent_network_id_form = $self->{parent_network_id_form} || "";
	my $show_free_ranges_delete = $self->{show_free_ranges_delete} || "";

	my %scan_a_zone_hash_obj = $self->get_dns_zone_hash_object("$client_id","A");
	my %scan_aaaa_zone_hash_obj = $self->get_dns_zone_hash_object("$client_id","AAAA");
	my %scan_ptr_zone_hash_obj = $self->get_dns_zone_hash_object("$client_id","PTR");
    my %scan_zone_hash = $self->get_dns_zone_hash("$client_id");
	my @scan_a_zone_column=$self->get_custom_column_ids_from_name("$client_id","ScanAZone");
	my $scan_a_zone_cc_id=$scan_a_zone_column[0][0] || "";
	my @scan_ptr_zone_column=$self->get_custom_column_ids_from_name("$client_id","ScanPTRZone");
	my $scan_ptr_zone_cc_id=$scan_ptr_zone_column[0][0] || "";

$show_rootnet="0" if ! $show_rootnet;
$show_endnet="0" if ! $show_endnet;
$hide_not_rooted="0" if ! $hide_not_rooted;
my $show_rootnet_hidden="";
my $show_endnet_hidden="";
my $hide_not_rooted_hidden="";
$show_rootnet_hidden='<input name="show_rootnet" type="hidden" value="1">' if $show_rootnet == 1;
$show_endnet_hidden='<input name="show_endnet" type="hidden" value="1">' if $show_endnet == 1;
$hide_not_rooted_hidden='<input name="hide_not_rooted" type="hidden" value="1">' if $hide_not_rooted == 1;
my %changed_red_num=();
$changed_red_num = \%changed_red_num if ! $changed_red_num;
$ignore_first_root_net = "" if ! $ignore_first_root_net;

my %params=$self->get_params();
my $base_uri = $self->get_base_uri();

my $form_base_uri = "$server_proto://$base_uri/";
my %clients_hash=$self->get_clients_hash("$client_id");
$client_independent = "" if ! $client_independent;
my $j=0;
my $color_helper=0;
my ($red, $BM, $descr, $red_num, $loc, $tipo, $vigilada_checked, $comentario, $categoria, $comentario_show, $color, $fontcolor, $stylename, $stylename_disabled, $BMv6, $ip_version,$rootnet,$parent_network_id);
$parent_network_id = "";
my $old_rootnet=0;
if ( $ENV{SCRIPT_NAME} =~ /ip_unirred_form/ ) {
print <<EOF;

<script type='text/javascript' src='$server_proto://$base_uri/js/PrintRedTabUnir.js'></script>

<form name="unirred_form" method="POST" action="$server_proto://$base_uri/res/ip_unirred_check.cgi">

EOF
}

print <<EOF;

<script type='text/javascript' src='$server_proto://$base_uri/js/PrintRedTab.js'></script>

EOF

my $rootnet_chain = "";
my $rootnet_first_ip_int=$self->{rootnet_first_ip_int} || "";
#my $rootnet_last_ip_int=$self->{rootnet_first_ip_int} || "";
my $rootnet_last_ip_int=$self->{rootnet_last_ip_int} || "";

if ( $self->{rootnet_first_ip_int} ) {
    $rootnet_chain = $self->get_rootnet_chain("$client_id", "$ip_version_ele");
}

print <<EOF;
<script type="text/javascript">
    create_rootnet_chain('$rootnet_chain');
</script>
EOF


my $start_entry_form = 0;
$start_entry_form = $start_entry;  


#	my $form_hidden_values="<input type=\"hidden\" name=\"knownhosts\" value=\"all\"><input name=\"entries_per_page\" type=\"hidden\" value=\"$entries_per_page\"><input name=\"tipo_ele\" type=\"hidden\" value=\"$tipo_ele\"><input name=\"loc_ele\" type=\"hidden\" value=\"$loc_ele\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"> $show_rootnet_hidden $show_endnet_hidden $hide_not_rooted_hidden";

my $script_sort="index_nohead.cgi";

my $form_elements_hidden;
my $form_elements_hidden_onclick;

$form_elements_hidden_onclick .= "&known_hosts=all";
$form_elements_hidden .= GipTemplate::create_form_element_hidden(
    value => "all",
    name => "known_hosts",
);

$form_elements_hidden .= GipTemplate::create_form_element_hidden(
    value => $entries_per_page,
    name => "entries_per_page",
);

$form_elements_hidden .= GipTemplate::create_form_element_hidden(
    value => $tipo_ele,
    name => "tipo_ele",
);

$form_elements_hidden .= GipTemplate::create_form_element_hidden(
    value => $loc_ele,
    name => "loc_ele",
);

$form_elements_hidden .= GipTemplate::create_form_element_hidden(
    value => $client_id,
    name => "client_id",
);

$form_elements_hidden_onclick .= "&show_rootnet=1" if $show_rootnet == 1;
$form_elements_hidden .= GipTemplate::create_form_element_hidden(
    value => 1,
    name => "show_rootnet",
) if $show_rootnet == 1;

$form_elements_hidden_onclick .= "&show_endnet=1" if $show_endnet == 1;
$form_elements_hidden .= GipTemplate::create_form_element_hidden(
    value => 1,
    name => "show_endnet",
) if $show_endnet == 1;

$form_elements_hidden_onclick .= "&hide_not_rooted=1" if $hide_not_rooted == 1;
$form_elements_hidden .= GipTemplate::create_form_element_hidden(
    value => 1,
    name => "hide_not_rooted",
) if $hide_not_rooted == 1;



my ($cc_ele, $cc_table,$cc_table_fill,$order_by_cc);
$cc_table = $cc_table_fill = "";

my $n=0;

foreach $cc_ele(@custom_columns) {
    if ( ${custom_columns[$n]->[0]} eq "usage" ) {
        $n++;
        next;
    } elsif ( $order_by eq "${custom_columns[$n]->[0]}_auf" || $order_by eq "${custom_columns[$n]->[0]}" ) {
        $order_by_cc = "${custom_columns[$n]->[0]}_ab";
        $start_entry_form = $start_entry ; 
    } elsif ( $order_by =~ /^\Q${custom_columns[$n]->[0]}_ab\E/ ) {
        $order_by_cc = "${custom_columns[$n]->[0]}_auf";
        $start_entry_form = $start_entry ; 
    } else {
        $order_by_cc = "${custom_columns[$n]->[0]}_auf";
        $start_entry_form = 0;
    }

    if ( $ENV{SCRIPT_NAME} =~ /(ip_searchred.cgi|ip_show_free_range|ip_unirred.cgi)/ ) {
        $cc_table = $cc_table . "<td nowrap><b>$custom_columns[$n]->[0]</b></td>";
    } else {
#			$cc_table = $cc_table . "<td nowrap><b><form method=\"POST\" action=\"$server_proto://$base_uri/$script_sort\" style=\"display:inline\">$form_hidden_values<input name=\"order_by\" type=\"hidden\" value=\"$order_by_cc\"><input name=\"start_entry\" type=\"hidden\" value=\"$start_entry_form\"><input name=\"ip_version_ele\" type=\"hidden\" value=\"$ip_version_ele\"><input type=\"submit\" class=\"btn btn-sm font-weight-bold p-0 padding-right-1\" value=\"$custom_columns[$n]->[0]\" name=\"B1\"></form></b></td>";

        $cc_table = $cc_table . '<td nowrap>';

        my ($form, $form_elements, @item_order, %items, $opt_name, $opt_value);

        my $form_elements_onclick .= "&order_by=$order_by_cc";
#			$form_elements .= GipTemplate::create_form_element_hidden(
#				value => $order_by_cc,
#				name => "order_by",
#			);
#
#			$form_elements .= GipTemplate::create_form_element_hidden(
##				value => $start_entry_form,
#				name => "start_entry",
#			);
#
#			$form_elements .= GipTemplate::create_form_element_hidden(
#				value => $ip_version_ele,
#				name => "ip_version_ele",
#			);

        $form_elements_onclick .= $form_elements_hidden_onclick;

        my $onload_button = 'onclick="load_content_net(\'' . $form_base_uri . '\', \'' . $client_id . '\', \'' . $form_elements_onclick . '\')"';
        $form_elements .= GipTemplate::create_form_element_button(
            value => $custom_columns[$n]->[0],
            name => "B1",
            class_args => "btn-sm m-0 p-0 padding-right-1",
            onclick => $onload_button,
        );

#			$form = GipTemplate::create_form(
#				form_elements => $form_elements,
#				form_id => "",
#				link => "./$script_sort",
#				method => "POST",
#			);

        $cc_table .= $form_elements;

        $cc_table .= '</td>';



#<form method=\"POST\" action=\"$server_proto://$base_uri/$script_sort\" style=\"display:inline\">$form_hidden_values<input name=\"order_by\" type=\"hidden\" value=\"$order_by_cc\"><input name=\"start_entry\" type=\"hidden\" value=\"$start_entry_form\"><input name=\"ip_version_ele\" type=\"hidden\" value=\"$ip_version_ele\"><input type=\"submit\" class=\"btn btn-sm font-weight-bold p-0 padding-right-1\" value=\"$custom_columns[$n]->[0]\" name=\"B1\"></form></td>";
    }
    $cc_table_fill = $cc_table_fill . "<td></td>";
    $n++;
}

$cc_table = "" if ! $custom_columns[0];


my $cc_anz=@custom_columns;

my $onclick_scroll='onclick="saveScrollCoordinates()"';

my $onclick_confirmation_delete="";
my $onclick_confirmation_clear="";
my $onclick_confirmation_sinc="";
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";


print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"2\" width=\"100%\">\n";

my $red_order_by = "red_auf";
my $red_start_entry = "0";
my $BM_order_by = "BM_auf";
my $BM_start_entry = "0";
my $description_order_by = "description_auf";
my $description_start_entry = "0";
my $loc_order_by = "loc_auf";
my $loc_start_entry = "0";
my $cat_order_by = "cat_auf";
my $cat_start_entry = "0";
my $comentario_order_by = "comentario_auf";
my $comentario_start_entry = "0";
my $sinc_order_by = "sinc_ab";
my $sinc_start_entry = "0";

my $ip_anz = "0";
$ip_anz = @{$ip} - 1 if @{$ip};

if ( $order_by eq "red_auf" || $order_by eq "red" ) {
    $red_order_by = "red_ab";
    $red_start_entry = "$start_entry";
} elsif ( $order_by eq "red_ab" ) {
    $red_start_entry = "$start_entry";
} elsif ( $order_by eq "BM_auf" ) {
    $BM_order_by = "BM_ab";
    $BM_start_entry = "$start_entry";
} elsif ( $order_by eq "BM_ab" ) {
    $BM_start_entry = "$start_entry";
} elsif ( $order_by eq "description_auf" ) {
    $description_order_by = "description_ab";
    $description_start_entry = "$start_entry";
} elsif ( $order_by eq "description_ab" ) {
    $description_start_entry = "$start_entry";
} elsif ( $order_by eq "loc_auf" ) {
    $loc_order_by = "loc_ab";
    $loc_start_entry = "$start_entry";
} elsif ( $order_by eq "loc_ab" ) {
    $loc_start_entry = "$start_entry";
} elsif ( $order_by eq "cat_auf" ) {
    $cat_order_by = "cat_ab";
    $cat_start_entry = "$start_entry";
} elsif ( $order_by eq "cat_ab" ) {
    $cat_start_entry = "$start_entry";
} elsif ( $order_by eq "comentario_auf" ) {
    $comentario_order_by = "comentario_ab";
    $comentario_start_entry = "$start_entry";
} elsif ( $order_by eq "comentario_ab" ) {
    $comentario_start_entry = "$start_entry";
} elsif ( $order_by eq "sinc_auf" ) {
    $sinc_order_by = "sinc_ab";
    $sinc_start_entry = "$start_entry";
} elsif ( $order_by eq "sinc_ab" ) {
    $sinc_start_entry = "$start_entry";
} else {
    $red_order_by = "red_auf";
}

my @cc_usage = $self->get_custom_column_ids_from_name("$client_id","usage");
my $cc_usage_enabled = "";
$cc_usage_enabled = 1 if $cc_usage[0];
my $usage_field_head = "";
my $usage_field_head_small = "";
#	$usage_field_head = "<td width=\"30px\"></td>" if $cc_usage_enabled && $ip_version_ele eq "v4";
#	$usage_field_head_small = "<td></td>" if $cc_usage_enabled && $ip_version_ele eq "v4";
$usage_field_head = "<td width=\"30px\"></td>" if $cc_usage_enabled;
$usage_field_head_small = "<td></td>" if $cc_usage_enabled;

if ( $ENV{SCRIPT_NAME} =~ /(ip_show_free_range|ip_searchred.cgi|ip_unirred.cgi)/ ) {

    if ( $ENV{SCRIPT_NAME} =~ /ip_show_free_range/ ) {
        $usage_field_head = "";
        $usage_field_head_small = "";
    }

    my $client_title_show="";	
    if ( $client_independent eq "yes" ) {
        $client_title_show="<td><b>$lang_vars{client_message}</b></td>";
    }
    my $mass_update_field_head = "";
    $mass_update_field_head = "<td width=\"15px\"></td>" if $ENV{SCRIPT_NAME} =~ /ip_searchred.cgi/;
    print "<tr height=\"24px\">${mass_update_field_head}${usage_field_head}$client_title_show<td style=\"width:1px;white-space:nowrap;\"><b>$lang_vars{redes_message} </b></td><td width=\"30px\" align=\"center\"><b> BM </b></td><td><b> $lang_vars{description_message}</b></td><td align=\"center\"><b> $lang_vars{loc_message} </b></td><td><b> $lang_vars{cat_message} </b></td><td><b> $lang_vars{comentario_message} </b></td><td align=\"center\"><b> $lang_vars{sinc_message} </b></td>$cc_table<td width=\"15px\"></td><td align=\"center\" width=\"15px\"></td><td width=\"15px\"></td>";

} else {

my ($form, $form_elements, @item_order, %items, $opt_name, $opt_value);

$form_elements = GipTemplate::create_form_element_hidden(
    value => $red_start_entry,
    name => "start_entry",
);

my $form_elements_hidden .= $form_elements;

$form_elements = GipTemplate::create_form_element_hidden(
    value => $ip_version_ele,
    name => "ip_version_ele",
);

$form_elements_hidden .= $form_elements;



print "<tr>${usage_field_head_small}<td width=\"25px\"></td>";


$form_elements .= "<td>";

my $form_elements_onclick .= $form_elements_hidden_onclick;
$form_elements_onclick .= "&order_by=$red_order_by";

my $onload_button = 'onclick="load_content_net(\'' . $form_base_uri . '\', \'' . $client_id . '\', \'' . $form_elements_onclick . '\')"';
$form_elements .= GipTemplate::create_form_element_button(
    value => $lang_vars{redes_message},
    name => "B1",
    class_args => "btn-sm m-0 p-0 padding-right-1",
    onclick => $onload_button,
);

$form_elements .= "</td>";
$form_elements .= "<td>";

$form_elements_onclick = $form_elements_hidden_onclick;
$form_elements_onclick .= "&order_by=$BM_order_by";

$onload_button = 'onclick="load_content_net(\'' . $form_base_uri . '\', \'' . $client_id . '\', \'' . $form_elements_onclick . '\')"';
$form_elements .= GipTemplate::create_form_element_button(
value => "BM",
class_args => "btn-sm m-0 p-0 padding-right-1",
onclick => $onload_button,
);

$form_elements .= "</td>";
$form_elements .= "<td>";

$form_elements_onclick = $form_elements_hidden_onclick;
$form_elements_onclick .= "&order_by=$description_order_by";

$onload_button = 'onclick="load_content_net(\'' . $form_base_uri . '\', \'' . $client_id . '\', \'' . $form_elements_onclick . '\')"';
$form_elements .= GipTemplate::create_form_element_button(
    value => $lang_vars{description_message},
    class_args => "btn-sm m-0 p-0 padding-right-1",
    onclick => $onload_button,
);

$form_elements .= "</td>";
$form_elements .= "<td>";

$form_elements_onclick = $form_elements_hidden_onclick;
$form_elements_onclick .= "&order_by=$loc_order_by";

$onload_button = 'onclick="load_content_net(\'' . $form_base_uri . '\', \'' . $client_id . '\', \'' . $form_elements_onclick . '\')"';
$form_elements .= GipTemplate::create_form_element_button(
    value => "$lang_vars{loc_message}",
    class_args => "btn-sm m-0 p-0 padding-right-1",
    onclick => $onload_button,
);

$form_elements .= "</td>";
$form_elements .= "<td>";

$form_elements_onclick = $form_elements_hidden_onclick;
$form_elements_onclick .= "&order_by=$cat_order_by";

$onload_button = 'onclick="load_content_net(\'' . $form_base_uri . '\', \'' . $client_id . '\', \'' . $form_elements_onclick . '\')"';
$form_elements .= GipTemplate::create_form_element_button(
    value => $lang_vars{cat_message},
    class_args => "btn-sm m-0 p-0 padding-right-1",
    onclick => $onload_button,
);

$form_elements .= "</td>";
$form_elements .= "<td>";

$form_elements_onclick = $form_elements_hidden_onclick;
$form_elements_onclick .= "&order_by=$comentario_order_by";

$onload_button = 'onclick="load_content_net(\'' . $form_base_uri . '\', \'' . $client_id . '\', \'' . $form_elements_onclick . '\')"';
$form_elements .= GipTemplate::create_form_element_button(
    value => $lang_vars{comentario_message},
    class_args => "btn-sm m-0 p-0 padding-right-1",
    onclick => $onload_button,
);

$form_elements .= "</td>";
$form_elements .= "<td>";

$form_elements_onclick = $form_elements_hidden_onclick;
$form_elements_onclick .= "&order_by=$sinc_order_by";

$onload_button = 'onclick="load_content_net(\'' . $form_base_uri . '\', \'' . $client_id . '\', \'' . $form_elements_onclick . '\')"';
$form_elements .= GipTemplate::create_form_element_button(
    value => $lang_vars{sinc_message},
    class_args => "btn-sm m-0 p-0 padding-right-1",
    onclick => $onload_button,
);

$form_elements .= "</td>";

$form_elements .= $cc_table;

print $form_elements;

}

print "</tr>\n";
my $root_last_ip_int="";
my $root_main_redint="";
my $root_main_last_ip_int="0";
my $root_redob="";
my $rootob="";
my $root_redint="";
my $ignore_first_root_net_last_ip_int="";
my $result_limited=0;

my $last_ip_int_super_root=0;
my $last_int_super_super=0;

# LOOP
foreach (@{$ip}) {
    if ( @{$ip}[$j]->[0] eq "NO_IP" ) {
        $j++;
        next;
    }
    last if ! @{$ip}[$j] || @{$ip}[$j]->[0] eq "NO_IP";

    if ( $ENV{SCRIPT_NAME} =~ /ip_searchred.cgi/ && $j == 500) {
        $result_limited=1;
        last;
    }

    $ip_version = "@{$ip}[$j]->[9]" || "";
    $red = "@{$ip}[$j]->[0]" || "";	
    my $red_uncompressed=$red;
    if ( $ip_version eq "v6" ) {
        $red = ip_compress_address ($red, 6);
    }
    $BM = "@{$ip}[$j]->[1]" || "";	
    $descr = "@{$ip}[$j]->[2]" || "";	
    $red_num = "@{$ip}[$j]->[3]" || "";	
    $loc = "@{$ip}[$j]->[4]" || "";	

    # check permissions
    my $loc_id = $loc_hash->{"$loc"} || "-1";
    my $has_loc_rw_perm = 0;
    if ( $user_management_enabled eq "yes" && $loc_id != "-1" ) {
        if ( $locs_rw_perm eq "9999" || $locs_rw_perm =~ /^$loc_id$/ || $locs_rw_perm =~ /^${loc_id}_/ || $locs_rw_perm =~ /_${loc_id}$/ || $locs_rw_perm =~ /_${loc_id}_/ ) {
            # user has rw perm
            $has_loc_rw_perm = 1;
        }

        if ( $locs_ro_perm eq "9999" || $locs_ro_perm =~ /^$loc_id$/ || $locs_ro_perm =~ /^${loc_id}_/ || $locs_ro_perm =~ /_${loc_id}$/ || $locs_ro_perm =~ /_${loc_id}_/ ) {
            # user has ro perm
        } elsif ( ! $has_loc_rw_perm ) {
            # user has no permission for this site - skip entry
            $j++;
            next;
        }   
    } else {
        $has_loc_rw_perm = 1;
    }

    my $vigivigi = "@{$ip}[$j]->[5]" || "";	
    $comentario = "@{$ip}[$j]->[6]" || "";	
    $categoria = "@{$ip}[$j]->[7]" || "";	
    $client_id = "@{$ip}[$j]->[8]" || "$client_id";
    $loc = "" if ( $loc eq "NULL" || $loc eq "zzzzzzzzzZ" );
    $descr = "" if ( $descr eq "NULL" || $descr eq "zzzzzzzzzZ" );
    $comentario = "" if ( $comentario eq "NULL" || $comentario eq "zzzzzzzzzZ" );
    $comentario =~ s//<br>/g;
    $comentario =~ s/\n/<br>/g;
    $comentario =~ s/\r/<br>/g;
    $comentario =~ s/<br><br>/<br>/g;
    $categoria = "" if ( $categoria eq "NULL" || $categoria eq "zzzzzzzzzZ" );
    $comentario_show = $comentario;
    $old_rootnet=$rootnet if $rootnet;
    $rootnet = "@{$ip}[$j]->[10]" || "0";	
    $parent_network_id = "@{$ip}[$j]->[11]" if defined (@{$ip}[$j]->[11]);


    $self->{client_id}=$client_id;
    $self->{vars_file}=$vars_file;
    $self->{ip_version}=$ip_version;
    $self->{server_proto}=$server_proto;
    $self->{base_uri}=$base_uri;
    $self->{red}=$red;
    $self->{BM}=$BM;
    $self->{red_num}=$red_num;
    $self->{descr}=$descr;
    $self->{loc}=$loc;
    $self->{categoria}=$categoria;
    

    my $rootnet_hidden= "";
    if ( $rootnet > "0" && $info eq "simple" ) {
        $script = "ip_show_free_range.cgi";
        $rootnet_hidden='<input name="rootnet" type="hidden" value="y">'
    } elsif ( $rootnet == "0" && $info eq "simple" ) {
        $script = "ip_show.cgi";
    } elsif ( $rootnet > "0" && $info eq "extended" ) {
        $rootnet_hidden='<input name="rootnet" type="hidden" value="y">'
    }
#		if ( $confirmation eq "yes" ) {
#			if ( $rootnet > 0 ) {
#				$onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$red\',\'delete\',\'$rootnet\',\'$lang_vars{delete_root_network_confirme_message}\');\"";
#			} else {
#				$onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$red\',\'delete\',\'$rootnet\',\'$lang_vars{delete_network_confirme_message}\');\"";
#			}
#			$onclick_confirmation_clear = "onclick=\"saveScrollCoordinates();return confirmation(\'$red\',\'clear\',\'$rootnet\',\'$lang_vars{clear_network_confirme_message}\');\"";
#			$onclick_confirmation_sinc = "onclick=\"saveScrollCoordinates();return confirmation(\'$red\',\'sinc\',\'$rootnet\',\'$lang_vars{sinc_network_confirme_message}\');\"";
#		}

    my $form_name;
    if ( $rootnet == 0 ) {
        $form_name = "document.forms.list_host" . $j . ".submit()";
    } else {
        my $params_form_name = "&red_num=$red_num&rootnet=y&parent_network_id=$red_num";
#			$form_name = "load_content_net(\'' . $form_base_uri . '\', \'' . $client_id . '\', \'' . $params_form_name . '\')";


        if ( $ENV{SCRIPT_NAME} =~ /ip_searchred.cgii/ ) {
            $params_form_name = "client_id=$client_id&show_rootnet=create&show_endnet=create" . $params_form_name;
            my $url = $form_base_uri . "index_nohead.cgi";
            $form_name = "load_content_net_no_dyn_param('$url','$params_form_name')";
        } elsif ( $ENV{SCRIPT_NAME} =~ /ip_unirred.cgi/ ) {
            $params_form_name = "client_id=$client_id" . $params_form_name;
            my $url = $form_base_uri . "index_nohead.cgi";
            $form_name = "load_content_net_no_dyn_param('$url','$params_form_name')";
        } else {
            $form_name = "load_content_net('$form_base_uri','$client_id','$params_form_name')";
        }


#			$form_name = "load_content_net('$form_base_uri','$client_id','$params_form_name')";
    }

    my $custom_column_val="";
    $cc_table_fill="";
    my $net_usage = "";
    my $net_usage_fill = "";
#        $net_usage_fill = "<td></td>" if $cc_usage_enabled && $ip_version eq "v4";
    $net_usage_fill = "<td></td>" if $cc_usage_enabled;
	my ( $all_adds, $used_adds, $free_adds, $percent_free, $percent_ocu);
#    my $percent_free = "";
#    my $percent_ocu = "";
    foreach ( @cc_ids ) {
        my $id=$_->[0];
        my $onclick_form = "";

		my $cc_val = $custom_columns_values{"${id}_${red_num}"} || "";

        if (( $BM >= $smallest_bm && $BM <= "30" && $ip_version eq "v4" ) || ( $BM >= $smallest_bmv6  && $BM <= "127" && $ip_version eq "v6" )) {
            $onclick_form = "onClick=\"$form_name\"";
        }
        if ( $id eq $fav && $custom_columns_values{"${id}_${red_num}"} ) {
            $cc_table_fill=$cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/fav_star.png\" alt=\"x\" title=\"$lang_vars{fav_net_message}\"></td>";
        } elsif ( $id eq $cc_id_dns_server_groups && $custom_columns_values{"${id}_${red_num}"} ) {
            $custom_column_val=$custom_columns_values{"${id}_${red_num}"};
            my $name = $dns_server_groups{$custom_column_val}->[0] || "";
            $cc_table_fill= $cc_table_fill . "<td>$name</td>";
        } elsif ( $id eq $cc_id_usage && $custom_columns_values{"${id}_${red_num}"} && $ip_version eq "v6" ) {
            $net_usage_fill = "<td></td>";
            next;
        } elsif ( $id eq $cc_id_usage && $custom_columns_values{"${id}_${red_num}"} && $ip_version eq "v4" ) {

            my $usage = $custom_columns_values{"${id}_${red_num}"};
			my ( $all_adds, $used_adds, $free_adds, $percent_free, $percent_ocu) = $self->get_net_usage($usage);

            $used_adds="0" if ! $used_adds;
            $free_adds="0" if ! $free_adds;

            $net_usage = "${percent_ocu}% $lang_vars{allocated_message}\n\n$lang_vars{total_message}: $all_adds\n$lang_vars{ocupadas_message}: $used_adds\n$lang_vars{libre_message}: $free_adds";

            if ( $percent_free == 0 ) {
                $net_usage_fill = "<td align=\"left\"><img src=\"$server_proto://$base_uri/imagenes/100perc.png\" alt=\"100%\" title=\"$net_usage\"></td>";
            } elsif ( $percent_free <= 15 ) {
                $net_usage_fill = "<td align=\"left\"><img src=\"$server_proto://$base_uri/imagenes/80perc.png\" alt=\"80%\" title=\"$net_usage\"></td>";
            } elsif ( $percent_free <= 35 ) {
                $net_usage_fill = "<td align=\"left\"><img src=\"$server_proto://$base_uri/imagenes/75perc.png\" alt=\"75%\" title=\"$net_usage\"></td>";
            } elsif ( $percent_free <= 60 ) {
                $net_usage_fill = "<td align=\"left\"><img src=\"$server_proto://$base_uri/imagenes/50perc.png\" alt=\"50%\" title=\"$net_usage\"></td>";
            } elsif ( $percent_free <= 80 ) {
                $net_usage_fill = "<td align=\"left\"><img src=\"$server_proto://$base_uri/imagenes/25perc.png\" alt=\"25%\" title=\"$net_usage\"></td>";
            } elsif ( $percent_free <= 99 ) {
                $net_usage_fill = "<td align=\"left\"><img src=\"$server_proto://$base_uri/imagenes/10perc.png\" alt=\"10%\" title=\"$net_usage\"></td>";
            } else {
                $net_usage_fill = "<td align=\"left\"><img src=\"$server_proto://$base_uri/imagenes/0perc.png\" alt=\"0%\" title=\"$net_usage\"></td>";
            }

        } elsif ( $id eq $cc_id_usage && ! $custom_columns_values{"${id}_${red_num}"} ) {
            # ignore "usage" column

        } elsif ( $custom_columns_values{"${id}_${red_num}"} && $global_limit_cc_output_enabled eq "yes" ) {
            my $form_title = "";
            my $custom_column_val_fill = "";
            $custom_column_val=$custom_columns_values{"${id}_${red_num}"};
            $custom_column_val =~ /^(.{0,30})(.*)$/;
            $custom_column_val_fill = $1;
            $custom_column_val_fill = $custom_column_val_fill . "..." if $2;
            $form_title = "title=\"$custom_column_val\"" if $2;
            $cc_table_fill= $cc_table_fill . "<td $onclick_form $form_title>$custom_column_val_fill</td>";
        } elsif ( $custom_columns_values{"${id}_${red_num}"} ) {
            $custom_column_val=$custom_columns_values{"${id}_${red_num}"};
            $cc_table_fill= $cc_table_fill . "<td $onclick_form>$custom_column_val</td>";
        } elsif ( $id eq $tag_cc_id && exists $tag_hash_obj{$red_num} ) {
            # TAGs
            $custom_column_val = "";

            my $tags = $tag_hash_obj{$red_num};
            my $i = 1;
            foreach ( @$tags ) {
                my $tag_id = $_;
                my $tag_name = $tag_hash{$tag_id}[0];
                my $tag_color = $tag_hash{$tag_id}[2];
                $tag_name =~ /^(.{1,5})/;
                my $tag_name_short = $1;
                $custom_column_val .= '<span class="badge" title="' . $tag_name . '" style="background: #' . ${tag_color} . ';">' . $tag_name_short . '</span>';

                $custom_column_val .= "<br>" if $i % 3 == 0 && exists $$tags[$i];
                $i++;
            }

            $cc_table_fill= $cc_table_fill . "<td nowrap $onclick_form>$custom_column_val</td>";
        } elsif ( $id eq $scan_a_zone_cc_id && ( exists $scan_a_zone_hash_obj{$red_num} || exists $scan_aaaa_zone_hash_obj{$red_num} )) {
            # ScanAZones
            $custom_column_val = "";

            my $zones;
            if ( $ip_version eq "v6") {
                $zones = $scan_aaaa_zone_hash_obj{$red_num};
            } else {
                $zones = $scan_a_zone_hash_obj{$red_num};
            }
            my $i = 1;
            foreach ( @$zones ) {
                my $id = $_;
                my $name = $scan_zone_hash{$id};

                $custom_column_val .= "$name<br>";
                $i++;
            }

            $cc_table_fill = $cc_table_fill . "<td nowrap $onclick_form>$custom_column_val</td>";
        } elsif ( $id eq $scan_ptr_zone_cc_id && exists $scan_ptr_zone_hash_obj{$red_num} ) {
            # ScanPTRZones
            $custom_column_val = "";

            my $zones = $scan_ptr_zone_hash_obj{$red_num};
            my $i = 1;
            foreach ( @$zones ) {
                my $id = $_;
                my $name = $scan_zone_hash{$id};

                $custom_column_val .= "$name<br>";
                $i++;
            }

            $cc_table_fill = $cc_table_fill . "<td nowrap $onclick_form>$custom_column_val</td>";
        } else {
            $cc_table_fill = $cc_table_fill . "<td $onclick_form></td>";
        }
    }

    if ( $comentario ) {
        $comentario_show = $comentario_show . "<br>";
    }
    $comentario_show = $comentario_show . " " . $rangos{$red_num} if $rangos{$red_num};
    if ( @{$ip}[$j]->[5] ) {
        if ( @{$ip}[$j]->[5] eq "y" ) {
            $vigilada_checked="x"
        } else { 
            $vigilada_checked="";
        }
    } else {
            $vigilada_checked="";
    }

    my $changed_red_num_val = "";
    if ( $red_num ) {
        if ( defined $changed_red_num->{"$red_num"} ) {
            $changed_red_num_val = $changed_red_num->{"$red_num"};
        }
    }

    if ( $red_num && $changed_red_num_val ) {
        $color="#a6e8a6";
    } elsif ( $color_helper eq "0" ) {
        $color="#efefef";
        $color_helper="1";
        if ( $rootnet eq "1" ) {
#				$stylename="table_rootnet1";
            $stylename="show_detail_brown";
#                $color="#f2d0a4";
#                $color="#aeb6bf";
            $color="#fdebd0";
        }
    } else {
        $color="white";
        $color_helper="0";
        if ( $rootnet eq "1" ) {
            $stylename="show_detail_brown";
#				$stylename="table_rootnet1";
#				$color="#f7e1c8";
            $color="#fad7a0";
        }
    }
    if ( $descr =~ /xarxa.?lliure/i || $comentario =~ /xarxa.?lliure/i ) {
        $stylename="show_detail_green";
        $stylename_disabled="show_detail_green_disabled";
        
    } else {
        $fontcolor="black";
        $stylename="show_detail_brown";
        $stylename="show_detail" if $rootnet ne 1;
        $stylename_disabled="show_detail_disabled";
    }
    my $BM_bm_acro;
    if ( $BM < 10 ) {
        $BM_bm_acro = "0" . $BM;
    } else {
        $BM_bm_acro = $BM;
    }
    my ($bm_acro,$bm_acro_message);
    if ( $ip_version eq "v4" ) {
        $bm_acro = "bm_". "$BM_bm_acro" ."_message";	
        $bm_acro_message="$lang_vars{$bm_acro}";
    } else {
        $bm_acro_message = "$anz_hosts_bm{$BM} hosts";	
    }
#		my $net_overview_button;
    my $disabled_message=$lang_vars{disabled_message};
    $disabled_message=$lang_vars{disabled6_message} if $ip_version eq "v6";





    my ($form, $form_elements, @item_order, %items, $opt_name, $opt_value);
    my $content;
    my $url_load;
    my $url_params;
    my $onclick;
    my $onclick_base;
    my $disabled;
    my $url_load_base = "$server_proto://$base_uri/";
    my $standard_params="&red_num=$red_num&start_entry=$start_entry&order_by=$order_by&ip_version_ele=$ip_version_ele";

    if ( $confirmation eq "yes" ) {
        my $script = "res/ip_deletered.cgi";
        my $url_load = $url_load_base . $script;
#        my $url_params = "&client_id=$client_id&red_num=$red_num";
        my $url_params = "&client_id=$client_id&red_num=$red_num&parent_network_id=$parent_network_id";
        if ( $show_free_ranges_delete || $ENV{SCRIPT_NAME} =~ /ip_show_free_range/ ) {
            $url_params .= "&show_free_ranges=1";
        }
        if ( $rootnet > 0 ) {
#                $onclick_confirmation_delete = "saveScrollCoordinates();return confirmation('$red','delete','$rootnet','$lang_vars{delete_root_network_confirme_message}');";
            $onclick_confirmation_delete = "saveScrollCoordinates(); confirmation_new('$red','delete','$rootnet','$lang_vars{delete_root_network_confirme_message}','$url_load','$url_params');";
        } else {
            $onclick_confirmation_delete = "saveScrollCoordinates(); confirmation_new('$red','delete','$rootnet','$lang_vars{delete_network_confirme_message}','$url_load','$url_params');";
        }

        $script = "res/ip_vaciarred.cgi";
        $url_load = $url_load_base . $script;
        $url_params = "&client_id=$client_id&red_num=$red_num&referer=red_view";
        $onclick_confirmation_clear = "saveScrollCoordinates(); confirmation_new('$red','clear','$rootnet','$lang_vars{clear_network_confirme_message}','$url_load','$url_params');";

        $script = "res/ip_sincred.cgi";
        $url_load = $url_load_base . $script;
        $url_params = "&client_id=$client_id&red_num=$red_num&referer=red_view&ip_version_ele=$ip_version_ele&order_by=$order_by";
        $onclick_confirmation_sinc = "saveScrollCoordinates(); confirmation_new('$red','sinc','$rootnet','$lang_vars{sinc_network_confirme_message}','$url_load','$url_params');";
    } else {
        my $script = "res/ip_deletered.cgi";
        my $url_load = $url_load_base . $script;
        my $url_params = "&client_id=$client_id&red_num=$red_num&parent_network_id=$parent_network_id";
        $onclick_confirmation_delete = "saveScrollCoordinates(); load_content_net_simple('$url_load','$url_params');";

        $script = "res/ip_vaciarred.cgi";
        $url_load = $url_load_base . $script;
        $url_params = "&client_id=$client_id&red_num=$red_num&referer=red_view";
        $onclick_confirmation_clear = "saveScrollCoordinates(); load_content_net_simple('$url_load','$url_params');";

        $script = "res/ip_sincred.cgi";
        $url_load = $url_load_base . $script;
        $url_params = "&client_id=$client_id&red_num=$red_num&referer=red_view&ip_version_ele=$ip_version_ele&order_by=$order_by";
        $onclick_confirmation_sinc = "saveScrollCoordinates(); load_content_net_simple('$url_load','$url_params');";
    }

# fa-cog fa-angle-down fa-caret-down fa-chevron-circle-down
    $form_elements .= '
         <div class="dropdown dropright">
          <button class="btn btn-sm white fa fa-cog" type="button" style="height: 30px;" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          </button>
          <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">';


    # EDIT button
    my $rootnet_hidden_param = "";
    $rootnet_hidden_param = "&rootnet=y" if $rootnet_hidden;

    ### TEST check referer
    $disabled = "";
    $disabled = 1 if $has_loc_rw_perm == 0;
    $script = "res/ip_modred_form.cgi";
    $url_params = "?client_id=$client_id&referer=red_view&red_num=$red_num&loc=$loc&start_entry=$start_entry&order_by=$order_by&ip_version_ele=$ip_version_ele&parent_network_id=$parent_network_id_form" . $rootnet_hidden_param;

    $url_load = $url_load_base . $script . $url_params;
    $onclick_base = "load_url('" . $url_load . "');";

    $content = GipTemplate::create_list_view_option_items(
        name => $lang_vars{modificar_message},
        onclick => $onclick_base,
        disabled => $disabled,
    );

    $form_elements .= $content;

    # HISTORY

    $script = "ip_show_history.cgi";
    $url_params = "?client_id=$client_id&ip=$red/$BM&ip_version=$ip_version";
    $url_load = $url_load_base . $script . $url_params;
    $onclick_base = "load_url('" . $url_load . "');";

    $content = GipTemplate::create_list_view_option_items(
        name => $lang_vars{historia_message},
        onclick => $onclick_base,
    );

    $form_elements .= $content;


    # NET OVERVIEW

    $disabled = "";
    $script = "ip_show_red_overview.cgi";
    $url_params = "?client_id=$client_id&red_num=$red_num&view=long&ip_version=$ip_version&B2=";
    $url_load = $url_load_base . $script . $url_params;
    $onclick_base = "load_url('" . $url_load . "');";

    if ( $rootnet == 1 || $ip_version eq "v6" || ( $BM == 32 || $BM == 31 || $BM < 16 ) && $ip_version eq "v4" ) {
        $disabled = 1;
    }

    $content = GipTemplate::create_list_view_option_items(
        name => $lang_vars{vista_larga_message},
        onclick => $onclick_base,
        disabled => $disabled,
    );

    $form_elements .= $content;

    # NET INFO

    $script = "ip_redinfo.cgi";
    $url_params = "?client_id=$client_id&red_num=$red_num&ip_version=$ip_version";
    $url_load = $url_load_base . $script . $url_params;
    $onclick_base = "load_url('" . $url_load . "');";

    $content = GipTemplate::create_list_view_option_items(
        name => $lang_vars{red_info_message},
        onclick => $onclick_base,
    );

    $form_elements .= $content;

    # DNS SYNC

    $disabled = "";
    $script = "res/ip_sincred.cgi";
    ### TEST check referer
    $url_params = "?client_id=$client_id&referer=red_view" . $standard_params;
    $url_load = $url_load_base . $script . $url_params;
    $onclick_base = "load_url('" . $url_load . "');";
    $onclick = $onclick_confirmation_sinc . " " . $onclick_base;

    if (( $rootnet == 1 ) || ( $BM < 22 && $ip_version eq "v4" ) || ($BM < 64 && $ip_version eq "v6" )) {
        $disabled = 1;
    }
    $disabled = 1 if $has_loc_rw_perm == 0;

    $content = GipTemplate::create_list_view_option_items(
        name => $lang_vars{dns_sync_message},
        onclick => $onclick,
        disabled => $disabled,
    );

    $form_elements .= $content;

    # SNMP SYNC

    $disabled = "";
    $script = "res/ip_discover_net_snmp_form.cgi";
    $url_params = "?client_id=$client_id&red_num=$red_num&ip_version_ele=$ip_version_ele&ip_version=$ip_version";
    $url_load = $url_load_base . $script . $url_params;
    $onclick_base = "load_url('" . $url_load . "');";

    if (( $rootnet == 1 ) || ( $BM < 22 && $ip_version eq "v4" ) || ($BM < 64 && $ip_version eq "v6" )) {
        $disabled = 1;
    }
    $disabled = 1 if $has_loc_rw_perm == 0;

    $content = GipTemplate::create_list_view_option_items(
        name => $lang_vars{snmp_sync_message},
        onclick => $onclick_base,
        disabled => $disabled,
    );

    $form_elements .= $content;

    # RESERVE RANGE

    $disabled = "";
    if (( $rootnet == 1 ) || ( $BM < $smallest_bm && $ip_version eq "v4" ) || ($BM < 64 && $ip_version eq "v6" )) {
        $disabled = 1;
    }
    $disabled = 1 if $has_loc_rw_perm == 0;

    $script = "res/ip_reserverange_form.cgi";
    ### TEST check referer
    $url_params = "?client_id=$client_id&referer=red_view&loc=$loc" . $standard_params;
    $url_load = $url_load_base . $script . $url_params;
    $onclick_base = "load_url('" . $url_load . "');";

    $content = GipTemplate::create_list_view_option_items(
        name => $lang_vars{reserve_range_message},
        onclick => $onclick_base,
        disabled => $disabled,
    );

    $form_elements .= $content;

    # SPLIT

    $disabled = "";
    $disabled = 1 if $has_loc_rw_perm == 0 || $rootnet == 1;
    $script = "res/ip_splitred_form.cgi";
    $url_params = "?client_id=$client_id" . $standard_params;
    $url_load = $url_load_base . $script . $url_params;
    $onclick_base = "load_url('" . $url_load . "');";

    $content = GipTemplate::create_list_view_option_items(
        name => $lang_vars{split_message},
        onclick => $onclick_base,
        disabled => $disabled,
    );

    $form_elements .= $content;

    # ZONE

    $disabled = "";
    $script = "ip_show_zone_form.cgi";
    $url_params = "?client_id=$client_id&red_num=$red_num&ip_version=$ip_version";
    $url_load = $url_load_base . $script . $url_params;
    $onclick_base = "load_url('" . $url_load . "');";

    $content = GipTemplate::create_list_view_option_items(
        name => $lang_vars{create_dns_zone_files_message},
        onclick => $onclick_base,
    );

    $form_elements .= $content;

    # CLEAR

    $disabled = "";
    $disabled = 1 if $has_loc_rw_perm == 0;
    if ( $rootnet == 1 ) {
        $disabled = 1;
    }

    $content = GipTemplate::create_list_view_option_items(
        name => $lang_vars{vaciar_message},
        onclick => $onclick_confirmation_clear,
        disabled => $disabled,
    );

    $form_elements .= $content;

    # DELETE

    $disabled = "";
    $disabled = 1 if $has_loc_rw_perm == 0;
    $onclick = $onclick_confirmation_delete;

    $content = GipTemplate::create_list_view_option_items(
        name => $lang_vars{borrar_message},
        onclick => $onclick,
        nolink => "nolink",
        disabled => $disabled,
    );

    $form_elements .= $content;

    $form_elements .= '
          </div>
          </div>';


    if ( $ENV{SCRIPT_NAME} =~ /ip_unirred_form|ip_unirred.cgi/ ) {
        if (  $rootnet == "0" && $ENV{SCRIPT_NAME} =~ /ip_unirred/ ) {
            print "<tr bgcolor=\"$color\"><td></td><td></td><td><b>$red</b></td><td align=\"center\"><acronym title=\"$bm_acro_message\">$BM</acronym></td><td>$descr</td><td align=\"center\" nowrap>$loc</td><td align=\"center\" nowrap>$categoria</td><td>$comentario_show</td><td align=\"center\">$vigilada_checked</td>$cc_table_fill<td>";
            print "<input name=\"comentario_$j\" type=\"hidden\" value=\"$comentario\"><input name=\"unirred\" type=\"checkbox\" value=\"$red_uncompressed/$BM $j\" title=\"$lang_vars{dos_checkboxes_explic_message}\" onClick=\"check($j,'$lang_vars{max_unirredes_message}')\">";
        }
    } elsif ( $ENV{SCRIPT_NAME} =~ /ip_show_free_range/ || $self->{show_free_ranges_delete} ) {


#SHOW FREE RANGES

        my $collapse_networks=$self->{collapse_networks} || 0;
        my $freerange_ignore_non_root=$self->{freerange_ignore_non_root} || 0;
        my $rootnet_first_ip=$self->{rootnet_first_ip} || "";
        my $rootnet_BM=$self->{rootnet_BM} || "";
#			my $rootnet_first_ip_int=$self->{rootnet_first_ip_int} || "";
        $rootnet_first_ip_int = Math::BigInt->new("$rootnet_first_ip_int");
        my $rootnet_last_ip_int=$self->{rootnet_last_ip_int} || "";
        $rootnet_last_ip_int = Math::BigInt->new("$rootnet_last_ip_int");

        my $net_values=$self->get_first_network_address("$client_id","$red","$BM","$ip_version");

        my $redint=$net_values->{first_ip_int};
        $redint = Math::BigInt->new("$redint");
        my $last_ip_int=$net_values->{last_ip_int};
        $last_ip_int-- if $BM == 32;
        $last_ip_int = Math::BigInt->new("$last_ip_int");
        my $last_ip=$self->int_to_ip("$client_id",$last_ip_int,"$ip_version");

        #print free range before first network within rootnet
        if ( $rootnet_first_ip && $j == 0 && $rootnet_first_ip_int < $redint ) {
            # new counter needed because $j=0 might be used below
            my $new_counter=$ip_anz + $j + 1;
            my $form_name_freerange = "document.forms.insert_red_freerange" . $new_counter . ".submit()";

            my $first_free_range_add_int=$rootnet_first_ip_int;
            my $last_free_range_add_int=$redint - 1;
            my $last_free_range_add=$self->int_to_ip("$client_id",$last_free_range_add_int,"$ip_version");
            my $number_free_adds=$last_free_range_add_int-$first_free_range_add_int;

            my $error_message=$self->create_column_freerange(
                form_name_freerange => "$form_name_freerange",
                first_free_range_add => "$rootnet_first_ip",
                last_free_range_add => "$last_free_range_add",
                counter=>"$new_counter",
                script=> "$script",
                number_free_adds=> "$number_free_adds",
                first_free_range_add_int=> "$first_free_range_add_int",
                lang_vars=> \%lang_vars,
                cc_anz=> $cc_anz,
            ) || "";
        }


        # next network overlaps with previous network
        if ( $collapse_networks && $last_ip_int <= $last_ip_int_super_root ) {
            $j++;
            next;
        } else {
            $last_ip_int_super_root=$last_ip_int;
        }

        if ( $rootnet == 1 && $last_int_super_super < $last_ip_int_super_root ) {
            $last_int_super_super=$last_ip_int_super_root;
        } elsif ( $rootnet == 1 && ! $last_int_super_super ) {
            $last_int_super_super=$last_ip_int;
        }

        # print network column
        my $error_message=$self->create_column(

            rootnet=> "$rootnet",
            color=> "$color",
            form_name=> "$form_name",
            bm_acro_message=> "$bm_acro_message",
            comentario_show=> "$comentario_show",
            vigilada_checked=> "$vigilada_checked",
            cc_table_fill=> "$cc_table_fill",
            counter=>"$j",
            script=> "$script",
            rootnet_hidden=> "$rootnet_hidden",
            smallest_bm=> "$smallest_bm",
            smallest_allowed_list_BM6=> "$smallest_allowed_list_BM6",
            stylename_disabled=> "$stylename_disabled",
#				net_overview_button=> "$net_overview_button",
            stylename=> "$stylename",
            lang_vars=> \%lang_vars,
            form_elements=> $form_elements,
        ) || "";

        for (my $i=1;$i<=$ip_anz; $i++) {

            if ( ! defined(@{$ip}[$i+$j]) )  {
                last;
            }

            # get values of next network
            my $ip_version_next1 = "@{$ip}[$i+$j]->[9]" || "";
            my $red_next1 = "@{$ip}[$i+$j]->[0]" || "";	
            my $BM_next1 = "@{$ip}[$i+$j]->[1]" || "";	
            my $rootnet_next1 = "@{$ip}[$i+$j]->[10]" || 0;	

            my $red_uncompressed_next1=$red_next1;
            if ( $ip_version_next1 eq "v6" ) {
                $red = ip_compress_address ($red, 6);
            }

            my $net_values_next1=$self->get_first_network_address("$client_id","$red_uncompressed_next1","$BM_next1","$ip_version");
            my $redint_next1=$net_values_next1->{first_ip_int};
            $redint_next1 = Math::BigInt->new("$redint_next1");
            my $last_ip_int_next1=$net_values_next1->{last_ip_int};
            $last_ip_int_next1 = Math::BigInt->new("$last_ip_int_next1");

            if ( $collapse_networks && $redint_next1 < $last_ip_int_super_root ) {
                next;
            }

            # Prevent to show free range between networks with same network address
            if ( ! $collapse_networks && $redint == $redint_next1  ) {
                last;
            } elsif ( $collapse_networks && $last_ip_int_super_root >= $redint_next1 ) {
                next;
            }

            my $form_name_freerange = "document.forms.insert_red_freerange" . $j . ".submit()";

            my $first_free_range_add_int;
            if ( $rootnet > 0 && ! $collapse_networks ) {
                $first_free_range_add_int=$redint;
            } else {
                $first_free_range_add_int=$last_ip_int + 1;
            }

            my $last_free_range_add_int=$redint_next1 - 1;

            my $number_free_adds=$last_free_range_add_int-$first_free_range_add_int;

            my $first_free_range_add=$self->int_to_ip("$client_id",$first_free_range_add_int,"$ip_version");
            my $last_free_range_add=$self->int_to_ip("$client_id",$last_free_range_add_int,"$ip_version");


            # print free range column if next network overlaps with actual network
            if ( $last_ip_int_super_root + 1 < $redint_next1 ) {
                if ( $freerange_ignore_non_root && $rootnet_next1 == 1 ) {
                    my $last_super_super=$self->int_to_ip("$client_id","$last_int_super_super","$ip_version");
                    $last_free_range_add=$last_super_super;
                    $number_free_adds=$last_int_super_super-$first_free_range_add_int;
                }

                if ( $collapse_networks && $last_int_super_super != 0 && $first_free_range_add_int > $last_int_super_super ) {
                    next;
                }
                my $error_message=$self->create_column_freerange(
                    form_name_freerange => "$form_name_freerange",
                    first_free_range_add => "$first_free_range_add",
                    last_free_range_add => "$last_free_range_add",
                    counter=>"$j",
                    script=> "$script",
                    number_free_adds=> "$number_free_adds",
                    first_free_range_add_int=> "$first_free_range_add_int",
                    lang_vars=> \%lang_vars,
                    cc_anz=> $cc_anz,
                ) || "";
            } elsif ( ! $collapse_networks && $rootnet && $redint != $redint_next1 ) {
                my $error_message=$self->create_column_freerange(
                    form_name_freerange => "$form_name_freerange",
                    first_free_range_add => "$first_free_range_add",
                    last_free_range_add => "$last_free_range_add",
                    counter=>"$j",
                    script=> "$script",
                    number_free_adds=> "$number_free_adds",
                    first_free_range_add_int=> "$first_free_range_add_int",
                    lang_vars=> \%lang_vars,
                    cc_anz=> $cc_anz,
                ) || "";
            }
            last;
        }

        #print free range after last network within rootnet
        if ( $rootnet_first_ip && ! defined(@{$ip}[1+$j]) && $rootnet_last_ip_int > $last_ip_int && $j+1 != $entries_per_page ) {
            # TEST: check form_name
            my $new_counter=$ip_anz + $j + 1;
            my $form_name_freerange = "document.forms.insert_red_freerange" . $new_counter . ".submit()";

            my $first_free_range_add_int=$last_ip_int + 1;
            my $last_free_range_add_int=$rootnet_last_ip_int;
            my $first_free_range_add=$self->int_to_ip("$client_id","$first_free_range_add_int","$ip_version");
            my $last_free_range_add=$self->int_to_ip("$client_id","$rootnet_last_ip_int","$ip_version");
            my $number_free_adds=$last_free_range_add_int-$first_free_range_add_int;

            my $error_message=$self->create_column_freerange(
                form_name_freerange => "$form_name_freerange",
                first_free_range_add => "$first_free_range_add",
                last_free_range_add => "$last_free_range_add",
                counter=> $new_counter,
                script=> "$script",
                number_free_adds=> "$number_free_adds",
                first_free_range_add_int=> "$first_free_range_add_int",
                lang_vars=> \%lang_vars,
                cc_anz=> $cc_anz,
            ) || "";
        }

### END FREE RANGES



    } else {

        my $rootnet_first_ip_int_hidden = '';
        my $rootnet_last_ip_int_hidden = '';
        $rootnet_first_ip_int_hidden = '<input name="rootnet_first_ip_int" type="hidden" value="' . $rootnet_first_ip_int . '">' if $rootnet_first_ip_int;
        $rootnet_last_ip_int_hidden = '<input name="rootnet_last_ip_int" type="hidden" value="' . $rootnet_last_ip_int . '">' if $rootnet_last_ip_int;

        my $client_name_show="";	
            
        if ( $client_independent eq "yes" ) {
            $client_name_show="<td>$clients_hash{$client_id}</td>";
        }

        my $mass_update_checkbox = "<input type='checkbox' disabled>";
        if ( $has_loc_rw_perm ) {
            $mass_update_checkbox = "<input type='checkbox' name='mass_update_red_${j}' id='mass_update_red_${j}' value='$red_num'>";
        }

        if ( $rootnet != "1" && $BM < 64 && $ip_version eq "v6" ) {
            # HOST LIST VIEW DISABLED
            print "<tr bgcolor=\"$color\" class=\"$stylename_disabled\"><td><form name=\"mass_update_${j}\">$mass_update_checkbox</form></td>${net_usage_fill}$client_name_show <td><b>$red</b></td><td align=\"center\"><acronym title=\"$bm_acro_message\">$BM</acronym></td><td>$descr</td><td nowrap>$loc</td><td align=\"center\" nowrap>$categoria</td><td>$comentario_show</td><td align=\"center\">$vigilada_checked</td>$cc_table_fill<td>$form_elements</td>\n"; 
#            print "<tr bgcolor=\"$color\" class=\"$stylename_disabled\"><td><form name=\"mass_update_${j}\">$mass_update_checkbox</form></td>${net_usage_fill}$client_name_show <td><b>$red</b></td><td align=\"center\"><acronym title=\"$bm_acro_message\">$BM</acronym></td><td>$descr</td><td nowrap>$loc</td><td align=\"center\" nowrap>$categoria</td><td>$comentario_show</td><td align=\"center\">$vigilada_checked</td>$cc_table_fill<td><form method=\"POST\" name=\"list_host$j\" action=\"$server_proto://$base_uri/ip_show.cgi\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"loc\" type=\"hidden\" value='$loc'></form></td><td>$form_elements</td>\n"; 
        } else {
            my $modred_first_script="ip_show.cgi";
            if ( $rootnet > 0 ) {
                $modred_first_script="ip_show_free_range.cgi";
            }
            print "<tr bgcolor=\"$color\" class=\"$stylename\" style=\"cursor:pointer;\"><td><form name=\"mass_update_${j}\">$mass_update_checkbox</form></td>${net_usage_fill}$client_name_show <td onClick=\"$form_name\"><b>$red</b></td><td align=\"center\" onClick=\"$form_name\"><acronym title=\"$bm_acro_message\">$BM</acronym></td><td onClick=\"$form_name\">$descr</td><td nowrap onClick=\"$form_name\">$loc</td><td align=\"center\" nowrap onClick=\"$form_name\">$categoria</td><td onClick=\"$form_name\">$comentario_show</td><td onClick=\"$form_name\" align=\"center\">$vigilada_checked</td>$cc_table_fill<td>$form_elements <form method=\"POST\" name=\"list_host$j\" action=\"$server_proto://$base_uri/$modred_first_script\">$rootnet_hidden<input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name='loc' type=\"hidden\" value='$loc'>$rootnet_first_ip_int_hidden $rootnet_last_ip_int_hidden</form></td>\n";
            }
        }

    print "</tr>\n";
    $j++;
}
if ( $ENV{SCRIPT_NAME} =~ /ip_unirred_form/ ) {
    print "</table>\n";
    print "<p>\n";
    print "<input name=\"start_entry\" type=\"hidden\" value=\"$start_entry\"><input type=\"submit\" value=\"$lang_vars{unir_message}\" name=\"B2\" class=\"execute_link_right\"></form>\n";
    print "<p><br><p>\n";
} else {
    print "</table><p>\n";
}

if ( $result_limited == 1 ) {
    print "<br><p><b>$lang_vars{result_limited_500_message}</b><br><p><br>\n";
}


$j--;

my $anz_nets = $j; 
print <<EOF;

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function MassOnSubmitForm(ANZ_NET){
console.log("MassOnSubmitForm");
var i=0;
for (i=0;i<=ANZ_NET;i++)
{
console.log("mass_update_red_" + i);
 var element = document.getElementById("mass_update_red_" + i);

 if (typeof(element) != 'undefined' && element != null)
  CHECKVAL=document.getElementById("mass_update_red_" + i).checked;
  if ( CHECKVAL == true ) {
     document.getElementById("mass_update_red_submit_" + i).value = document.getElementById("mass_update_red_" + i).value;
  }
 }
}
//-->
</SCRIPT>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function SelectAll(ANZ_NET){
var i=0;
for (i=0;i<=ANZ_NET;i++)
{
  document.getElementById("mass_update_red_" + i).checked=true;
}
}
//-->
</SCRIPT>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function UnselectAll(ANZ_NET){
var i=0;
for (i=0;i<=ANZ_NET;i++)
{
  document.getElementById("mass_update_red_" + i).checked=false;
}
}
//-->
</SCRIPT>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function enable_edit_form(obj){
if (obj.value == "$lang_vars{borrar_message}") {
  document.mass_update.mass_update_type.disabled=true;
  document.getElementById('mass_update_type').style.color="gray";
  document.mass_update.action ="$server_proto://$base_uri/res/ip_deletered.cgi";
  for (var i=0; i<document.mass_update.mass_update_type.options.length; i++) {
      document.mass_update.mass_update_type.options[i].selected = false;
  }

  document.getElementById('mass_submit').type="button";
  document.getElementById('mass_submit').onclick = function() { confirmation_mass_update_new('$lang_vars{borrar_message}','$lang_vars{vaciar_message}',' $lang_vars{delete_select_networks_confirmation_message}','$lang_vars{clear_select_networks_confirmation_message}','$server_proto://$base_uri/res/ip_deletered.cgi','&client_id=$client_id&anz_nets=$anz_nets&mass_submit=mass_submit','$anz_nets'); };

} else if (obj.value == "$lang_vars{vaciar_message}") {
  document.mass_update.mass_update_type.disabled=true;
  document.getElementById('mass_update_type').style.color="gray";
//      document.mass_update.action ="$server_proto://$base_uri/res/ip_vaciarred.cgi";
  document.mass_update.action ="#";
  for (var i=0; i<document.mass_update.mass_update_type.options.length; i++) {
      document.mass_update.mass_update_type.options[i].selected = false;
  }
  document.getElementById('mass_submit').type="button";
  document.getElementById('mass_submit').onclick = function() {  confirmation_mass_update_new('$lang_vars{borrar_message}','$lang_vars{vaciar_message}',' $lang_vars{delete_select_networks_confirmation_message}','$lang_vars{clear_select_networks_confirmation_message}','$server_proto://$base_uri/res/ip_vaciarred.cgi','&client_id=$client_id&anz_nets=$anz_nets&mass_submit=mass_submit','$anz_nets'); };
} else {
  document.mass_update.mass_update_type.disabled=false;
  document.getElementById('mass_update_type').style.color="black";
  document.getElementById('mass_submit').type="submit";
  document.mass_update.action ="$server_proto://$base_uri/res/ip_modred_mass_update_form.cgi";
}
}
//-->
</SCRIPT>

<input type="submit" class="btn btn-sm" value="$lang_vars{select_all_message}" style="cursor:pointer;" onClick="SelectAll($anz_nets)">
<input type="submit" class="btn btn-sm" value="$lang_vars{unselect_all_message}" style="cursor:pointer;" onClick="UnselectAll($anz_nets)">

EOF
#<form name="mass_update" method="POST" action=\"$server_proto://$base_uri/res/ip_modred_mass_update_form.cgi\">

my ($form, $form_elements, @item_order, %items, $opt_name, $opt_value, $onclick);

$form_elements = "";

my $k;
for ($k=0;$k<=$anz_nets;$k++) {
$form_elements .= GipTemplate::create_form_element_hidden(
    value => "",
    name => "mass_update_red_submit_${k}",
);
}

$form_elements .= GipTemplate::create_form_element_hidden(
value => $client_id,
name => "client_id",
);

$form_elements .= GipTemplate::create_form_element_hidden(
value => $anz_nets,
name => "anz_nets",
);

$form_elements .= GipTemplate::create_form_element_hidden(
value => $ip_version_ele,
name => "ip_version_ele",
);

$form_elements .= GipTemplate::create_form_element_hidden(
value => $start_entry,
name => "start_entry",
);

if ( $self->{red_search} ) {
my $match = $self->{red_search};
$form_elements .= GipTemplate::create_form_element_hidden(
    value => $match,
    name => "match",
);
}


@item_order = ();
push @item_order, $lang_vars{'modificar_message'};
push @item_order, $lang_vars{'vaciar_message'};
push @item_order, $lang_vars{'borrar_message'};

$onclick = 'onchange="enable_edit_form(this);"';
$form_elements .= GipTemplate::create_form_element_select(
#	name => $lang_vars{mass_update_type},
item_order => \@item_order,
selected_value => $lang_vars{'modificar_message'},
id => "mass_action_type",
width => "10em",
size => 3,
multiple => "multiple",
no_label => "no_label",
onclick => $onclick,
pm => "mr-2",
);

@item_order=("$lang_vars{description_mass_checkbox_message}","$lang_vars{loc_message}","$lang_vars{cat_message}","$lang_vars{comentario_message}","$lang_vars{sinc_message}");
push @item_order, $lang_vars{update_mode_message} if $global_dyn_dns_updates_enabled eq "yes";
$n=0;
foreach (@custom_columns) {
if ( $custom_columns[$n]->[0] eq "usage" ) {
    $n++;
    next;
}
push @item_order, $custom_columns[$n]->[0];
$n++;
} 


$form_elements .= GipTemplate::create_form_element_select(
#	name => $lang_vars{mass_update_type},
item_order => \@item_order,
id => "mass_update_type",
width => "10em",
size => 4,
multiple => "multiple",
no_label => "no_label",
pm => "mr-2",
);

$onclick = 'onClick="MassOnSubmitForm(' . $anz_nets . '); return confirmation_mass_update(\'' . $lang_vars{borrar_message} . '\',\'' . $lang_vars{vaciar_message} . '\',\'' . $lang_vars{delete_select_networks_confirmation_message} . '\',\'' . $lang_vars{clear_select_networks_confirmation_message} . '\');"';

$form_elements .= GipTemplate::create_form_element_button(
value => $lang_vars{mass_update_message},
id => "mass_submit",
onclick => $onclick,
class_args => "btn nowrap",
);

$form = GipTemplate::create_form(
form_elements => $form_elements,
form_id => "mass_update",
link => "$server_proto://$base_uri/res/ip_modred_mass_update_form.cgi",
class => "form-inline",
method => "POST",
);

print $form;

print <<EOF;

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>

EOF
#print '</div>';
}


sub get_first_network_address {
my ($self,$client_id,$red,$BM,$ip_version) = @_;

my $first_ip_int = $self->ip_to_int("$client_id","$red","$ip_version");
my %anz_hosts_bm = $self->get_anz_hosts_bm_hash("$client_id","$ip_version");

my $anz_ips;
if ( $ip_version eq "v6" ) {
    $anz_hosts_bm{$BM} =~ s/,//g;
    $anz_hosts_bm{$BM} = Math::BigInt->new("$anz_hosts_bm{$BM}");
    if ( $BM >= 64 ) {
        $anz_ips=$anz_hosts_bm{$BM};
    } else {
        $anz_hosts_bm{'64'} =~ s/,//g;
        $anz_hosts_bm{'64'} = Math::BigInt->new("$anz_hosts_bm{'64'}");
        $anz_ips=$anz_hosts_bm{$BM} * $anz_hosts_bm{'64'}
    }
} else {
    $anz_ips=$anz_hosts_bm{$BM};
}

my $last_ip_int;

$anz_ips =~ s/,//g;
# NET32
if ( $BM == 31 || $BM == 32 ) {
    $last_ip_int=$first_ip_int+$anz_ips;
} else {
    $last_ip_int=$first_ip_int+$anz_ips-1;
}

my %net_values = (
    'first_ip_int' => "$first_ip_int",
    'last_ip_int'=> "$last_ip_int",
);

return \%net_values;
}



sub create_column {
my $self = shift;
my %args = @_;
my $error_message="";

my $client_id = $self->{client_id} || "";
my $vars_file = $self->{vars_file} || "";
my $ip_version = $self->{ip_version} || "";
my $server_proto=$self->{server_proto} || "";
my $base_uri=$self->{base_uri} || "";
my $red=$self->{red} || "";
my $BM=$self->{BM} || "";
my $red_num=$self->{red_num} || "";
my $descr=$self->{descr} || "";
my $loc=$self->{loc} || "";
my $categoria=$self->{categoria} || "";
my $collapse_networks=$self->{collapse_networks} || "";
my $rootnet_first_ip_int = $self->{rootnet_first_ip_int} || "";
my $rootnet_last_ip_int = $self->{rootnet_last_ip_int} || "";

my $rootnet=$args{rootnet} || 0;
my $color=$args{color} || "";
my $form_name=$args{form_name} || "";
my $bm_acro_message=$args{bm_acro_message} || "";
my $comentario_show=$args{comentario_show} || "";
my $vigilada_checked=$args{vigilada_checked} || "";
my $cc_table_fill=$args{cc_table_fill} || "";
my $counter=$args{counter} || 0;
my $script=$args{script} || "";
my $rootnet_hidden=$args{rootnet_hidden} || "";
my $smallest_bm=$args{smallest_bm} || "";
my $smallest_allowed_list_BM6=$args{smallest_allowed_list_BM6} || "";
my $stylename_disabled=$args{stylename_disabled} || "";
#	my $net_overview_button=$args{net_overview_button} || "";
my $stylename=$args{stylename} || "";
my $lang_vars=$args{lang_vars} || "";
my %lang_vars = %$lang_vars;
my $form_elements=$args{form_elements} || "";

my $bignet=0;
$bignet=1 if $ip_version eq "v6" && $BM < 64;
if  ( $rootnet > 0 ) {
    print "<tr bgcolor=\"$color\" class=\"show_detail_brown\" style=\"cursor:pointer;\"><td  onClick=\"$form_name\"><b>$red</b></td><td align=\"center\" onClick=\"$form_name\"><acronym title=\"$bm_acro_message\">$BM</acronym></td><td  onClick=\"$form_name\">$descr</td><td align=\"center\" nowrap onClick=\"$form_name\">$loc</td><td align=\"center\" nowrap onClick=\"$form_name\">$categoria</td><td onClick=\"$form_name\">$comentario_show</td><td align=\"center\" onClick=\"$form_name\">$vigilada_checked</td>$cc_table_fill<td><form method=\"POST\" name=\"list_host${counter}\" action=\"$server_proto://$base_uri/ip_show_free_range.cgi\">$rootnet_hidden<input name=\"bignet\" type=\"hidden\" value=\"$bignet\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"loc\" type=\"hidden\" value=\"$loc\"><input name=\"collapse_networks\" type=\"hidden\" value=\"$collapse_networks\"></form></td><td>$form_elements</td></tr>";
} else {
        print "<tr height=\"24px\" bgcolor=\"$color\" class=\"$stylename\" style=\"cursor:pointer;\"><td onClick=\"$form_name\"><b>$red</b></td><td align=\"center\" onClick=\"$form_name\"><acronym title=\"$bm_acro_message\">$BM</acronym></td><td onClick=\"$form_name\">$descr</td><td align=\"center\" nowrap onClick=\"$form_name\">$loc</td><td align=\"center\" nowrap onClick=\"$form_name\">$categoria</td><td onClick=\"$form_name\">$comentario_show</td><td align=\"center\" onClick=\"$form_name\">$vigilada_checked </td>$cc_table_fill<td><form method=\"POST\" name=\"list_host${counter}\" action=\"$server_proto://$base_uri/ip_show.cgi\">$rootnet_hidden<input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"loc\" type=\"hidden\" value=\"$loc\"><input name=\"rootnet_first_ip_int\" type=\"hidden\" value=\"$rootnet_first_ip_int\"><input name=\"rootnet_last_ip_int\" type=\"hidden\" value=\"$rootnet_last_ip_int\"></form></td><td>$form_elements</td></tr>\n";

}
}

sub create_column_freerange {
my $self = shift;
my %args = @_;

my $client_id = $self->{client_id} || "";
my $vars_file = $self->{vars_file} || "";
my $ip_version = $self->{ip_version} || "";
my $server_proto=$self->{server_proto} || "";
my $base_uri=$self->{base_uri} || "";
my $red=$self->{red} || "";
my $BM=$self->{BM} || "";
my $collapse_networks=$self->{collapse_networks} || "";

my $color=$args{color} || "";
my $form_name_freerange=$args{form_name_freerange} || "";
my $first_free_range_add=$args{first_free_range_add} || "";
my $last_free_range_add=$args{last_free_range_add} || "";
my $counter=$args{counter} || 0;
my $script=$args{script} || "";
my $number_free_adds=$args{number_free_adds} || 0;
my $lang_vars=$args{lang_vars} || "";
my %lang_vars = %$lang_vars;
my $cc_anz=$args{cc_anz} || 0;

my $colspan = $cc_anz + 8;

$number_free_adds = Math::BigInt->new("$number_free_adds");
$number_free_adds++;
if ( $number_free_adds == 0 ) {
    return;
}
my $first_free_range_add_int=$args{first_free_range_add_int} || "";
my $free_message=$lang_vars{direcciones_libres_message};
my $number_free_adds_show=$number_free_adds;
my $bignet=0;
if ( $ip_version eq "v6" ) {
    $first_free_range_add = ip_compress_address ($first_free_range_add,6);
    $last_free_range_add = ip_compress_address ($last_free_range_add,6);
    if ( $number_free_adds > 18446744073709551616 ) {
        # network has a prefix length < 64
        # $number_free_adds contains the number of /64 networks
        $number_free_adds = $number_free_adds / 18446744073709551616;
        $number_free_adds_show=$number_free_adds;
        $bignet=1;
        $free_message=$lang_vars{entradas_redes_message};
    } elsif ( $number_free_adds == "18446744073709551616" ) {
        $number_free_adds_show = 1;
        $free_message=$lang_vars{entradas_red_message};
    } else {
        # $number_free_adds contains the number of free IPv6 addresses
    }
}


if ( $number_free_adds_show > 0 ) {
    print "<tr class=\"$color\" onClick=\"$form_name_freerange\" style=\"cursor:pointer;\" title=\"$lang_vars{create_net_freeranges_message}\"><td colspan=\"$colspan\"><form method=\"POST\" name=\"insert_red_freerange${counter}\" action=\"$server_proto://$base_uri/res/ip_insertred_form.cgi\"><span class=\"free_ranges_block\"><b>$first_free_range_add-$last_free_range_add</b> ($number_free_adds_show $free_message)</span><input name=\"collapse_networks\" type=\"hidden\" value=\"$collapse_networks\"><input name=\"ip\" type=\"hidden\" value=\"$first_free_range_add_int/$number_free_adds\"><input name=\"bignet\" type=\"hidden\" value=\"$bignet\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"></form></td>\n";
} else {
#        print STDERR "Free adds error: $number_free_adds - $number_free_adds_show\n";
}
}


sub PrintIpTabHead {
my ($self,$client_id, $tipo, $script, $red_num, $vars_file,$start_entry_hosts,$anz_values_hosts,$entries_per_page_hosts,$pages_links,$host_order_by,$ip_version) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $uri = $self->get_uri();
my $base_uri = $self->get_base_uri();
my $smallest_allowed_list_BM6 = "64";

my @values_redes=();
@values_redes = $self->get_red("$client_id","$red_num") if $red_num;

my @values_entries_per_page_hosts = ("20","50","100","254","510","1022");

my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");

my $align="align=\"right\"";
my $align1="";
my $ori="left";
if ( $vars_file =~ /vars_he$/ ) {
    $align="align=\"left\"";
    $align1="align=\"right\"";
    $ori="right";
}

if ( $self->{rootnet_first_ip_int} ) {
    my $rootnet_chain = $self->get_rootnet_chain("$client_id", "$ip_version","host");
#        print "$rootnet_chain<br>\n";

print <<EOF;
<script type="text/javascript">
    create_rootnet_chain('$rootnet_chain');
</script>
EOF

}

print <<EOF;
<script type="text/javascript">
<!--
function confirmation_net(NET,TYPE) {

if (TYPE == 'delete'){
    answer = confirm(NET + ": $lang_vars{delete_network_confirme_message}")
}
else if (TYPE == 'clear') {
    answer = confirm(NET + ": $lang_vars{clear_network_confirme_message}")
}
else if (TYPE == 'sinc') {
    answer = confirm(NET + ": $lang_vars{sinc_network_confirme_message}")
}

    if (answer){
            return true;
    }
    else{
            return false;
    }
}
//-->
</script>

EOF

my $red = "$values_redes[0]->[0]" || "";
my $BM = "$values_redes[0]->[1]" || "";
my $loc_id = "$values_redes[0]->[3]" || "-1";
my $loc=$self->get_loc_from_id("$client_id","$loc_id") || "NULL";
my $redob = "$red/$BM";
my $ipob_red = new Net::IP ($redob) || die "Can not create ip object $redob: $! (1)\n";
my $redint="";
$redint=($ipob_red->intip());
$redint=Math::BigInt->new("$redint");
my $first_ip_int="";
$first_ip_int=$redint+1;
$first_ip_int=Math::BigInt->new("$first_ip_int");
my $first_ip = $self->int_to_ip("$client_id","$first_ip_int","$ip_version");
my $last_ip_int="";
$last_ip_int = ($ipob_red->last_int());
$last_ip_int=Math::BigInt->new("$last_ip_int");
if ( $ip_version eq "v6" ) {
    $first_ip_int--;
    $last_ip_int++;
}
if ( $BM == 31 || $BM == 32 ) {
    $first_ip_int--;
    $last_ip_int++;
}

my $ip_total=$last_ip_int-$first_ip_int;
$last_ip_int--;
my $ip_ocu=$self->count_host_entries("$client_id","$red_num");
my $free=$ip_total-$ip_ocu;
my ($free_calc,$percent_free,$ip_total_calc,$percent_ocu,$ocu_color);
if ( $free == 0 ) {
    $percent_free = '0%';
} elsif ( $free == $ip_total ) {
    $percent_free = '100%';
} else {
    $free_calc = $free . ".0";
    $ip_total_calc = $ip_total . ".0";
    $percent_free=100*$free_calc/$ip_total_calc;
    $percent_free =~ /^(\d+\.?\d?).*/;
    $percent_free = $1 . '%';
}
if ( $ip_ocu == 0 ) {
    $percent_ocu = '0%';
    $ocu_color = "green";
} elsif ( $ip_ocu == $ip_total ) {
    $percent_ocu = '100%';
    $ocu_color = "red";
} else {
    $ip_total_calc = $ip_total . ".0";
    $percent_ocu=100*$ip_ocu/$ip_total_calc;
    if ( $percent_ocu =~ /e/ ) {
        $percent_ocu="0.1"
    } else {
        $percent_ocu =~ /^(\d+\.?\d?).*/;
        $percent_ocu = $1;
    }
    if ( $percent_ocu >= 90 ) {
        $ocu_color = "red";
    } elsif ( $percent_ocu >= 80 ) {
        $ocu_color = "darkorange";
    } else {
        $ocu_color = "green";
    }
    $percent_ocu = $percent_ocu . '%';
}

my $onclick_confirmation_clear = "";
my $onclick_confirmation_sinc = "";
my $onclick_confirmation_delete = "";
#        my $confirmation = $config[0]->[7] || "no";
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";

if ( $confirmation eq "yes" ) {
    $onclick_confirmation_clear = "onclick=\"saveScrollCoordinates();return confirmation_net(\'$red\',\'clear\');\"";
    $onclick_confirmation_sinc = "onclick=\"saveScrollCoordinates();return confirmation_net(\'$red\',\'sinc\');\"";
    $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation_net(\'$red\',\'delete\');\"";
}

print "<table border=\"0\" cellpadding=\"4\" width=\"100%\"><tr>\n";
if ( $BM == 31 || $BM == 32 ) {
    print "<td $align1><b>$lang_vars{libre_message}: </b><font color=\"$ocu_color\"><b>$free</b> ($percent_free)</font><b> | <b>$lang_vars{ocupadas_message}: </b></b><font color=\"$ocu_color\"><b>$ip_ocu</b> ($percent_ocu)</font><b> | </b>$lang_vars{todas_message} :<b>$ip_total</b></td>\n";
} else {
    print "<td $align1><form method=\"POST\" action=\"$server_proto://$base_uri/ip_show.cgi\" style=\"display:inline\"><input type=\"hidden\" name=\"knownhosts\" value=\"libre\"><input type=\"hidden\" name=\"host_order_by\" value=\"IP_auf\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input type=\"submit\" class=\"btn btn-sm\" style='font-weight:bold;' value=\"$lang_vars{libre_message}:\" name=\"B1\"></form><font color=\"$ocu_color\"><b>$free</b> ($percent_free)</font><b> |</b><form method=\"POST\" action=\"$server_proto://$base_uri/ip_show.cgi\" style=\"display:inline\"><input type=\"hidden\" name=\"knownhosts\" value=\"hosts\"><input type=\"hidden\" name=\"host_order_by\" value=\"hostname\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input type=\"submit\" class=\"btn btn-sm\" style='font-weight:bold;' value=\"$lang_vars{ocupadas_message}:\" name=\"B1\"></form><font color=\"$ocu_color\"><b>$ip_ocu</b> ($percent_ocu)</font><b> |</b><form method=\"POST\" action=\"$server_proto://$base_uri/ip_show.cgi\" style=\"display:inline\"><input type=\"hidden\" name=\"knownhosts\" value=\"all\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input type=\"submit\" class=\"btn btn-sm\" style='font-weight:bold;' value=\"$lang_vars{todas_message}:\" name=\"B1\"></form><b>$ip_total</b></td>\n";
}

    if ( defined($start_entry_hosts)) {
    my $cgi = "$base_uri/ip_show.cgi";
    print "<td>";
    print "<form name=\"printredtabheadform\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\">\n";
            print "&nbsp;&nbsp;&nbsp;$lang_vars{entradas_por_pagina_nowrap_message} <select class='custom-select custom-select-sm' style='width: 6em' name=\"entries_per_page_hosts\" size=\"1\">";
            my $i = "0";
            foreach (@values_entries_per_page_hosts) {
                    if ( $_ eq $entries_per_page_hosts ) {
                            print "<option selected>$values_entries_per_page_hosts[$i]</option>";
                            $i++;
                            next;
                    }
                    print "<option>$values_entries_per_page_hosts[$i]</option>";
                    $i++;
            }
            print "</select>\n"; 
    print "<input type=\"hidden\" name=\"red_num\" value=\"$red_num\">";
            print "<input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"filter_button\"></form>\n";
    print "</td>";
    }

my $disabled_message=$lang_vars{disabled_message};
$disabled_message=$lang_vars{disabled6_message} if $ip_version eq "v6";
my $create_zone_file_button="<img src=\"$server_proto://$base_uri/imagenes/show_zone_file_disabled.png\" alt=\"disabled\" title=\"$disabled_message\">";


my $form_replace ="<input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"start_entry\" type=\"hidden\" value=\"0\"><input name=\"order_by\" type=\"hidden\" value=\"red_auf\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version_ele\" type=\"hidden\" value=\"$ip_version\">";
my $delete_button="<form name='delete_red_form' method=\"POST\" action=\"$server_proto://$base_uri/res/ip_deletered.cgi\">$form_replace<input type=\"submit\" value=\"\" style=\"color:red;\" name=\"B2\" class=\"delete_button\" title=\"$lang_vars{borrar_explic_message}\" $onclick_confirmation_delete></form>";


# NET32
if (( $ip_version eq "v4" && $BM >= 16 && $BM != 31 && $BM != 32) || ( $ip_version eq "v6" && $BM <= 64)) {
    $create_zone_file_button="<form  method=\"POST\" action=\"$server_proto://$base_uri/ip_show_zone_form.cgi\"><input type=\"hidden\" name=\"red_num\" value=\"$red_num\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" class=\"show_zone_file_button\" title=\"$lang_vars{create_dns_zone_files_message}\" value=\"\" name=\"B1\"></form>";
}

print "<td width=\"20px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_modred_form.cgi\"><input name=\"referer\" type=\"hidden\" value=\"host_list_view\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"loc\" type=\"hidden\" value='$loc'><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"edit_button\" title=\"$lang_vars{cambiar_explic_message}\"></form></td>";

# NET32
if ( ( $BM == 31 || $BM == 32 ) && $ip_version eq "v4" ) {
    print "<td width=\"32px\"><img src=\"$server_proto://$base_uri/imagenes/reserve_range_dis.png\" alt=\"disabled\" title=\"$disabled_message\"></td><td width=\"25px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_sincred.cgi\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"sinc_button\" title=\"$lang_vars{sinc_explic_message}\" $onclick_confirmation_sinc></form></td>    <td width=\"25px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_discover_net_snmp_form.cgi\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"discover_snmp_button\" title=\"$lang_vars{discover_snmp_explic_message}\"></form></td>     <td width=\"35px\"><img src=\"$server_proto://$base_uri/imagenes/split_dis.png\" alt=\"disabled\" title=\"$disabled_message\"></td><td width=\"22px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_vaciarred.cgi\"><input name=\"referer\" type=\"hidden\" value=\"host_list_view\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"vaciar_button\" title=\"$lang_vars{clear_explic_message}\" $onclick_confirmation_clear></form></td>   <td width=\"25px\">$create_zone_file_button</td><td width=\"25px\">$delete_button</td>";
} elsif ( $BM >= 20 && $ip_version eq "v4" ) {

    print "<td width=\"32px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_reserverange_form.cgi\"><input name=\"referer\" type=\"hidden\" value=\"host_list_view\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"loc\" type=\"hidden\" value='$loc'><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"rangos_button\" title=\"$lang_vars{reservar_explic_message}\"></form></td><td width=\"25px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_sincred.cgi\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"sinc_button\" title=\"$lang_vars{sinc_explic_message}\" $onclick_confirmation_sinc></form></td>    <td width=\"25px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_discover_net_snmp_form.cgi\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"discover_snmp_button\" title=\"$lang_vars{discover_snmp_explic_message}\"></form></td>     <td width=\"35px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_splitred_form.cgi\"><input name=\"referer\" type=\"hidden\" value=\"host_list_view\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"split_button\" title=\"$lang_vars{split_explic_message}\"></form></td><td width=\"22px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_vaciarred.cgi\"><input name=\"referer\" type=\"hidden\" value=\"host_list_view\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"vaciar_button\" title=\"$lang_vars{clear_explic_message}\" $onclick_confirmation_clear></form></td>   <td width=\"25px\">$create_zone_file_button</td><td width=\"25px\">$delete_button</td>";
} elsif ( $ip_version eq "v6" ) {
    print "<td width=\"25px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_sincred.cgi\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"sinc_button\" title=\"$lang_vars{sinc_explic_message}\" $onclick_confirmation_sinc></form></td>    <td width=\"25px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_discover_net_snmp_form.cgi\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"discover_snmp_button\" title=\"$lang_vars{discover_snmp_explic_message}\"></form></td>     <td width=\"35px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_splitred_form.cgi\"><input name=\"referer\" type=\"hidden\" value=\"host_list_view\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"split_button\" title=\"$lang_vars{split_explic_message}\"></form></td><td width=\"22px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_vaciarred.cgi\"><input name=\"referer\" type=\"hidden\" value=\"host_list_view\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"vaciar_button\" title=\"$lang_vars{clear_explic_message}\" $onclick_confirmation_clear></form></td> <td width=\"25px\">$create_zone_file_button</td><td width=\"25px\">$delete_button</td>";
} else {
    print "<td width=\"32px\"><img src=\"$server_proto://$base_uri/imagenes/reserve_range_dis.png\" alt=\"disabled\" title=\"$disabled_message\"></td><td width=\"25px\"><img src=\"$server_proto://$base_uri/imagenes/sync_dns_dis.png\" alt=\"disabled\" title=\"$disabled_message\"></td><td width=\"26px\"><img src=\"$server_proto://$base_uri/imagenes/discover_snmp_dis.png\" alt=\"disabled\" title=\"$disabled_message\"></td><td width=\"35px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_splitred_form.cgi\"><input name=\"referer\" type=\"hidden\" value=\"host_list_view\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"split_button\" title=\"$lang_vars{split_explic_message}\"></form></td><td width=\"22px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_vaciarred.cgi\"><input name=\"referer\" type=\"hidden\" value=\"host_list_view\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"vaciar_button\" title=\"$lang_vars{clear_explic_message}\"></form></td> <td width=\"25px\">$create_zone_file_button</td><td width=\"25px\">$delete_button</td>";
}

if ( $BM >= 20 && $ip_version eq "v4" )  {
    print "<td width=\"20px\"></td><td align=\"right\"><form method=\"POST\" action=\"$server_proto://$base_uri/ip_show_red_overview.cgi\" style=\"display:inline\"><input type=\"hidden\" name=\"view\" value=\"long\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" class=\"long_view_button\" value=\"\" title=\"$lang_vars{vista_larga_message}\" name=\"B1\"></form><form method=\"POST\" action=\"$server_proto://$base_uri/ip_show_red_overview.cgi\" style=\"display:inline\"><input type=\"hidden\" name=\"view\" value=\"short\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"hidden\" name=\"ip_version\" value=\"$ip_version\"><input type=\"submit\" class=\"short_view_button\" value=\"\" title=\"$lang_vars{vista_corta_message}\"name=\"B1\"></form></td></tr></table><br>\n";
} else {
    print "<td width=\"20px\"></td><td></td></tr></table><br>\n";
}

    if ( defined($start_entry_hosts) ) {
            print "</td><td valign=\"top\">$pages_links</td>\n" if $pages_links ne "NO_LINKS";
    }
}


sub PrintIpTab {
my ( $self,$client_id, $ip_hash, $first_ip_int, $last_ip_int, $script, $knownhosts, $boton, $red_num, $red_loc, $vars_file,$anz_values_hosts,$start_entry_hosts,$entries_per_page_hosts,$host_order_by,$host_sort_helper_array_ref,$client_independent,$ip_version,$search_index,$search_hostname,$changed_host_id,$advanced_search_hash ) = @_;


$red_num="" if ! $red_num;
my %lang_vars = $self->_get_vars("$vars_file");
my $cgi_dir = $self->get_cgi_dir();
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my %rangos=$self->get_rangos_hash_host_comentario("$client_id");
my @custom_columns = $self->get_custom_host_columns("$client_id");
my %custom_columns_values=$self->get_custom_host_column_values_host_hash("$client_id","$red_num");
my @cc_ids=$self->get_custom_host_column_ids("$client_id");
my %clients_hash=$self->get_clients_hash("$client_id");
my @config = $self->get_config("$client_id");
my %device_cm_hash=$self->get_device_cm_hash("$client_id","","","host_id");
my $ocs_enabled=$config[0]->[8];
$start_entry_hosts = Math::BigInt->new("$start_entry_hosts");
$anz_values_hosts = Math::BigInt->new("$anz_values_hosts");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my %values_passwords=$self->get_device_key_exists_hash("$client_id");
my @global_config = $self->get_global_config("$client_id");
my $global_dyn_dns_updates_enabled=$global_config[0]->[19] || "no";
my $global_acl_management_enabled=$global_config[0]->[20] || "no";
my $global_limit_cc_output_enabled=$global_config[0]->[24] || "no";
my %tag_hash_obj = $self->get_tags_hash_object("$client_id", "host");
my %tag_hash = $self->get_tag_hash("$client_id");
my @tag_column=$self->get_custom_host_column_ids_from_name("$client_id","Tag");
my $tag_cc_id=$tag_column[0][0] || "";
my $user_management_enabled=$global_config[0]->[13] || "";
my $loc_hash=$self->get_loc_hash("$client_id");
my $locs_ro_perm = $self->{locs_ro_perm} || "";
my $locs_rw_perm = $self->{locs_rw_perm} || "";
my $cc_id_vlan = $self->get_custom_host_column_id_from_name_client("$client_id", "VLAN") || "";
my $cc_id_sec_zone = $self->get_custom_host_column_id_from_name_client("$client_id", "Sec_Zone") || "";

my $CM_show_hosts=$self->{CM_show_hosts} || 0;
my $CM_show_hosts_by_jobs=$self->{CM_show_hosts_by_jobs} || 0;
my $password_management_enabled=$self->{password_management_enabled} || 0;

my $match = $self->{match} || "";

my $redes_hash;
$redes_hash=$self->get_redes_hash("$client_id") if $host_order_by eq "SEARCH" || $CM_show_hosts || $CM_show_hosts_by_jobs;

$host_order_by = "IP_auf" if ! $host_order_by;
$client_independent = "" if ! $client_independent;
$changed_host_id = "" if ! $changed_host_id;

my %changed_host_id=();
$changed_host_id = \%changed_host_id if ! $changed_host_id;

$search_index = "" if ! $search_index;
my $values_lines;

#URL PRTG: get PRTG credentials
my $prtg_user;
my $prtg_pass;
my $prtg_conf="../priv/prtg.conf";
if ( -r $prtg_conf ) {
    open(PRTG_CONF,"<$prtg_conf");
    while (<PRTG_CONF>) {
        if ( $_ =~ /^username/ ) {
            $_ =~ /username=(.*)/;
            $prtg_user=$1 || "";
        } elsif ( $_ =~ /^password/ ) {
            $_ =~ /password=(.*)/;
            $prtg_pass=$1 || "";
        }
    }
    close PRTG_CONF;
}


print <<EOF;
<script language="JavaScript" type="text/javascript" charset="utf-8">
<!--
function checkhost(IP,HOSTNAME,CLIENT_ID,IP_VERSION,RED_NUM)
{
var opciones="toolbar=no,right=100,top=100,width=550,height=370", i=0;
var URL="$server_proto://$base_uri/ip_checkhost.cgi?ip=" + IP + "&hostname=" + HOSTNAME + "&client_id=" + CLIENT_ID + "&ip_version=" + IP_VERSION + "&red_num=" + RED_NUM; 
host_info=window.open(URL,"",opciones);
}
-->
</script>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('scrollx');
var y = readCookie('scrolly');
window.scrollTo(x, y);
eraseCookie('scrollx')
eraseCookie('scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('scrollx', x, 0);
createCookie('scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

// -->
</SCRIPT>

<table id='networkTable' border="0" style=\"border-collapse:collapse\" width="100%">

EOF
##netvicious change id='networkTable'...

my $cc_anz=@custom_columns;


#	$ip_order_by = "IP_auf" if $knownhosts eq "libre"; 

my $order_by = "ab";
my $ip_order_by = "IP_auf";
my $hostname_order_by = "hostname_auf";
my $description_order_by = "description_auf";
my $loc_order_by = "loc_auf";
my $type_order_by = "cat_auf";
my $ai_order_by = "AI_auf";
my $comentario_order_by = "comentario_auf";

if ( $host_order_by eq "IP_auf" || $host_order_by eq "IP" ) {
    $ip_order_by = "IP_ab";
    $order_by = "auf";
} elsif ( $host_order_by eq "hostname_auf" || $host_order_by eq "hostname" || $host_order_by eq "SEARCH" ) {
    $hostname_order_by = "hostname_ab";
    $order_by = "auf";
} elsif ( $host_order_by eq "description_auf" ) {
    $description_order_by = "description_ab";
    $order_by = "auf";
} elsif ( $host_order_by eq "loc_auf" ) {
    $loc_order_by = "loc_ab";
    $order_by = "auf";
} elsif ( $host_order_by eq "cat_auf" ) {
    $type_order_by = "cat_ab";
    $order_by = "auf";
} elsif ( $host_order_by eq "AI_auf" ) {
    $ai_order_by = "AI_ab";
    $order_by = "auf";
} elsif ( $host_order_by eq "AI_ab" ) {
    $ai_order_by = "AI_auf";
    $order_by = "ab";
} elsif ( $host_order_by eq "comentario_auf" ) {
    $comentario_order_by = "comentario_ab";
    $order_by = "auf";
}


my $start_entry_hosts_form = $start_entry_hosts;
$start_entry_hosts_form = "0" if $start_entry_hosts >= $anz_values_hosts; 

my $form_hidden_values="";
if ( $host_order_by ne "SEARCH" ) {
    $form_hidden_values="<input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"loc\" type=\"hidden\" value=\"$red_loc\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts_form\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\">";
}
if ( $CM_show_hosts_by_jobs ) {
    $form_hidden_values.="<input name=\"job_group\" type=\"hidden\" value=\"$CM_show_hosts_by_jobs\">";
}

my ($cc_ele, $cc_table,$cc_table_fill, $cc_order_by);
my $n=0;

$cc_table = "" if ! $cc_table;
$cc_table_fill = "" if ! $cc_table_fill;
if ( $host_order_by =~ /^-1_/ ) {
    $host_order_by =~ s/^-1_//;
} else {
    $host_order_by =~ s/^\d+_//;
}

my ( $host_order_by_cc, $host_order_by_cc_link);
my $cc_CM_pc_id="";
my %vlan_red_num_hash;
my %sec_zone_red_num_hash;

foreach $cc_ele(@custom_columns) {
    if ( $host_order_by eq "${custom_columns[$n]->[0]}_auf" || $host_order_by eq "${custom_columns[$n]->[0]}" ) {
        $host_order_by_cc = "${custom_columns[$n]->[3]}_${custom_columns[$n]->[0]}_ab";
        $host_order_by_cc_link = "${custom_columns[$n]->[3]}_${custom_columns[$n]->[0]}_auf";
        $order_by = "auf";
        $host_order_by = $host_order_by_cc_link;
    } elsif ( $host_order_by =~ /^${custom_columns[$n]->[0]}_ab/ ) {
        $host_order_by_cc = "${custom_columns[$n]->[3]}_${custom_columns[$n]->[0]}_auf";
        $host_order_by_cc_link = "${custom_columns[$n]->[3]}_${custom_columns[$n]->[0]}_ab";
        $order_by = "ab";
        $host_order_by = $host_order_by_cc_link;
    } else {
        $host_order_by_cc = "${custom_columns[$n]->[3]}_${custom_columns[$n]->[0]}_auf";
    }

	my $cc_name = ${custom_columns[$n]->[0]};  

    if ( $host_order_by ne "SEARCH" ) {
        my $cgi_script;
		if ( $cc_name eq "VLAN" || $cc_name eq "Sec_Zone"  ){
			$n++;
			next;
		}
        if ( $CM_show_hosts ) {
            $cgi_script="res/cm/ip_show_cm_hosts.cgi";
        } elsif ( $CM_show_hosts_by_jobs ) {
            $cgi_script="res/cm/ip_list_device_by_job.cgi";
        } else {
            $cgi_script="ip_show.cgi";
        }
        $cc_table = $cc_table . "<td align=\"center\" nowrap><b><form method=\"POST\" action=\"$server_proto://$base_uri/$cgi_script\" style=\"display:inline\">$form_hidden_values<input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by_cc\"><input type=\"submit\" class=\"host_table_head\" value=\"$custom_columns[$n]->[0]\" name=\"B1\"></form></b></td>";
    } else {
        $cc_table = $cc_table . "<td align=\"center\" nowrap><b>$custom_columns[$n]->[0]</b></td>";
    }
    
    $cc_table_fill = $cc_table_fill . "<td></td>";

    ### CM
    if ( $cc_name eq "CM" ) {
        $cc_CM_pc_id=${custom_columns[$n]->[3]};
    }
    ## Line - Device
    if ( $cc_name eq "Line" ) {
        $values_lines=$self->get_ll_hash("$client_id");
    }
	## VLAN
    if ( $cc_name eq "VLAN" && $host_order_by eq "SEARCH" ) {
		%vlan_red_num_hash = $self->get_cc_name_net_id_hash("$client_id","VLAN");
	}
	## Sec_Zone
    if ( $cc_name eq "Sec_Zone" && $host_order_by eq "SEARCH" ) {
		%sec_zone_red_num_hash = $self->get_cc_name_net_id_hash("$client_id","Sec_Zone");
	}

    $n++;
}


$cc_table = "" if ! $custom_columns[0];

##HEADLINE
my $ocs_fill = "";
$ocs_fill="<td></td>" if $ocs_enabled eq "yes";
my $password_management_enabled_fill = "";
#	$password_management_enabled_fill="<td></td>" if $password_management_enabled_fill;
$password_management_enabled_fill="<td width=\"22px\"></td>" if $password_management_enabled;
my $fetch_switchinfo_fill="";
$fetch_switchinfo_fill="<td width=\"20px\"></td>";

my $acl_management_enabled_fill="";
$acl_management_enabled_fill="<td width=\"20px\" class=\"host_table_head\">$lang_vars{acl_message}</td>" if $global_acl_management_enabled eq "yes";

if ( $host_order_by ne "SEARCH" ) {
    my $network_column_show="";
    my $cgi_script;
    if ( $CM_show_hosts ) {
        $cgi_script="res/cm/ip_show_cm_hosts.cgi";
        $network_column_show="<td align=\"center\"><b>$lang_vars{redes_message}</b></td>";
    } elsif ( $CM_show_hosts_by_jobs ) {
        $cgi_script="res/cm/ip_list_device_by_job.cgi";
        $network_column_show="<td align=\"center\"><b>$lang_vars{redes_message}</b></td>";
    } else {
        $cgi_script="ip_show.cgi";
    }

    my $CM_show_hosts_by_jobs_column="";
    if ( $CM_show_hosts_by_jobs ) {
        $CM_show_hosts_by_jobs_column="<td width=\"20px\"><form method=\"POST\" action=\"$server_proto://$base_uri/$cgi_script\" style=\"display:inline\">$form_hidden_values<input name=\"host_order_by\" type=\"hidden\" value=\"$ip_order_by\"><input type=\"submit\" class=\"host_table_head\" value=\"$lang_vars{job_name_message}\" name=\"B1\"></form></td>";
    }

    print "<tr height=\"24px\"><td width=\"20px\"></td><td width=\"12px\"></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/$cgi_script\" style=\"display:inline\">$form_hidden_values<input name=\"host_order_by\" type=\"hidden\" value=\"$ip_order_by\"><input type=\"submit\" class=\"host_table_head\" value=\"IP\" name=\"B1\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/$cgi_script\" style=\"display:inline\">$form_hidden_values<input name=\"host_order_by\" type=\"hidden\" value=\"$hostname_order_by\"><input type=\"submit\" class=\"host_table_head\" value=\"$lang_vars{hostname_message}\" name=\"B1\"></form></td>$CM_show_hosts_by_jobs_column<td><form method=\"POST\" action=\"$server_proto://$base_uri/$cgi_script\" style=\"display:inline\">$form_hidden_values<input name=\"host_order_by\" type=\"hidden\" value=\"$description_order_by\"><input type=\"submit\" class=\"host_table_head\" value=\"$lang_vars{description_message}\" name=\"B1\"></form></td><td align=\"center\"><form method=\"POST\" action=\"$server_proto://$base_uri/$cgi_script\" style=\"display:inline\">$form_hidden_values<input name=\"host_order_by\" type=\"hidden\" value=\"$loc_order_by\"><input type=\"submit\" class=\"host_table_head\" value=\"$lang_vars{loc_message}\" name=\"B1\"></form></td><td align=\"center\"><form method=\"POST\" action=\"$server_proto://$base_uri/$cgi_script\" style=\"display:inline\">$form_hidden_values<input name=\"host_order_by\" type=\"hidden\" value=\"$type_order_by\"><input type=\"submit\" class=\"host_table_head\" value=\"$lang_vars{tipo_message}\" name=\"B1\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/$cgi_script\" style=\"display:inline\">$form_hidden_values<input name=\"host_order_by\" type=\"hidden\" value=\"$ai_order_by\"><input type=\"submit\" class=\"host_table_head\" value=\"AI\" name=\"B1\"></form></td><td><b><form method=\"POST\" action=\"$server_proto://$base_uri/$cgi_script\" style=\"display:inline\">$form_hidden_values<input name=\"host_order_by\" type=\"hidden\" value=\"$comentario_order_by\"><input type=\"submit\" class=\"host_table_head\" value=\"$lang_vars{comentario_message}\" name=\"B1\"></form></td>${cc_table} ${acl_management_enabled_fill} ${network_column_show} ${ocs_fill} ${password_management_enabled_fill}<td></td><td></td></tr>\n";

} else {
    my $client_title_show="";	
    if ( $client_independent eq "yes" ) {
        $client_title_show="<td><b>$lang_vars{client_message}</b></td>";
    }
    print "<tr height=\"24px\"><td></td>$client_title_show<td width=\"12px\" nowrap></td><td><b>IP</b></td><td><b>$lang_vars{hostname_message}</b></td><td><b>$lang_vars{description_message}</b></td><td align=\"center\"><b>$lang_vars{loc_message}</b></td><td align=\"center\"><b>$lang_vars{tipo_message}</b></td><td><b>AI</b></td><td><b>$lang_vars{comentario_message}</b></td>${cc_table} ${acl_management_enabled_fill} <td align=\"center\"><b>$lang_vars{redes_message}</b></td>${ocs_fill} ${password_management_enabled_fill}<td></td><td></td></tr>\n";
}
##/HEADLINE

my ($i,$ip_int,$ip,$hostname,$host_descr,$loc,$cat,$int_admin,$comentario,$update_type,$alive,$last_response,$range_id,$int_admin_on,$host_id);
my ($host_exists,$hostcheck,$lastresp,$edit_button,$delete_button,$history_button,$hostname_chequed,$input_link);


my $color="white";
my $sort = "sort";
my $ip_int_helper;

my $last_entry = $start_entry_hosts + $entries_per_page_hosts;
$i=0;

my $sort_order_ref = sub {
    if ( $order_by =~ /ab/ ) {
        lc ${b} cmp lc ${a};
    } else {
        if ( $knownhosts eq "hosts" ) {
            my $A=$ip_hash->{$a}[11];
            my $B=$ip_hash->{$b}[11];
            ${A} <=> ${B};
        } else {
            lc ${a} cmp lc ${b};
        }
    }
};

$i=0;

my ($ip_show,$ip_compressed);
my $anz_ip_hash = scalar keys %$ip_hash;
my $red_num_form=$red_num;
my $red_num_form_edit=$red_num;
my $stylename="show_detail_hosts";
my $result_limited=0;
my $last_backup_date="";
my $last_backup_status="";

foreach my $keys ( sort $sort_order_ref keys %{$ip_hash} ) {

    last if $i == $entries_per_page_hosts;

    if ( $host_order_by eq "SEARCH" && $i == 500 ) {
        $result_limited=1;
        last;
    }
    $i++;

    next if ! defined($ip_hash->{$keys}[0]);
    $ip_int=$ip_hash->{$keys}[11];
    $ip = $ip_hash->{$keys}[0];
    $ip_version = $ip_hash->{$keys}[16] || "$ip_version";
    if ( $ip_version eq "v6" ) {
        $ip_compressed = ip_compress_address ($ip, 6);
        $ip_show = $ip_compressed;
    } else {
        $ip_show = $ip;
    }
    $hostname = $ip_hash->{$keys}[1] || "";
    $hostname = "" if $hostname eq "NULL";
    $host_descr = $ip_hash->{$keys}[2] || "";
    $host_descr = "" if $host_descr eq "NULL";
    $loc = $ip_hash->{$keys}[3];
    if ( (! $loc || $loc eq "NULL") && $red_loc && $red_loc ne "NULL" ) {
        $loc = "$red_loc";
    }
    $loc = "" if ! $loc || $loc eq "NULL";
    $cat = $ip_hash->{$keys}[4];
    $cat = "" if $cat eq "NULL";
    $int_admin = $ip_hash->{$keys}[5] || "";
    $int_admin_on = "";
    $int_admin_on = "x" if $int_admin eq "y";
    $comentario = $ip_hash->{$keys}[6] || "";
    $comentario = "" if $comentario eq "NULL";
    $comentario =~ s//<br>/g;
    $comentario =~ s/\n/<br>/g;
    $comentario =~ s/\r/<br>/g;
    $comentario =~ s/<br><br>/<br>/g;
    $update_type = $ip_hash->{$keys}[7] || "";
    $update_type = "" if $update_type eq "NULL";
    $alive = $ip_hash->{$keys}[8];
    $last_response = $ip_hash->{$keys}[9];
    $range_id = $ip_hash->{$keys}[10];
    $host_id = $ip_hash->{$keys}[12];
    if ( $host_order_by eq "SEARCH" ) {
        $red_num_form = $ip_hash->{$keys}[13];
        $red_num_form_edit = $red_num_form;
    } elsif ( $red_num ) {
        $red_num_form=$red_num;
        $red_num_form_edit = $red_num_form;
    } elsif ( $CM_show_hosts || $CM_show_hosts_by_jobs) {
        $red_num_form="";
        $red_num_form_edit = $ip_hash->{$keys}[13];
    } else {
        $red_num_form = $ip_hash->{$keys}[13];
        $red_num_form_edit = $red_num_form;
    }
    my $red_descr = $ip_hash->{$keys}[14] || "";
    $client_id = $ip_hash->{$keys}[15] || "$client_id";
    my $CM_show_hosts_by_jobs_job_name = $ip_hash->{$keys}[17] || "";
    $CM_show_hosts_by_jobs_job_name = "" if $CM_show_hosts_by_jobs_job_name =~ /^\d$/;

    # check permissions
    my $loc_id = $loc_hash->{"$loc"} || "-1";
    my $has_loc_rw_perm = 0;

    if ( $user_management_enabled eq "yes" && $loc_id != "-1" ) {
        if ( $locs_rw_perm eq "9999" || $locs_rw_perm =~ /^$loc_id$/ || $locs_rw_perm =~ /^${loc_id}_/ || $locs_rw_perm =~ /_${loc_id}$/ || $locs_rw_perm =~ /_${loc_id}_/ ) {
            # user has rw perm
            $has_loc_rw_perm = 1;
        }

        if ( $locs_ro_perm eq "9999" || $locs_ro_perm =~ /^$loc_id$/ || $locs_ro_perm =~ /^${loc_id}_/ || $locs_ro_perm =~ /_${loc_id}$/ || $locs_ro_perm =~ /_${loc_id}_/ ) {
            # user has ro perm 
        } elsif ( ! $has_loc_rw_perm ) {
            # user has no permission for this site - skip entry
            next;
        }
    } else {
        $has_loc_rw_perm = 1;
    }

    my $disabled_ro_only = "";
    $disabled_ro_only = 1 if $has_loc_rw_perm == 0;

    $last_backup_date = $device_cm_hash{$host_id}[10] || "";
    if ( exists ($device_cm_hash{$host_id}[11]) ) {
        $last_backup_status = $device_cm_hash{$host_id}[11];
    } else {
        $last_backup_status = -1;
    }


    my $search_index_form = "";
    $search_hostname = "" if ! $search_hostname;
    my $search_hostname_form = "";
    if ( $host_order_by eq "SEARCH" ) {
        $search_index_form="<input name=\"search_index\" type=\"hidden\" value=\"$search_index\">";
        $search_hostname_form="<input name=\"search_hostname\" type=\"hidden\" value=\"$search_hostname\">";
        if ( $match ) {
            $search_hostname_form .= "<input name=\"match\" type=\"hidden\" value=\"$search_hostname\">";
        }
    }

    my $onclick_confirmation_delete;
    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$hostname\',\'delete\');\"";
    } else {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();\"";
    }

    my $CM_show_hosts_hidden="";
    if ( $CM_show_hosts ) {
        $CM_show_hosts_hidden="<input name=\"CM_show_hosts\" type=\"hidden\" value=\"$CM_show_hosts\">";
    }
    my $CM_show_hosts_by_jobs_hidden="";
    if ( $CM_show_hosts_by_jobs ) {
        $CM_show_hosts_by_jobs_hidden="<input name=\"CM_show_hosts_by_jobs\" type=\"hidden\" value=\"$CM_show_hosts_by_jobs\">";
    }

    my $acl_management_enabled_link = "";
    if ( ! $disabled_ro_only ) {
        $acl_management_enabled_link = "<td align=\"center\"><a href=\"$server_proto://$base_uri/ip_search_acl_connection.cgi?client_id=$client_id&match_ip=$ip\" class=\"input_url\">acl</a></td>\n" if $global_acl_management_enabled eq "yes";
    } else {
        $acl_management_enabled_link = "";
    }

    my ($ocs_button_fill, $password_management_enabled_fill_button, $key_button, $fetch_switchinfo_button);
    $edit_button=$delete_button=$history_button=$ocs_button_fill=$password_management_enabled_fill_button=$key_button=$fetch_switchinfo_button="";
    if ( ! $disabled_ro_only ) {
        $edit_button="<form method=\"POST\" action=\"$server_proto://$base_uri/$script\"><input name=\"ip\" type=\"hidden\" value=\"$ip_int\"><input name=\"hostname\" type=\"hidden\" value=\"$hostname\"><input name=\"host_descr\" type=\"hidden\" value=\"$host_descr\"><input name=\"loc\" type=\"hidden\" value='$loc'><input name=\"cat\" type=\"hidden\" value=\"$cat\"><input name=\"int_admin\" type=\"hidden\" value=\"$int_admin\"><input name=\"host_exist\" type=\"hidden\" value=\"yes\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num_form_edit\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts_form\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"anz_values_hosts\" type=\"hidden\" value=\"$anz_values_hosts\"><input name=\"host_id\" type=\"hidden\" value=\"$host_id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"> $search_index_form $search_hostname_form $CM_show_hosts_hidden $CM_show_hosts_by_jobs_hidden <input type=\"submit\" value=\"\" name=\"B2\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\" onclick=\"saveScrollCoordinates()\"></form>";
        $delete_button="<form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_deleteip.cgi\"><input name=\"ip_int\" type=\"hidden\" value=\"$ip_int\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num_form\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts_form\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"anz_values_hosts\" type=\"hidden\" value=\"$anz_values_hosts\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"> $search_index_form $search_hostname_form $CM_show_hosts_hidden $CM_show_hosts_by_jobs_hidden <input type=\"submit\" value=\"\" name=\"B2\" class=\"delete_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form>";
        $history_button="<form method=\"POST\" action=\"$server_proto://$base_uri/ip_show_history.cgi\"><input name=\"ip\" type=\"hidden\" value=\"$ip\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"history_button\"></form>";
#			my $ocs_button_fill = "";
        $ocs_button_fill="<td width=\"30px\"><form method=\"POST\" action=\"$server_proto://$base_uri/ip_fetch_host_ocs.cgi\" title=\"$lang_vars{fetch_from_ocs_message}\"><input name=\"host_id\" type=\"hidden\" value=\"$host_id\"><input name=\"ip\" type=\"hidden\" value=\"$ip\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num_form\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"ocs_button\"></form></td>" if $ocs_enabled eq "yes";
#			my $password_management_enabled_fill_button="";
        $password_management_enabled_fill_button = "<td width=\"22px\"><img src=\"$server_proto://$base_uri/imagenes/key_disabled.png\" title=\"$lang_vars{key_management_disabled_message}\" alt=\"key\"></td>" if $password_management_enabled && ! $host_id;
        my $has_pass=$values_passwords{$host_id} || "";
#			my $key_button;
        if ( ! $has_pass ) {
            $key_button="key_button";
        } else {
            $key_button="key_has_key_button";
        }
        $password_management_enabled_fill_button="<td width=\"22px\"><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_manage_device_password.cgi\" title=\"$lang_vars{manage_device_passwords_message}\"><input name=\"host_id\" type=\"hidden\" value=\"$host_id\"><input name=\"ip\" type=\"hidden\" value=\"$ip\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num_form\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"$key_button\"></form></td>" if $password_management_enabled && $host_id;
#			my $fetch_switchinfo_button="";
        $fetch_switchinfo_button="<td width=\"20px\"><form method=\"POST\" action=\"$server_proto://$base_uri/ip_fetch_switchinfo_form.cgi\" title=\"$lang_vars{fetch_switchinfo_message}\"><input name=\"host_id\" type=\"hidden\" value=\"$host_id\"><input name=\"ip\" type=\"hidden\" value=\"$ip\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num_form\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"info_button\"></form></td>";
    }
    

    if ( $color eq "white" ) {
        $color = "#f2f2f2";
        $input_link="input_link_search_f2";
    } else {
        $color = "white";
        $input_link="input_link_search_w";
    }
    if ( $host_id && ( defined $changed_host_id->{"$host_id"} || defined $changed_host_id->{"$ip_int"} || defined $changed_host_id->{"$ip"} )) {
#		if ( $host_id && ( $host_id eq $changed_host_id ) || ( $ip_int eq $changed_host_id )) {
        $color="#a6e8a6";
        $input_link="input_link_search_g";
    }
    if ( $hostname =~ /^unknown$/ ) {
        $hostname_chequed="<font color=\"grey\"><i>$hostname</i></font>\n";
    } else {
        $hostname_chequed="$hostname";
    }
    if ( $alive eq "1" ) {
        $hostcheck='hostcheck_ok';
    } elsif ( $alive eq "0" ) {
        $hostcheck='hostcheck_failed';
    } else {
        if ( $hostname) {
             $hostcheck='hostcheck_never_checked';
        } else {
             $hostcheck='hostcheck_unused';
             $delete_button=' ';
        }
    }
    $lastresp="$lang_vars{never_checked_message}";
    if ( $last_response ) {
        $lastresp = strftime "%F %H:%M:%S", localtime($last_response);
    }
    if ( $range_id ne "-1" ) {
        my $host_id = $ip_hash->{$keys}[12];
        my $range_comentario=$rangos{"$host_id"};
        my $comentario_show;
        if ( $comentario ) {
            $comentario = "[$range_comentario]<br>$comentario";
        } else {
            $comentario = "[$range_comentario]";
        }
    }
    my $custom_column_val="";
    $cc_table_fill="";
    foreach ( @cc_ids ) {
        my $id=$_->[0];
        my $pc_id=$_->[1];
        if ( $custom_columns_values{"${id}_${host_id}"}[0] ) {
            my $cc_name = $custom_columns_values{"${id}_${host_id}"}[1];
            if ( $cc_name eq "vendor" ) {
                $custom_column_val=$custom_columns_values{"${id}_${host_id}"}[0];
                if ( $custom_column_val =~ /a10/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/a10.png\" title=\"A10 Networks\" alt=\"a10\"></td>";

                } elsif ( $custom_column_val =~ /accton/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/accton.png\" title=\"Accton Technology Corporation\" alt=\"accton\"></td>";
                } elsif ( $custom_column_val =~ /actiontec/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/actiontec.png\" title=\"Actiontec Electronics\" alt=\"actiontec\"></td>";
                } elsif ( $custom_column_val =~ /active/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/active.png\" title=\"Active Networks\" alt=\"active\"></td>";
                } elsif ( $custom_column_val =~ /adder/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/adder.png\" title=\"Adder\" alt=\"adder\"></td>";
                } elsif ( $custom_column_val =~ /adtran/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/adtran.png\" title=\"ADTRAN\" alt=\"adtran\"></td>";
                } elsif ( $custom_column_val =~ /aficio/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/aficio.png\" title=\"Aficio (Ricoh)\" alt=\"aficio\"></td>";
                } elsif ( $custom_column_val =~ /aerohive/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/aerohive.png\" title=\"Aerohive Networks\" alt=\"aerohive\"></td>";
                } elsif ( $custom_column_val =~ /alvaco/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/alvaco.png\" title=\"Alvaco Telecomunicaciones\" alt=\"alvaco\"></td>";
                } elsif ( $custom_column_val =~ /allied/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/allied.png\" title=\"Allied Telesis\"  alt=\"allied\"></td>";
                } elsif ( $custom_column_val =~ /alps/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/alps.png\" title=\"Alps\"  alt=\"alps\"></td>";
                } elsif ( $custom_column_val =~ /altiga/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/altiga.png\" title=\"Altiga (Cisco Systems)\" alt=\"cisco\"></td>";
                } elsif ( $custom_column_val =~ /arquimedes/i ) {
                                            $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/arquimedes.png\" title=\"Arquimedes Informatica\" alt=\"arquimedes\"></td>";
                } elsif ( $custom_column_val =~ /anitech/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/anitech.png\" title=\"Anitech\" alt=\"anitech\"></td>";
                } elsif ( $custom_column_val =~ /apc/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/apc.png\" title=\"APC - American Power Conversion Corp.\"  alt=\"apc\"></td>";
                } elsif ( $custom_column_val =~ /apple/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/apple.png\" title=\"Apple Inc.\" alt=\"apple\"></td>";
                } elsif ( $custom_column_val =~ /arbor/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/arbor.png\" title=\"Arbor Networks\" alt=\"arbor\"></td>";
                } elsif ( $custom_column_val =~ /arista/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/arista.png\" title=\"Arista Networks\" alt=\"arista\"></td>";
                } elsif ( $custom_column_val =~ /asante/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/asante.png\" title=\"Asante\" alt=\"asante\"></td>";
                } elsif ( $custom_column_val =~ /astaro/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/astaro.png\" title=\"Astaro GmbH\" alt=\"astaro\"></td>";
                } elsif ( $custom_column_val =~ /avaya/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/avaya.png\" title=\"Avaya Inc.\" alt=\"avaya\"></td>";
                } elsif ( $custom_column_val =~ /avocent/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/avocent.png\" title=\"Avocent\" alt=\"avocent\"></td>";
                } elsif ( $custom_column_val =~ /axis/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/axis.png\" title=\"Axis Communications\"  alt=\"axis\"></td>";
                } elsif ( $custom_column_val =~ /barracuda/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/barracuda.png\" title=\"Barracuda Networks\" alt=\"barracuda\"></td>";
                } elsif ( $custom_column_val =~ /billion/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/billion.png\" title=\"Billion Electric Co.\" alt=\"billion\"></td>";
                } elsif ( $custom_column_val =~ /belair/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/belair.png\" title=\"BelAir Networks\" alt=\"belair\"></td>";
                } elsif ( $custom_column_val =~ /bluecoat/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/bluecoat.png\" title=\"Blue Coat Systems\" alt=\"blue coat\"></td>";
                } elsif ( $custom_column_val =~ /boostedge/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/boostedge.png\" title=\"Boostedge\" alt=\"boostedge\"></td>";
                } elsif ( $custom_column_val =~ /borderware/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/watchguard.png\" title=\"Borderware (Watchguard)\" alt=\"borderware\"></td>";
                } elsif ( $custom_column_val =~ /brother/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/brother.png\" title=\"Brother\" alt=\"brother\"></td>";
                } elsif ( $custom_column_val =~ /broadcom/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/broadcom.png\" title=\"Broadcom Corporation\" alt=\"broadcom\"></td>";
                } elsif ( $custom_column_val =~ /brocade/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/brocade.png\" title=\"Brocade Communication Systems\" alt=\"brocade\"></td>";
                } elsif ( $custom_column_val =~ /buffalo/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/buffalo.png\" title=\"Buffalo Technology\" alt=\"buffalo\"></td>";
                } elsif ( $custom_column_val =~ /calix/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/calix.png\" title=\"Calix\" alt=\"calix\"></td>";
                } elsif ( $custom_column_val =~ /citrix/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/citrix.png\" title=\"Citrix Systems\" alt=\"citrix\"></td>";
                } elsif ( $custom_column_val =~ /canon/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/canon.png\" title=\"Canon\" alt=\"canon\"></td>";
                } elsif ( $custom_column_val =~ /cisco/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/cisco.png\" title=\"Cisco Systems\" alt=\"cisco\"></td>";
                } elsif ( $custom_column_val =~ /check.?point/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/checkpoint.png\" title=\"Check Point Software Technologies Ltd.\" alt=\"Check Point\"></td>";
                } elsif ( $custom_column_val =~ /carestream/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/carestream.png\" title=\"Carestream\" alt=\"Carestream\"></td>";
                } elsif ( $custom_column_val =~ /cyberoam/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/cyberoam.png\" title=\"Cyberoam (Elitecore Technologies Pvt.)\" alt=\"cyberoam\"></td>";
                } elsif ( $custom_column_val =~ /dell/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/dell.png\" title=\"Dell\" alt=\"dell\"></td>";
                } elsif ( $custom_column_val =~ /dlink|d-link/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/dlink.png\" title=\"D-Link Corporation\" alt=\"dlink\"></td>";
                } elsif ( $custom_column_val =~ /dialogic/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/dialogic.png\" title=\"Dialogic\" alt=\"dialogic\"></td>";
                } elsif ( $custom_column_val =~ /dothill/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/dothill.png\" title=\"Dothill Systems\" alt=\"dothill\"></td>";
                } elsif ( $custom_column_val =~ /draytek/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/draytek.png\" title=\"Draytec\" alt=\"draytek\"></td>";
                } elsif ( $custom_column_val =~ /eaton/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/eaton.png\" title=\"Eaton\" alt=\"eaton\"></td>";
                } elsif ( $custom_column_val =~ /eci telecom/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/eci.png\" title=\"ECI Telecom\" alt=\"eci\"></td>";
                } elsif ( $custom_column_val =~ /eeye/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/eeye.png\" title=\"eEye Digital Security\" alt=\"eeye\"></td>";
                } elsif ( $custom_column_val =~ /edgewater/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/edgewater.png\" title=\"Edgewater Networks\" alt=\"edgewater\"></td>";
                } elsif ( $custom_column_val =~ /emc/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/emc.png\" title=\"EMC Corporation\" alt=\"emc\"></td>";
                } elsif ( $custom_column_val =~ /emerson/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/emerson.png\" title=\"Emerson/Liebert\" alt=\"emerson\"></td>";
                } elsif ( $custom_column_val =~ /enterasys/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/enterasys.png\" title=\"Enterasys Networks\" alt=\"enterasys\"></td>";
                } elsif ( $custom_column_val =~ /epson/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/epson.png\" title=\"Seiko Epson Corp.\" alt=\"seiko\"></td>";
                } elsif ( $custom_column_val =~ /ericsson/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/ericsson.png\" title=\"Ericsson\" alt=\"ericsson\"></td>";
                } elsif ( $custom_column_val =~ /extreme/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/extreme.png\" title=\"Extreme Networks\" alt=\"extreme\"></td>";
                } elsif ( $custom_column_val =~ /extricom/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/extricom.png\" title=\"Extricom\" alt=\"extricom\"></td>";
                } elsif ( $custom_column_val =~ /f5/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/f5.png\" title=\"F5 Networks\" alt=\"f5\"></td>";
                } elsif ( $custom_column_val =~ /fluke/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/fluke.png\" title=\"Fluke Networks\" alt=\"fluke\"></td>";
                } elsif ( $custom_column_val =~ /force10/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/force10.png\" title=\"Force10 (Dell)\" alt=\"Force10\"></td>";
                } elsif ( $custom_column_val =~ /fortinet/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/fortinet.png\" title=\"Fortinet Inc.\" alt=\"fortinet\"></td>";
                } elsif ( $custom_column_val =~ /foundry/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/foundry.png\" title=\"Foundry Networks\" alt=\"foundry\"></td>";
                } elsif ( $custom_column_val =~ /fujitsu/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/fujitsu.png\" title=\"Fujitsu\" alt=\"fujitsu\"></td>";
                } elsif ( $custom_column_val =~ /general.electric/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/ge.png\" title=\"General Electric\" alt=\"general electric\"></td>";
                } elsif ( $custom_column_val =~ /h3c/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/h3c.png\" title=\"H3C Technologies\" alt=\"h3c\"></td>";
                } elsif ( $custom_column_val =~ /heidelberg/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/heidelberg.png\" title=\"Heidelberg\" alt=\"heidelberg\"></td>";
                } elsif ( $custom_column_val =~ /hitachi/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/hitachi.png\" title=\"Hitachi\" alt=\"hitachi\"></td>";
                } elsif ( $custom_column_val =~ /hp|hewlett.?packard/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/hp.png\" title=\"Hewlett-Packard Development Company\" alt=\"hp\"></td>";
                } elsif ( $custom_column_val =~ /huawei/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/huawei.png\" title=\"Huawei Technologies\" alt=\"huawei\"></td>";
                } elsif ( $custom_column_val =~ /ibm/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/ibm.png\" title=\"IBM International Business Machines Corp.\" alt=\"ibm\"></td>";
                } elsif ( $custom_column_val =~ /iboss/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/iboss.png\" title=\"iBoss Security -  Phantom Technologies Inc.\" alt=\"iboss\"></td>";
                } elsif ( $custom_column_val =~ /imperva/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/imperva.png\" title=\"Imperva\" alt=\"imperva\"></td>";
                } elsif ( $custom_column_val =~ /iomega/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/iomega.png\" title=\"Iomega (LenovoEMC)\" alt=\"iomega\"></td>";
                } elsif ( $custom_column_val =~ /juniper/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/juniper.png\" title=\"Juniper Networks\" alt=\"juniper\"></td>";
                } elsif ( $custom_column_val =~ /kasda/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/kasda.png\" title=\"KASDA Digital Technology\" alt=\"kasda\"></td>";
                } elsif ( $custom_column_val =~ /kemp/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/kemp.png\" title=\"KEMP Technologies\" alt=\"kasda\"></td>";
                } elsif ( $custom_column_val =~ /kodak/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/kodak.png\" title=\"Kodak\" alt=\"kodak\"></td>";
                } elsif ( $custom_column_val =~ /konica/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/konica.png\" title=\"Konica Minolta\" alt=\"minolta\"></td>";
                } elsif ( $custom_column_val =~ /kyocera/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/kyocera.png\" title=\"Kyocera\" alt=\"kyocera\"></td>";
                } elsif ( $custom_column_val =~ /lacie/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/lacie.png\" title=\"LaCie\" alt=\"lacie\"></td>";
                } elsif ( $custom_column_val =~ /lancom/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/lancom.png\" title=\"LANCOM Systems\" alt=\"lancom\"></td>";
                } elsif ( $custom_column_val =~ /lanier/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/lanier.png\" title=\"Lanier\" alt=\"lanier\"></td>";
                } elsif ( $custom_column_val =~ /lanner/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/lanner.png\" title=\"Lanner\" alt=\"lanner\"></td>";
                } elsif ( $custom_column_val =~ /lantronix/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/lantronix.png\" title=\"Lantronix\" alt=\"lantronix\"></td>";
                } elsif ( $custom_column_val =~ /lenovo/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/lenovo.png\" title=\"Lenovo\" alt=\"lenovo\"></td>";
                } elsif ( $custom_column_val =~ /lexmark/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/lexmark.png\" title=\"Lexmark\" alt=\"lexmark\"></td>";
                } elsif ( $custom_column_val =~ /^lg( electronics)?$/i ) {
                                            $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/lg.png\" title=\"LG Electronics\" alt=\"lg\"></td>";
                } elsif ( $custom_column_val =~ /liebert/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/liebert.png\" title=\"Emerson/Liebert\" alt=\"emerson\"></td>";
                } elsif ( $custom_column_val =~ /linksys/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/linksys.png\" title=\"Linksys (Belkin)\" alt=\"linksys\"></td>";
                } elsif ( $custom_column_val =~ /lifesize/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/lifesize.png\" title=\"Lifesize Communications\" alt=\"lifesize\"></td>";
                } elsif ( $custom_column_val =~ /(alcatel|lucent)/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/lucent-alcatel.png\" title=\"Alcatel-Lucent\" alt=\"alcatel\"></td>";
                } elsif ( $custom_column_val =~ /macafee/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/macafee.png\" title=\"MacAfee\" alt=\"macafee\"></td>";
                } elsif ( $custom_column_val =~ /megaware/i ) {
                                            $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/megaware.png\" title=\"MEGAWARE\" alt=\"megaware\"></td>";
                } elsif ( $custom_column_val =~ /meru/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/meru.png\" title=\"Meru Networks\" alt=\"meru\"></td>";
                } elsif ( $custom_column_val =~ /mikrotik/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/mikrotik.png\" title=\"Mikrotik\" alt=\"mikrotik\"></td>";
                } elsif ( $custom_column_val =~ /minolta/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/konica.png\" title=\"Konica Minolta\" alt=\"konica\"></td>";
                } elsif ( $custom_column_val =~ /microsemi/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/microsemi.png\" title=\"Microsemi\" alt=\"microsemi\"></td>";
                } elsif ( $custom_column_val =~ /microsoft/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/microsoft.png\" title=\"Microsoft\" alt=\"microsoft\"></td>";
                } elsif ( $custom_column_val =~ /mitsubishi/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/mitsubishi.png\" title=\"Mitsubishi\" alt=\"mitsubishi\"></td>";
                } elsif ( $custom_column_val =~ /mobileiron/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/mobileiron.png\" title=\"MobileIron\" alt=\"mobileiron\"></td>";
                } elsif ( $custom_column_val =~ /motorola/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/motorola.png\" title=\"Motorola\" alt=\"motorola\"></td>";
                } elsif ( $custom_column_val =~ /moxa/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/moxa.png\" title=\"Moxa\" alt=\"moxa\"></td>";
                } elsif ( $custom_column_val =~ /multitech/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/multitech.png\" title=\"Multitech Systems\" alt=\"multitech\"></td>";
                } elsif ( $custom_column_val =~ /nec/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/nec.png\" title=\"NEC alt=\"nec\"></td>";
                } elsif ( $custom_column_val =~ /netapp/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/netapp.png\" title=\"NetApp\" alt=\"netapp\"></td>";
                } elsif ( $custom_column_val =~ /netsweeper/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/netsweeper.png\" title=\"Netsweeper INC.\" alt=\"netsweeper\"></td>";
                } elsif ( $custom_column_val =~ /netgear/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/netgear.png\" title=\"Netgear\" alt=\"netgear\"></td>";
                } elsif ( $custom_column_val =~ /nimble/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/nimble.png\" title=\"Nimble Storage\" alt=\"nimble\"></td>";
                } elsif ( $custom_column_val =~ /nitro/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/nitro.png\" title=\"nitrosecurity INC.\" alt=\"netgear\"></td>";
                } elsif ( $custom_column_val =~ /nokia/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/nokia.png\" title=\"Nokia\" alt=\"nokia\"></td>";
                } elsif ( $custom_column_val =~ /nortel/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/nortel.png\" title=\"Nortel Networks\" alt=\"nortel\"></td>";
                } elsif ( $custom_column_val =~ /novell/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/novell.png\" title=\"Novell\" alt=\"novel\"></td>";
                } elsif ( $custom_column_val =~ /proxim/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/proxim.png\" title=\"Proxim Wireless Corporation\" alt=\"proxim\"></td>";
                } elsif ( $custom_column_val =~ /pure.?storage/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/purestorage.png\" title=\"Pure Storage\" alt=\"purestorage\"></td>";
                } elsif ( $custom_column_val =~ /oce/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/oce.png\" title=\"OCE\" alt=\"oce\"></td>";
                } elsif ( $custom_column_val =~ /oki.?data/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/oki.png\" title=\"Oki Data Americas\" alt=\"oki data\"></td>";
                } elsif ( $custom_column_val =~ /olivetti/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/olivetti.png\" title=\"Olivetti\" alt=\"olivetti\"></td>";
                } elsif ( $custom_column_val =~ /olympus/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/olympus.png\" title=\"Olympus\" alt=\"olympus\"></td>";
                } elsif ( $custom_column_val =~ /optibase/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/ovislink.png\" title=\"Optibase Technologies Ltd.\" alt=\"optibase\"></td>";
                } elsif ( $custom_column_val =~ /oracle/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/oracle.png\" title=\"Oracle\" alt=\"oracle\"></td>";
                } elsif ( $custom_column_val =~ /ovislink/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/ovislink.png\" title=\"Ovislink\" alt=\"ovislink\"></td>";
                } elsif ( $custom_column_val =~ /packetfront/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/packetfront.png\" title=\"PacketFront Holding AB\" alt=\"packetfront\"></td>";
                } elsif ( $custom_column_val =~ /panasonic/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/panasonic.png\" title=\"Panasonic\" alt=\"panasonic\"></td>";
                } elsif ( $custom_column_val =~ /passport/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/passport.png\" title=\"Passport Networks Inc.\" alt=\"passport\"></td>";
                } elsif ( $custom_column_val =~ /patton/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/patton.png\" title=\"Patton Electronics\" alt=\"patton\"></td>";
                } elsif ( $custom_column_val =~ /palo.?alto/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/palo_alto.png\" title=\"Paloalto Networks\" alt=\"paloalto\"></td>";
                } elsif ( $custom_column_val =~ /peplink/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/peplink.png\" title=\"Peplink\" alt=\"peplink\"></td>";
                } elsif ( $custom_column_val =~ /philips/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/philips.png\" title=\"Philips\" alt=\"Philips\"></td>";
                } elsif ( $custom_column_val =~ /pica8/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/pica8.png\" title=\"Pica8 Inc.\" alt=\"pica8\"></td>";
                } elsif ( $custom_column_val =~ /polycom/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/polycom.png\" title=\"Polycom\" alt=\"polycom\"></td>";
                } elsif ( $custom_column_val =~ /procurve/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/procurve.png\" title=\"Procurve (HP)\" alt=\"procurve\"></td>";
                } elsif ( $custom_column_val =~ /qnap/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/qnap.png\" title=\"QNAP Systems\" alt=\"QNAP\"></td>";
                } elsif ( $custom_column_val =~ /radvision/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/radvision.png\" title=\"Radware Ltd.\" alt=\"radvision\"></td>";
                } elsif ( $custom_column_val =~ /radware/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/radware.png\" title=\"Radware Ltd.\" alt=\"radware\"></td>";
                } elsif ( $custom_column_val =~ /rapid7/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/rapid7.png\" title=\"Rapid7\" alt=\"rapid7\"></td>";
                } elsif ( $custom_column_val =~ /raspberry/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/raspberry.png\" title=\"Raspberry Pi\" alt=\"Raspberry Pi\"></td>";
                } elsif ( $custom_column_val =~ /realtek/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/realtek.png\" title=\"Realtek Semiconductor Corp.\" alt=\"realtek\"></td>";
                } elsif ( $custom_column_val =~ /redback/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/redback.png\" title=\"Redback Networks\" alt=\"redback\"></td>";
                } elsif ( $custom_column_val =~ /reflex/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/reflex.png\" title=\"Reflex Systems LCC\" alt=\"redback\"></td>";
                } elsif ( $custom_column_val =~ /ricoh/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/ricoh.png\" title=\"Ricoh\" alt=\"ricoh\"></td>";
                } elsif ( $custom_column_val =~ /riverbed/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/riverbed.png\" title=\"Riverbed Technology\" alt=\"riverbed\"></td>";
                } elsif ( $custom_column_val =~ /riverstone/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/riverstone.png\" title=\"Riverstone Networks (Alcatel-Lucent)\" alt=\"riverstone\"></td>";
                } elsif ( $custom_column_val =~ /rsa/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/rsa.png\" title=\"RSA Security\" alt=\"rsa\"></td>";
                } elsif ( $custom_column_val =~ /ruckus/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/ruckus.png\" title=\"Ruckus Wireless\" alt=\"ruckus\"></td>";
                } elsif ( $custom_column_val =~ /samsung/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/samsung.png\" title=\"Samsung\" alt=\"samsung\"></td>";
                } elsif ( $custom_column_val =~ /savin/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/savin.png\" title=\"Savin\" alt=\"savin\"></td>";
                } elsif ( $custom_column_val =~ /seiko|infotec/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/seiko_infotec.png\" title=\"Seiko-Infotec\" alt=\"Seiko-Infotec\"></td>";
                } elsif ( $custom_column_val =~ /sharp/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/sharp.png\" title=\"Sharp Electronics\" alt=\"Sharp\"></td>";
                } elsif ( $custom_column_val =~ /shinko/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/shinko.png\" title=\"Shinko\" alt=\"shinko\"></td>";
                } elsif ( $custom_column_val =~ /siemens/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/siemens.png\" title=\"Siemens\" alt=\"siemens\"></td>";
                } elsif ( $custom_column_val =~ /silver.?peak/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/silver_peak.png\" title=\"Silver Peak Systems\" alt=\"silver peak\"></td>";
                } elsif ( $custom_column_val =~ /sipix/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/sipix.png\" title=\"Sipix\" alt=\"sipix\"></td>";
                } elsif ( $custom_column_val =~ /smc/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/smc.png\" title=\"SMC Networks\" alt=\"smc\"></td>";
                } elsif ( $custom_column_val =~ /sonicwall/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/sonicwall.png\" title=\"SONICWALL\" alt=\"sonicwall\"></td>";
                } elsif ( $custom_column_val =~ /sony/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/sony.png\" title=\"Sony Corporation\" alt=\"sony\"></td>";
                } elsif ( $custom_column_val =~ /sophos/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/sophos.png\" title=\"Sophos\" alt=\"sophos\"></td>";
                } elsif ( $custom_column_val =~ /sourcefire/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/sourcefire.png\" title=\"Sourcefire INC\" alt=\"sourcefire\"></td>";
                } elsif ( $custom_column_val =~ /stillsecure/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/stillsecure.png\" title=\"StillSecure\" alt=\"stillsecure\"></td>";
                } elsif ( $custom_column_val =~ /storagetek/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/storagetek.png\" title=\"Storagetek\" alt=\"storagetek\"></td>";
                } elsif ( $custom_column_val =~ /sun/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/sun.png\" title=\"Sun Microsystems\" alt=\"sun\"></td>";
                } elsif ( $custom_column_val =~ /supermicro/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/supermicro.png\" title=\"Supermicro\" alt=\"supermicro\"></td>";
                } elsif ( $custom_column_val =~ /star/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/star.png\" title=\"Star\" alt=\"star\"></td>";
                } elsif ( $custom_column_val =~ /stonesoft/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/stonesoft.png\" title=\"Stonesoft Corporation\" alt=\"stonesoft\"></td>";
                } elsif ( $custom_column_val =~ /symantec/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/symantec.png\" title=\"Symantec Corporation\" alt=\"symantec\"></td>";
                } elsif ( $custom_column_val =~ /synology/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/synology.png\" title=\"Synology\" alt=\"Synology\"></td>";
                } elsif ( $custom_column_val =~ /(tally|genicom)/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/tallygenicom.png\" title=\"Tally Genicom\" alt=\"tally genicom\"></td>";
                } elsif ( $custom_column_val =~ /tandberg/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/tandberg.png\" title=\"Tandberg (Cisco)\" alt=\"tandberg\"></td>";
                } elsif ( $custom_column_val =~ /tenda/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/tenda.png\" title=\"Shenzhen Tenda Technology\" alt=\"tenda\"></td>";
                } elsif ( $custom_column_val =~ /top.?layer/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/toplayer.png\" title=\"Toplayer Networks\" alt=\"toplayer\"></td>";
                } elsif ( $custom_column_val =~ /toshiba/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/toshiba.png\" title=\"Toshiba\" alt=\"toshiba\"></td>";
                } elsif ( $custom_column_val =~ /tp-link/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/tp-link.png\" title=\"TP-Link\" alt=\"TP-Link\"></td>";
                } elsif ( $custom_column_val =~ /thomson/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/thomson.png\" title=\"THOMSON\" alt=\"thomson\"></td>";
                } elsif ( $custom_column_val =~ /tippingpoint/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/tippingpoint.png\" title=\"Tippingpoint (HP)\" alt=\"tippingpoint\"></td>";
                } elsif ( $custom_column_val =~ /ubiquiti/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/ubiquiti.png\" title=\"Ubiquiti Networks\" alt=\"ubiquiti\"></td>";
                } elsif ( $custom_column_val =~ /vegastream/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/vegastream.png\" title=\"Vegastream Group\" alt=\"vegastream\"></td>";
                } elsif ( $custom_column_val =~ /vidyo/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/vidyo.png\" title=\"Vidyo\" alt=\"vidyo\"></td>";
                } elsif ( $custom_column_val =~ /vmware/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/vmware.png\" title=\"VMware\" alt=\"vmware\"></td>";
                } elsif ( $custom_column_val =~ /vyatta/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/vyatta.png\" title=\"Vyatta Inc.\" alt=\"vyatta\"></td>";
                } elsif ( $custom_column_val =~ /watchguard/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/watchguard.png\" title=\"Watchguard\" alt=\"watchguard\"></td>";
                } elsif ( $custom_column_val =~ /websense/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/websense.png\" title=\"Websense\" alt=\"websense\"></td>";
                } elsif ( $custom_column_val =~ /western.digital/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/wd.png\" title=\"Western Digital\" alt=\"western digital\"></td>";
                } elsif ( $custom_column_val =~ /westbase/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/westbase.png\" title=\"Westbase Technologie\" alt=\"westbase\"></td>";
                } elsif ( $custom_column_val =~ /xante/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/xante.png\" title=\"Xante\" alt=\"xante\"></td>";
                } elsif ( $custom_column_val =~ /xerox/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/xerox.png\" title=\"XEROX CORPORATION\" alt=\"xerox\"></td>";
                } elsif ( $custom_column_val =~ /xiro/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/xiro.png\" title=\"Xiro\" alt=\"xerox\"></td>";
                } elsif ( $custom_column_val =~ /zebra/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/zebra.png\" title=\"Zebra\" alt=\"zebra\"></td>";
                } elsif ( $custom_column_val =~ /zyxel/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/zyxel.png\" title=\"Zyxel Communications Corp.\" alt=\"zyxel\"></td>";
                } elsif ( $custom_column_val =~ /3com/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/vendors/3com.png\" title=\"3com (HP)\" alt=\"3com\"></td>";
                } else {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\">$custom_column_val</td>";
                }
                
            } elsif ( $cc_name eq "OS" ) {
                $custom_column_val=$custom_columns_values{"${id}_${host_id}"}[0];
                if ( $custom_column_val =~ /freebsd/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/freebsd.png\" title=\"$custom_column_val\" alt=\"FreeBSD\"></td>";
                } elsif ( $custom_column_val =~ /aix/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/aix.png\" title=\"$custom_column_val\" alt=\"IBM AIX\"></td>";
                } elsif ( $custom_column_val =~ /arch/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/arch.png\" title=\"$custom_column_val\" alt=\"GNU/Arch Linux\"></td>";
                } elsif ( $custom_column_val =~ /centos/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/centos.png\" title=\"$custom_column_val\" alt=\"GNU/CentOS Linux\"></td>";
                } elsif ( $custom_column_val =~ /debian/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/debian.png\" title=\"$custom_column_val\" alt=\"GNU/Debian Linux\"></td>";
                } elsif ( $custom_column_val =~ /fedora/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/fedora.png\" title=\"$custom_column_val\" alt=\"GNU/Fedora Linux\"></td>";
                } elsif ( $custom_column_val =~ /funtoo/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/funtoo.png\" title=\"$custom_column_val\" alt=\"GNU/Funtoo Linux\"></td>";
                } elsif ( $custom_column_val =~ /gentoo/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/gentoo.png\" title=\"$custom_column_val\" alt=\"GNU/Gentoo Linux\"></td>";
                } elsif ( $custom_column_val =~ /junos/i ) {
                     $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/junos.png\" title=\"$custom_column_val\" alt=\"JUNOS\"></td>";
                } elsif ( $custom_column_val =~ /netbsd/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/netbsd.png\" title=\"$custom_column_val\" alt=\"NetBSD\"></td>";
                } elsif ( $custom_column_val =~ /netware/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/netbsd.png\" title=\"$custom_column_val\" alt=\"Novell Netware\"></td>";
                } elsif ( $custom_column_val =~ /openbsd/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/openbsd.png\" title=\"$custom_column_val\" alt=\"OpenBSD\"></td>";
                } elsif ( $custom_column_val =~ /redhat|RHEL/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/redhat.png\" title=\"$custom_column_val\" alt=\"GNU/RedHat Linux\"></td>";
                } elsif ( $custom_column_val =~ /slackware/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/slackware.png\" title=\"$custom_column_val\" alt=\"GNU/Slackware Linux\"></td>";
                } elsif ( $custom_column_val =~ /solaris/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/solaris.png\" title=\"$custom_column_val\" alt=\"SUN Solaris\"></td>";
                } elsif ( $custom_column_val =~ /suse|SLES/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/suse.png\" title=\"$custom_column_val\" alt=\"GNU/Suse Linux\"></td>";
                } elsif ( $custom_column_val =~ /turbolinux/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/turbolinux.png\" title=\"$custom_column_val\" alt=\"GNU/Turbolinux\"></td>";
                } elsif ( $custom_column_val =~ /ubuntu/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/ubuntu.png\" title=\"$custom_column_val\" alt=\"GNU/Ubuntu Linux\"</td>";
                } elsif ( $custom_column_val =~ /unix/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/unix.png\" title=\"$custom_column_val\" alt=\"UNIX\"></td>";
                } elsif ( $custom_column_val =~ /linux/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/linux.png\" title=\"$custom_column_val\" alt=\"GNU/Linux\"></td>";
                } elsif ( $custom_column_val =~ /windows/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/windows_server.png\" title=\"$custom_column_val\" alt=\"MS Windows (server)\"></td>";
                } elsif ( $custom_column_val =~ /windows.?workst/i ) {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"><img src=\"$server_proto://$base_uri/imagenes/OS/windows.png\" title=\"$custom_column_val\" alt=\"MS Windows (workstation)\"></td>";
                } else {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\">$custom_column_val</td>";
                }
            } elsif ( $cc_name eq "URL" ) {
                $custom_column_val=$custom_columns_values{"${id}_${host_id}"}[0];
                my @urls=();
                my ( $custom_column_val_new, $custom_column_val_new_all);
                if ( $custom_column_val =~ /,/ ) {
                    @urls=split(",",$custom_column_val);
                } else {
                    $urls[0]=$custom_column_val;
                }
                foreach ( @urls ) {
                    $custom_column_val_new=$_;
                    my ($url_form_value,$form_url)=split("::",$custom_column_val_new);
                    my $url_style_name;
                    my $url_name="";

                    $form_url =~ s/\[\[IP\]\]/$ip/g;
                    $form_url =~ s/\[\[HOSTNAME\]\]/$hostname/g;

                    $custom_column_val_new =~ /^(.+)::/;
                    $url_name=$1 || "LINK";
                    $url_name =~ s/\+/ /g;
                    
                    $custom_column_val_new =~ /class=\\"(.*)\\"/;
                    $url_style_name=$1 if $1;

                    if ( $url_name =~ /munin/i ) {
                        $url_style_name="munin_url_button";
#							$custom_column_val_new="<form method=\"GET\" action=\"$form_url\" target=\"_blank\" style=\"display:inline\"><input type=\"submit\" value=\"\" class=\"$url_style_name\" title=\"Munin\"></form>";
                        $custom_column_val_new="<span class=\"$url_style_name\"><a href=\"$form_url\" target=\"_blank\" title=\"$url_name\" style=\"text-decoration: none;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a></span>\n";
                    } elsif ( $url_name =~ /nagios/i ) {
                        $url_style_name="nagios_url_button";
                        $custom_column_val_new="<form method=\"GET\" action=\"$form_url\" target=\"_blank\" style=\"display:inline\"><input type=\"submit\" value=\"\" class=\"$url_style_name\" title=\"Nagios\"></form>";
                        $custom_column_val_new="<span class=\"$url_style_name\"><a href=\"$form_url\" target=\"_blank\" title=\"$url_name\" style=\"text-decoration: none;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a></span>\n";
                    } elsif ( $url_name =~ /wiki/i ) {
                        $url_style_name="wiki_url_button";
#							$custom_column_val_new="<form method=\"GET\" action=\"$form_url\" target=\"_blank\" style=\"display:inline\"><input type=\"submit\" value=\"\" class=\"$url_style_name\" title=\"wiki\"></form>";
                        $custom_column_val_new="<span class=\"$url_style_name\"><a href=\"$form_url\" target=\"_blank\" title=\"$url_name\" style=\"text-decoration: none;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a></span>\n";
                    } elsif ( $url_name =~ /splunk/i ) {
                        $url_style_name="splunk_url_button";
#							$custom_column_val_new="<form method=\"GET\" action=\"$form_url\" target=\"_blank\" style=\"display:inline\"><input type=\"submit\" value=\"\" class=\"$url_style_name\" title=\"Splunk\"></form>";
                        $custom_column_val_new="<span class=\"$url_style_name\"><a href=\"$form_url\" target=\"_blank\" title=\"$url_name\" style=\"text-decoration: none;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a></span>\n";
                    } elsif ( $url_name =~ /cacti/i ) {
                        $url_style_name="cacti_url_button";
                        $custom_column_val_new="<span class=\"$url_style_name\"><a href=\"$form_url\" target=\"_blank\" title=\"$url_name\" style=\"text-decoration: none;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a></span>\n";
                    } elsif ( $url_name =~ /graphite/i ) {
                        $url_style_name="graphite_url_button";
                        $custom_column_val_new="<form method=\"GET\" action=\"$form_url\" target=\"_blank\" style=\"display:inline\"><input type=\"submit\" value=\"\" class=\"$url_style_name\" title=\"Graphite\"></form>";
                    } elsif ( $url_name =~ /grafana/i ) {
                        $url_style_name="grafana_url_button";
                        $custom_column_val_new="<form method=\"GET\" action=\"$form_url\" target=\"_blank\" style=\"display:inline\"><input type=\"submit\" value=\"\" class=\"$url_style_name\" title=\"Grafana\"></form>";
                    } elsif ( $url_name =~ /mrtg/i ) {
                        $url_style_name="mrtg_url_button";
                        $custom_column_val_new="<form method=\"GET\" action=\"$form_url\" target=\"_blank\" style=\"display:inline\"><input type=\"submit\" value=\"\" class=\"$url_style_name\" title=\"MRTG\"></form>";
                    } elsif ( $url_name =~ /prtg/i ) {
                        $url_style_name="prtg_url_button";
                        $form_url=~/id=(\d+)/;
                        my $id = $1;
                        my $username;
                        my $password;
                        if ( ! $prtg_user ) {
                            $form_url=~/username=(.+)&/;
                            $username = $1;
                        } else {
                            $username=$prtg_user;
                        }
                        if ( ! $prtg_pass ) {
                            $form_url=~/password=(.+)$/;
                            $password = $1;
                        } else {
                            $password=$prtg_pass;
                        }
                        $form_url =~ s/\?.*//;
                        $custom_column_val_new="<form method=\"GET\" action=\"$form_url\" target=\"_blank\" style=\"display:inline\"><input type=\"hidden\" name=\"id\" value=\"$id\"><input type=\"hidden\" name=\"username\" value=\"$username\"><input type=\"hidden\" name=\"password\" value=\"$password\"><input type=\"submit\" value=\"\" class=\"$url_style_name\" title=\"PRTG\"></form>";
                    } elsif ( $url_name =~ /confluence/i ) {
                        $url_style_name="confluence_url_button";
                        $custom_column_val_new="<span class=\"$url_style_name\"><a href=\"$form_url\" target=\"_blank\" title=\"$url_name\" style=\"text-decoration: none;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a></span>\n";
                    } elsif ( $url_name =~ /jira/i ) {
                        $url_style_name="jira_url_button";
                        $custom_column_val_new="<span class=\"$url_style_name\"><a href=\"$form_url\" target=\"_blank\" title=\"$url_name\" style=\"text-decoration: none;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a></span>\n"; 
                    } else {
                        $url_style_name="input_url";
                        $custom_column_val_new="<a href=\"$form_url\" target=\"_blank\" title=\"$url_name\" class=\"$url_style_name\">$url_name</a>\n";
                    }
                    $custom_column_val_new_all.=$custom_column_val_new if $custom_column_val_new;
                }
                $cc_table_fill= $cc_table_fill . "<td align=\"center\">$custom_column_val_new_all</td>";
                    
            } elsif ( $cc_name eq "linked IP" || $cc_name eq "linkedIP" ) {
                $custom_column_val=$custom_columns_values{"${id}_${host_id}"}[0];
                my @linked_ips=();
                my ( $custom_column_val_new, $custom_column_val_new_all);


                $custom_column_val =~ s/^X:://;

                if ( $custom_column_val =~ /,/ ) {
                    @linked_ips=split(",",$custom_column_val);
                } else {
                    $linked_ips[0]=$custom_column_val;
                }
                foreach ( @linked_ips ) {
## TEST: searh index = true?? Nicht $search_index_form???
                    $custom_column_val_new="<form name=\"search_host\" method=\"POST\" action=\"$server_proto://$base_uri/ip_searchip.cgi\" style=\"display:inline\"><input type=\"hidden\" name=\"search_index\" value=\"true\"><input name=\"ip\" type=\"hidden\" value=\"$_\" ><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"linked\" type=\"hidden\" value=\"linked\"><input type=\"submit\" name=\"B2\" value=\"$_\" class=\"input_link_linked\"></form><br>";
                    $custom_column_val_new_all.=$custom_column_val_new if $custom_column_val_new;
                }
                $cc_table_fill= $cc_table_fill . "<td align=\"center\">$custom_column_val_new_all</td>";
            } elsif ( $cc_name eq "CM" ) {
                $custom_column_val=$custom_columns_values{"${id}_${host_id}"}[0];
                my $cm_value="";
                my $cm_style="";
#					my $cm_button_disabled="";
                if ( $custom_column_val eq "disabled" ) {
#						$cm_button_disabled="disabled";
                    $cm_style="cm_disabled_button";
                    $last_backup_status = -2;
                    
                }

                if ( $last_backup_status == -1 ) {
                # never checked
                    $cm_style="cm_never_checked_button";
                } elsif ( $last_backup_status == 0 ) {
                # ok, new configuration stored
                    $cm_style="cm_ok_button";
                } elsif ( $last_backup_status == 1 ) {
                # ok, unchanged
                    $cm_style="cm_ok_button";
                } elsif ( $last_backup_status == 2 ) {
                # ok, warning
                    $cm_style="cm_warning_button";
                } elsif ( $last_backup_status == 3 ) {
                # error
                    $cm_style="cm_error_button";

                }
        
                my $hidden_cc_vals_cm="<input name=\"red_num\" type=\"hidden\" value=\"$red_num_form\"><input name=\"ip\" type=\"hidden\" value=\"$ip_int\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts_form\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"> $search_index_form $search_hostname_form";
                my $custom_column_val_new;
                $custom_column_val_new="<form name=\"cc_cm\" method=\"POST\" action=\"$server_proto://$base_uri/res/cm/ip_cm_diff_form.cgi\" style=\"display:inline\"><input name=\"host_id\" type=\"hidden\" value=\"$host_id\"><input name=\"hostname\" type=\"hidden\" value=\"$hostname\"><input name=\"cm_val\" type=\"hidden\" value=\"$custom_column_val\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"> $hidden_cc_vals_cm <input type=\"submit\" name=\"B2\" value=\"\" class=\"$cm_style\"></form><br>";

                $cc_table_fill= $cc_table_fill . "<td align=\"center\">$custom_column_val_new</td>";

            } elsif ( $cc_name eq "Line" ) {
                $custom_column_val=$custom_columns_values{"${id}_${host_id}"}[0] || "";
                if ( $custom_column_val && exists ($values_lines->{$custom_column_val}) ) {
                    my $line_entry = "$lang_vars{ll_message}";
                    my $ad_number = $values_lines->{$custom_column_val}->[13] || "";
                    my $ll_client = $values_lines->{$custom_column_val}->[4] || "";
                    my $line_site = $values_lines->{$custom_column_val}->[8] || "";
                    $line_site = "" if $line_site eq "NULL";
                    my $type = $values_lines->{$custom_column_val}->[9] || "";
                    if ( $ad_number ) {
                        $line_entry = $ad_number;
                    } elsif ( $ll_client ) {
                        $line_entry = $ll_client;
                    } elsif ( $line_site ) {
                        $line_entry = $line_site;
                    } elsif ( $type ) {
                        $line_entry = $type;
                    }

                    my $line_form = "<a href=\"$server_proto://$base_uri/ip_search_ll.cgi?client_id=$client_id&ll_id=$custom_column_val\" class=\"LeftMenuListLinkBoldGET\" style=\"display:inline\">$line_entry</a>\n";
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\">$line_form</td>";
                } else {
                    $cc_table_fill= $cc_table_fill . "<td align=\"center\"></td>";
                }


            } elsif ( $custom_columns_values{"${id}_${host_id}"} && $global_limit_cc_output_enabled eq "yes" ) {
                $custom_column_val=$custom_columns_values{"${id}_${host_id}"}[0] || "";
                my $form_title = "";
                my $custom_column_val_fill = "";
                $custom_column_val =~ /^(.{0,30})(.*)$/;
                $custom_column_val_fill = $1;
                $custom_column_val_fill = $custom_column_val_fill . "..." if $2;
                $form_title = "title=\"$custom_column_val\"" if $2;
                $cc_table_fill= $cc_table_fill . "<td align=\"center\" $form_title>$custom_column_val_fill</td>";

            } else {
                $custom_column_val=$custom_columns_values{"${id}_${host_id}"}[0];
                $cc_table_fill= $cc_table_fill . "<td align=\"center\">$custom_column_val</td>";
            }
            $custom_column_val="";

        } elsif ( $id eq $tag_cc_id && exists $tag_hash_obj{$host_id} ) {
            # TAGs
            $custom_column_val = "";

            my $tags = $tag_hash_obj{$host_id};
            my $i = 1;
            foreach ( @$tags ) {
                my $tag_id = $_;
                my $tag_name = $tag_hash{$tag_id}[0];
                my $tag_color = $tag_hash{$tag_id}[2];
                $tag_name =~ /^(.{1,3})/;
                my $tag_name_short = $1;
#					$custom_column_val .= "<div title=\"$tag_name\" class=\"oval\" style=\"background: #${tag_color}\">$tag_name_short</div>";
                $custom_column_val .= '<span title="' . $tag_name . '" class="badge" title="' . $tag_name . '"  style="background: #' . ${tag_color} . ';">' . $tag_name_short . '</span>';
                
                $custom_column_val .= "<br>" if $i % 3 == 0 && exists $$tags[$i];
                $i++;
            }

            $cc_table_fill= $cc_table_fill . "<td nowrap>$custom_column_val</td>";
		} elsif ( $id eq $cc_id_vlan && $host_order_by eq "SEARCH" ) {  # VLAN
			$custom_column_val = $vlan_red_num_hash{$red_num_form} || "";
			$cc_table_fill= $cc_table_fill . "<td align=\"center\">$custom_column_val</td>";
		} elsif ( $id eq $cc_id_sec_zone && $host_order_by eq "SEARCH" ) {  # Sec_Zone
			$custom_column_val = $sec_zone_red_num_hash{$red_num_form} || "";
			$cc_table_fill= $cc_table_fill . "<td align=\"center\">$custom_column_val</td>";
        } else {
            $cc_table_fill= $cc_table_fill . "<td align=\"center\"></td>" if $id ne $cc_id_sec_zone && $id ne $cc_id_vlan;
        }
    }

    my $mass_update_checkbox = "<input type='checkbox' disabled>";
    if ( $has_loc_rw_perm ) {
        $mass_update_checkbox = "<input type='checkbox' name='mass_update_host_${i}' id='mass_update_host_${i}' value='$ip'>";
    }

    my $CM_show_hosts_by_jobs_value="";
    $CM_show_hosts_by_jobs_value="<td><b>$CM_show_hosts_by_jobs_job_name</b></td>\n" if $CM_show_hosts_by_jobs;
    if ( $host_order_by ne "SEARCH" ) {
        my $network_column_show="";
        my $cgi_script;
        if ( $CM_show_hosts ) {
            $cgi_script="ip_show.cgi";
        } elsif ( $CM_show_hosts_by_jobs ) {
            $cgi_script="ip_show.cgi";
        }
        if ( $CM_show_hosts || $CM_show_hosts_by_jobs ) {
            my $red=$redes_hash->{"$red_num_form_edit"}[0];
            my $red_bm=$redes_hash->{"$red_num_form_edit"}[1];
            my $red_descr=$redes_hash->{"$red_num_form_edit"}[2] || "";
            my $red_cat=$redes_hash->{"$red_num_form_edit"}[4] || "";
            $red_cat = "" if $red_cat eq "NULL";
            $red_descr = "" if $red_descr eq "NULL";
            my $red_descr_all = $red_descr;
#			$red_descr =~ s/^((${allowd_descr}){15})(.*)/$1/;
            $red_descr =~ s/^(.{15})(.*)/$1/;
            $red_descr = "$red_descr" . "..." if $2;
            $red_descr = "$red/$red_bm" if ! $red_descr;
            $network_column_show="<td width=\"20px\" align=\"center\" valign=\"middle\"><form method=\"POST\" action=\"$server_proto://$base_uri/ip_show.cgi\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num_form_edit\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input type=\"submit\" value=\"$red_descr\" name=\"B2\" class=\"$input_link\" title=\"$red/$red_bm - $red_cat - $red_descr_all\"></form>";
        }
        print "<tr height=\"24px\" bgcolor=\"$color\" valign=\"middle\" class=\"$stylename\"><td><form name=\"mass_update_${i}\">$mass_update_checkbox</form></td><td width=\"22px\" align=\"center\" valign=\"middle\" class=\"$hostcheck\" onClick=\"checkhost(\'$ip\',\'$hostname\',\'$client_id\',\'$ip_version\',\'$red_num_form\')\" style=\"cursor:pointer;\" title=\"$lang_vars{ultima_comprobacion_message}: $lastresp\">&nbsp;&nbsp;&nbsp;&nbsp;</td><td>$ip_show</td><td><b> $hostname_chequed</b></td>$CM_show_hosts_by_jobs_value<td>$host_descr</td><td align=\"center\">$loc</td><td align=\"center\">$cat</td><td align=\"center\">$int_admin_on</td><td>$comentario</td>$cc_table_fill $acl_management_enabled_link $network_column_show $password_management_enabled_fill_button $ocs_button_fill $fetch_switchinfo_button <td width=\"15px\">$history_button</td><td width=\"20px\" align=\"center\" valign=\"middle\">$edit_button</td><td width=\"20px\" align=\"center\" valign=\"middle\">$delete_button</td></form></tr>\n";
    } else {
        my $client_name_show="";	
        if ( $client_independent eq "yes" ) {
            $client_name_show="<td>$clients_hash{$client_id}</td>";
        }
        my $red=$redes_hash->{"$red_num_form"}[0];
        my $red_bm=$redes_hash->{"$red_num_form"}[1];
        my $red_descr=$redes_hash->{"$red_num_form"}[2] || "";
        my $red_cat=$redes_hash->{"$red_num_form"}[4] || "";
        $red_cat = "" if $red_cat eq "NULL";
        $red_descr = "" if $red_descr eq "NULL";
        my $red_descr_all = $red_descr;
#			$red_descr =~ s/^((${allowd_descr}){15})(.*)/$1/;
        $red_descr =~ s/^(.{15})(.*)/$1/;
        $red_descr = "$red_descr" . "..." if $2;
        $red_descr = "$red/$red_bm" if ! $red_descr;
        print "<tr height=\"24px\" bgcolor=\"$color\" valign=\"middle\"><td><form name=\"mass_update_${i}\">$mass_update_checkbox</form></td>$client_name_show<td width=\"12px\" align=\"center\" valign=\"middle\" class=\"$hostcheck\" onClick=\"checkhost(\'$ip\',\'$hostname\',\'$client_id\',\'$ip_version\',\'$red_num_form\')\" style=\"cursor:pointer;\" title=\"$lang_vars{ultima_comprobacion_message}: $lastresp\">&nbsp;&nbsp;&nbsp;&nbsp;</td><td>$ip_show</td><td><b>&nbsp;$hostname_chequed</b></td><td>$host_descr</td><td align=\"center\">$loc</td><td align=\"center\">$cat</td><td align=\"center\">$int_admin_on</td><td>$comentario</td>$cc_table_fill $acl_management_enabled_link <td width=\"20px\" align=\"center\" valign=\"middle\"><form method=\"POST\" action=\"$server_proto://$base_uri/ip_show.cgi\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num_form\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input type=\"submit\" value=\"$red_descr\" name=\"B2\" class=\"$input_link\" title=\"$red/$red_bm - $red_cat - $red_descr_all\"></form></td>$password_management_enabled_fill_button ${ocs_button_fill} $fetch_switchinfo_button <td width=\"15px\">$history_button</td><td width=\"20px\" align=\"center\" valign=\"middle\">$edit_button</td><td width=\"20px\" align=\"center\" valign=\"middle\">$delete_button</td></form></tr>\n";
    }
}

print "</table>\n";

if ( $result_limited == 1 ) {
    print "<br><p><b>$lang_vars{result_limited_500_message}</b><br><p>\n";
}

print <<EOF;

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function MassOnSubmitForm(ANZ_HOST){
var i=1;
for (i=1;i<=ANZ_HOST;i++)
{
  CHECKVAL=document.getElementById("mass_update_host_" + i).checked;
  if ( CHECKVAL == true ) {
     document.getElementById("mass_update_host_submit_" + i).value = document.getElementById("mass_update_host_" + i).value;
  }
}
}
//-->
</SCRIPT>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function SelectAll(ANZ_HOST){
var i=1;
for (i=1;i<=ANZ_HOST;i++)
{
  document.getElementById("mass_update_host_" + i).checked=true;
}
}
//-->
</SCRIPT>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function UnselectAll(ANZ_HOST){
var i=1;
for (i=1;i<=ANZ_HOST;i++)
{
  document.getElementById("mass_update_host_" + i).checked=false;
}
}
//-->
</SCRIPT>


<script type="text/javascript">
<!--
function confirmation(HOST,TYPE) {

if (TYPE == 'delete'){
    answer = confirm(HOST + ": $lang_vars{delete_host_confirme_message}")
}

    if (answer){
            return true;
    } else {
            return false;
    }
}
//-->
</script>


<script type="text/javascript">
<!--
function confirmation_mass_update_host() {
  var MESSAGE;
  for (var i=0; i<document.mass_update.mass_action_type.options.length; i++) {
      if (document.mass_update.mass_action_type.options[i].selected == true ) {
            MESSAGE=document.mass_update.mass_action_type.options[i].value;
      }
  }

if (MESSAGE == "$lang_vars{borrar_message}") {
    answer = confirm("$lang_vars{delete_select_hosts_confirmation_message}")
} else {
   answer = 1;
}

if (answer){
 return true;
} else {
 return false;
}
}
//-->
</script>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function enable_edit_form_host(obj){
MESSAGE='$lang_vars{borrar_message}';
   console.log("enable_edit_form_host: " + obj.value +  " - " + MESSAGE);
if (obj.value == '$lang_vars{borrar_message}' || obj.value == 'löschen') { 
   console.log("enable_edit_form_host: " + obj.value);
  document.mass_update.mass_update_type.disabled=true;
  document.getElementById('mass_update_type').style.color="gray";
  document.mass_update.action ="$server_proto://$base_uri/res/ip_deleteip.cgi";
  for (var i=0; i<document.mass_update.mass_update_type.options.length; i++) {
      document.mass_update.mass_update_type.options[i].selected = false;
  }

} else if (obj.value == '$lang_vars{diff_configs_jo_message}') {
  document.mass_update.mass_update_type.disabled=true;
  document.getElementById('mass_update_type').style.color="gray";
  document.mass_update.action ="$server_proto://$base_uri/res/cm/ip_cm_diff_devices_form.cgi";
  for (var i=0; i<document.mass_update.mass_update_type.options.length; i++) {
      document.mass_update.mass_update_type.options[i].selected = false;
  }

} else if (obj.value == '$lang_vars{password_management_perm_message}') {
  document.mass_update.mass_update_type.disabled=true;
  document.getElementById('mass_update_type').style.color="gray";
  document.mass_update.action ="$server_proto://$base_uri/res/ip_manage_device_password.cgi";
  for (var i=0; i<document.mass_update.mass_update_type.options.length; i++) {
      document.mass_update.mass_update_type.options[i].selected = false;
  }
} else {
  document.mass_update.mass_update_type.disabled=false;
  document.getElementById('mass_update_type').style.color="black";
  document.mass_update.action ="$server_proto://$base_uri/res/ip_modip_mass_update_form.cgi";
}
}
//-->
</SCRIPT>

<br>
<input type="submit" class="btn btn-sm" value="$lang_vars{select_all_message}" style="cursor:pointer;" onClick="SelectAll($i)">
<input type="submit" class="btn btn-sm" value="$lang_vars{unselect_all_message}" style="cursor:pointer;" onClick="UnselectAll($i)">
<p>

EOF


if ( $CM_show_hosts || $CM_show_hosts_by_jobs ) {
print "<form name=\"mass_update\" method=\"POST\" action=\"$server_proto://$base_uri/res/cm/ip_cm_diff_devices_form.cgi\">\n";
} else {
print "<form name=\"mass_update\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_modip_mass_update_form.cgi\">\n";
}

my $k;
for ($k=0;$k<=$i;$k++) {
print "<input type=\"hidden\" name=\"mass_update_host_submit_${k}\" id=\"mass_update_host_submit_${k}\" value=\"\">\n";
}



print "<p class=\"NotifyText\">$lang_vars{no_resultado_message}</p><br>" if $anz_ip_hash == "0";

print <<EOF;
<input type="hidden" name="client_id" value="$client_id">
<input type="hidden" name="anz_hosts" value="$i">
<input name="red_num" type="hidden" value=\"$red_num_form\">
<input name="entries_per_page_hosts" type="hidden" value="$entries_per_page_hosts">
<input name="start_entry_hosts" type="hidden" value="$start_entry_hosts_form">
<input name="host_order_by" type="hidden" value="$host_order_by">
<input name="knownhosts" type="hidden" value="$knownhosts">
<input name="anz_values_hosts" type="hidden" value="$anz_values_hosts">
<input name="ip_version" type="hidden" value="$ip_version">
<input name="search_index" type="hidden" value="$search_index">
<input name="search_hostname" type="hidden" value="$search_hostname">
<input name="all_passwords" type="hidden" value="all_passwords">
EOF
if ( $self->{match} ) {
print '<input name="match" type="hidden" value="' . $search_hostname . '">';
}

#my $CM_show_hosts_hidden="";
if ( $CM_show_hosts ) {
    print "<input name=\"CM_show_hosts\" type=\"hidden\" value=\"$CM_show_hosts\">";
}
#my $CM_show_hosts_hidden_jobs="";
if ( $CM_show_hosts_by_jobs ) {
    print "<input name=\"CM_show_hosts_by_jobs\" type=\"hidden\" value=\"$CM_show_hosts_by_jobs\">";
}

if ( keys %{ $self->{advanced_search_hash} } ) {
while ( my ($key, $value) = each(%$advanced_search_hash) ) {
    print  "<input type=\"hidden\" name=\"$key\" value=\"$value\"><br>\n";
}
}



print <<EOF;
\n&nbsp;&nbsp;<select name="mass_action_type" id="mass_action_type" size="2" onchange="enable_edit_form_host(this);">
EOF
if ( $CM_show_hosts || $CM_show_hosts_by_jobs ) {
print "<option value=\"$lang_vars{diff_configs_jo_message}\" selected>$lang_vars{diff_configs_jo_message}</option>\n";
print "<option value=\"$lang_vars{modificar_message}\">$lang_vars{modificar_message}</option>\n";
} else {
print "<option value=\"$lang_vars{modificar_message}\" selected>$lang_vars{modificar_message}</option>\n";
}
print <<EOF;
<option value=\"$lang_vars{borrar_message}\">$lang_vars{borrar_message}</option>
EOF
print "<option value=\"$lang_vars{password_management_perm_message}\">$lang_vars{password_management_perm_message}</option>\n" if $password_management_enabled;
print "</select>\n";

if ( $CM_show_hosts || $CM_show_hosts_by_jobs ) {
print "&nbsp;&nbsp;<select name=\"mass_update_type\" id=\"mass_update_type\" size=\"3\" style=\"color:gray;\" multiple disabled>\n";
} else {
print "&nbsp;&nbsp;<select name=\"mass_update_type\" id=\"mass_update_type\" size=\"3\" multiple>\n";
}

my @mass_update_types=("$lang_vars{description_mass_checkbox_message}","$lang_vars{loc_message}","$lang_vars{tipo_message}","$lang_vars{comentario_message}","AI","UT");
push @mass_update_types, $lang_vars{update_mode_message} if $global_dyn_dns_updates_enabled eq "yes";
foreach (@mass_update_types) {
    print "<option>$_</option>";
}

$n=0;
foreach (@custom_columns) {
    my $cc_name = $custom_columns[$n]->[0];
    if ( $cc_name eq "vlan" || $cc_name eq "linked IP" || $cc_name eq "linkedIP" || $cc_name eq "Line" ) {
            $n++;
            next;
    }
    print "<option>$cc_name</option>";
    $n++;
}

print <<EOF;
</select>
<p>
<input type="submit" name="mass_submit" class="btn" value="$lang_vars{mass_update_message}" style="cursor:pointer;" onClick="MassOnSubmitForm($i);return confirmation_mass_update_host();" VALUE="mass_update">
</form>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}


sub prepare_host_hash_cm {
my $self = shift;
my %args = @_;

my $vars_file = $args{vars_file} || "";
my $ip_version = $args{ip_version} || "";
my $client_id = $args{client_id} || "";
my $host_hash_ref = $args{host_hash_ref} || "";
my $host_order_by = $args{host_order_by} || "";
my $entries_per_page_hosts = $args{entries_per_page_hosts} || "";
my $start_entry_hosts = $args{start_entry_hosts} || 0;

my %lang_vars = $self->_get_vars("$vars_file");

my $sort_order_ref = sub {
    if ( $host_order_by =~ /ab/ ) {
        ${b} cmp ${a};
    } else {
        my $A=$host_hash_ref->{$a}[11];
        my $B=$host_hash_ref->{$b}[11];
        ${A} cmp ${B};
    }
};


my %host_hash_new=();
my $i=0;
for my $key ( sort { ${$host_hash_ref}{$a}[11] <=> ${$host_hash_ref}{$b}[11] } keys %{ $host_hash_ref } ) {
    if ( $start_entry_hosts > $i ) {
        $i++;
        next;
    }
    $i++;
    last if $i >  $start_entry_hosts + $entries_per_page_hosts;
    $host_hash_new{$key}=${$host_hash_ref}{$key};
}

return \%host_hash_new;
}

sub prepare_host_hash {
my ( $self,$client_id, $ip_hash, $first_ip_int, $last_ip_int, $script, $knownhosts, $boton, $red_num, $red_loc, $vars_file,$anz_values_hosts,$start_entry_hosts,$entries_per_page_hosts,$host_order_by,$redbroad_int,$ip_version ) = @_;

#my @custom_columns = $self->get_custom_host_columns("$client_id");
my ($i,$ip_int,$ip,$hostname,$host_descr,$loc,$cat,$int_admin,$comentario,$update_type,$alive,$last_response,$range_id,$int_admin_on);
my %new_ip_hash = ();
my $new_ip_hash = \%new_ip_hash;
my @values_red = $self->get_red("$client_id","$red_num");
my $BM = $values_red[0]->[1];

$first_ip_int = Math::BigInt->new("$first_ip_int");
$last_ip_int = Math::BigInt->new("$last_ip_int");
$redbroad_int = Math::BigInt->new("$redbroad_int");


if ( $ip_version eq "v6" ) {
    $first_ip_int--;
    $last_ip_int++;
}

my ($ip_old,$ip_old_base,$ip_new_last_oct,$ip_old_last_oct);

if ( $host_order_by =~ /(IP|SEARCH)/ && $knownhosts ne "hosts") {
    if ( $knownhosts eq "libre" ) {
        my ($first_ip_int_start, $last_ip_int_start);
        if ( $host_order_by ne "SEARCH" ) {
            $first_ip_int_start = $first_ip_int + $start_entry_hosts;
            $last_ip_int_start = $first_ip_int_start + $entries_per_page_hosts;
        }

        my $hostcount="";
        if ( $start_entry_hosts != "0" ) {

            my $last_ip_int_start_old=$last_ip_int_start;
            $hostcount=$self->count_host_entries_between("$client_id","$red_num","$first_ip_int","$first_ip_int_start");
            my $first_ip_int_start_old=$first_ip_int_start+1;
            $last_ip_int_start_old=$first_ip_int_start+$hostcount;

            $first_ip_int_start+=$hostcount;
            $last_ip_int_start+=$hostcount;

            $hostcount=$self->count_host_entries_between("$client_id","$red_num","$first_ip_int_start_old","$last_ip_int_start_old");
            $first_ip_int_start_old=$first_ip_int_start+1;
            $last_ip_int_start_old=$first_ip_int_start+$hostcount;

            $first_ip_int_start+=$hostcount;
            $last_ip_int_start+=$hostcount;

            my $stop=0;
            while ( $hostcount ne 0 ) {
                $hostcount=$self->count_host_entries_between("$client_id","$red_num","$first_ip_int_start_old","$last_ip_int_start_old");
                $first_ip_int_start_old=$last_ip_int_start_old+1;
                $last_ip_int_start_old+=$hostcount;

                $first_ip_int_start+=$hostcount;
                $last_ip_int_start+=$hostcount;
                last if $stop==10;
                $stop++;
            }

        } else {
            if ( $ip_version eq "v4" ) {
                $last_ip_int_start = $first_ip_int_start + $anz_values_hosts - 1;
                $last_ip_int = $redbroad_int - 1 if $last_ip_int -1 > $redbroad_int - 1;
            } else {
                $last_ip_int_start = $first_ip_int_start + $anz_values_hosts;
                $last_ip_int_start = $redbroad_int if $last_ip_int > $redbroad_int;
            }
        }
        
        for ($i = $first_ip_int_start; $i <= $last_ip_int_start; $i++) {
            my $last = $redbroad_int - 1;
            if ( ! defined($ip_hash->{$i}[0]) ) {
                $new_ip_hash->{$i}[0] =  ""; #IP
                $new_ip_hash->{$i}[1] =  ""; #hostname
                $new_ip_hash->{$i}[2] =  ""; #host_descr
                $new_ip_hash->{$i}[3] =  "$red_loc" || ""; #loc
                $new_ip_hash->{$i}[4] =  ""; #cat
                $new_ip_hash->{$i}[5] =  "n"; #int_adm
                $new_ip_hash->{$i}[6] =  ""; #comentario
                $new_ip_hash->{$i}[7] =  ""; #update_type
                $new_ip_hash->{$i}[8] =  "-1"; #alive
                $new_ip_hash->{$i}[9] =  ""; #last_response
                $new_ip_hash->{$i}[10] =  "-1"; #range_id
                $new_ip_hash->{$i}[11] =  "$i"; #ip int
                $new_ip_hash->{$i}[12] =  ""; #host_id
                $new_ip_hash->{$i}[13] =  "$red_num"; #red_num
                $new_ip_hash->{$i}[14] =  ""; #red description
                $new_ip_hash->{$i}[15] =  ""; #client id
                $new_ip_hash->{$i}[16] =  ""; #ip_version
                last if $i == $last; 

            } elsif ( defined($ip_hash->{$i}[0]) && $ip_hash->{$i}[10] != "-1" && ! $ip_hash->{$i}[1] ) {
                $new_ip_hash->{$i}[2] =  $ip_hash->{$i}[2]; #host_descr
                $new_ip_hash->{$i}[3] =  $ip_hash->{$i}[3]; #loc
                $new_ip_hash->{$i}[4] =  $ip_hash->{$i}[4]; #cat
                $new_ip_hash->{$i}[5] =  $ip_hash->{$i}[5]; #int_adm
                $new_ip_hash->{$i}[6] =  $ip_hash->{$i}[6]; #comentario
                $new_ip_hash->{$i}[7] =  $ip_hash->{$i}[7]; #update_type
                $new_ip_hash->{$i}[8] =  $ip_hash->{$i}[8]; #alive
                $new_ip_hash->{$i}[9] =  $ip_hash->{$i}[9]; #last_response
                $new_ip_hash->{$i}[10] =  $ip_hash->{$i}[10]; #range_id
                $new_ip_hash->{$i}[11] =  "$i"; #ip int
                $new_ip_hash->{$i}[12] =  $ip_hash->{$i}[12]; #host_id
                $new_ip_hash->{$i}[13] =  $ip_hash->{$i}[13]; #red_num
                $new_ip_hash->{$i}[14] =  $ip_hash->{$i}[14]; #red descr
                $new_ip_hash->{$i}[15] =  $ip_hash->{$i}[15]; #client id
                $new_ip_hash->{$i}[16] =  $ip_hash->{$i}[16]; #ip_version
                last if $i == $last; 
                $last_ip_int++;
                $last_ip_int_start++;

            } else {
                last if $i == $last; 
                $last_ip_int++;
                $last_ip_int_start++;
            }
        }
        $ip_hash = $new_ip_hash;

        my %order_ip_hash = ();
        my $order_ip_hash = \%order_ip_hash;
        my $l = 0;
        for my $key (sort keys %{$ip_hash}) { 
            $ip_int = $key;
            if ( $l < $start_entry_hosts ) {
            }
            
            if ( $$ip_hash{$key}->[0] !~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ ) {
                $ip = $self->int_to_ip("$client_id","$ip_int","$ip_version");
                $$ip_hash{$key}->[0] = $ip;
            }
                    
            $order_ip_hash->{$key} = $ip_hash->{$key} if $key;
            $l++
        }
        $ip_hash = $order_ip_hash;

    } else {
        if ( $host_order_by ne "SEARCH" ) {
            $first_ip_int = $first_ip_int + $start_entry_hosts;
            if ( $ip_version eq "v4" ) {
# NET32
                if ( $BM == 31 || $BM == 32 ) {
                    # do nothing
                } else {
                    $last_ip_int = $first_ip_int + $anz_values_hosts - 1;
                    $last_ip_int = $redbroad_int - 1 if $last_ip_int -1 > $redbroad_int - 1;
                }
            } else {
                $last_ip_int = $first_ip_int + $anz_values_hosts;
                $last_ip_int = $redbroad_int if $last_ip_int > $redbroad_int;
            }
        }


        for ($i = $first_ip_int; $i <= $last_ip_int; $i++) {
            if ( ! defined($ip_hash->{$i}[0]) ) {
                $ip = $self->int_to_ip("$client_id","$i","$ip_version");
                $new_ip_hash->{$i}[0] =  $ip;
                $new_ip_hash->{$i}[1] =  ""; #hostname
                $new_ip_hash->{$i}[2] =  ""; #host_descr
                $new_ip_hash->{$i}[3] =  "$red_loc" || ""; #loc
                $new_ip_hash->{$i}[4] =  ""; #cat
                $new_ip_hash->{$i}[5] =  "n"; #int_adm
                $new_ip_hash->{$i}[6] =  ""; #comentario
                $new_ip_hash->{$i}[7] =  ""; #update_type
                $new_ip_hash->{$i}[8] =  "-1"; #alive
                $new_ip_hash->{$i}[9] =  ""; #last_response
                $new_ip_hash->{$i}[10] =  "-1"; #range_id
                $new_ip_hash->{$i}[11] =  "$i"; #range_id
                $new_ip_hash->{$i}[12] =  ""; #range_id
                $new_ip_hash->{$i}[13] =  "$red_num";
                $new_ip_hash->{$i}[14] =  ""; 
                $new_ip_hash->{$i}[15] =  "$client_id"; #client id
                $new_ip_hash->{$i}[16] =  "$ip_version"; #ip_version
            } else {
                $new_ip_hash->{$i}=$ip_hash->{$i};
                if ( $ip_version eq "v6" ) {
                    $ip = $self->int_to_ip("$client_id","$i","$ip_version");
                    $new_ip_hash->{$i}[0] =  $ip;
                }
            }
        }
        $ip_hash = $new_ip_hash;
    }

} else {
    $first_ip_int = $first_ip_int + $start_entry_hosts;
    if ( $ip_version eq "v4" ) {
        $last_ip_int = $first_ip_int + $anz_values_hosts - 1;
        $last_ip_int = $redbroad_int - 1 if $last_ip_int -1 > $redbroad_int - 1;
    } else {
        $last_ip_int = $first_ip_int + $anz_values_hosts;
        $last_ip_int = $redbroad_int if $last_ip_int > $redbroad_int;
    }


    my $anz = $entries_per_page_hosts + $start_entry_hosts;
    my $l = 0;

    

    for my $key (keys %{$ip_hash}) { 
        if ( $l < $start_entry_hosts ) {
            $l++;
            next;
        }
                
        last if $l >= $anz; #ip_int
        next if ! $ip_hash->{$key}[11];
        if ( $ip_version eq "v6" ) {
            $ip_int = $ip_hash->{$key}[11];
            $ip = $self->int_to_ip("$client_id","$ip_int","$ip_version");
#				$ip = ip_compress_address ($ip, 6) if $ip_version eq "v6";
            $ip_hash->{$key}[0] =  $ip;
        }
            
        $new_ip_hash->{$key} = $ip_hash->{$key} if $key;
        $l++;
    }
    $ip_hash = $new_ip_hash;
}

return ($ip_hash,$first_ip_int,$last_ip_int);
}


sub PrintAuditTabHead {
my ( $self,$client_id,$time_range_audit_head,$start_date_form,$end_date_form,$search,$event_class,$event_type,$time_radio,$start_entry,$entries_per_page,$pages_links,$update_type_audit,$all_clients,$vars_file) = @_;
$search="" if $search eq "NULL";
my %lang_vars = $self->_get_vars("$vars_file");
my $uri = $self->get_uri();
my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();

my @clients = $self->get_clients();

my @values_event_class = $self->get_audit_event_classes();
my @values_event_type=$self->get_audit_event_types();
my @values_update_types=$self->get_audit_update_types();
my $anz_clients_all=$self->count_clients("$client_id");

my @values_time_range = ("1 hour","6 hours","1 day","3 days","7 days","2 weeks","4 weeks","3 month","6 month","1 year","all");
my @values_entries_per_page = ("10","50","100","250");
my $cgi = "$ENV{SERVER_NAME}" . "$ENV{SCRIPT_NAME}";

my $all_clients_show="";
if ( $anz_clients_all > "1" ) {
    $all_clients_show="$lang_vars{all_clients_wrap_message}";
}

my $align1="";
if ( $vars_file =~ /vars_he$/ ) {
    $align1="align=\"right\"";
}
    
print "<table cellpadding=\"1\" border=\"0\">\n";
if ( $time_radio eq "time_range" || $time_radio eq "NULL" ) {
    print "<tr align=\"left\"><td nowrap align=\"center\"><form name=\"printredtabheadform\" method=\"POST\" action=\"$server_proto://$base_uri/res/show_audit.cgi\">$all_clients_show</td><td nowrap $align1><input type=\"radio\" value=\"time_range\" name=\"time_radio\" onclick=\"start_date.disabled=true;end_date.disabled=true;time_range.disabled=false;\" checked> $lang_vars{last_message}</td><td $align1> </td><td $align1><input type=\"radio\" value=\"start_end_time\" name=\"time_radio\" onclick=\"start_date.disabled=false;end_date.disabled=false;time_range.disabled=true;\"> $lang_vars{date_message} $lang_vars{start_date_message}</td><td $align1></td><td $align1>$lang_vars{end_date_message}</td><td $align1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td $align1>$lang_vars{search_string_message}</td><td $align1>$lang_vars{event_type_message}</td><td $align1>$lang_vars{class_message}</td><td $align1>$lang_vars{event_message}</td><td $align1>$lang_vars{entradas_por_pagina_message}</td><td></td></tr>\n";
    print "<tr align=\"center\">";
    if ( $anz_clients_all > "1" ) {
        if ( $all_clients eq "yy" ) {
            print "<td><input type=\"checkbox\" name=\"all_clients\" value=\"yy\" checked>\n";
        } else {
            print "<td><input type=\"checkbox\" name=\"all_clients\" value=\"yy\">\n";
        }
    } else {
        print "<td></td>\n";
    }
    print "<td><select class='custom-select custom-select-sm' style='width: 12em' name=\"time_range\" size=\"1\">";
} else {
    print "<tr align=\"left\"><td nowrap align=\"center\"><form name=\"printredtabheadform\" method=\"POST\" action=\"$server_proto://$base_uri/res/show_audit.cgi\">$all_clients_show</td><td nowrap $align1><input type=\"radio\" value=\"time_range\" name=\"time_radio\" onclick=\"start_date.disabled=true;end_date.disabled=true;time_range.disabled=false;\"> time range</td><td $align1> <b>$lang_vars{o_message}</b> </td><td $align1><input type=\"radio\" value=\"start_end_time\" name=\"time_radio\"  onclick=\"time_range.disabled=true;\" checked> $lang_vars{date_message} $lang_vars{start_date_message}</td><td $align1></td><td $align1>$lang_vars{end_date_message}</td><td $align1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td $align1>$lang_vars{search_string_message}</td><td $align1>$lang_vars{event_type_message}</td><td $align1>$lang_vars{class_message}</td><td $align1>$lang_vars{event_message}</td><td $align1>$lang_vars{entradas_por_pagina_message}</td><td></td></tr>\n";
    print "<tr align=\"center\">";
    if ( $anz_clients_all > "1" ) {
        if ( $all_clients eq "yy" ) {
            print "<td><input type=\"checkbox\" name=\"all_clients\" value=\"yy\" checked>\n";
        } else {
            print "<td><input type=\"checkbox\" name=\"all_clients\" value=\"yy\">\n";
        }
    } else {
        print "<td></td>\n";
    }
    print "<td $align1><select name=\"time_range\" class='custom-select custom-select-sm' style='width: 12em' size=\"1\" disabled>";
}
my $i = "0";
foreach (@values_time_range) {
    if ( $_ eq $time_range_audit_head ) {
        print "<option selected>$values_time_range[$i]</option>";
        $i++;
        next;
    }
    print "<option>$values_time_range[$i]</option>";
    $i++;
}
print "</select></td>\n";
if ( $time_radio eq "time_range" || $time_radio eq "NULL" ) {
    print "<td></td><td $align1><input name=\"start_date\" type=\"text\" class='form-control form-control-sm mr-1' style='width: 9em' size=\"12\" value=\"$start_date_form\" disabled></td><td $align1></td><td $align1><input name=\"end_date\" type=\"text\" class='form-control form-control-sm mr-1' style='width: 9em' size=\"12\" value=\"$end_date_form\" disabled></td><td></td>\n";
} else {
    print "<td></td><td $align1><input name=\"start_date\" type=\"text\" class='form-control form-control-sm mr-1' style='width: 10em' size=\"12\" value=\"$start_date_form\"></td><td></td><td $align1><input name=\"end_date\" type=\"text\" size=\"12\" value=\"$end_date_form\"></td><td></td>\n";
}


print "<td $align1><input name=\"search_string\" type=\"text\" class='form-control form-control-sm mr-1' style='width: 12em' size=\"15\" value=\"$search\"></td>";

print "<td $align1><select name=\"update_type_audit\" class='custom-select custom-select-sm mr-1' style='width: 10em' size=\"1\" style=\"width: 80px;\">";
print "<option></option>";
@values_update_types=sort { lc($a->[0]) cmp lc($b->[0]) } @values_update_types;
my $j = "0";
foreach ( @values_update_types) {
    if ( $values_update_types[$j]->[0] eq $update_type_audit ) {
        print "<option selected>$values_update_types[$j]->[0]</option>";
        $j++;
        next;
    }
    print "<option>$values_update_types[$j]->[0]</option>";
    $j++;
}
print "</select></td>\n";



print "<td $align1><select name=\"event_class\" class='custom-select custom-select-sm mr-1' style='width: 10em' size=\"1\" style=\"width: 80px;\">";
print "<option></option>";
@values_event_class=sort { lc($a->[0]) cmp lc($b->[0]) } @values_event_class;
$j = "0";
foreach (@values_event_class) {
    if ( $values_event_class[$j]->[0] eq $event_class ) {
        print "<option selected>$values_event_class[$j]->[0]</option>";
        $j++;
        next;
    }
    print "<option>$values_event_class[$j]->[0]</option>";
    $j++;
}
print "</select></td>\n";
@values_event_type=sort { lc($a->[0]) cmp lc($b->[0]) } @values_event_type;
$j = "0";
print "<td $align1><select name=\"event_type\" class='custom-select custom-select-sm mr-1' style='width: 10em' size=\"1\" style=\"width: 80px;\">";
print "<option></option>";
foreach (@values_event_type) {
    if ( $values_event_type[$j]->[0] eq $event_type ) {
        print "<option selected>$values_event_type[$j]->[0]</option>";
        $j++;
        next;
    }
    print "<option>$values_event_type[$j]->[0]</option>";
    $j++;
}
print "</select></td>\n";
print "<td $align1>";
print "<select name=\"entries_per_page\" class='custom-select custom-select-sm' style='width: 6em mr-1' size=\"1\">";
$i = "0";
foreach (@values_entries_per_page) {
    if ( $_ eq $entries_per_page ) {
        print "<option selected>$values_entries_per_page[$i]</option>";
        $i++;
        next;
    }
    print "<option>$values_entries_per_page[$i]</option>";
    $i++;
}
print "</select></td>\n";
print "<td><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"B2\" class=\"filter_button\"></form></td></tr>\n";
if ( $pages_links eq "&nbsp;" ) {
    print "<tr><td></td><td colspan=\"13\">$pages_links</td></tr>\n";
    print "</table>\n";
} else {
    print "<tr><td colspan=\"13\" $align1;>$pages_links</td></tr>\n";
    print "</table><br>\n";
}
}


sub print_end {
my ( $self,$client_id, $vars_file, $top, $daten ) = @_;

$daten = "" if ! $daten;

my $server_proto = $self->get_server_proto();
my $cgi_dir = $self->get_cgi_dir();
my $cgi_base_dir = $cgi_dir;
my $base_uri = $self->get_base_uri();
$cgi_base_dir =~ s/\/res//;
my $DOCUMENT_ROOT=$0;
my $SCRIPT_NAME=$ENV{'SCRIPT_NAME'};
$DOCUMENT_ROOT =~ s/$SCRIPT_NAME//;
if ( ! $vars_file || $vars_file =~ /vars_update_gestioip/ ) {
    my $lang=$self->get_lang_simple() || "en";
    $vars_file="${DOCUMENT_ROOT}/${cgi_base_dir}/vars/vars_${lang}";
}

my %lang_vars = $self->_get_vars("$vars_file") if $vars_file;
my $noti = "NOTI";
my $inhalt = "INHALT";

my $cgi;
if ( $ENV{SCRIPT_NAME} =~ /admin_form|ip_modip_form|ip_splitred_form|ip_modred_form|ip_reserverange_form|spreadsheet_form1|ip_discover_net_snmp_form|/ || $ENV{SCRIPT_NAME} !~ /form|list/ ) {
    $cgi = "$base_uri/index.cgi";
} else {
    $cgi = "$ENV{SERVER_NAME}" . "$ENV{SCRIPT_NAME}";
}

my $get_link="";
if ( $ENV{'REQUEST_METHOD'} eq "POST" && $daten ) {
    $get_link="<a href=\"$server_proto://$ENV{SERVER_NAME}$ENV{SCRIPT_NAME}?$daten\" class=\"input_link_w\" style='display: inline;'>get_link</a> |";
}

#   if ( $top ) {
#       print " <table border=\"0\" width=\"25px\"><tr class=\"go_to_top_button\" onclick=\"scrollToTop()\" title=\"$lang_vars{'go_to_top_message'}\"><td> </td></tr></table>\n";
#   } else {
    print "<p><br>\n";
#   }


# wrapper    
print "</div></div></div>\n";
print '<div class="container-fluid" style="height: 90px;">';

print '<div class="row p-3" id="bottom-row">';

if ( $ENV{SCRIPT_NAME} !~ /calculatered/ ) {

#        print "<button onclick=\"topFunction()\" id=\"go_to_bottom_btn\" title=\"Go to bottom\" class=\"go_to_bottom_button1\"></button>";
#        print "<button onclick=\"topFunction('top')\" id=\"go_to_top_btn\" title=\"Go to top\" class=\"go_to_top_button1\"></button>";
    print "<button onclick=\"topFunction()\" id=\"go_to_bottom_btn\" title=\"Go to bottom\" class=\"go_to_bottom_button1\" style='display: block;'></button>";
    print "<button onclick=\"topFunction('top')\" id=\"go_to_top_btn\" title=\"Go to top\" class=\"go_to_top_button1\" style='display: block;'></button>";
    print "<hr class=\"down_line\">\n";


    print '	<div class="col-10">';

#        print "<span class=\"down_text_lang\">\n";
    opendir DIR, "${DOCUMENT_ROOT}/${cgi_base_dir}/vars" or croak print "$DOCUMENT_ROOT/$cgi_dir/vars: $!<p><span class=\"down_text\">Gesti&oacute;IP v$VERSION</span>\n<p><br></div></body></html>";
    rewinddir DIR;
    my @vars_files;
    while ( $vars_file = readdir(DIR) ) {
        next if $vars_file =~ /^\./;
        push  @vars_files, $vars_file;
    }
#        while ( $vars_file = readdir(DIR) ) {
    foreach my $vars_file ( sort @vars_files ) {
        next if $vars_file =~ /^\./;
        $vars_file =~ /vars_(\w{2,3})/;
        my $lang_ext=$1;
        my $lang_ext_mayuscula=uc($lang_ext);
        print "<FORM name=\"lang_form_${lang_ext}\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline;\"><input type=\"hidden\" name=\"lang\" value=\"$lang_ext\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><INPUT TYPE=\"submit\" value=\"${lang_ext_mayuscula}\" title=\"$lang_vars{\"${lang_ext}_lang_message\"}\" class=\"input_link_lang\"></FORM>\n";
    }
    closedir DIR;

#        print "</span>\n";
    print "</div>\n";
    print '	<div class="col-2">';
    print "<span class=\"down_text\">$get_link Gesti&oacute;IP v$VERSION</span>\n<p><br>";
    print "</div>\n";
    print "</div>\n";

}
print "</div>";
print "</div>";
print "</div>";
print "</body>\n";
print "</html>\n";

exit 0;
}


sub CheckInput {
my ( $self,$client_id, $dat, $error, $noti, $vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $url_value_name="";
# TEST ?? linked_id - Fav....
my @linked_ip=$self->get_custom_column_ids_from_name("$client_id","Fav");
my $linked_ip_id=$linked_ip[0][0] || "";
foreach my $loc (sort keys %{$dat}) {
    my $value = ${$dat}{$loc};

    if ( ! $value ) { next; }

    if ( $value=~ /^URL$/ ) {
        $url_value_name=$loc;
        $url_value_name =~ s/name/value/;
    }

    if ( $value !~ /^(\n|.){1,500}$/ && ($loc ne "new_redes" && $loc ne "mass_update_network_ids" && $loc ne "mass_update_host_ids" && $loc ne "export_result" && $loc ne "custom_${linked_ip_id}_value" && $loc ne "locs_rw_perm" && $loc ne "locs_ro_perm" && $loc ne "mass_update_acls") ) {
        $value =~ /^((\n|.){200})(\n|.)*$/;
        $value = $1 . "...";
        $self->print_init("Gesti&oacute;IP","$noti","$lang_vars{max_signos_message} $value (1)","$vars_file","$client_id");
        $self->print_end("$client_id");
        exit 1;
    } elsif ( length($value) > 3000 && ($loc eq "new_redes" || $loc eq "mass_update_network_ids" || $loc eq "custom_${linked_ip_id}_value") ) {
        $value =~ /^((\n|.){200})(\n|.)*$/;
        $value = $1 . "...";
        $self->print_init("Gesti&oacute;IP","$noti","$lang_vars{max_signos_message} $value (2)","$vars_file","$client_id");
        $self->print_end("$client_id");
        exit 1;
    } elsif ( $loc eq $url_value_name && $value =~ /[;`'\\<>\^%#*]/ ) {
            $self->print_init("Gesti&oacute;IP","$noti","$lang_vars{unallowed_character_message} (1a)<p> &amp;;`'&lt;&gt;.=^%#*","$vars_file","$client_id");
            $self->print_end("$client_id");
            exit 1;
    } elsif ( $value =~ /[&;`'\\<>=\^%#*]/ && $loc ne $url_value_name && $loc ne "URL_value" && $loc ne "login_pass" && $loc ne "retype_login_pass" && $loc ne "auth_pass" && $loc ne "priv_pass" && $loc ne "retype_priv_pass" && $loc ne "community_string" && $loc ne "tsig_key" && $loc ne "community" && $loc ne $url_value_name && $loc ne "user_password" && $loc ne "new_user_password" && $loc ne "repeat_user_password" && $loc ne "master_key" && $loc ne "device_password" && $loc ne "repeat_master_key" && $loc ne "bind_dn" && $loc ne "base_dn" && $loc ne "filter" && $loc ne "dn" ) {
            $self->print_init("Gesti&oacute;IP","$noti","$lang_vars{unallowed_character_message} (2a)<p> &amp;;`'&lt;&gt;.=^%#*","$vars_file","$client_id");
            $self->print_end("$client_id");
            exit 1;
    }
}
$self->print_init("Gesti&oacute;IP","$noti","$noti","$vars_file","$client_id");
}


sub CheckInValue {
my ( $self,$client_id, $value_descr ) = @_;
    print "<h2>ERROR</h2>$value_descr<br>\n";
    print "</div>\n";
    print "</div>\n";
    print "</div>\n";
    print "</body></html>\n";
    exit 1;
}

sub CheckInIP {
my ( $self,$client_id, $value, $value_descr ) = @_;
if ( $value !~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ ) {
    print "<h3>ERROR</h3>$value_descr<br>\n";
    print "</div>\n";
    print "</div>\n";
    print "</body></html>\n";
    exit 1;
} elsif ( $value =~ /^0\./ ) {
    print "<h3>ERROR</h3>$value_descr<br>\n";
    print "</div>\n";
    print "</div>\n";
    print "</body></html>\n";
    exit 1;
}
$value =~ /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
if ( $1 > 255 || $2 > 255 || $3 > 255 || $4 > 255)  {
    print "<h3>ERROR</h3>$value_descr<br>\n";
    print "</div>\n";
    print "</div>\n";
    print "</body></html>\n";
    exit 1;
}
} 

sub get_redes_fav {
my ( $self,$client_id, $start_entry, $entries_per_page, $order_by, $ip_version_ele ) = @_;

my @values_redes;

my @fav_column=$self->get_custom_column_ids_from_name("$client_id","Fav");
my $fav=$fav_column[0][0] || "";

$entries_per_page = "unlimited" if ! $entries_per_page;

my $ip_version_ele_expr='';
$ip_version_ele = "" if ! $ip_version_ele;
if ( $ip_version_ele eq "v4" ) {
    $ip_version_ele_expr = " AND ip_version='v4'";
} elsif ( $ip_version_ele eq "v6" ) {
    $ip_version_ele_expr = " AND ip_version='v6'";
}

if ( $ip_version_ele eq "v4" ) {
    if ( $order_by eq "red_auf" ) {
        $order_by = "ORDER BY INET_ATON(n.red), BM+0, rootnet+0 DESC";
    } elsif ( $order_by eq "red_ab" ) {
        $order_by = "ORDER BY INET_ATON(n.red) DESC, BM+0 DESC, rootnet+0";
    } else {
        $order_by = "";
    }
} else {
    $order_by = "";
}


my $sth;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $ip_ref;

debug("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet FROM net n, locations l , categorias_net c, custom_net_column_entries cnce WHERE l.id = n.loc AND n.categoria = c.id AND cnce.net_id=n.red_num AND cnce.cc_id=$fav AND n.client_id = $qclient_id $ip_version_ele_expr $order_by");
$sth = $dbh->prepare("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet FROM net n, locations l , categorias_net c, custom_net_column_entries cnce WHERE l.id = n.loc AND n.categoria = c.id AND cnce.net_id=n.red_num AND cnce.cc_id=$fav AND n.client_id = $qclient_id $ip_version_ele_expr $order_by"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_redes, [ @$ip_ref ];
    }
    $dbh->disconnect;
    $sth->finish();

if ( defined($start_entry) && $entries_per_page ne "unlimited" ) {
    my $i=0;
    my @values_redes_tmp=();
    my $counter = $start_entry;
    foreach ( @values_redes ) {
        if ( $values_redes[$i] ) {
            $values_redes_tmp[$i] = $values_redes[$i];
        } else {
            $values_redes_tmp[$i]->[0] = "NO_IP";
        }
        $i++;
    }
    @values_redes=@values_redes_tmp;
}

    return @values_redes;
}

sub get_redes {
my ( $self,$client_id, $tipo_ele_id, $loc_ele_id, $start_entry, $entries_per_page, $order_by, $ip_version_ele, $show_rootnet, $show_endnet, $hide_not_rooted,$show_fav, $local_filter_enabled,$local_filter, $parent_network_id, $changed_red_num ) = @_;
my @values_redes;
my @values_redes_rootnets=();

my $freerange_ignore_non_root=$self->{freerange_ignore_non_root} || 0;

$entries_per_page = "unlimited" if ! $entries_per_page;

$local_filter_enabled=0 if ! $local_filter_enabled;

my $ip_version_ele_expr='';
my $ip_version_ele_expr_order='';
$ip_version_ele = "" if ! $ip_version_ele;
if ( $ip_version_ele eq "v4" ) {
    $ip_version_ele_expr = " AND ip_version='v4'";
    $ip_version_ele_expr_order = " AND ip_version='v4' ORDER BY INET_ATON(red)";
} elsif ( $ip_version_ele eq "v6" ) {
    $ip_version_ele_expr = " AND ip_version='v6'";
    $ip_version_ele_expr_order = " AND ip_version='v6' ORDER BY CAST(red as BINARY)";
#    $ip_version_ele_expr_order = $ip_version_ele_expr;
}

my $sth;
my $not_between_rootnet_expr="";
my $freerange_ignore_non_root_expr="";
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $parent_network_expr = "";
$parent_network_id = "" if ! $parent_network_id;
if ( $parent_network_id ) {
    my $qparent_network_id = $dbh->quote( $parent_network_id );
    $parent_network_expr = "AND n.parent_network_id=$qparent_network_id";
}

$hide_not_rooted="0" if ! $hide_not_rooted;
my $rootnet_ignore_expr = "";

if ( ($hide_not_rooted == 1 || $freerange_ignore_non_root == 1) && $ip_version_ele eq "v4") {
#if ( ($hide_not_rooted == 1 || $freerange_ignore_non_root == 1)) {
    my $ip_ref_root;
    $sth = $dbh->prepare("SELECT red, BM, red_num FROM net WHERE client_id = $qclient_id AND rootnet = '1' $ip_version_ele_expr_order"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref_root = $sth->fetchrow_arrayref ) {
        push @values_redes_rootnets, [ @$ip_ref_root ];
    }
    if ( @values_redes_rootnets ) {
        my $i=0;
        my $prev_redint = "";
        my $prev_last_ip_int = "";
        foreach ( @values_redes_rootnets ) {
            my $redob = "$values_redes_rootnets[$i]->[0]/$values_redes_rootnets[$i]->[1]";
            my $red_num_rootnet_ignore = $values_redes_rootnets[$i]->[2];
            if ( $red_num_rootnet_ignore eq $parent_network_id ) {
                $i++;
                next;
            }
            my $ipob_red = new Net::IP ($redob) || die "Can not create ip object $redob: $! (1)\n";
            my $redint="";
            $redint=$ipob_red->intip();
            $redint=Math::BigInt->new("$redint");
            my $last_ip_int="";
            $last_ip_int = $ipob_red->last_int();
            $last_ip_int=Math::BigInt->new("$last_ip_int");
            my $redint_uno = $redint + 1;
            my $last_ip_int_uno = $last_ip_int - 5;
# TEST - AND CAST(INET_ATON(n.red) AS BINARY) NOT BETWEEN...???
            if ( $hide_not_rooted == 1 ) {
                if ( $prev_redint && ( $redint >= $prev_redint && $last_ip_int <= $prev_last_ip_int )) {
                    $rootnet_ignore_expr .= " AND n.red_num !=$red_num_rootnet_ignore"
                } else {
                    $prev_redint = $redint;
                    $prev_last_ip_int = $last_ip_int;
                }
                $not_between_rootnet_expr.=" AND INET_ATON(n.red) NOT BETWEEN $redint AND $last_ip_int";
            } elsif ( $freerange_ignore_non_root == 1 ) {
                $freerange_ignore_non_root_expr.=" OR INET_ATON(n.red) BETWEEN $redint AND $last_ip_int";
            }
            $i++;
        }

        if ( $hide_not_rooted == 1 && $show_rootnet == 1 ) {
            $not_between_rootnet_expr =~ s/^\sAND//;
            $not_between_rootnet_expr="AND ((($not_between_rootnet_expr) AND rootnet=0) OR rootnet=1) $rootnet_ignore_expr ";
        }
        if ( $freerange_ignore_non_root == 1 ) {
            $freerange_ignore_non_root_expr=~s/^ OR //;
            $freerange_ignore_non_root_expr="AND ($freerange_ignore_non_root_expr)";
        }
    }
}

$show_rootnet=1 if ! defined($show_rootnet);
$show_endnet=1 if ! defined($show_endnet);

if ( $ip_version_ele eq "v4" ) {
    if ( $order_by eq "red_auf" ) {
        $order_by = "ORDER BY INET_ATON(n.red), BM+0, rootnet+0 DESC";
    } elsif ( $order_by eq "red_ab" ) {
        $order_by = "ORDER BY INET_ATON(n.red) DESC, BM+0 DESC, rootnet+0";
    } else {
        $order_by = "";
    }
} else {
    $order_by = "";
}


my $root_end_net_expr="";
if ( $show_rootnet == 1 && $show_endnet == 0 ) { 
    $root_end_net_expr="AND n.rootnet = '1'";
} elsif ( $show_rootnet == 0 && $show_endnet == 1 ) { 
    $root_end_net_expr="AND n.rootnet = '0'";
}

my ($tipo_ele, $qtipo_ele);
if ( $tipo_ele_id && $tipo_ele_id ne "-1" ) {
    $qtipo_ele = $dbh->quote( $tipo_ele_id );
    $tipo_ele = "n.categoria =" .  $qtipo_ele . " AND "
} else {
    $tipo_ele = "";
}
my ($loc_ele, $qloc_ele);
if ( $loc_ele_id && $loc_ele_id ne "-1" ) {
    $qloc_ele = $dbh->quote( $loc_ele_id );
    $loc_ele = "n.loc =" .  $qloc_ele . " AND "
} else {
    $loc_ele = "";
}

my $ip_ref;

if ( $local_filter_enabled == 0 && $local_filter ) {
    debug("A: SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet, n.parent_network_id FROM net n, locations l , categorias_net c WHERE $tipo_ele $loc_ele l.id = n.loc AND n.categoria = c.id AND n.client_id = $qclient_id $ip_version_ele_expr $root_end_net_expr $not_between_rootnet_expr $freerange_ignore_non_root_expr $parent_network_expr AND n.red_num IN ( SELECT red_num FROM net WHERE red_num NOT IN (SELECT net_id FROM custom_net_column_entries WHERE cc_id = (SELECT id FROM custom_net_columns WHERE column_type_id = ( SELECT id FROM predef_net_columns WHERE name = 'local')))) $order_by");
    $sth = $dbh->prepare("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet, n.parent_network_id FROM net n, locations l , categorias_net c WHERE $tipo_ele $loc_ele l.id = n.loc AND n.categoria = c.id AND n.client_id = $qclient_id $ip_version_ele_expr $root_end_net_expr $not_between_rootnet_expr $freerange_ignore_non_root_expr $parent_network_expr AND n.red_num IN ( SELECT red_num FROM net WHERE red_num NOT IN (SELECT net_id FROM custom_net_column_entries WHERE cc_id = (SELECT id FROM custom_net_columns WHERE column_type_id = ( SELECT id FROM predef_net_columns WHERE name = 'local')))) $order_by"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} else {
    debug("B: SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet, n.parent_network_id FROM net n, locations l , categorias_net c WHERE $tipo_ele $loc_ele l.id = n.loc AND n.categoria = c.id AND n.client_id = $qclient_id $ip_version_ele_expr $root_end_net_expr $not_between_rootnet_expr $freerange_ignore_non_root_expr $parent_network_expr $order_by");
    $sth = $dbh->prepare("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet, n.parent_network_id FROM net n, locations l , categorias_net c WHERE $tipo_ele $loc_ele l.id = n.loc AND n.categoria = c.id AND n.client_id = $qclient_id $ip_version_ele_expr $root_end_net_expr $not_between_rootnet_expr $freerange_ignore_non_root_expr $parent_network_expr $order_by"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_redes, [ @$ip_ref ];
    }
    $dbh->disconnect;
    $sth->finish();

if ( defined($start_entry) && $entries_per_page ne "unlimited" ) {
    my $i=0;
    my @values_redes_tmp=();
    my $counter = $start_entry;
    foreach ( @values_redes ) {
        if ( $values_redes[$i] ) {
            $values_redes_tmp[$i] = $values_redes[$i];
        } else {
            $values_redes_tmp[$i]->[0] = "NO_IP";
        }
        $i++;
    }
    @values_redes=@values_redes_tmp;
}

    return @values_redes;

}

sub get_rootnet_chain {
my ( $self, $client_id, $ip_version_ele, $object ) = @_;

$object = "" if ! $object;

my @values_redes;
my @values_redes_rootnets=();
my $rootnet_chain;

my $ip_version_ele_expr='';
my $ip_version_ele_expr_order='';
$ip_version_ele = "" if ! $ip_version_ele;
if ( $ip_version_ele eq "v4" ) {
    $ip_version_ele_expr = " AND ip_version='v4'";
    $ip_version_ele_expr_order = " AND ip_version='v4' ORDER BY INET_ATON(red)";
} elsif ( $ip_version_ele eq "v6" ) {
    $ip_version_ele_expr = " AND ip_version='v6' ORDER BY BM";
    $ip_version_ele_expr_order = $ip_version_ele_expr;
}

my $redint_check = $self->{rootnet_first_ip_int};
$redint_check=Math::BigInt->new("$redint_check");
my $last_ip_check_int = $self->{rootnet_last_ip_int};
$last_ip_check_int=Math::BigInt->new("$last_ip_check_int");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my $base_url = "$server_proto://$base_uri";

my $sth;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $ip_ref_root;
debug("SELECT red, BM, red_num, parent_network_id FROM net WHERE client_id = $qclient_id AND rootnet = '1' $ip_version_ele_expr_order");
$sth = $dbh->prepare("SELECT red, BM, red_num, parent_network_id FROM net WHERE client_id = $qclient_id AND rootnet = '1' $ip_version_ele_expr_order"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref_root = $sth->fetchrow_arrayref ) {
    push @values_redes_rootnets, [ @$ip_ref_root ];
}
if ( @values_redes_rootnets ) {
    my $i=0;
    foreach ( @values_redes_rootnets ) {
        my $red_comp = ip_compress_address ($values_redes_rootnets[$i]->[0], 6) if $ip_version_ele eq "v6";
        my $redob = "$values_redes_rootnets[$i]->[0]/$values_redes_rootnets[$i]->[1]";
        my $red_num = $values_redes_rootnets[$i]->[2];
        my $parent_network_id = $values_redes_rootnets[$i]->[3];
        my $ipob_red = new Net::IP ($redob) || die "Can not create ip object $redob: $! (1)\n";
        my $redint="";
        my $red_show = $redob;
        $red_show = "$red_comp/$values_redes_rootnets[$i]->[1]" if $ip_version_ele eq "v6";
        $redint=$ipob_red->intip();
        $redint=Math::BigInt->new("$redint");
        my $last_ip_int="";
        $last_ip_int = $ipob_red->last_int();
        $last_ip_int=Math::BigInt->new("$last_ip_int");
        $last_ip_int++ if $ip_version_ele eq "v6";
        my $onclick = 'onclick=\\\'load_content_net_simple("' . ${base_url} . '/index_nohead.cgi","&client_id=' . $client_id . '&parent_network_id=' . $red_num . '");\\\'';
        $onclick = 'onclick=\\\'load_url("' . ${base_url} . '/index.cgi?&client_id=' . $client_id . '&parent_network_id=' . $red_num . '");\\\'' if $object eq "host";
        if ( $redint_check >= $redint && $last_ip_check_int <= $last_ip_int ) {
            $rootnet_chain .= '<span class="fa fa-angle-right p-0 m-0" style="font-size:0.6em;"></span> <span class="pointer" ' . $onclick . '> ' . $red_show . '</span> ';
        }
        $i++;
    }
}

$rootnet_chain =~ s/fa fa-angle-right//;

return $rootnet_chain;
}


sub prepare_redes_array {
my ( $self,$client_id, $ip, $order_by,$start_entry,$entries_per_page,$ip_version_ele ) = @_;
my $script_name="";
$script_name=$ENV{'SCRIPT_NAME'};

my @custom_columns = $self->get_custom_columns("$client_id");
my %custom_columns_values=$self->get_custom_column_values_red("$client_id");
my @cc_ids=$self->get_custom_column_ids("$client_id");
my $custom_column_val;
my $j=0;
foreach (@{$ip}) {
    last if ! @{$ip}[$j] || @{$ip}[$j]->[0] eq "NO_IP";
    my $red_num = @{$ip}[$j]->[3];
    @{$ip}[$j]->[2] = "zzzzzzzzzZ" if ( ! @{$ip}[$j]->[2] || @{$ip}[$j]->[2] eq "NULL" ); #descr
    @{$ip}[$j]->[4] = "zzzzzzzzzZ" if ( ! @{$ip}[$j]->[4] || @{$ip}[$j]->[4] eq "NULL" ); #loc
    @{$ip}[$j]->[6] = "zzzzzzzzzZ" if ( ! @{$ip}[$j]->[6] || @{$ip}[$j]->[6] eq "NULL" ); #comentario
    @{$ip}[$j]->[7] = "zzzzzzzzzZ" if ( ! @{$ip}[$j]->[7] || @{$ip}[$j]->[7] eq "NULL" ); #cat

    #add custom columns to array
#		my $x="11";
    my $x="12";
    foreach ( @cc_ids ) {
        my $cc_name = "";
        my $id=$_->[0];
        if ( $custom_columns_values{"${id}_${red_num}"} ) {
            $custom_column_val=$custom_columns_values{"${id}_${red_num}"};
            @{$ip}[$j]->[$x] = $custom_column_val;	
        } else {
            @{$ip}[$j]->[$x] = "zzzzzzzzzZ";	
        }
        $x++;
    }
    $j++;
}

my $order_by_counter="0";
if ( $order_by =~ /BM/ ) {
    $order_by_counter = "1";
} elsif ( $order_by =~ /description/ ) {
    $order_by_counter = "2";
} elsif ( $order_by =~ /loc/ ) {
    $order_by_counter = "4";
} elsif ( $order_by =~ /cat/ ) {
    $order_by_counter = "7";
} elsif ( $order_by =~ /sinc/ ) {
    $order_by_counter = "5";
} elsif ( $order_by =~ /comentario/ ) {
    $order_by_counter = "6";
} else {
    my $x = 11;
    foreach ( @custom_columns ) {
        if ( $order_by =~ /\Q$_->[0]\E/ ) {
            $order_by_counter=$x;
            last;
        }
        $x++;
    }
}

$order_by =~ /.+_(auf|ab)$/;
my $sort=$1 || "auf";
my $k=0;
my $ip_sorted;

my $cc_name_string;
if ( $order_by !~ /red/ ) {
    my @cc_columns = $self->get_custom_columns("$client_id");

    foreach my $cc_name ( @cc_columns ) {
        my $name = $cc_name->[0];
        $cc_name_string .= "|$name";
    }
    $cc_name_string =~ s/^\|// if $cc_name_string;
}

if ( $order_by =~ /BM/ ) {
    if ( $order_by =~ /auf/ ) {
        for my $list_ref ( sort { $a->[$order_by_counter] <=> $b->[$order_by_counter] } @{$ip} ) {
            @{$ip_sorted}[$k] = $list_ref;
            $k++;
        }
    } else {
        for my $list_ref ( sort { $b->[$order_by_counter] <=> $a->[$order_by_counter] } @{$ip} ) {
            @{$ip_sorted}[$k] = $list_ref;
            $k++;
        }
    }
} elsif ( $order_by !~ /red/ && $cc_name_string && $order_by =~ /[$cc_name_string]/ ) {
	my $desc = "";
	my @cc_order_values;
	my $cc_name;
	$order_by =~ /(.*)_[auf|ab]/;
	$cc_name = $1;
	$desc = "desc" if $order_by =~ /_ab/;
#    if ( $order_by =~ /vlan/i ) {
		# get sorted red_nums
		my $ip_ref;
		my $dbh = $self->_mysql_connection();
		debug("select net_id from custom_net_column_entries where cc_id = ( select id from custom_net_columns where name='$cc_name' ) order by entry $desc");
		my $sth = $dbh->prepare("select net_id from custom_net_column_entries where cc_id = ( select id from custom_net_columns where name='$cc_name' ) order by entry $desc")
			or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
		$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
		while ( $ip_ref = $sth->fetchrow_arrayref ) {
			push @cc_order_values, [ @$ip_ref ];
		}
		$dbh->disconnect;
		$sth->finish();
#    }

    my $l=0;
	foreach my $val ( @cc_order_values ) {
		my $net_id = $cc_order_values[$l]->[0];
        $l++;
    }

	my %cc_order;

	$l = 0;
	my %ip_order;
	foreach my $list_ref ( @$ip ) {
		# create a hash red_num -> index of @$ip
		my $testy = $ip->[$l][0];
		my $net_id = $ip->[$l][3];
		my $ip_version = $ip->[$l][9];
        next if $ip_version ne $ip_version_ele;
		$ip_order{$net_id} = $l;
		$l++;
	}

	my @used;
	$l = 0;
	foreach my $val ( @cc_order_values ) {
		my $net_id = $cc_order_values[$l]->[0];
		my $net_id_index = $ip_order{$net_id};
		@{$ip_sorted}[$l] = @{$ip}[$net_id_index];
		push @used, $net_id_index;
		$l++;
	}

	@used = sort { $b <=> $a } @used;
	foreach my $index ( @used ) {
		splice @$ip, $index, 1; 
	}

	if ( $order_by =~ /_auf/ ) {
		push @$ip_sorted, @$ip;
	} else {
		push @$ip, @$ip_sorted;
		@$ip_sorted = @$ip;
	}

} elsif ( $order_by !~ /red/ ) {

	my $k = 0;

    if ( $order_by =~ /auf/ ) {
        for my $list_ref ( sort { $a->[$order_by_counter] <=> $b->[$order_by_counter] } @{$ip} ) {
            @{$ip_sorted}[$k] = $list_ref;
            $k++;
        }
    } else {
        for my $list_ref ( sort { $b->[$order_by_counter] <=> $a->[$order_by_counter] } @{$ip} ) {
            @{$ip_sorted}[$k] = $list_ref;
            $k++;
        }
    }
} elsif ( $order_by =~ /red/ && $ip_version_ele eq "v6" ) {

    sub sort_auf {
        my $X = $a->[0];
        my $Y = $b->[0];
#			pack('H4'x8 => $a->[0] =~ /(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)/) cmp pack('H4'x8 => $b->[0] =~ /(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)/) || ( $a->[1] <=> $b->[1] ) || ( $b->[10] <=> $a->[10] );
        if ( $a->[9] eq "v6" ) {
            $X = ip_expand_address ($X,6);
            $Y = ip_expand_address ($Y,6);
        }
        pack('H4'x8 => $X =~ /(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)/) cmp pack('H4'x8 => $Y =~ /(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)/) || ( $a->[1] <=> $b->[1] ) || ( $b->[10] <=> $a->[10] );
    }
    sub sort_ab {
        pack('H4'x8 => $b->[0] =~ /(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)/) cmp pack('H4'x8 => $a->[0] =~ /(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)\:(\w+)/ ) || ( $b->[1] <=> $a->[1] ) || ( $a->[10] <=> $b->[10] );
    }

    if ( $order_by =~ /auf/ ) {
        foreach my $list_ref ( sort sort_auf @{$ip} ) {
            @{$ip_sorted}[$k] = $list_ref;
            $k++;
        }
    } else {
        foreach my $list_ref ( sort sort_ab @{$ip} ) {
            @{$ip_sorted}[$k] = $list_ref;
            $k++;
        }
    }
} elsif ( $order_by =~ /red/ && $ip_version_ele eq "v4" && $script_name !~ /show_free_range/ ) {
    $ip_sorted = $ip;
} elsif ( $order_by =~ /red/ && $ip_version_ele eq "v4" && $script_name =~ /show_free_range/ ) {
    @{$ip_sorted} = sort {
        pack('C4' => $a->[0] =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/) cmp pack('C4' => $b->[0] =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/) or $a->[1] <=> $b->[1]
    } @{$ip};
}

my $ip_new;
my $i=0;
$j=0;
my $end_entry = $start_entry + $entries_per_page;
foreach ( @{$ip_sorted} ) {
    if ( $i == $end_entry ) {
        last if $i == $end_entry;
    }
    if ( $i >= $start_entry ) {
        @{$ip_new}[$j] = @{$ip_sorted}[$i];
        $j++;
    }
    $i++;
}

$ip_sorted=$ip_new;
return $ip_sorted;
}



sub get_redes_match {
my ( $self,$client_id, $match,$ip_version_ele ) = @_;
    my @values_redes;
my $ip_ref;

$ip_version_ele="" if ! $ip_version_ele;
my $ip_version_ele_expr='';
my $order_by_expr='';
if ( $ip_version_ele eq "v4" ) {
    $ip_version_ele_expr = " AND ip_version='v4'";
    $order_by_expr="ORDER BY INET_ATON(n.red)";
} elsif ( $ip_version_ele eq "v6" ) {
    $ip_version_ele_expr = " AND ip_version='v6'";
    $order_by_expr="ORDER BY n.red";
} else {
    $order_by_expr="ORDER BY n.red";
}

    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth;
debug("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet FROM net n, locations l , categorias_net c WHERE l.id = n.loc AND n.categoria = c.id  AND (n.red LIKE \"%$match%\" OR n.descr LIKE \"%$match%\" OR l.loc LIKE \"%$match%\" OR c.cat LIKE \"%$match%\" OR n.comentario LIKE \"%$match%\" OR (n.red_num IN (SELECT net_id FROM custom_net_column_entries WHERE entry LIKE \"%$match%\"))) AND n.client_id=$qclient_id $ip_version_ele_expr $order_by_expr");
$sth = $dbh->prepare("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet FROM net n, locations l , categorias_net c WHERE l.id = n.loc AND n.categoria = c.id  AND (n.red LIKE \"%$match%\" OR n.descr LIKE \"%$match%\" OR l.loc LIKE \"%$match%\" OR c.cat LIKE \"%$match%\" OR n.comentario LIKE \"%$match%\" OR (n.red_num IN (SELECT net_id FROM custom_net_column_entries WHERE entry LIKE \"%$match%\"))) AND n.client_id=$qclient_id $ip_version_ele_expr $order_by_expr
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_redes, [ @$ip_ref ];
    }
    $dbh->disconnect;
    $sth->finish();
    return @values_redes;
}

sub get_allowed_characters {
#	my $allowd='\xC2\xA1\xC2\xA2\xC2\xA3\xC2\xA4\xC2\xA5\xC2\xA6\xC2\xA7\xC2\xA8\xC2\xA9\xC2\xAA\xC2\xAB\xC2\xAC\xC2\xAD\xC2\xAE\xC2\xAF\xC2\xB0\xC2\xB1\xC2\xB2\xC2\xB3\xC2\xB4\xC2\xB5\xC2\xB6\xC2\xB7\xC2\xB8\xC2\xB9\xC2\xBA\xC2\xBB\xC2\xBC\xC2\xBD\xC2\xBE\xC2\xBF\xC3\x80\xC3\x81\xC3\x82\xC3\x83\xC3\x84\xC3\x85\xC3\x86\xC3\x87\xC3\x88\xC3\x89\xC3\x8A\xC3\x8B\xC3\x8C\xC3\x8D\xC3\x8E\xC3\x8F\xC3\x90\xC3\x91\xC3\x92\xC3\x93\xC3\x94\xC3\x95\xC3\x96\xC3\x97\xC3\x98\xC3\x99\xC3\x9A\xC3\x9B\xC3\x9C\xC3\x9D\xC3\x9E\xC3\x9F\xC3\xA0\xC3\xA1\xC3\xA2\xC3\xA3\xC3\xA4\xC3\xA5\xC3\xA6\xC3\xA7\xC3\xA8\xC3\xA9\xC3\xAA\xC3\xAB\xC3\xAC\xC3\xAD\xC3\xAE\xC3\xAF\xC3\xB0\xC3\xB1\xC3\xB2\xC3\xB3\xC3\xB4\xC3\xB5\xC3\xB6\xC3\xB7\xC3\xB8\xC3\xB9\xC3\xBA\xC3\xBB\xC3\xBC\xC3\xBD\xC3\xBE\xC3\xBF\xe2\x82\xac\xc5\x92\xc5\x93\xc5\xa0\xc5\xa1\xc5\xb8\xc6\x92\xc4\x84\xc4\x86\xc4\x98\xc5\x81\xc5\x81\xc5\x9a\xc5\xb9\xc5\xbb\xc4\x85\xc4\x87\xc4\x99\xc5\x82\xc5\x84\xc5\x9b\xc5\xba\xc5\xbc=&?!_\.,:\-\@()\w\/\[\]{}|~\+\n\r\f\t\s';
# russian support
#	my $allowd='\xC2\xA1\xC2\xA2\xC2\xA3\xC2\xA4\xC2\xA5\xC2\xA6\xC2\xA7\xC2\xA8\xC2\xA9\xC2\xAA\xC2\xAB\xC2\xAC\xC2\xAD\xC2\xAE\xC2\xAF\xC2\xB0\xC2\xB1\xC2\xB2\xC2\xB3\xC2\xB4\xC2\xB5\xC2\xB6\xC2\xB7\xC2\xB8\xC2\xB9\xC2\xBA\xC2\xBB\xC2\xBC\xC2\xBD\xC2\xBE\xC2\xBF\xC3\x80\xC3\x81\xC3\x82\xC3\x83\xC3\x84\xC3\x85\xC3\x86\xC3\x87\xC3\x88\xC3\x89\xC3\x8A\xC3\x8B\xC3\x8C\xC3\x8D\xC3\x8E\xC3\x8F\xC3\x90\xC3\x91\xC3\x92\xC3\x93\xC3\x94\xC3\x95\xC3\x96\xC3\x97\xC3\x98\xC3\x99\xC3\x9A\xC3\x9B\xC3\x9C\xC3\x9D\xC3\x9E\xC3\x9F\xC3\xA0\xC3\xA1\xC3\xA2\xC3\xA3\xC3\xA4\xC3\xA5\xC3\xA6\xC3\xA7\xC3\xA8\xC3\xA9\xC3\xAA\xC3\xAB\xC3\xAC\xC3\xAD\xC3\xAE\xC3\xAF\xC3\xB0\xC3\xB1\xC3\xB2\xC3\xB3\xC3\xB4\xC3\xB5\xC3\xB6\xC3\xB7\xC3\xB8\xC3\xB9\xC3\xBA\xC3\xBB\xC3\xBC\xC3\xBD\xC3\xBE\xC3\xBF\xe2\x82\xac\xc5\x92\xc5\x93\xc5\xa0\xc5\xa1\xc5\xb8\xc6\x92\xc4\x84\xc4\x86\xc4\x98\xc5\x81\xc5\x81\xc5\x9a\xc5\xb9\xc5\xbb\xc4\x85\xc4\x87\xc4\x99\xc5\x82\xc5\x84\xc5\x9b\xc5\xba\xc5\xbc\xD1\x8E\xD0\xB0\xD0\xB1\xD1\x86\xD0\xB4\xD0\xB5\xD1\x84\xD0\xB3\xD1\x85\xD0\xB8\xD0\xB9\xD0\xBA\xD0\xBB\xD0\xBC\xD0\xBD\xD0\xBE\xD0\xBF\xD1\x8F\xD1\x80\xD1\x81\xD1\x82\xD1\x83\xD0\xB6\xD0\xB2\xD1\x8C\xD1\x8B\xD0\xB7\xD1\x88\xD1\x8D\xD1\x89\xD1\x87\xD1\x8A\xD0\xAE\xD0\x90\xD0\x91\xD0\xA6\xD0\x94\xD0\x95\xD0\xA4\xD0\x93\xD0\xA5\xD0\x98\xD0\x99\xD0\x9A\xD0\x9B\xD0\x9C\xD0\x9D\xD0\x9E\xD0\x9F\xD0\xAF\xD0\xA0\xD0\xA1\xD0\xA2\xD0\xA3\xD0\x96\xD0\x92\xD0\xAC\xD0\xAB\xD0\x97\xD0\xA8\xD0\xAD\xD0\xA9\xD0\xA7\xD2\x91\xD1\x92\xD1\x93\xD1\x94\xD1\x91\xD1\x95\xD1\x96\xD1\x97\xD1\x98\xD1\x99\xD1\x9A\xD1\x9B\xD1\x9C\xD1\x9E\xD1\x9F\xD1\xA3\xD1\xB3\xD1\xB5\xD1\xAB\x5B\x5D\x5F\xD2\x90\xD0\x82\xD0\x83\xD0\x84\xD0\x81\xD0\x85\xD0\x86\xD0\x87\xD0\x88\xD0\x89\xD0\x8A\xD0\x8B\xD0\x8C\xD0\x8E\xD0\x8F\xD0\xAA\xD1\xA2\xD1\xB2\xD1\xB4\xD1\xAA=&?!_\.,:\-\@()\w\/\[\]{}|~\+\n\r\f\t\s';
# russian and hebrew support
my $allowd='\xC2\xA1\xC2\xA2\xC2\xA3\xC2\xA4\xC2\xA5\xC2\xA6\xC2\xA7\xC2\xA8\xC2\xA9\xC2\xAA\xC2\xAB\xC2\xAC\xC2\xAD\xC2\xAE\xC2\xAF\xC2\xB0\xC2\xB1\xC2\xB2\xC2\xB3\xC2\xB4\xC2\xB5\xC2\xB6\xC2\xB7\xC2\xB8\xC2\xB9\xC2\xBA\xC2\xBB\xC2\xBC\xC2\xBD\xC2\xBE\xC2\xBF\xC3\x80\xC3\x81\xC3\x82\xC3\x83\xC3\x84\xC3\x85\xC3\x86\xC3\x87\xC3\x88\xC3\x89\xC3\x8A\xC3\x8B\xC3\x8C\xC3\x8D\xC3\x8E\xC3\x8F\xC3\x90\xC3\x91\xC3\x92\xC3\x93\xC3\x94\xC3\x95\xC3\x96\xC3\x97\xC3\x98\xC3\x99\xC3\x9A\xC3\x9B\xC3\x9C\xC3\x9D\xC3\x9E\xC3\x9F\xC3\xA0\xC3\xA1\xC3\xA2\xC3\xA3\xC3\xA4\xC3\xA5\xC3\xA6\xC3\xA7\xC3\xA8\xC3\xA9\xC3\xAA\xC3\xAB\xC3\xAC\xC3\xAD\xC3\xAE\xC3\xAF\xC3\xB0\xC3\xB1\xC3\xB2\xC3\xB3\xC3\xB4\xC3\xB5\xC3\xB6\xC3\xB7\xC3\xB8\xC3\xB9\xC3\xBA\xC3\xBB\xC3\xBC\xC3\xBD\xC3\xBE\xC3\xBF\xe2\x82\xac\xc5\x92\xc5\x93\xc5\xa0\xc5\xa1\xc5\xb8\xc6\x92\xc4\x84\xc4\x86\xc4\x98\xc5\x81\xc5\x81\xc5\x9a\xc5\xb9\xc5\xbb\xc4\x85\xc4\x87\xc4\x99\xc5\x82\xc5\x84\xc5\x9b\xc5\xba\xc5\xbc\xD1\x8E\xD0\xB0\xD0\xB1\xD1\x86\xD0\xB4\xD0\xB5\xD1\x84\xD0\xB3\xD1\x85\xD0\xB8\xD0\xB9\xD0\xBA\xD0\xBB\xD0\xBC\xD0\xBD\xD0\xBE\xD0\xBF\xD1\x8F\xD1\x80\xD1\x81\xD1\x82\xD1\x83\xD0\xB6\xD0\xB2\xD1\x8C\xD1\x8B\xD0\xB7\xD1\x88\xD1\x8D\xD1\x89\xD1\x87\xD1\x8A\xD0\xAE\xD0\x90\xD0\x91\xD0\xA6\xD0\x94\xD0\x95\xD0\xA4\xD0\x93\xD0\xA5\xD0\x98\xD0\x99\xD0\x9A\xD0\x9B\xD0\x9C\xD0\x9D\xD0\x9E\xD0\x9F\xD0\xAF\xD0\xA0\xD0\xA1\xD0\xA2\xD0\xA3\xD0\x96\xD0\x92\xD0\xAC\xD0\xAB\xD0\x97\xD0\xA8\xD0\xAD\xD0\xA9\xD0\xA7\xD2\x91\xD1\x92\xD1\x93\xD1\x94\xD1\x91\xD1\x95\xD1\x96\xD1\x97\xD1\x98\xD1\x99\xD1\x9A\xD1\x9B\xD1\x9C\xD1\x9E\xD1\x9F\xD1\xA3\xD1\xB3\xD1\xB5\xD1\xAB\x5B\x5D\x5F\xD2\x90\xD0\x82\xD0\x83\xD0\x84\xD0\x81\xD0\x85\xD0\x86\xD0\x87\xD0\x88\xD0\x89\xD0\x8A\xD0\x8B\xD0\x8C\xD0\x8E\xD0\x8F\xD0\xAA\xD1\xA2\xD1\xB2\xD1\xB4\xD1\xAA\xd6\x91\xd6\x92\xd6\x93\xd6\x94\xd6\x95\xd6\x96\xd6\x97\xd6\x98\xd6\x99\xd6\x9a\xd6\x9b\xd6\x9c\xd6\x9d\xd6\x9e\xd6\x9f\xd6\xa0\xd6\xa1\xd6\xa3\xd6\xa4\xd6\xa5\xd6\xa6\xd6\xa7\xd6\xa8\xd6\xa9\xd6\xaa\xd6\xab\xd6\xac\xd6\xad\xd6\xae\xd6\xaf\xd6\xb0\xd6\xb1\xd6\xb2\xd6\xb3\xd6\xb4\xd6\xb5\xd6\xb6\xd6\xb7\xd6\xb8\xd6\xb9\xd6\xbb\xd6\xbc\xd6\xbd\xd6\xbe\xd6\xbf\xd7\x80\xd7\x81\xd7\x82\xd7\x83\xd7\x84\xd7\x90\xd7\x91\xd7\x92\xd7\x93\xd7\x94\xd7\x95\xd7\x96\xd7\x97\xd7\x98\xd7\x99\xd7\x9a\xd7\x9b\xd7\x9c\xd7\x9d\xd7\x9e\xd7\x9f\xd7\xa0\xd7\xa1\xd7\xa2\xd7\xa3\xd7\xa4\xd7\xa5\xd7\xa6\xd7\xa7\xd7\xa8\xd7\xa9\xd7\xaa\xd7\xb0\xd7\xb1\xd7\xb2\xd7\xb3\xd7\xb4=&?!_\.,:\-\@()\w\/\[\]{}|~\+\n\r\f\t\s';
return $allowd;
}

sub get_allowed_characters_descr {
#	my $allowd='\xC2\xA1|\xC2\xA2|\xC2\xA3|\xC2\xA4|\xC2\xA5|\xC2\xA6|\xC2\xA7|\xC2\xA8|\xC2\xA9|\xC2\xAA|\xC2\xAB|\xC2|\xC2\xAD|\xC2\xAE|\xC2\xAF|\xC2\xB0|\xC2\xB1|\xC2\xB2|\xC2\xB3|\xC2\xB4|\xC2\xB5|\xC2\xB6|\xC2\xB7|\xC2\xB8|\xC2\xB9|\xC2\xBA|\xC2\xBB|\xC2\xBC|\xC2\xBD|\xC2\xBE|\xC2\xBF|\xC3\x80|\xC3\x81|\xC3\x82|\xC3\x83|\xC3\x84|\xC3\x85|\xC3\x86|\xC3\x87|\xC3\x88|\xC3\x89|\xC3\x8A|\xC3\x8B|\xC3\x8C|\xC3\x8D|\xC3\x8E|\xC3\x8F|\xC3\x90|\xC3\x91|\xC3\x92|\xC3\x93|\xC3\x94|\xC3\x95|\xC3\x96|\xC3\x97|\xC3\x98|\xC3\x99|\xC3\x9A|\xC3\x9B|\xC3\x9C|\xC3\x9D|\xC3\x9E|\xC3\x9F|\xC3\xA0|\xC3\xA1|\xC3\xA2|\xC3\xA3|\xC3\xA4|\xC3\xA5|\xC3\xA6|\xC3\xA7|\xC3\xA8|\xC3\xA9|\xC3\xAA|\xC3\xAB|\xC3\xAC|\xC3\xAD|\xC3\xAE|\xC3\xAF|\xC3\xB0|\xC3\xB1|\xC3\xB2|\xC3\xB3|\xC3\xB4|\xC3\xB5|\xC3\xB6|\xC3\xB7|\xC3\xB8|\xC3\xB9|\xC3\xBA|\xC3\xBB|\xC3\xBC|\xC3\xBD|\xC3\xBE|\xC3\xBF|\xe2\x82\xac|\xc5\x92|\xc5\x93|\xc5\xa0|\xc5\xa1|\xc5\xb8|\xc6\x92|\xc4\x84|\xc4\x86|\xc4\x98|\xc5\x81|\xc5\x81|\xc5\x9a|\xc5\xb9|\xc5\xbb|\xc4\x85|\xc4\x87|\xc4\x99|\xc5\x82|\xc5\x84|\xc5\x9b|\xc5\xba|\xc5\xbc|\w|\?|_|\.|,|:|\-|\@|\(|\/|\[|\]|{|}|\||~|\+|\n|\r|\f|\t|\s';

# russian support
#	my $allowd='\xC2\xA1|\xC2\xA2|\xC2\xA3|\xC2\xA4|\xC2\xA5|\xC2\xA6|\xC2\xA7|\xC2\xA8|\xC2\xA9|\xC2\xAA|\xC2\xAB|\xC2|\xC2\xAD|\xC2\xAE|\xC2\xAF|\xC2\xB0|\xC2\xB1|\xC2\xB2|\xC2\xB3|\xC2\xB4|\xC2\xB5|\xC2\xB6|\xC2\xB7|\xC2\xB8|\xC2\xB9|\xC2\xBA|\xC2\xBB|\xC2\xBC|\xC2\xBD|\xC2\xBE|\xC2\xBF|\xC3\x80|\xC3\x81|\xC3\x82|\xC3\x83|\xC3\x84|\xC3\x85|\xC3\x86|\xC3\x87|\xC3\x88|\xC3\x89|\xC3\x8A|\xC3\x8B|\xC3\x8C|\xC3\x8D|\xC3\x8E|\xC3\x8F|\xC3\x90|\xC3\x91|\xC3\x92|\xC3\x93|\xC3\x94|\xC3\x95|\xC3\x96|\xC3\x97|\xC3\x98|\xC3\x99|\xC3\x9A|\xC3\x9B|\xC3\x9C|\xC3\x9D|\xC3\x9E|\xC3\x9F|\xC3\xA0|\xC3\xA1|\xC3\xA2|\xC3\xA3|\xC3\xA4|\xC3\xA5|\xC3\xA6|\xC3\xA7|\xC3\xA8|\xC3\xA9|\xC3\xAA|\xC3\xAB|\xC3\xAC|\xC3\xAD|\xC3\xAE|\xC3\xAF|\xC3\xB0|\xC3\xB1|\xC3\xB2|\xC3\xB3|\xC3\xB4|\xC3\xB5|\xC3\xB6|\xC3\xB7|\xC3\xB8|\xC3\xB9|\xC3\xBA|\xC3\xBB|\xC3\xBC|\xC3\xBD|\xC3\xBE|\xC3\xBF|\xe2\x82\xac|\xc5\x92|\xc5\x93|\xc5\xa0|\xc5\xa1|\xc5\xb8|\xc6\x92|\xc4\x84|\xc4\x86|\xc4\x98|\xc5\x81|\xc5\x81|\xc5\x9a|\xc5\xb9|\xc5\xbb|\xc4\x85|\xc4\x87|\xc4\x99|\xc5\x82|\xc5\x84|\xc5\x9b|\xc5\xba|\xc5\xbc|\xD1\x8E|\xD0\xB0|\xD0\xB1|\xD1\x86|\xD0\xB4|\xD0\xB5|\xD1\x84|\xD0\xB3|\xD1\x85|\xD0\xB8|\xD0\xB9|\xD0\xBA|\xD0\xBB|\xD0\xBC|\xD0\xBD|\xD0\xBE|\xD0\xBF|\xD1\x8F|\xD1\x80|\xD1\x81|\xD1\x82|\xD1\x83|\xD0\xB6|\xD0\xB2|\xD1\x8C|\xD1\x8B|\xD0\xB7|\xD1\x88|\xD1\x8D|\xD1\x89|\xD1\x87|\xD1\x8A|\xD0\xAE|\xD0\x90|\xD0\x91|\xD0\xA6|\xD0\x94|\xD0\x95|\xD0\xA4|\xD0\x93|\xD0\xA5|\xD0\x98|\xD0\x99|\xD0\x9A|\xD0\x9B|\xD0\x9C|\xD0\x9D|\xD0\x9E|\xD0\x9F|\xD0\xAF|\xD0\xA0|\xD0\xA1|\xD0\xA2|\xD0\xA3|\xD0\x96|\xD0\x92|\xD0\xAC|\xD0\xAB|\xD0\x97|\xD0\xA8|\xD0\xAD|\xD0\xA9|\xD0\xA7|\xD2\x91|\xD1\x92|\xD1\x93|\xD1\x94|\xD1\x91|\xD1\x95|\xD1\x96|\xD1\x97|\xD1\x98|\xD1\x99|\xD1\x9A|\xD1\x9B|\xD1\x9C|\xD1\x9E|\xD1\x9F|\xD1\xA3|\xD1\xB3|\xD1\xB5|\xD1\xAB|\x5B|\x5D|\x5F|\xD2\x90|\xD0\x82|\xD0\x83|\xD0\x84|\xD0\x81|\xD0\x85|\xD0\x86|\xD0\x87|\xD0\x88|\xD0\x89|\xD0\x8A|\xD0\x8B|\xD0\x8C|\xD0\x8E|\xD0\x8F|\xD0\xAA|\xD1\xA2|\xD1\xB2|\xD1\xB4|\xD1\xAA|\w|\?|_|\.|,|:|\-|\@|\(|\/|\[|\]|{|}|\||~|\+|\n|\r|\f|\t|\s';

# russian and hebrew support
my $allowd='\xC2\xA1|\xC2\xA2|\xC2\xA3|\xC2\xA4|\xC2\xA5|\xC2\xA6|\xC2\xA7|\xC2\xA8|\xC2\xA9|\xC2\xAA|\xC2\xAB|\xC2|\xC2\xAD|\xC2\xAE|\xC2\xAF|\xC2\xB0|\xC2\xB1|\xC2\xB2|\xC2\xB3|\xC2\xB4|\xC2\xB5|\xC2\xB6|\xC2\xB7|\xC2\xB8|\xC2\xB9|\xC2\xBA|\xC2\xBB|\xC2\xBC|\xC2\xBD|\xC2\xBE|\xC2\xBF|\xC3\x80|\xC3\x81|\xC3\x82|\xC3\x83|\xC3\x84|\xC3\x85|\xC3\x86|\xC3\x87|\xC3\x88|\xC3\x89|\xC3\x8A|\xC3\x8B|\xC3\x8C|\xC3\x8D|\xC3\x8E|\xC3\x8F|\xC3\x90|\xC3\x91|\xC3\x92|\xC3\x93|\xC3\x94|\xC3\x95|\xC3\x96|\xC3\x97|\xC3\x98|\xC3\x99|\xC3\x9A|\xC3\x9B|\xC3\x9C|\xC3\x9D|\xC3\x9E|\xC3\x9F|\xC3\xA0|\xC3\xA1|\xC3\xA2|\xC3\xA3|\xC3\xA4|\xC3\xA5|\xC3\xA6|\xC3\xA7|\xC3\xA8|\xC3\xA9|\xC3\xAA|\xC3\xAB|\xC3\xAC|\xC3\xAD|\xC3\xAE|\xC3\xAF|\xC3\xB0|\xC3\xB1|\xC3\xB2|\xC3\xB3|\xC3\xB4|\xC3\xB5|\xC3\xB6|\xC3\xB7|\xC3\xB8|\xC3\xB9|\xC3\xBA|\xC3\xBB|\xC3\xBC|\xC3\xBD|\xC3\xBE|\xC3\xBF|\xe2\x82\xac|\xc5\x92|\xc5\x93|\xc5\xa0|\xc5\xa1|\xc5\xb8|\xc6\x92|\xc4\x84|\xc4\x86|\xc4\x98|\xc5\x81|\xc5\x81|\xc5\x9a|\xc5\xb9|\xc5\xbb|\xc4\x85|\xc4\x87|\xc4\x99|\xc5\x82|\xc5\x84|\xc5\x9b|\xc5\xba|\xc5\xbc|\xD1\x8E|\xD0\xB0|\xD0\xB1|\xD1\x86|\xD0\xB4|\xD0\xB5|\xD1\x84|\xD0\xB3|\xD1\x85|\xD0\xB8|\xD0\xB9|\xD0\xBA|\xD0\xBB|\xD0\xBC|\xD0\xBD|\xD0\xBE|\xD0\xBF|\xD1\x8F|\xD1\x80|\xD1\x81|\xD1\x82|\xD1\x83|\xD0\xB6|\xD0\xB2|\xD1\x8C|\xD1\x8B|\xD0\xB7|\xD1\x88|\xD1\x8D|\xD1\x89|\xD1\x87|\xD1\x8A|\xD0\xAE|\xD0\x90|\xD0\x91|\xD0\xA6|\xD0\x94|\xD0\x95|\xD0\xA4|\xD0\x93|\xD0\xA5|\xD0\x98|\xD0\x99|\xD0\x9A|\xD0\x9B|\xD0\x9C|\xD0\x9D|\xD0\x9E|\xD0\x9F|\xD0\xAF|\xD0\xA0|\xD0\xA1|\xD0\xA2|\xD0\xA3|\xD0\x96|\xD0\x92|\xD0\xAC|\xD0\xAB|\xD0\x97|\xD0\xA8|\xD0\xAD|\xD0\xA9|\xD0\xA7|\xD2\x91|\xD1\x92|\xD1\x93|\xD1\x94|\xD1\x91|\xD1\x95|\xD1\x96|\xD1\x97|\xD1\x98|\xD1\x99|\xD1\x9A|\xD1\x9B|\xD1\x9C|\xD1\x9E|\xD1\x9F|\xD1\xA3|\xD1\xB3|\xD1\xB5|\xD1\xAB|\x5B|\x5D|\x5F|\xD2\x90|\xD0\x82|\xD0\x83|\xD0\x84|\xD0\x81|\xD0\x85|\xD0\x86|\xD0\x87|\xD0\x88|\xD0\x89|\xD0\x8A|\xD0\x8B|\xD0\x8C|\xD0\x8E|\xD0\x8F|\xD0\xAA|/xd6/x91|/xd6/x92|/xd6/x93|/xd6/x94|/xd6/x95|/xd6/x96|/xd6/x97|/xd6/x98|/xd6/x99|/xd6/x9a|/xd6/x9b|/xd6/x9c|/xd6/x9d|/xd6/x9e|/xd6/x9f|/xd6/xa0|/xd6/xa1|/xd6/xa3|/xd6/xa4|/xd6/xa5|/xd6/xa6|/xd6/xa7|/xd6/xa8|/xd6/xa9|/xd6/xaa|/xd6/xab|/xd6/xac|/xd6/xad|/xd6/xae|/xd6/xaf|/xd6/xb0|/xd6/xb1|/xd6/xb2|/xd6/xb3|/xd6/xb4|/xd6/xb5|/xd6/xb6|/xd6/xb7|/xd6/xb8|/xd6/xb9|/xd6/xbb|/xd6/xbc|/xd6/xbd|/xd6/xbe|/xd6/xbf|/xd7/x80|/xd7/x81|/xd7/x82|/xd7/x83|/xd7/x84|/xd7/x90|/xd7/x91|/xd7/x92|/xd7/x93|/xd7/x94|/xd7/x95|/xd7/x96|/xd7/x97|/xd7/x98|/xd7/x99|/xd7/x9a|/xd7/x9b|/xd7/x9c|/xd7/x9d|/xd7/x9e|/xd7/x9f|/xd7/xa0|/xd7/xa1|/xd7/xa2|/xd7/xa3|/xd7/xa4|/xd7/xa5|/xd7/xa6|/xd7/xa7|/xd7/xa8|/xd7/xa9|/xd7/xaa|/xd7/xb0|/xd7/xb1|/xd7/xb2|/xd7/xb3|/xd7/xb4|\w|\?|_|\.|,|:|\-|\@|\(|\/|\[|\]|{|}|\||~|\+|\n|\r|\f|\t|\s';
return $allowd;
}


sub preparer {
my ($self, $input_string ) = @_;

my ($lang_vars,$vars_file)=$self->get_lang();
my $back_link="<br><p><br><FORM><INPUT TYPE=\"BUTTON\" VALUE=\"back\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM>";


$input_string="" if ! $input_string;
if ( $ENV{'REQUEST_METHOD'} eq "GET" ) {
     $input_string = $ENV{'QUERY_STRING'} || "";
}

my @global_config = $self->get_global_config("1");
my $debug_enabled=$global_config[0]->[25] || "no";
$DEBUG = 1 if $debug_enabled eq "yes";

debug("INPUT: $input_string");

my $datenskalar=$input_string;
$datenskalar="" if ! $datenskalar;
my ($listeneintrag, $name, $daten);
my @datenliste;
my %datenhash;
$datenskalar =~ /(client_id=\d{1,5})/;
my $client_id=$1 || "";
$client_id =~ s/client_id=//;
#	my $allowd = $self->get_allowed_characters();
my $url_value_name="";
my $url_value="";
my $url_name="";
my $url_value_value="";
if ($datenskalar) {

    #exclude login and priv-pass from check
    my ( $login_pass,$retype_login_pass,$auth_pass,$priv_pass,$retype_priv_pass,$community_string,$community,$tsig_key,$user_password,$new_user_password,$repeat_user_password,$master_key,$new_master_key,$repeat_master_key,$device_password,$password,$base_dn,$bind_dn, $ldap_filter, $dn, $parent_network_id_form);
    $login_pass=$retype_login_pass=$auth_pass=$priv_pass=$retype_priv_pass=$community_string=$community=$tsig_key=$user_password=$new_user_password=$repeat_user_password=$master_key=$new_master_key=$repeat_master_key=$device_password=$password=$base_dn=$bind_dn=$ldap_filter=$dn=$parent_network_id_form="";
    if ( $datenskalar =~ /&parent_network_id=/ ) {
        $datenskalar =~ /&parent_network_id=(.*?)&/;
        $parent_network_id_form=$1 || "";
        $self->{parent_network_id_form} = $parent_network_id_form || "";
    }
#    if ( $datenskalar =~ /&create_csrf_token=/ ) {
#        $datenskalar =~ s/&create_csrf_token=(.*?)&/&/;
#        my $value = $1 || "";
#        if ( $value eq "true" ) {
#            my $user=$ENV{'REMOTE_USER'};
#            my $csrf_token = $self->create_csrf_token("$client_id","$user","1");
#            $self->{'csrf_token'} = $csrf_token;
#        }
#    }
    if ( $datenskalar =~ /&login_pass=/ ) {
        $datenskalar =~ s/&(login_pass=.*?)&/&/;
        $login_pass=$1 || "";
        $datenskalar =~ s/&(retype_login_pass=.*?)&/&/;
        $retype_login_pass=$1 || "";
    }
    if ( $datenskalar =~ /&auth_pass=/ ) {
        $datenskalar =~ s/&(auth_pass=.*?)&/&/;
        $auth_pass=$1 || "";
    }
    if ( $datenskalar =~ /&priv_pass=/ ) {
        $datenskalar =~ s/&(priv_pass=.*?)&/&/;
        $priv_pass=$1 || "";
        $datenskalar =~ s/&(retype_priv_pass=.*?)&/&/;
        $retype_priv_pass=$1 || "";
    }
    if ( $datenskalar =~ /&community_string=/ ) {
        $datenskalar =~ s/&(community_string=.*?)&/&/;
        $community_string=$1 || "";
    }
    if ( $datenskalar =~ /&community=/ ) {
        $datenskalar =~ s/&(community=.*?)&/&/;
        $community=$1 || "";
    }
    if ( $datenskalar =~ /tsig_key=/ ) {
        $datenskalar =~ s/&?(tsig_key=.*?)&/&/;
        $tsig_key=$1 || "";
    }
    if ( $datenskalar =~ /&user_password=/ ) {
        $datenskalar =~ s/&(user_password=.*?)&/&/;
        $user_password=$1 || "";
    }
    if ( $datenskalar =~ /&new_user_password=/ ) {
        $datenskalar =~ s/&(new_user_password=.*?)&/&/;
        $new_user_password=$1 || "";
    }
    if ( $datenskalar =~ /&repeat_user_password=/ ) {
        $datenskalar =~ s/&(repeat_user_password=.*?)&/&/;
        $repeat_user_password=$1 || "";
    }
    if ( $datenskalar =~ /&master_key=/ ) {
        $datenskalar =~ s/&(master_key=.*?)&/&/;
        $master_key=$1 || "";
    }
    if ( $datenskalar =~ /&new_master_key=/ ) {
        $datenskalar =~ s/&(new_master_key=.*?)&/&/;
        $new_master_key=$1 || "";
    }
    if ( $datenskalar =~ /&repeat_master_key=/ ) {
        $datenskalar =~ s/&(repeat_master_key=.*?)&/&/;
        $repeat_master_key=$1 || "";
    }
    if ( $datenskalar =~ /&device_password=/ ) {
        $datenskalar =~ s/&(device_password=.*?)&/&/;
        $device_password=$1 || "";
    }
    if ( $datenskalar =~ /&password=/ ) {
        $datenskalar =~ s/&(password=.*?)&/&/;
        $password=$1 || "";
    }
    if ( $datenskalar =~ /&base_dn=/ ) {
        $datenskalar =~ s/&(base_dn=.*?)&/&/;
        $base_dn=$1 || "";
    }
    if ( $datenskalar =~ /&bind_dn=/ ) {
        $datenskalar =~ s/&(bind_dn=.*?)&/&/;
        $bind_dn=$1 || "";
    }
    if ( $datenskalar =~ /&filter=/ ) {
        $datenskalar =~ s/&(filter=.*?)&/&/;
        $ldap_filter=$1 || "";
    }
    if ( $datenskalar =~ /&dn=/ ) {
        $datenskalar =~ s/&(dn=.*?)&/&/;
        $dn=$1 || "";
    }

            #       ;   `   '   <   >   ^   %   #   \
    if ( $datenskalar =~ /(%3B|%60|%27|%3C|%3E|%5E|%25|%23|%5C|\*)/i && $datenskalar =~ /URL/ ) {
        $self->print_init("Gesti&oacute;IP","Gesti&oacute;IP","$$lang_vars{mal_signo_error_message} (0) $back_link","$vars_file","$client_id");
        $self->print_end("$client_id");
        exit 1;
                #   &
    } elsif ( $datenskalar =~ /%26/ && $datenskalar =~ /URL/ ) {
        if ( $datenskalar =~ /.*(custom_.+_name)=URL/ ) {
        $datenskalar =~ /.*(custom_.+_name)=URL/;
            $url_value_name=$1;
        }
        $url_value_name =~ s/name/value/;
        if ( $datenskalar =~ /&($url_value_name=.+)&/ && $datenskalar !~ /&$url_value_name=&/ ) {
            $datenskalar =~ s/($url_value_name=.+?)&//;
            $url_value=$1;
            ($url_name,$url_value_value)=split('=',$url_value);
        }
    } elsif ( $datenskalar =~ /URL/ ) {
        if ( $datenskalar =~ /.*(custom_.+_name)=URL/ ) {
            $datenskalar =~ /.*(custom_.+_name)=URL/;
            $url_value_name=$1;
        }
        $url_value_name =~ s/name/value/;
        if ( $datenskalar =~ /&($url_value_name=.+)&/ && $datenskalar !~ /&$url_value_name=&/) {
            $datenskalar =~ /($url_value_name=.+?)&/;
            $url_value=$1;
            ($url_name,$url_value_value)=split('=',$url_value);
        }
    }

    $datenskalar =~ s/(B2=%3E&|B2=%3E%3E&|B2=%3C&|B2=%3C%3C&)//i;

                            #   &   ;   `   '   <   >   =   ^   %   #   \
    if ( $datenskalar =~ /(%26|%3B|%60|%27|%3C|%3E|%3D|%5E|%25|%23|%5C|\*)/i && $datenskalar !~ /URL/) {
        $self->print_init("Gesti&oacute;IP","Gesti&oacute;IP","$$lang_vars{mal_signo_error_message} (1b)- $datenskalar - $back_link","$vars_file","$client_id");
        $self->print_end("$client_id");
        exit 1;
    }
    if ( $base_dn =~ /(%26|%3B|%60|%27|%3C|%3E|%5E|%25|%23|%5C|\*)/i || $bind_dn =~ /(%26|%3B|%60|%27|%3C|%3E|%5E|%25|%23|%5C|\*)/i || $ldap_filter =~ /(%26|%3B|%60|%27|%3C|%3E|%25|%23|%5C)/i || $dn =~ /(%26|%3B|%60|%27|%3C|%3E|%5E|%25|%23|%5C|\*)/i) {
        $self->print_init("Gesti&oacute;IP","Gesti&oacute;IP","$$lang_vars{mal_signo_error_message} (1bb) - BASE: $base_dn - $bind_dn -  $back_link","$vars_file","$client_id");
        $self->print_end("$client_id");
        exit 1;
    }

    $datenskalar =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $url_value_value =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg if $url_value_value;	
    $login_pass =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $retype_login_pass =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $auth_pass =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $priv_pass =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $retype_priv_pass =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $community_string =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $community =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $tsig_key =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $user_password =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $new_user_password =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $repeat_user_password =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $master_key =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $new_master_key =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $repeat_master_key =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $device_password =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $password =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $bind_dn =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;	
    $base_dn =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;
    $ldap_filter =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;
    $dn =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;

    @datenliste = split (/[&;]/, $datenskalar);
    foreach $listeneintrag (@datenliste) {
        if ( $listeneintrag !~ /.{1,10}=.{0,1000}/ ) { next; }
        $listeneintrag =~ /=(\+){1}/;
        my $first_plus = $1 || "";
        my $i = "0";
        my @plus;
        while ( 1 == 1 ) {
            if ( $listeneintrag =~ /\+\+/ && ( $listeneintrag =~ /^hostname=/ || $listeneintrag =~ /^red_search=/ ) ) {
                $listeneintrag =~ s/(\+\+[^+]*)//;
                $plus[$i] = $1;
                $i++;
            } else {
                last;
            }
        }

        $listeneintrag =~ s/\+/ /go;
        foreach ( @plus ) {
            $_ =~ s/^\+//;
            $listeneintrag = $listeneintrag . " $_"; 
        }
        $listeneintrag =~ s/= /=$first_plus/ if $first_plus;
        
        $listeneintrag =~ /^(.+?)=(.*)$/s;
        $name=$1;
        if ( defined($2) ) { 
            $daten=$2;
        } else {
            $daten=$2 || "";
        }
        if ( ( $name =~ /[&;`'\\<>=^%#*]/ || $daten =~ /[&;`'\\<>^%#*]/ ) && $name eq $url_name) {
            $self->print_init("Gesti&oacute;IP","Gesti&oacute;IP","$$lang_vars{unallowed_character_message} (2a)<p> &amp;;`'&lt;&gt;.=^%#*","$vars_file","$client_id");
            $self->print_end("$client_id");
        } elsif ( ( $name =~ /[&;`'\\<>=^%#*]/ || $daten =~ /[&;`'\\<>=^%#*]/ ) && $name ne $url_name && $name ne "URL_value" ) {
            $self->print_init("Gesti&oacute;IP","Gesti&oacute;IP","$$lang_vars{unallowed_character_message} (2b)<p> &amp;;`'&lt;&gt;.=^%#*","$vars_file","$client_id");
            $self->print_end("$client_id");
        }

        if ( defined($datenhash{$name}) ) {
            $datenhash{$name} = $datenhash{$name} . "_" . $daten;
        } else {
            $datenhash{$name} = $daten;
        }
    }

    $datenhash{$url_name}=$url_value_value if $url_name && $url_value_value;

    my $http_referer = $ENV{HTTP_REFERER} || "";

    if ( $http_referer =~ /(ip_add_user_group_form.cgi|ip_modip_form.cgi|ip_modip_mass_update_form.cgi|ip_mod_user_group_form.cgi|ip_initialize|ip_import_vlans_snmp|ip_import_snmp|ip_discover_net_snmp|ip_fetch_switchinfo|ip_manage_user_passwords|ip_manage_device_password|ip_insert_device_password|ip_show_device_password|ip_delete_device_password|ip_mod_device_password|ip_insert_snmp_group|ip_mod_snmp_group|ip_show_snmp_groups|ip_insert_dns_key|ip_mod_dns_key|ip_show_dns_keys|insert_ldap_server|mod_ldap_server|check_ldap_server|ip_insert_user|ip_mod_user|insert_ldap_group|mod_ldap_group|ip_insert_dns_user|ip_mod_dns_user|ip_insert_smtp_server|ip_mod_smtp_server|send_test_mail)/ || ! $http_referer ) {
        if ( $login_pass ) {
            $login_pass =~ s/login_pass=//;
            $retype_login_pass =~ s/retype_login_pass=//;
            $datenhash{'login_pass'} = $login_pass;
            $datenhash{'retype_login_pass'} = $retype_login_pass;
        }
        if ( $priv_pass ) {
            $auth_pass =~ s/auth_pass=//;
            $datenhash{'auth_pass'} = $auth_pass;
        }
        if ( $priv_pass ) {
            $priv_pass =~ s/priv_pass=//;
            $retype_priv_pass =~ s/retype_priv_pass=//;
            $datenhash{'priv_pass'} = $priv_pass;
            $datenhash{'retype_priv_pass'} = $retype_priv_pass;
        }
        if ( $community_string ) {
            $community_string =~ s/community_string=//;
            $datenhash{'community_string'} = $community_string;
        }
        if ( $community ) {
            $community =~ s/community=//;
            $datenhash{'community'} = $community;
        }
        if ( $tsig_key ) {
            $tsig_key =~ s/tsig_key=//;
            $datenhash{'tsig_key'} = $tsig_key;
        }
        if ( $user_password ) {
            $user_password =~ s/user_password=//;
            $datenhash{'user_password'} = $user_password;
        }
        if ( $new_user_password ) {
            $new_user_password =~ s/new_user_password=//;
            $datenhash{'new_user_password'} = $new_user_password;
        }
        if ( $repeat_user_password ) {
            $repeat_user_password =~ s/repeat_user_password=//;
            $datenhash{'repeat_user_password'} = $repeat_user_password;
        }
        if ( $master_key ) {
            $master_key =~ s/master_key=//;
            $datenhash{'master_key'} = $master_key;
        }
        if ( $new_master_key ) {
            $new_master_key =~ s/new_master_key=//;
            $datenhash{'new_master_key'} = $new_master_key;
        }
        if ( $repeat_master_key ) {
            $repeat_master_key =~ s/repeat_master_key=//;
            $datenhash{'repeat_master_key'} = $repeat_master_key;
        }
        if ( $device_password ) {
            $device_password =~ s/device_password=//;
            $datenhash{'device_password'} = $device_password;
        }
        if ( $password ) {
            $password =~ s/password=//;
            $datenhash{'password'} = $password;
        }
        if ( $base_dn ) {
            $base_dn =~ s/base_dn=//;
            $base_dn =~ s/\+/ /;
            $datenhash{'base_dn'} = $base_dn;
        }
        if ( $bind_dn ) {
            $bind_dn =~ s/bind_dn=//;
            $bind_dn =~ s/\+/ /;
            $datenhash{'bind_dn'} = $bind_dn;
        }
        if ( $ldap_filter ) {
            $ldap_filter =~ s/filter=//;
            $datenhash{'filter'} = $ldap_filter;
        }
        if ( $dn ) {
            $dn =~ s/dn=//;
            $datenhash{'dn'} = $dn;
        }
    }
}

return %datenhash;

}


sub get_loc {
my ( $self, $client_id ) = @_;
my @values_locations;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT loc FROM locations WHERE ( client_id = $qclient_id OR client_id = '9999' ) ORDER BY loc") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_locations, [ @$ip_ref ];
}
$dbh->disconnect;
return @values_locations;
}

sub get_loc_all {
my ( $self, $client_id ) = @_;
my @values_locations;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT id,loc,client_id FROM locations WHERE ( client_id = $qclient_id OR client_id = '9999' ) ORDER BY loc") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_locations, [ @$ip_ref ];
}
$dbh->disconnect;

return @values_locations;
}

sub get_loc_all_clients {
my ( $self, $client_id ) = @_;
my @values_locations;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT id,loc,client_id FROM locations ORDER BY loc") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_locations, [ @$ip_ref ];
}
$dbh->disconnect;

return @values_locations;
}


sub rename_loc {
    my ( $self, $client_id, $loc_id, $loc ) = @_;

    my $format=$self->{'format'};
    my $error;

    my @values_locations;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $qloc_id = $dbh->quote( $loc_id );
    my $qloc = $dbh->quote( $loc );

    debug("UPDATE locations SET loc=$qloc WHERE id=$qloc_id AND ( client_id = $qclient_id OR client_id = '9999' )");
    my $sth = $dbh->prepare("UPDATE locations SET loc=$qloc WHERE id=$qloc_id AND ( client_id = $qclient_id OR client_id = '9999' )") or $error = "Can not execute statement:<p>$DBI::errstr";
    
    if ( $format eq 'html' && $error ) { 
        croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    }

    $sth->execute() or $error = "Can not execute statement:<p>$DBI::errstr";
    
    if ( $format eq 'html' && $error ) { 
        croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    }

    $dbh->disconnect;
}




sub get_cat {
my ( $self, $client_id ) = @_;
    my @values_categorias;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT cat FROM categorias") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_categorias, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_categorias;
}

sub get_cat_net {
my ( $self, $client_id ) = @_;
    my @values_cat_red;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT cat FROM categorias_net") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_cat_red, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_cat_red;
}

sub get_utype {
    my ( $self, $client_id, $utype_id ) = @_;

    my @values_utype;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qutype_id;
    my $utype_id_expr = "";
    if ( $utype_id ) {
        $qutype_id = $dbh->quote( $utype_id );
        $utype_id_expr = "WHERE id=$qutype_id";
    }    

    debug("SELECT type FROM update_type $utype_id_expr");
    my $sth = $dbh->prepare("SELECT type FROM update_type $utype_id_expr") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_utype, [ @$ip_ref ];
    }
    $dbh->disconnect;

    return @values_utype;
}


sub get_range_type {
my ( $self, $client_id ) = @_;
my @values_range_type;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT range_type,id FROM range_type") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_range_type, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_range_type;
}

sub get_update_types_audit {
my ( $self, $client_id ) = @_;
    my @update_types_audit;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT update_types_audit FROM update_types_audit WHERE client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @update_types_audit, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @update_types_audit;
}


sub search_db_hash {
my ( $self,$client_id, $vars_file, $daten ) = @_;

my %lang_vars = $self->_get_vars("$vars_file") if $vars_file;

debug("search_db_hash");

no strict 'refs';
my $client_independent=${$daten}{client_independent} || "n";
my @search;
my $match_field = "";
my $linked_ip_data=${$daten}{'linked'} || "";
foreach my $loc (keys %{$daten}) {
    my $dat = ${$daten}{$loc};
    if ( ! $dat ) { next; }
    if ( $loc eq "match" ) {
        $match_field = 1;
        next;
    }
    if ( $loc =~ /(save_config_changes|job_enabled_|other_job_descr_|device_other_job_|other_job_group_|device_other_jobs_anz|cm_description|connection_proto|backup_proto|ele_auth|enable_cm|group_id|user_name|_pass|_proto|export_type|export_radio)/ || $loc eq "ip_int" || $loc =~ /gip_query/ || $loc =~ /_id$/ || $loc =~ /custom_/ || $loc eq "client_independent" || $loc eq "ipv4" || $loc eq "ipv6" || $loc eq "B2" || $loc eq "vendor_radio" || $loc =~ /known/ || $loc eq "B1" || $loc eq "entries_per_page_hosts" || $loc eq "host_order_by" || $loc eq "anz_values_hosts" || $loc eq "anz_hosts" || $loc eq "ip_version" || $loc =~ /mass_update_host_submit/ || $loc eq "red_num" || $loc eq "mass_submit" || $loc eq "mass_action_type" || $ENV{SCRIPT_NAME} =~ /ip_modip/ && ($loc eq "comentario" || $loc eq "BM" || $loc eq "host_descr" || $loc eq "ip" || $loc eq "loc" || $loc eq "cat" || $loc eq "ip" || $loc eq "int_admin" || $loc eq "hostname_exact" || $loc eq "mass_update_type" || $loc eq "mass_update_host_ids" || $loc eq "model_id" || $loc eq "model_pcid" || $loc eq "cc_name" || $loc =~ /_value$/ || $loc =~ /_id$/ || $loc =~ /_pcid$/ || $loc =~ /update_type/ || $loc =~ /no_create_linked_entry/ || $loc =~ /dyn_dns_updates/ )) { next; }

    if ( $dat !~ /../ && $loc ne "int_admin" && $loc ne "red_num" && $loc ne "host_id" && $loc ne "anz_values_hosts" && $loc ne "save_config_changes" && $loc ne "dyn_dns_updates" && $loc ne "tag" ) {
        $self->print_error("$client_id","$lang_vars{dos_signos_message} $loc - $dat");
        $self->print_end("$client_id");
        exit 1;
    }
    if ( $loc =~ /hostname/ || $dat =~ /$lang_vars{buscar_message}/ || $loc =~ /search_index/ || ( $linked_ip_data && $loc eq "linked") || $loc eq "delete_old_jobs" ) {
        next;
    }
    $loc =~ s/advanced_search_//;
    $dat = "$loc:X-X:$dat";
    push @search, $dat;
}

my $hostname = "";
if ( $ENV{SCRIPT_NAME} =~ /ip_modip/ || $ENV{SCRIPT_NAME} =~ /ip_deleteip/ ) {
    $hostname=${$daten}{'search_hostname'} || "";
    if ( ${$daten}{'match'} && ! $hostname ) {
        $hostname = ${$daten}{'match'};
    }
} else {
    $hostname=${$daten}{'hostname'} || "";
}

my $hostname_search;
my $BM;
my $int_admin_on = "";
my $search_index=${$daten}{'search_index'} || "false";
my $hostname_exact=${$daten}{'hostname_exact'} || "off";

if ( $hostname ) {
    $hostname =~ s/^\s*//;
    $hostname =~ s/\s*$//;
    # no search for "-ignore_string" only 
    if ( $search_index eq "true" && $hostname !~ /^-\S+$/ ) {
        my @hostnames;
        while ( 1 == 1 ) {
            if ( $hostname =~ /".+"/ ) {
                $hostname =~ s/"(.+?)"//;
                my $exact_hostname_string = $1 if $1;
                push (@hostnames,$exact_hostname_string) if $1;
            } else {
                $hostname =~ s/"//sg;
                last;
            }
        }
        my @mas_hostnames = split(" ",$hostname);
        @hostnames = (@hostnames, @mas_hostnames);

        my $linked_id_expr="";
        if ( $linked_ip_data ) {
            my %predef_host_columns=$self->get_predef_host_column_all_hash("$client_id");
            $linked_id_expr="AND pc_id != $predef_host_columns{'linked IP'}[0]" if exists($predef_host_columns{'linked IP'});
            $linked_id_expr="AND pc_id != $predef_host_columns{'linkedIP'}[0]" if exists($predef_host_columns{'linkedIP'});
        }

        my ( $ip_search, $ignore_search, $ip_cc_search, $cc_ignore_search, $tag_search, $ignore_search_tag);
        $ip_search=$ignore_search=$ip_cc_search=$cc_ignore_search=$tag_search=$ignore_search_tag="";
        my $valid_v6=0;
        my $ipv6_int="__NO_IPv6_ADDRESS_GIVEN__";
        foreach ( @hostnames ) {
            if ( $_ =~ /.+.+:.*:/ ) {
                $valid_v6 = $self->check_valid_ipv6("$_") || "0";
            }
            if ( $valid_v6 == 1 ) {
                $ipv6_int=$self->ip_to_int("$client_id","$_","v6");
            }
            $valid_v6=0;
            if ( $_ !~ /^-/ && $_ !~ /^\+/ ) {
                $ip_cc_search = "";
                
                if ( $linked_id_expr ) {
                    $ip_cc_search = " OR (h.id IN (SELECT host_id FROM custom_host_column_entries WHERE entry REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" $linked_id_expr))";
                } else {
                    $ip_cc_search = " OR (h.id IN (SELECT host_id FROM custom_host_column_entries WHERE entry LIKE \"%$_%\"))";
                }
 
                if ( ! $ip_search ) {
                    if ( $linked_id_expr ) {
                        $ip_search = "( (INET_NTOA(h.ip) REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR h.ip REGEXP \"\[\[:<:\]\]$ipv6_int\[\[:>:\]\]\") $ip_cc_search)";
                    } else {
                        if ( $hostname_exact eq "on" ) {
                            $ip_search = "( h.hostname='$_' )";
                        } elsif ( $match_field ) {
                            # call from quick search
                            $ip_search = "( INET_NTOA(h.ip) LIKE \"%$_%\" OR h.ip LIKE \"%$ipv6_int%\" OR h.hostname LIKE \"%$_%\" OR h.host_descr LIKE \"%$_%\" OR h.comentario LIKE \"%$_%\" OR l.loc LIKE \"%$_%\" OR c.cat LIKE \"%$_%\" $ip_cc_search)";
                        } else {
                            $ip_search = "(h.hostname LIKE \"%$_%\")";
                        }
                    }
                } else {
                    $ip_search =  $ip_search . " AND ( INET_NTOA(h.ip) LIKE \"%$_%\" OR h.ip LIKE \"%$ipv6_int%\" OR h.hostname LIKE \"%$_%\" OR h.host_descr LIKE \"%$_%\" OR h.comentario LIKE \"%$_%\" OR l.loc LIKE \"%$_%\" OR c.cat LIKE \"%$_%\" $ip_cc_search)";
                }

                if ( ! $tag_search ) {
                    $tag_search = " (h.id IN (SELECT DISTINCT host_id from tag_entries_host WHERE tag_id IN (SELECT id FROM tag WHERE name LIKE \"%$_%\"))) OR";
                } else {
                    $tag_search .= " OR (h.id IN (SELECT DISTINCT host_id from tag_entries_host WHERE tag_id IN (SELECT id FROM tag WHERE name LIKE \"%$_%\"))) OR";
                }

            } elsif ( $_ =~ /^-/ ) {
                $_ =~ s/^-//;

                $cc_ignore_search = "";
                $cc_ignore_search = " AND (h.id NOT IN (SELECT host_id FROM custom_host_column_entries WHERE entry REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" ))";
                if ( ! $ignore_search ) {
                    $ignore_search = "( INET_NTOA(h.ip) NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND h.ip NOT REGEXP \"\[\[:<:\]\]$ipv6_int\[\[:>:\]\]\" AND h.hostname NOT REGEXP \"\[\[:<:]]$_\[\[:>:\]\]\" AND h.host_descr NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND h.comentario NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND l.loc NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND c.cat NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" $cc_ignore_search)";
                } else {
                    $ignore_search = $ignore_search . " AND ( INET_NTOA(h.ip) NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND h.ip NOT REGEXP \"\[\[:<:\]\]$ipv6_int\[\[:>:\]\]\" AND h.hostname NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND h.host_descr NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND h.comentario NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND l.loc NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND c.cat NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" $cc_ignore_search)";
                }

                if ( ! $ignore_search_tag ) {
                    $ignore_search_tag = " (h.id NOT IN (SELECT DISTINCT host_id from tag_entries_host WHERE tag_id IN (SELECT id FROM tag WHERE name REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\"))) AND";
                } else {
                    $ignore_search_tag .= " (h.id NOT IN (SELECT DISTINCT host_id from tag_entries_host WHERE tag_id IN (SELECT id FROM tag WHERE name REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\"))) AND ";
                }

            } elsif ( $_ =~ /^\+/ ) {
                 #$_ begins with "+"
                $_ =~ s/^\+//;
                $ip_cc_search= "";
                $ip_cc_search= " OR (h.id IN (SELECT host_id FROM custom_host_column_entries WHERE entry = \"$_\" ))";
                if ( ! $ip_search ) {
                    $ip_search = "( INET_NTOA(h.ip)=\"$_\" OR h.ip=\"$ipv6_int\" OR h.hostname=\"$_\" OR h.host_descr=\"$_\" OR h.comentario=\"$_\" OR l.loc=\"$_\" OR c.cat=\"$_\" $ip_cc_search)";
                } else {
                    $ip_search = $ip_search . " AND ( INET_NTOA(h.ip)=\"$_\" OR h.ip=\"$ipv6_int\" OR h.hostname=\"$_\" OR h.host_descr=\"$_\" OR h.comentario=\"$_\" OR l.loc=\"$_\" OR c.cat=\"$_\" $ip_cc_search)";
                }

                if ( ! $tag_search ) {
                    $tag_search = " (h.id IN (SELECT DISTINCT host_id from tag_entries_host WHERE tag_id IN (SELECT id FROM tag WHERE name = \"$_\"))) AND";
                } else {
                    $tag_search .= " (h.id IN (SELECT DISTINCT host_id from tag_entries_host WHERE tag_id IN (SELECT id FROM tag WHERE name = \"$_\"))) AND";
                }

            } else {
                $ip_cc_search= "";
                $ip_cc_search= " OR (h.id IN (SELECT host_id FROM custom_host_column_entries WHERE entry REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" ))";
                if ( ! $ignore_search ) {
                    $ignore_search = "( INET_NTOA(h.ip) REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR h.ip REGEXP \"\[\[:<:\]\]$ipv6_int\[\[:>:\]\]\" OR h.hostname REGEXP \"\[\[:<:]]$_\[\[:>:\]\]\" OR h.host_descr REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR h.comentario REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND l.loc NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND c.cat NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" $ip_cc_search)";
                } else {
                    $ignore_search = $ignore_search . " AND ( INET_NTOA(h.ip) REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR h.ip REGEXP \"\[\[:<:\]\]$ipv6_int\[\[:>:\]\]\" OR h.hostname REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR h.host_descr REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR h.comentario REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND l.loc NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND c.cat NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" $ip_cc_search)";
                }

                if ( ! $ignore_search_tag ) {
                    $ignore_search_tag = " (h.id IN (SELECT DISTINCT host_id from tag_entries_host WHERE tag_id IN (SELECT id FROM tag WHERE name REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\"))) AND";
                } else {
                    $ignore_search_tag .= " (h.id IN (SELECT DISTINCT host_id from tag_entries_host WHERE tag_id IN (SELECT id FROM tag WHERE name REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\"))) AND ";
                }
            }
        }

        $ip_search = $tag_search . $ip_search;
        $ignore_search = $ignore_search_tag . $ignore_search;

        $ignore_search = "( ". $ignore_search . " )" if $ignore_search;
        if ( $ip_search && $ignore_search ) {
            $hostname_search = " $ip_search AND $ignore_search ";
        } elsif ( $ip_search && ! $ignore_search ) {
            $hostname_search = " $ip_search ";
        } else {
            $hostname_search=" $ignore_search ";
        }
    } elsif ( $search_index eq "true" && $hostname =~ /^-\S+$/ ) {
            print "<p class=\"NotifyText\">$lang_vars{exclude_string_only_message}</p><br>\n";
            $self->print_end("$client_id");
            exit 1;
    } else {
        if ( $hostname_exact eq "on" ) {
            $hostname_search="hostname= \"$hostname\"";
        } else {
            $hostname_search="hostname LIKE \"%$hostname%\"";
        }
    }
} else {
    $hostname_search="";
}

if ( $hostname_search ) {
    push @search, $hostname_search;
}

my $host_search = \@search;

my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my %values_ip = ();
my @helper_array;
my ($ele, $ip_ref);
my $search = "";
my $ele_num = @{$host_search};
$ele_num=$ele_num - 1;
my $ignore_search = "";

my $client_search = "";
my $client_cce_search = "";
if ( $client_independent ne "yes" ) {
    $client_search="AND h.client_id = $qclient_id";
    $client_cce_search="AND (cce.client_id = $qclient_id OR cce.client_id = '9999')";
}

    for (my $i = 0; $i <= $ele_num; $i++) {
    if ( @{$host_search}[$i] !~ /hostname LIKE/ && @{$host_search}[$i] =~ /NOT REGEXP\s"/) {
        $ignore_search = "@{$host_search}[$i]";
        next;
    } elsif ( @{$host_search}[$i] !~ /hostname LIKE/ && @{$host_search}[$i] =~ /hostname REGEXP\s"/) {
        $ignore_search = "@{$host_search}[$i]";
        next;
    } elsif ( @{$host_search}[$i] =~ /hostname LIKE/ || @{$host_search}[$i] =~ /hostname=/ ) {
        $search = "$search @{$host_search}[$i]";
        next;
    }
    my ($name,$val) = split(":X-X:",@{$host_search}[$i]);
    if ( $name eq "loc" ) { $name = "l.loc"; }
    if ( $name eq "cat" ) { $name = "c.cat"; }
    if ( $name eq "host_id_db" ) { $name = "h.id"; }
    if ( $name eq "comentario" ) { $name = "h.comentario"; }
    if ( $name eq "update_type" ) { $name = "ut.type"; }
	
    if ( $name =~ /^cc_id_/ ) {
        $name =~ /^cc_id_(\d+)$/;
        my $cc_id_search = $1;
        $val = "%" . $val . "%";
        my $qval = $dbh->quote( $val );
        $search .= " h.id IN ( SELECT cce.host_id FROM custom_host_column_entries cce, custom_host_columns cc WHERE cce.entry LIKE $qval AND cce.cc_id = \"$cc_id_search\" $client_cce_search)";
        if ( $i lt $ele_num ) {
            $search .= " AND";
#				$search .= " h.id IN ( SELECT cce.host_id FROM custom_host_column_entries cce, custom_host_columns cc WHERE cce.entry LIKE $qval AND cce.cc_id = \"$cc_id_search\" AND (cce.client_id = $qclient_id OR cce.client_id = '9999')) AND";
#			} else {
#				$search .= " h.id IN ( SELECT cce.host_id FROM custom_host_column_entries cce, custom_host_columns cc WHERE cce.entry LIKE $qval AND cce.cc_id = \"$cc_id_search\" AND (cce.client_id = $qclient_id OR cce.client_id = '9999'))";
        }
        next;
    }

    if ( $name ne "h.id" && $name ne "l.loc" && $name ne "c.cat" && $name ne "tag" && $name !~ /custom_host_column_entries/ && $ENV{SCRIPT_NAME} !~ /ip_modip.cgi/ && $name ne "ut.type") {
        $val = "%" . $val . "%";
        my $qval = $dbh->quote( $val );
        if ( $name eq "ip" ) {
            my $val_v6=$val;
            $val_v6 =~ s/^%//;
            $val_v6 =~ s/%$//;
            my $val_v6_int=$self->ip_to_int("$client_id","$val_v6","v6");
            my $qval_v6_int = $dbh->quote( $val_v6_int );
            if ( $i lt $ele_num ) {
                $search = "$search ( INET_NTOA(ip) LIKE $qval OR ip=$qval_v6_int ) AND";
            } else {
                $search = "$search ( INET_NTOA(ip) LIKE $qval OR ip=$qval_v6_int )";
            }
        } else {
            if ( $i lt $ele_num ) {
                $search = "$search $name LIKE $qval AND";
            } else {
                $search = "$search $name LIKE $qval";
            }
        }
    } elsif ( $name eq "h.id" || $name eq "l.loc" || $name eq "c.cat" || $name eq "ut.type" ) {
        my $qval = $dbh->quote( $val );
        if ( $i lt $ele_num ) {
            $search = "$search $name = $qval AND";
        } else {
            $search = "$search $name = $qval";
        }
	} elsif ( $name eq "tag" ) {
		$val =~ s/_/,/g;
		$search = " $search (h.id IN (SELECT DISTINCT te.host_id from tag t, tag_entries_host te WHERE t.id = te.tag_id AND t.id IN ($val)))";

    } else {
        if ( $i lt $ele_num ) {
            $search = "$name AND";
        } else {
            $search = "$name";
        }
    }
}

my $ip_version_search = "";
if ( ${$daten}{ipv4} && ! ${$daten}{ipv6} ) {
    $ip_version_search .= " AND h.ip_version = 'v4'";
} elsif ( ! ${$daten}{ipv4} && ${$daten}{ipv6} ) {
    $ip_version_search .= " AND h.ip_version = 'v6'";
}


my $sth;
if ( $ignore_search && $search) {
    $sth = $dbh->prepare("SELECT h.id, h.ip, INET_NTOA(h.ip), h.hostname, h.host_descr, l.loc, h.red_num, c.cat, h.int_admin, h.comentario, h.red_num, n.red, n.BM, n.descr, h.alive, h.update_type, h.last_response, h.range_id, h.client_id, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, net n, update_type ut WHERE ( $search ) ( $ignore_search ) AND h.loc = l.id AND h.categoria = c.id AND h.red_num = n.red_num AND h.hostname != '' AND h.hostname != 'NULL' $client_search $ip_version_search ORDER BY hostname") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    debug("SELECT h.id, h.ip, INET_NTOA(h.ip), h.hostname, h.host_descr, l.loc, h.red_num, c.cat, h.int_admin, h.comentario, h.red_num, n.red, n.BM, n.descr, h.alive, h.update_type, h.last_response, h.range_id, h.client_id, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, net n, update_type ut WHERE ( $search ) ( $ignore_search ) AND h.loc = l.id AND h.categoria = c.id AND h.red_num = n.red_num AND h.hostname != '' AND h.hostname != 'NULL' $client_search $ip_version_search ORDER BY hostname");
} elsif ( $ignore_search && ! $search ) {
    $sth = $dbh->prepare("SELECT h.id, h.ip, INET_NTOA(h.ip), h.hostname, h.host_descr, l.loc, h.red_num, c.cat, h.int_admin, h.comentario, h.red_num, n.red, n.BM, n.descr, h.alive, h.update_type, h.last_response, h.range_id, h.client_id, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, net n, update_type ut WHERE ( $ignore_search ) AND h.loc = l.id AND h.categoria = c.id AND h.red_num = n.red_num AND h.hostname != '' AND h.hostname != 'NULL' $client_search $ip_version_search ORDER BY hostname") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    debug("SELECT h.id, h.ip, INET_NTOA(h.ip), h.hostname, h.host_descr, l.loc, h.red_num, c.cat, h.int_admin, h.comentario, h.red_num, n.red, n.BM, n.descr, h.alive, h.update_type, h.last_response, h.range_id, h.client_id, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, net n, update_type ut WHERE ( $ignore_search ) AND h.loc = l.id AND h.categoria = c.id AND h.red_num = n.red_num AND h.hostname != '' AND h.hostname != 'NULL' $client_search $ip_version_search ORDER BY hostname");
} else {
    $sth = $dbh->prepare("SELECT h.id, h.ip, INET_NTOA(h.ip), h.hostname, h.host_descr, l.loc, h.red_num, c.cat, h.int_admin, h.comentario, h.red_num, n.red, n.BM, n.descr, h.alive, h.update_type, h.last_response, h.range_id, h.client_id, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, net n, update_type ut WHERE ( $search ) AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.red_num = n.red_num AND h.hostname != '' AND h.hostname != 'NULL' $client_search $ip_version_search ORDER BY hostname ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    debug("SELECT h.id, h.ip, INET_NTOA(h.ip), h.hostname, h.host_descr, l.loc, h.red_num, c.cat, h.int_admin, h.comentario, h.red_num, n.red, n.BM, n.descr, h.alive, h.update_type, h.last_response, h.range_id, h.client_id, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, net n, update_type ut WHERE ( $search ) AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.red_num = n.red_num AND h.hostname != '' AND h.hostname != 'NULL' $client_search $ip_version_search ORDER BY hostname");
}
my $i="0";

$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $ip_version = $ip_ref->{'ip_version'};
    my $hostname = $ip_ref->{'hostname'} || "";
    my $range_id = $ip_ref->{'range_id'} || "";
#		next if ! $hostname && $host_order_by !~ /^IP|IP_auf|IP_ab$/;
    my $ip_int = $ip_ref->{'ip'};
    my $ip;
    if ( $ip_version eq "v4" ) {
        $ip = $ip_ref->{'INET_NTOA(h.ip)'};
    } else {
        $ip = $self->int_to_ip("$client_id","$ip_int","$ip_version");
    }
    my $host_descr = $ip_ref->{'host_descr'} || "";
    my $loc = $ip_ref->{'loc'} || "";
    my $cat = $ip_ref->{'cat'} || "";
    my $int_admin = $ip_ref->{'int_admin'} || "";
    my $comentario = $ip_ref->{'comentario'} || "";
    my $update_type = $ip_ref->{'update_type'} || "NULL";
    my $alive = "-1";
    $alive = "0" if $ip_ref->{'alive'} == "0";
    $alive = $ip_ref->{'alive'} if $ip_ref->{'alive'};
    my $last_response = $ip_ref->{'last_response'} || "";
    my $id = $ip_ref->{'id'} || "";
    my $red_num = $ip_ref->{'red_num'} || "";
    my $red_descr = $ip_ref->{'descr'} || "";
    my $client_id = $ip_ref->{'client_id'} || "";
    my $dyn_dns_updates = $ip_ref->{'dyn_dns_updates'} || "";

    push @{$values_ip{$ip_int}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$dyn_dns_updates";
    $helper_array[$i++]=$ip_int;
}
$dbh->disconnect;

return (\%values_ip,\@helper_array);
}


sub search_db_red {
my ( $self,$client_id, $vars_file, $daten, $start_entry, $entries_per_page ) = @_;

my %lang_vars = $self->_get_vars("$vars_file") if $vars_file;

debug("search_db_red");

$start_entry="" if ! $start_entry;
$entries_per_page="" if ! $entries_per_page;
my $limit="";
#	if ( $start_entry && $entries_per_page ) {
#		$limit = " LIMIT $start_entry,$entries_per_page";
#	}

my $dnssg_cc_id = $self->get_custom_column_id_from_name("$client_id", "DNSSG") || "";

my $modred=${$daten}{modred} || "";
my $client_independent=${$daten}{client_independent} || "n";
no strict 'refs';
my @search;
my @cc_search;
my @cc_ignore_search;
foreach my $loc (keys %{$daten}) {
    my $dat = ${$daten}{$loc};
    if ( ! $dat ) { next; }
    if ( $loc eq "gip_query" || $loc eq "entries_per_page" || $loc eq "ip_version_ele" || $loc eq "client_id" || $loc eq "client_independent" || $loc eq "ipv4" || $loc eq "ipv6" || $loc eq "B2" || $loc eq "pages_links_red_button" || $loc eq "show_rootnet" || $loc eq "show_endnet" || $loc eq "mass_submit" || $loc =~ /mass_update_red_submit/ || $loc eq "mass_action_type" || $loc eq "anz_nets" ) { next; }
    if ( $dat !~ /../ && $loc ne "vigilada" && $modred ne "y" && $loc !~ /_${dnssg_cc_id}$/) {
        $self->print_error("$client_id","$lang_vars{dos_signos_message} $loc - $dat");
        $self->print_end("$client_id");
        exit 1;
    }
    if ( $dat =~ /$lang_vars{buscar_message}/ || $loc =~ /search_index/ || $loc =~ /modred/ || $loc =~ /red_search/) {
        next;
    }

    $dat = "$loc:X-X:$dat";
    push @search, $dat;
}
use strict 'refs';

my $search_index=${$daten}{search_index} || "false";
debug("search_db_red: $search_index");
my $mas_red_search;
my $mas_red_cc_search;
my $mas_red_cc_ignore_search;
my @red_search;
my @ignore_search;
my @red_cc_search;
my $red_search;
my $ip_cc_search = "";
my $cc_ignore_search = "";
my $ip_search = "";
my $ignore_search = "";
my $export_type = ${$daten}{export_type} || "";
my $tag_search = "";
my $ignore_search_tag = "";
my $dns_server_group_search = "";
my $ignore_search_dns_server_group = "";

if ( ${$daten}{red_search} ) {
    $red_search = ${$daten}{red_search};
    $red_search =~ s/^\s*//;
    $red_search =~ s/\s*$//;
}

if ( $search_index eq "true" || $export_type ) {
    if ( $red_search =~ /^-\S+$/ ) {
        print "<p class=\"NotifyText\">$lang_vars{exclude_string_only_message}</p><br>\n";
        $self->print_end("$client_id");
        exit 1;
    }
    my @red_search_array; 
    while ( 1 == 1 ) {
        if ( $red_search =~ /".+"/ ) {
            $red_search = "" if $red_search =~ /"/;
            $red_search =~ s/"(.+?)"//;
            my $exact_red_search_string = $1 if $1;
            push (@red_search,$exact_red_search_string) if $1;
        } else {
            $red_search =~ s/"//sg;
            last;
        }
    }
    my @mas_red_search = split(" ",$red_search);
    @red_search = (@red_search, @mas_red_search);

    
    foreach ( @red_search ) {
        if ( $_ !~ /^-/ && $_ !~ /^\+/ ) {
            my $valid_v6 = $self->check_valid_ipv6("$_") || "0";
            if ( $valid_v6 == "1" ) {
                $_ = ip_expand_address ($_,6);
            }

            $ip_cc_search = "";
            $ip_cc_search = " OR (n.red_num IN (SELECT net_id FROM custom_net_column_entries WHERE entry LIKE \"%$_%\"))";
            $ip_cc_search .= " OR (n.red_num IN (SELECT net_id FROM custom_net_column_entries WHERE entry IN (SELECT id FROM dns_server_group WHERE name LIKE \"%$_%\")))";
            if ( ! $ip_search ) {
                $ip_search = "( red LIKE \"%$_%\" OR descr LIKE \"%$_%\" OR comentario LIKE \"%$_%\" OR l.loc LIKE \"%$_%\" OR c.cat LIKE \"%$_%\" $ip_cc_search) ";
            } else {
                $ip_search .= " AND ( red LIKE \"%$_%\" OR descr LIKE \"%$_%\" OR comentario LIKE \"%$_%\" OR l.loc LIKE \"%$_%\" OR c.cat LIKE \"%$_%\" $ip_cc_search)";
            }

            if ( ! $tag_search ) {
                $tag_search = " (n.red_num IN (SELECT DISTINCT net_id from tag_entries_network WHERE tag_id IN (SELECT id FROM tag WHERE name LIKE \"%$_%\"))) OR";
            } else {
                $tag_search .= " (n.red_num IN (SELECT DISTINCT net_id from tag_entries_network WHERE tag_id IN (SELECT id FROM tag WHERE name LIKE \"%$_%\"))) OR";
            }    

        } elsif ( $_ =~ /^-/ ) {
            $_ =~ s/^-//;

            my $valid_v6 = $self->check_valid_ipv6("$_") || "0";
            if ( $valid_v6 == "1" ) {
                $_ = ip_expand_address ($_,6);
            }

            $cc_ignore_search = "";
            $cc_ignore_search = " AND (n.red_num NOT IN (SELECT net_id FROM custom_net_column_entries WHERE entry REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" ))";
            $cc_ignore_search .= " AND (n.red_num NOT IN (SELECT net_id FROM custom_net_column_entries WHERE entry IN ( SELECT id FROM dns_server_group WHERE name REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\")))";
            if ( ! $ignore_search ) {
                $ignore_search = "( red NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND descr NOT REGEXP \"\[\[:<:]]$_\[\[:>:\]\]\" AND comentario NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND l.loc NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND c.cat NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" $cc_ignore_search )";
            } else {
                $ignore_search = $ignore_search . " AND ( red NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND descr NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND comentario NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND l.loc NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" AND c.cat NOT REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" )";
            }

            if ( ! $ignore_search_tag ) {
                $ignore_search_tag = " (n.red_num NOT IN (SELECT DISTINCT net_id from tag_entries_network WHERE tag_id IN (SELECT id FROM tag WHERE name REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\"))) AND";
            } else {
                $ignore_search_tag .= " (n.red_num NOT IN (SELECT DISTINCT net_id from tag_entries_network WHERE tag_id IN (SELECT id FROM tag WHERE name REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\"))) AND ";
            }    

        } elsif ( $_ =~ /^\+/ ) {
            $_ =~ s/^\+//;

            my $valid_v6 = $self->check_valid_ipv6("$_") || "0";
            if ( $valid_v6 == "1" ) {
                $_ = ip_expand_address ($_,6);
            }

            $ip_cc_search= "";
            $ip_cc_search= " OR (n.red_num IN (SELECT net_id FROM custom_net_column_entries WHERE entry = \"$_\" ))";
            if ( ! $ip_search ) {
                $ip_search = "( red = \"$_\" OR descr = \"$_\" OR comentario = \"$_\" OR l.loc = \"$_\" OR c.cat = \"$_\" $ip_cc_search)";
            } else {
                $ip_search = $ip_search . " AND ( red = \"$_\" OR descr = \"$_\" OR comentario = \"$_\" OR l.loc = \"$_\" OR c.cat = \"$_\" $ip_cc_search)";
            }

            if ( ! $tag_search ) {
                $tag_search = " (n.red_num IN (SELECT DISTINCT net_id from tag_entries_network WHERE tag_id IN (SELECT id FROM tag WHERE name = \"$_\"))) OR";
            } else {
                $tag_search .= " (n.red_num IN (SELECT DISTINCT net_id from tag_entries_network WHERE tag_id IN (SELECT id FROM tag WHERE name = \"$_\"))) OR";
            }    

        } else {
            $ip_cc_search= "";
            $ip_cc_search= " OR (n.red_num IN (SELECT net_id FROM custom_net_column_entries WHERE entry REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" ))";
            if ( ! $ip_search ) {
                $ip_search = "( red REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR descr REGEXP \"\[\[:<:]]$_\[\[:>:\]\]\" OR comentario REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR l.loc REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR c.cat REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" $ip_cc_search)";
            } else {
                $ip_search = $ip_search . " AND ( red REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR descr REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR comentario REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR l.loc REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" OR c.cat REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\" $ip_cc_search)";
            }

            if ( ! $tag_search ) {
                $tag_search = " (n.red_num IN (SELECT DISTINCT net_id from tag_entries_network WHERE tag_id IN (SELECT id FROM tag WHERE name REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\"))) OR";
            } else {
                $tag_search .= " (n.red_num IN (SELECT DISTINCT net_id from tag_entries_network WHERE tag_id IN (SELECT id FROM tag WHERE name REGEXP \"\[\[:<:\]\]$_\[\[:>:\]\]\"))) OR";
            }    
        }
    }

    $ip_search = $tag_search . $ip_search;
    $ignore_search = $ignore_search_tag . $ignore_search;

    $ignore_search = "( ". $ignore_search . " )" if $ignore_search;
    $cc_ignore_search = "( ". $cc_ignore_search . " )" if $cc_ignore_search;

}

if ( $ip_search ) {
    push @search, $ip_search;
}
if ( $ignore_search ) {
    push @ignore_search, $ignore_search;
}

my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $client_search = "";
my $client_cc_search = "";
if ( $client_independent ne "yes" ) {
    $client_search="AND n.client_id = $qclient_id";
    $client_cc_search="AND (cce.client_id = $qclient_id OR cce.client_id = '9999')";
}

my @values_red=();
my $ele_num = @search;
$ele_num=$ele_num - 1;
my $search = "";
if ( $ENV{HTTP_REFERER} =~ /ip_show_free_range.cgi/ ) {
    $search="red REGEXP \"^$red_search.*\"";
} else {
    for (my $i = 0; $i <= $ele_num; $i++) {
        if ( $search[$i] =~ /(red LIKE|red =)/ ) {
            $search = "$search $search[$i]";
            next;
        }
        my ($name,$val) = split(":X-X:",$search[$i]);
        next if ( $name eq "red_search" || $name eq "ipv4" || $name eq "ipv6" );

        if ( $name eq "loc" ) { $name = "l.loc"; }
        if ( $name eq "cat_red" ) { $name = "c.cat"; }
        if ( $name =~ /^cc_id_/ ) {
            $name =~ /^cc_id_(\d+)$/;
            my $cc_id_search = $1;
            $val = "%" . $val . "%";
            my $qval = $dbh->quote( $val );
            if ( $i lt $ele_num ) {
#					$search .= " n.red_num IN ( SELECT cce.net_id FROM custom_net_column_entries cce, custom_net_columns cc WHERE cce.entry LIKE $qval AND cce.cc_id = \"$cc_id_search\" AND (cce.client_id = $qclient_id OR cce.client_id = '9999')) AND";
                $search .= " n.red_num IN ( SELECT cce.net_id FROM custom_net_column_entries cce, custom_net_columns cc WHERE cce.entry LIKE $qval AND cce.cc_id = \"$cc_id_search\" $client_cc_search) AND";
            } else {
                $search .= " n.red_num IN (  SELECT cce.net_id FROM custom_net_column_entries cce, custom_net_columns cc WHERE cce.entry LIKE $qval AND cce.cc_id = \"$cc_id_search\" $client_cc_search)";
            }
            next;
        }
        if ( $name eq "l.loc" || $name eq "c.cat" ) {
            if ( $i lt $ele_num ) {
                $search = "$search $name = \"$val\" AND" if $val;
            } else {
                $search = "$search $name = \"$val\"" if $val;
            }
        } elsif ( $name eq "tag" ) {
				$val =~ s/_/,/g;
                $search = " $search (n.red_num IN (SELECT DISTINCT net_id from tag t, tag_entries_network te WHERE t.id = te.tag_id AND t.id IN ($val)))";
        } else {
            if ( $i lt $ele_num ) {
                $search = "$search $name LIKE \"%$val%\" AND" if $val;
            } else {
                $search = "$search $name LIKE \"%$val%\"" if $val;
            }
        }
    }
}

my $ignore_ele_num = 0;
#	$ignore_ele_num = $ignore_search if $ignore_search;
$ignore_ele_num = @ignore_search if $ignore_search[0];
$ignore_ele_num=$ignore_ele_num - 1;
$ignore_search = "";
for (my $i = 0; $i <= $ignore_ele_num; $i++) {
    if ( $ignore_search[$i] =~ /(red NOT REGEXP|red REGEXPR)/ ) {
        $ignore_search = "$ignore_search[$i]";
        next;
    }
    my ($name,$val) = split(":X-X:",$ignore_search[$i]);
    next if ( $name eq "red_search" );

    if ( $name eq "loc" ) { $name = "l.loc"; }
    if ( $name eq "cat_red" ) { $name = "c.cat"; }
    if ( $i lt $ele_num ) {
        $ignore_search = "$ignore_search $name LIKE \"%$val%\" AND";
    } else {
        $ignore_search = "$ignore_search $name LIKE \"%$val%\"";
    }
}


my $sth;

my $order_by_expr='ORDER BY IF(n.ip_version=\'v4\', INET_ATON(n.red),n.red),n.BM';
my $ip_version_search = "";
if ( ${$daten}{ipv4} && ! ${$daten}{ipv6} ) {
    $ip_version_search .= " AND n.ip_version = 'v4'";
} elsif ( ! ${$daten}{ipv4} && ${$daten}{ipv6} ) {
    $ip_version_search .= " AND n.ip_version = 'v6'";
    $order_by_expr="ORDER BY n.red,n.BM DESC";
}

if ( $ignore_search && $search ) {

    debug("VAR1: SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet, n.parent_network_id FROM net n, locations l, categorias_net c WHERE (($search) AND ($ignore_search)) AND l.id = n.loc AND n.categoria = c.id $client_search $ip_version_search $order_by_expr");
    $sth = $dbh->prepare("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet, n.parent_network_id FROM net n, locations l, categorias_net c WHERE (($search) AND ($ignore_search)) AND l.id = n.loc AND n.categoria = c.id $client_search $ip_version_search $order_by_expr

        ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( my $red_ref = $sth->fetchrow_arrayref ) {
        push @values_red, [ @$red_ref ];
    }

} elsif ( $ignore_search && ! $search ) {

    debug("VAR2: SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet, n.parent_network_id FROM net n, locations l, categorias_net c WHERE ($ignore_search) AND l.id = n.loc AND n.categoria = c.id $client_search $ip_version_search $order_by_expr");
    $sth = $dbh->prepare("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet, n.parent_network_id FROM net n, locations l, categorias_net c WHERE ($ignore_search) AND l.id = n.loc AND n.categoria = c.id $client_search $ip_version_search $order_by_expr
        ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( my $red_ref = $sth->fetchrow_arrayref ) {
        push @values_red, [ @$red_ref ];
    }

} elsif ( ! $ignore_search && $search ) {

    debug("VAR3: SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet, n.parent_network_id FROM net n, locations l, categorias_net c WHERE ($search) AND l.id = n.loc AND n.categoria = c.id $client_search $ip_version_search $order_by_expr");
    $sth = $dbh->prepare("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet, n.parent_network_id FROM net n, locations l, categorias_net c WHERE ($search) AND l.id = n.loc AND n.categoria = c.id $client_search $ip_version_search $order_by_expr
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( my $red_ref = $sth->fetchrow_arrayref ) {
        push @values_red, [ @$red_ref ];
    }
}
    $dbh->disconnect;
    return @values_red;
}

sub get_mysql_version {
    my ($self) = @_;
    my $dbh = $self->_mysql_connection();
    my $mysql_version = "$dbh->{mysql_serverversion}\n";
    return $mysql_version;
}


sub search_db_audit {
my ($self,$client_id,$time_range_search,$red_search,$start_entry,$entries_per_page,$update_types_audit,$all_clients) = @_;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my @values_red;
my ($ele, $search);
my $ele_num = @{$red_search};
$ele_num=$ele_num - 1;
my ($cl_a,$cl_aa);
$all_clients = "" if ! $all_clients;
my $client_event_search="0";
if ( $all_clients eq "yy" ) {
    $cl_a="";
    $cl_aa="";
} else {
    $cl_a="AND ( a.client_id = $qclient_id OR a.client_id = '9999' )";
    $cl_aa="AND ( aa.client_id = $qclient_id OR aa.client_id = '9999' )";
#		$cl_a="AND a.client_id = $qclient_id";
#		$cl_aa="AND aa.client_id = $qclient_id";
}
$search = "";
my $search_string;
for (my $i = 0; $i <= $ele_num; $i++) {
    my ($name,$val) = split(":X-X:",@{$red_search}[$i]);
    next if !$val || $name eq "time_range" || $name eq "start_date" || $name eq "end_date" || $name eq "time_radio" || $name eq "entries_per_page" || $name eq "start_entry" || $name eq "B2" || $name eq "all_clients";
    if ( $name eq "event_class" ) { $name = "ec.event_class"; }
    if ( $name eq "event_type" ) { $name = "et.event_type"; }
    if ( $name eq "update_type_audit" ) {
        if ( $val eq "all" ) {
            next;
        } 
        $name = "uta.update_types_audit";
    }

    my $valid_v6 = $self->check_valid_ipv6("$val") || "0";
    if ( $valid_v6 == "1" ) {
        $val = ip_expand_address ($val,6);
    }

    if ( $name eq "search_string" && $val =~ /.+/ ) {
        if ( $val =~ /REGEXP/ ) {
            $search_string = "( a.event $val OR a.event_type $val OR a.user $val OR ec.event_class $val OR et.event_type $val )";
        } else {
            $search_string = "( a.event LIKE \"%$val%\" OR a.event_type LIKE \"%$val%\" OR a.user LIKE \"%$val%\" OR ec.event_class LIKE \"%$val%\" OR et.event_type LIKE \"%$val%\" )";
        }
        next;
    }
    if ( $i lt $ele_num ) {
        $search = "$search $name LIKE \"%$val%\" AND";
    } else {
        $search = "$search $name LIKE \"%$val%\"";
    }
    if ( $name eq "uta.update_types_audit" ) {
        $search =~ s/uta.update_types_audit LIKE "%man%"/uta.update_types_audit LIKE "man"/ if $val eq "man";
    }
    if ( $val =~ /^client/ ) { $client_event_search = "1"; }
}
$search =~ s/AND$//;
my $limit = " LIMIT $start_entry,$entries_per_page";
my ($sth,$anz_values_found);
if ( $search ) {
    $search = $search . " AND " . $time_range_search if $time_range_search;
    $search = $search . " AND " . $search_string if $search_string;
    my $search_aa=$search;
    $search_aa =~ s/ a\./ aa\./gi;
    if ( $client_event_search eq "1" ) {
        debug("1 - SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit,a.client_id, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id='9999'  ORDER BY date DESC $limit");
        $sth = $dbh->prepare("SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit,a.client_id, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id='9999'  ORDER BY date DESC $limit") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    } elsif ( $update_types_audit =~ /man|red cleared/ ) {
        debug("2 - SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit,c.client, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id=c.id ORDER BY a.date DESC $limit");
        $sth = $dbh->prepare("SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit,c.client, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id=c.id ORDER BY a.date DESC $limit") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    } elsif ( $update_types_audit =~ /auto/ ) {
        debug("3 - SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit,c.client, a.remote_host FROM audit_auto a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id=c.id ORDER BY a.date DESC $limit");
        $sth = $dbh->prepare("SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit,c.client, a.remote_host FROM audit_auto a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id=c.id ORDER BY a.date DESC $limit") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#		} elsif ( $client_event_search eq "1" ) {
#			$sth = $dbh->prepare("SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit,a.client_id FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id='9999'  ORDER BY date DESC $limit") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    } else {
        debug("4 - SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit,c.client, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id=c.id UNION SELECT aa.event, aa.user, aa.date, ec.event_class, et.event_type, uta.update_types_audit,c.client, aa.remote_host FROM audit_auto aa, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search_aa) AND aa.event_class = ec.id AND aa.event_type = et.id AND aa.update_type_audit = uta.id $cl_aa AND aa.client_id=c.id ORDER BY date DESC $limit");
        $sth = $dbh->prepare("SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit,c.client, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id=c.id UNION SELECT aa.event, aa.user, aa.date, ec.event_class, et.event_type, uta.update_types_audit,c.client, aa.remote_host FROM audit_auto aa, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search_aa) AND aa.event_class = ec.id AND aa.event_type = et.id AND aa.update_type_audit = uta.id $cl_aa AND aa.client_id=c.id ORDER BY date DESC $limit") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    }

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( my $red_ref = $sth->fetchrow_arrayref ) {
    push @values_red, [ @$red_ref ];
}
    if ( $update_types_audit =~ /man|red cleared/ ) {
        debug("SELECT COUNT(*) FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a");
        $sth = $dbh->prepare("SELECT COUNT(*) FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $anz_values_found = $sth->fetchrow_array;
    } elsif ( $update_types_audit =~ /auto/ ) {
        debug("SELECT COUNT(*) FROM audit_auto a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a");
        $sth = $dbh->prepare("SELECT COUNT(*) FROM audit_auto a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $anz_values_found = $sth->fetchrow_array;
    } else {
        debug("SELECT COUNT(*) FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a");
        $sth = $dbh->prepare("SELECT COUNT(*) FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        my $anz_values_found1 = $sth->fetchrow_array;
        debug("SELECT COUNT(*) FROM audit_auto a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a");
        $sth = $dbh->prepare("SELECT COUNT(*) FROM audit_auto a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        my $anz_values_found2 = $sth->fetchrow_array;
        $anz_values_found = $anz_values_found1 + $anz_values_found2;
    }
    
} else {
    $search = $time_range_search if $time_range_search;
    if ( $search && $search_string) {
        $search = $search . " AND " . $search_string if $search_string;
    } else {
        $search = $search_string if $search_string;
    }
    my $search_aa=$search;
    $search_aa =~ s/a\./aa\./g;
    if ( $update_types_audit =~ /man|red cleared/ ) {
        $sth = $dbh->prepare("SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit, c.client, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id=c.id ORDER BY a.date DESC $limit") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    } elsif ( $update_types_audit =~ /auto/ ) {
        $sth = $dbh->prepare("SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit, c.client, a.remote_host FROM audit_auto a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id=c.id ORDER BY a.date DESC $limit") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    } else {
        debug("SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit, c.client, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id=c.id UNION SELECT  a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit, a.client_id, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id AND a.client_id='9999' UNION SELECT aa.event, aa.user, aa.date, ec.event_class, et.event_type, uta.update_types_audit, c.client, aa.remote_host FROM audit_auto aa, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search_aa) AND aa.event_class = ec.id AND aa.event_type = et.id AND aa.update_type_audit = uta.id $cl_aa AND aa.client_id=c.id ORDER BY date DESC $limit");
        $sth = $dbh->prepare("SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit, c.client, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a AND a.client_id=c.id UNION SELECT  a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit, a.client_id, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id AND a.client_id='9999' UNION SELECT aa.event, aa.user, aa.date, ec.event_class, et.event_type, uta.update_types_audit, c.client, aa.remote_host FROM audit_auto aa, event_classes ec, event_types et, update_types_audit uta, clients c WHERE ($search_aa) AND aa.event_class = ec.id AND aa.event_type = et.id AND aa.update_type_audit = uta.id $cl_aa AND aa.client_id=c.id ORDER BY date DESC $limit") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    }
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( my $red_ref = $sth->fetchrow_arrayref ) {
    push @values_red, [ @$red_ref ];
    }
    if ( $update_types_audit =~ /man/ ) {
        debug("SELECT COUNT(*) FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a");
        $sth = $dbh->prepare("SELECT COUNT(*) FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $anz_values_found = $sth->fetchrow_array;
    } elsif ( $update_types_audit =~ /auto/ ) {
        debug("SELECT COUNT(*) FROM audit_auto a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a");
        $sth = $dbh->prepare("SELECT COUNT(*) FROM audit_auto a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $anz_values_found = $sth->fetchrow_array;
    } else {
        debug("SELECT COUNT(*) FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a");
        $sth = $dbh->prepare("SELECT COUNT(*) FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        my $anz_values_found1 = $sth->fetchrow_array;
        debug("SELECT COUNT(*) FROM audit_auto a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a");
        $sth = $dbh->prepare("SELECT COUNT(*) FROM audit_auto a, event_classes ec, event_types et, update_types_audit uta WHERE ($search) AND a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        my $anz_values_found2 = $sth->fetchrow_array;
        $anz_values_found=$anz_values_found1 + $anz_values_found2;
    }

}
$sth->finish();
$dbh->disconnect;
push (@values_red,$anz_values_found);
    return @values_red;
}


sub delete_ip {
    my ( $self,$client_id, $first_ip_int, $last_ip_int,$ip_version, $red_num ) = @_;

    my $format=$self->{'format'};
    my $error;
    my $dbh = $self->_mysql_connection();
    my $qfirst_ip_int = $dbh->quote( $first_ip_int );
    my $qlast_ip_int = $dbh->quote( $last_ip_int );
    my $qip_version = $dbh->quote( $ip_version );
    my $qclient_id = $dbh->quote( $client_id );

    my $match;
    if ( $first_ip_int eq $last_ip_int ) {
        $match = "ip=$qfirst_ip_int";
    } elsif ( $ip_version eq "v4" ) {
        $match="CAST(ip AS UNSIGNED) BETWEEN $qfirst_ip_int AND $qlast_ip_int";
    } else {
        $match="ip BETWEEN $qfirst_ip_int AND $qlast_ip_int";
    }

    my $red_num_expr = "";
    if ( $red_num ) {
        my $qred_num = $dbh->quote( $red_num );
        $red_num_expr = "AND red_num=$qred_num";
    }

    debug("DELETE FROM host WHERE ip_version=$qip_version AND $match AND client_id = $qclient_id $red_num_expr");
    my $sth = $dbh->prepare("DELETE FROM host WHERE ip_version=$qip_version AND $match AND client_id = $qclient_id $red_num_expr") or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    #	$self->delete_tag_entry_object_obj_id("$client_id", "$red", "host");

    $sth->finish();
    $dbh->disconnect;
}

sub clear_ip {
my ( $self,$client_id, $first_ip_int, $last_ip_int,$ip_version ) = @_;

my $format=$self->{'format'};
my $error;
my $dbh = $self->_mysql_connection();
my $qfirst_ip_int = $dbh->quote( $first_ip_int );
my $qlast_ip_int = $dbh->quote( $last_ip_int );
my $qclient_id = $dbh->quote( $client_id );

my $match="CAST(ip AS BINARY) BETWEEN $qfirst_ip_int AND $qlast_ip_int";

debug("UPDATE host SET hostname='', host_descr='', int_admin='n', alive='-1', last_response=NULL, comentario='' WHERE $match AND client_id = $qclient_id");
my $sth = $dbh->prepare("UPDATE host SET hostname='', host_descr='', int_admin='n', alive='-1', last_response=NULL, comentario='' WHERE $match AND client_id = $qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->finish();
$dbh->disconnect;
}

sub delete_ip_no_rango_reservado {
my ( $self,$client_id, $first_ip_int, $last_ip_int,$red_loc_id,$ip_version, $red_num ) = @_;

my $dbh = $self->_mysql_connection();
my $qfirst_ip_int = $dbh->quote( $first_ip_int );
my $qlast_ip_int = $dbh->quote( $last_ip_int );
my $qred_loc_id = $dbh->quote( $red_loc_id );
my $qip_version = $dbh->quote( $ip_version );
my $qclient_id = $dbh->quote( $client_id );

my $match;
if ( $first_ip_int eq $last_ip_int ) {
    $match = "ip=$qfirst_ip_int";
} elsif ( $ip_version eq "v4" ) {
    $match="CAST(ip AS UNSIGNED) BETWEEN $qfirst_ip_int AND $qlast_ip_int";
} else {
    $match="BETWEEN $qfirst_ip_int AND $qlast_ip_int";
}

my $red_num_expr = "";
if ( $red_num ) {
    my $qred_num = $dbh->quote( $red_num );
    $red_num_expr = "AND red_num=$qred_num";
}

debug("DELETE FROM host WHERE ip_version=$qip_version AND $match AND range_id = '-1' AND client_id = $qclient_id $red_num_expr");
my $sth = $dbh->prepare("DELETE FROM host WHERE ip_version=$qip_version AND $match AND range_id = '-1' AND client_id = $qclient_id $red_num_expr"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub get_host_no_rango {
my ( $self,$client_id, $first_ip_int, $last_ip_int,$ip_version ) = @_;

    $ip_version = "" if ! $ip_version;
    my @values_ip;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qfirst_ip_int = $dbh->quote( $first_ip_int );
    my $qlast_ip_int = $dbh->quote( $last_ip_int );
    my $qclient_id = $dbh->quote( $client_id );

    my $match="CAST(h.ip AS BINARY) BETWEEN $qfirst_ip_int AND $qlast_ip_int";

    my $sth;
    if ( $ip_version eq "v4" ) {
        debug("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, inet_ntoa(h.ip) FROM host h, locations l, categorias c, update_type ut WHERE $match AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND range_id = '-1' AND h.client_id = $qclient_id ORDER BY h.ip");
        $sth = $dbh->prepare("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, inet_ntoa(h.ip) FROM host h, locations l, categorias c, update_type ut WHERE $match AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND range_id = '-1' AND h.client_id = $qclient_id ORDER BY h.ip")
         or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    } else {
        debug("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id FROM host h, locations l, categorias c, update_type ut WHERE $match AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND range_id = '-1' AND h.client_id = $qclient_id ORDER BY h.ip");
        $sth = $dbh->prepare("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id FROM host h, locations l, categorias c, update_type ut WHERE $match AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND range_id = '-1' AND h.client_id = $qclient_id ORDER BY h.ip")
         or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    }
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_ip, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_ip;
}

sub get_host_rango {
my ( $self,$client_id, $first_ip_int, $last_ip_int, $red_num ) = @_;
my @values_ip;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qfirst_ip_int = $dbh->quote( $first_ip_int );
    my $qlast_ip_int = $dbh->quote( $last_ip_int );
    my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
debug("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id FROM host h, locations l, categorias c, update_type ut WHERE h.red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND range_id != '-1' AND h.client_id = $qclient_id ORDER BY h.ip");
my $sth = $dbh->prepare("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id FROM host h, locations l, categorias c, update_type ut WHERE h.red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND range_id != '-1' AND h.client_id = $qclient_id ORDER BY h.ip") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_ip, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_ip;
}

sub get_host {
my ( $self,$client_id, $first_ip_int, $last_ip_int,$red_num,$host_order_by, $ip_version ) = @_;
$host_order_by = "IP" if ! $host_order_by;
$host_order_by = "h.ip" if $host_order_by eq "IP";
$host_order_by = "h.ip" if $host_order_by eq "IP_auf";
$host_order_by = "h.ip DESC" if $host_order_by eq "IP_ab";
$host_order_by = "h.hostname" if $host_order_by eq "hostname";
$host_order_by = "h.hostname" if $host_order_by eq "hostname_auf";
$host_order_by = "h.hostname DESC" if $host_order_by eq "hostname_ab";
$ip_version="" if ! $ip_version;
my @values_ip;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qfirst_ip_int = $dbh->quote( $first_ip_int );
    my $qlast_ip_int = $dbh->quote( $last_ip_int );
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );

my $match="CAST(h.ip AS BINARY) BETWEEN $qfirst_ip_int AND $qlast_ip_int";

$red_num = "" if ! $red_num;
$match.=" AND h.red_num=$qred_num" if $red_num =~ /\d+/;

debug("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, INET_NTOA(h.ip), h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE $match AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY $host_order_by");
my $sth = $dbh->prepare("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, INET_NTOA(h.ip), h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE $match AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY $host_order_by"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_ip, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_ip;
}

sub get_host_hash_between {
my ( $self,$client_id, $first_ip_int, $last_ip_int, $ip_version ) = @_;

my $format=$self->{'format'};
my $error;
my $host_order_by = "h.ip";
my %values_ip;
my $ip_ref;
my $dbh = $self->_mysql_connection();
#my $qfirst_ip_int = $dbh->quote( $first_ip_int );
#my $qlast_ip_int = $dbh->quote( $last_ip_int );
my $qclient_id = $dbh->quote( $client_id );

my $match="CAST(h.ip AS BINARY) BETWEEN $first_ip_int AND $last_ip_int";

debug("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, INET_NTOA(h.ip), h.red_num, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE $match AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY $host_order_by");

my $sth = $dbh->prepare("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, INET_NTOA(h.ip), h.red_num, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE $match AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY $host_order_by") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $hostname = $ip_ref->{'hostname'} || "";
    my $range_id = $ip_ref->{'range_id'} || "";
    next if ! $hostname && $host_order_by !~ /^IP|IP_auf|IP_ab$/;
    my $ip_int = $ip_ref->{'ip'} || "";
    my $ip;
    if ( $ip_version eq "v4" ) {
        $ip = $ip_ref->{'INET_NTOA(h.ip)'};
    } else {
        $ip_int=Math::BigInt->new("$ip_int");
        $first_ip_int=Math::BigInt->new("$first_ip_int");
        $last_ip_int=Math::BigInt->new("$last_ip_int");
        next if $ip_int < $first_ip_int || $ip_int > $last_ip_int;
        $ip = $self->int_to_ip("$client_id","$ip_int","$ip_version");
    }
    my $host_descr = $ip_ref->{'host_descr'} || "";
    my $loc = $ip_ref->{'loc'} || "";
    my $cat = $ip_ref->{'cat'} || "";
    my $int_admin = $ip_ref->{'int_admin'} || "";
    my $comentario = $ip_ref->{'comentario'} || "";
    my $update_type = $ip_ref->{'update_type'} || "NULL";
    my $alive;
    if ( $ip_ref->{'alive'} == 0 ) {
        $alive = "0";
    } else {
        $alive = $ip_ref->{'alive'} || "";
    }
    my $last_response = $ip_ref->{'last_response'} || "";
    my $id = $ip_ref->{'id'} || "";
    my $red_num = $ip_ref->{'red_num'} || "";
    my $red_descr = "";
    my $dyn_dns_updates = $ip_ref->{'dyn_dns_updates'} || "";
    push @{$values_ip{$ip_int}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$dyn_dns_updates";
}
    $dbh->disconnect;
return (\%values_ip);
}


sub get_host_from_red_num {
my ( $self,$client_id, $red_num ) = @_;
my @values_ip;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
debug("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, INET_NTOA(h.ip) FROM host h, locations l, categorias c, update_type ut WHERE h.red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY h.ip");
my $sth = $dbh->prepare("SELECT h.ip, h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, INET_NTOA(h.ip) FROM host h, locations l, categorias c, update_type ut WHERE h.red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY h.ip"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_ip, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_ip;
}


sub get_host_hash {
my ( $self,$client_id, $first_ip_int, $last_ip_int,$host_order_by,$knownhosts,$red_num,$mass_update_ids,$get_cm_host, $ip_version ) = @_;

$host_order_by = "IP" if ! $host_order_by;
$ip_version = "" if ! $ip_version;

my $host_hash_hash_ref=$self->get_host_hash_hash("$client_id","$red_num");
my @cc_ids=$self->get_custom_host_column_ids("$client_id");

$get_cm_host="" if ! $get_cm_host;

my %values_ip = ();
my %values_ip_test = ();
my @helper_array;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qfirst_ip_int = $dbh->quote( $first_ip_int ) if $first_ip_int;
my $qlast_ip_int = $dbh->quote( $last_ip_int ) if $last_ip_int;
my $qclient_id = $dbh->quote( $client_id );
my $qred_num = $dbh->quote( $red_num ) if $red_num;
my $sth;
if ( $get_cm_host ) {
    debug("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut, device_cm_config dcmc WHERE h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.hostname != '' AND h.client_id = $qclient_id AND h.id = dcmc.host_id");
    $sth = $dbh->prepare("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut, device_cm_config dcmc WHERE h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.hostname != '' AND h.client_id = $qclient_id AND h.id = dcmc.host_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}elsif (  $knownhosts eq "libre" ) {
    debug("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE h.red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id");
    $sth = $dbh->prepare("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE h.red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} elsif (  $host_order_by =~ /IP/ ) {
    debug("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE h.red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY h.ip");
    $sth = $dbh->prepare("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE h.red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY h.ip") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} elsif (  $host_order_by =~ /SEARCH/ ) {
#		my $mass_update_ips=join(",",@$mass_update_ids);
    my $in_expr;
    my $mass_update_ips=join('","',@$mass_update_ids);
    $mass_update_ips='"' . $mass_update_ips . '"';
    if ( $ip_version eq "v6" ) {
        $in_expr = "h.ip IN ( $mass_update_ips )";
    } else {
        $in_expr = "INET_NTOA(h.ip) IN ( $mass_update_ips )";
    }
    debug("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE $in_expr AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY h.ip");
    $sth = $dbh->prepare("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE $in_expr AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY h.ip
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} elsif (  $host_order_by =~ /CM_MASS/ ) {
    my $in_expr;
    my $mass_update_ips=join('","',@$mass_update_ids);
    $mass_update_ips='"' . $mass_update_ips . '"';
    if ( $ip_version eq "v6" ) {
        $in_expr = "h.ip IN ( $mass_update_ips )";
    } else {
        $in_expr = "INET_NTOA(h.ip) IN ( $mass_update_ips )";
    }
    debug("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE $in_expr AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY h.ip");
    $sth = $dbh->prepare("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE $in_expr AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY h.ip
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} else {
    debug("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE h.red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.hostname != '' AND h.client_id = $qclient_id");
    $sth = $dbh->prepare("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version, h.dyn_dns_updates FROM host h, locations l, categorias c, update_type ut WHERE h.red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.hostname != '' AND h.client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

}
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

my $i=0;
my $j=0;
my $k=0;
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $ip_version = $ip_ref->{'ip_version'};
    my $hostname = $ip_ref->{'hostname'} || "";
    my $range_id = $ip_ref->{'range_id'} || "";
    next if ! $hostname && $host_order_by !~ /^IP|IP_auf|IP_ab$/;
    my $ip_int = $ip_ref->{'ip'} || "";
    my $ip;
    if ( $ip_version eq "v4" ) {
        $ip = $ip_ref->{'INET_NTOA(h.ip)'};
    } else {
        $ip = $self->int_to_ip("$client_id","$ip_int","$ip_version");
    }
    my $host_descr = $ip_ref->{'host_descr'} || "";
    my $loc = $ip_ref->{'loc'} || "";
    my $cat = $ip_ref->{'cat'} || "";
    my $int_admin = $ip_ref->{'int_admin'} || "";
    my $comentario = $ip_ref->{'comentario'} || "";
    my $update_type = $ip_ref->{'type'} || "NULL";
    my $alive;
    if ( $ip_ref->{'alive'} == 0 ) {
        $alive = "0";
    } else {
        $alive = $ip_ref->{'alive'} || "";
    }
    my $last_response = $ip_ref->{'last_response'} || "";
    my $id = $ip_ref->{'id'} || "";
    my $red_num = $ip_ref->{'red_num'} || "";
    my $red_descr = "";
    my $dyn_dns_updates = $ip_ref->{'dyn_dns_updates'} || "";

    if ( $host_order_by =~ /IP/ || $host_order_by eq "SEARCH" || $host_order_by =~ /CM_MASS/ ) {
        push @{$values_ip{$ip_int}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$dyn_dns_updates";


    } elsif ( $host_order_by =~ /hostname/ ) {
        push @{$values_ip{"${hostname}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$dyn_dns_updates";

        foreach ( @cc_ids ) {
            push @{$values_ip{"${hostname}-${id}"}},$host_hash_hash_ref->{ "$id" }->{ "$$_[0]" };
        }

    } elsif ( $host_order_by =~ /description/ ) {

        my $host_descr_key = $host_descr || "zzzz";
        $host_descr_key = "zzzz" if $host_descr eq "NULL";
        
        push @{$values_ip{"${host_descr_key}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$dyn_dns_updates";

        foreach ( @cc_ids ) {
            push @{$values_ip{"${host_descr_key}-${id}"}},$host_hash_hash_ref->{ "$id" }->{ "$$_[0]" };
        }

    } elsif ( $host_order_by =~ /loc/ ) {

        my $loc_key = $loc || "zzzz";
        $loc_key = "zzzz" if $loc eq "NULL";

        push @{$values_ip{"${loc_key}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$dyn_dns_updates";

        foreach ( @cc_ids ) {
            push @{$values_ip{"${loc_key}-${id}"}},$host_hash_hash_ref->{ "$id" }->{ "$$_[0]" };
        }

    } elsif ( $host_order_by =~ /cat/ ) {

        my $cat_key = $cat || "zzzz";
        $cat_key = "zzzz" if $cat eq "NULL";

        push @{$values_ip{"${cat_key}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$dyn_dns_updates";

        foreach ( @cc_ids ) {
            push @{$values_ip{"${cat_key}-${id}"}},$host_hash_hash_ref->{ "$id" }->{ "$$_[0]" };
        }

    } elsif ( $host_order_by =~ /AI/ ) {

        my $int_admin_key = $int_admin || "zzzz";
        $int_admin_key = "zzzz" if $int_admin eq "n";

        push @{$values_ip{"${int_admin_key}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$dyn_dns_updates";

        foreach ( @cc_ids ) {
            push @{$values_ip{"${int_admin_key}-${id}"}},$host_hash_hash_ref->{ "$id" }->{ "$$_[0]" };
        }

    } elsif ( $host_order_by =~ /comentario/ ) {

        my $comentario_key = $comentario || "zzzz";
        $comentario_key = "zzzz" if $comentario eq "NULL";

        push @{$values_ip{"${comentario_key}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$dyn_dns_updates";

        foreach ( @cc_ids ) {
            push @{$values_ip{"${comentario_key}-${id}"}},$host_hash_hash_ref->{ "$id" }->{ "$$_[0]" };
        }

    } else {

        my $cc_val; 
        $host_order_by =~ /^(-?\d+)_/;
        my $cc_type_id = $1;
        $cc_val = $host_hash_hash_ref->{ $id }->{ $cc_type_id } || "zzzzz";
        push @{$values_ip{"${cc_val}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$dyn_dns_updates";

        foreach ( @cc_ids ) {
            $host_hash_hash_ref->{ "$id" }->{ "$cc_type_id" } = "zzzzz" if ! $host_hash_hash_ref->{ "$id" }->{ "$cc_type_id" };
            push @{$values_ip{"${cc_val}-${id}"}},$host_hash_hash_ref->{ "$id" }->{ "$cc_type_id" };
        }
    }

    $helper_array[$i++]=$ip_int;
}

    $dbh->disconnect;

    return (\%values_ip,\@helper_array);
}




sub get_host_hash_check {
my ( $self,$client_id,$red_num ) = @_;

my %values_ip = ();
my %values_ip_test = ();
my @helper_array;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );


my $sth;
debug("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, h.comentario, h.range_id, h.id, h.red_num, h.ip_version, h.loc, h.categoria, h.update_type, h.int_admin, h.alive FROM host h WHERE h.red_num=$qred_num ORDER BY h.ip");
$sth = $dbh->prepare("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, h.comentario, h.range_id, h.id, h.red_num, h.ip_version, h.loc, h.categoria, h.update_type, h.int_admin, h.alive FROM host h WHERE h.red_num=$qred_num ORDER BY h.ip")
    or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    debug("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, h.comentario, h.range_id, h.id, h.red_num, h.ip_version, h.loc, h.categoria, h.update_type, h.int_admin, h.alive FROM host h WHERE h.red_num=$qred_num ORDER BY h.ip");

    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $ip_version = $ip_ref->{'ip_version'};
        my $hostname = $ip_ref->{'hostname'} || "";
        my $range_id = $ip_ref->{'range_id'} || "";
    #    next if ! $hostname;
        my $ip_int = $ip_ref->{'ip'} || "";
        my $ip;
        if ( $ip_version eq "v4" ) {
            $ip = $ip_ref->{'INET_NTOA(h.ip)'};
        } else {
            $ip = $self->int_to_ip("$client_id","$ip_int","$ip_version");
        }
        my $host_descr = $ip_ref->{'host_descr'} || "";
        my $comentario = $ip_ref->{'comentario'} || "";
        my $id = $ip_ref->{'id'} || "";
        my $red_num = $ip_ref->{'red_num'} || "";
        my $loc_id = $ip_ref->{'loc'} || "";
        my $cat_id = $ip_ref->{'categoria'} || "";
        my $utype_id = $ip_ref->{'update_type'} || "";
        my $int_admin = $ip_ref->{'int_admin'} || "";
        my $alive = $ip_ref->{'alive'} || "";
        push @{$values_ip{$ip_int}},"$ip","$hostname","$host_descr","$comentario","$range_id","$ip_int","$id","$red_num","$client_id","$ip_version","$loc_id","$cat_id","$utype_id","$int_admin","$alive";

        debug("PUSH: $ip_int - $ip - $hostname - $utype_id");
    }

    $dbh->disconnect;

    return \%values_ip;
}


sub get_host_hash_limit {
my ( $self,$client_id, $start_entry_host, $entries_per_page_host,$host_order_by,$red_num,$knownhosts ) = @_;
$host_order_by = "IP" if ! $host_order_by;
my $host_order_by_statement;
$host_order_by_statement = "h.ip" if $host_order_by eq "IP";
$host_order_by_statement = "h.ip" if $host_order_by eq "IP_auf";
$host_order_by_statement = "h.ip DESC" if $host_order_by eq "IP_ab";
$host_order_by_statement = "h.hostname" if $host_order_by eq "hostname";
$host_order_by_statement = "h.hostname" if $host_order_by eq "hostname_auf";
$host_order_by_statement = "h.hostname DESC" if $host_order_by eq "hostname_ab";
my %values_ip;
my @helper_array;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
#        my $qfirst_ip_int = $dbh->quote( $first_ip_int );
#        my $qlast_ip_int = $dbh->quote( $last_ip_int );
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
my $limit = " LIMIT $start_entry_host,$entries_per_page_host";
my $sth;
if ( $host_order_by =~ /IP/ ) {
    debug("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id FROM host h, locations l, categorias c, update_type ut WHERE red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY $host_order_by_statement $limit");
    $sth = $dbh->prepare("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id FROM host h, locations l, categorias c, update_type ut WHERE red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id ORDER BY $host_order_by_statement $limit") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} else {
    debug("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id FROM host h, locations l, categorias c, update_type ut WHERE red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.hostname != '' AND h.client_id = $qclient_id ORDER BY $host_order_by_statement $limit");
    $sth = $dbh->prepare("SELECT h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id FROM host h, locations l, categorias c, update_type ut WHERE red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.hostname != '' AND h.client_id = $qclient_id ORDER BY $host_order_by_statement $limit") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

my $i=0;
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $hostname = $ip_ref->{'hostname'} || "";
    my $range_id = $ip_ref->{'range_id'} || "";
    next if ! $hostname && $host_order_by !~ /^IP|IP_auf|IP_ab$/;
    my $ip_int = $ip_ref->{'ip'};
    my $ip = $ip_ref->{'INET_NTOA(h.ip)'};
    my $host_descr = $ip_ref->{'host_descr'} || "";
    my $loc = $ip_ref->{'loc'} || "";
    my $cat = $ip_ref->{'cat'} || "";
    my $int_admin = $ip_ref->{'int_admin'} || "";
    my $comentario = $ip_ref->{'comentario'} || "";
#		my $update_type = $ip_ref->{'update_type'} || "NULL";
    my $update_type = "DNS";
    my $alive = $ip_ref->{'alive'};
    my $last_response = $ip_ref->{'last_response'} || "";
    push @{$values_ip{$ip_int}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id";
    $helper_array[$i++]=$ip_int;
}

    $dbh->disconnect;
    return (\%values_ip,\@helper_array);
}

sub get_host_hash_id_key {
# CM
my ( $self,$client_id, $red_num, $key ) = @_;
my %values_ip;
my $ip_ref;
$red_num="" if ! $red_num;
$key="" if ! $key;
my $red_num_expr="";

    my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );

if ( $red_num ) {
    $red_num_expr="red_num=$qred_num AND";
}	

my $sth;
debug("SELECT h.id,h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id,h.ip_version FROM host h, locations l, categorias c, update_type ut WHERE $red_num_expr h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id");
$sth = $dbh->prepare("SELECT h.id,h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id,h.ip_version FROM host h, locations l, categorias c, update_type ut WHERE $red_num_expr h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

my $i=0;
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $hostname = $ip_ref->{'hostname'} || "";
    my $range_id = $ip_ref->{'range_id'} || "";
#		next if ! $hostname;
    my $id = $ip_ref->{'id'};
    my $ip_int = $ip_ref->{'ip'};
    my $ip_version = $ip_ref->{'ip_version'};
    my $ip;
    if ( $ip_version eq "v4" ) {
        $ip = $ip_ref->{'INET_NTOA(h.ip)'};
    } else {
        $ip = $self->int_to_ip("$client_id","$ip_int","v6");
    }
    my $host_descr = $ip_ref->{'host_descr'} || "";
    my $loc = $ip_ref->{'l.loc'} || "";
    my $cat = $ip_ref->{'cat'} || "";
    my $int_admin = $ip_ref->{'int_admin'} || "";
    my $comentario = $ip_ref->{'comentario'} || "";
    my $update_type = $ip_ref->{'type'} || "NULL";
    my $alive = $ip_ref->{'alive'};
    my $last_response = $ip_ref->{'last_response'} || "";
    if ( $key eq "ip" ) {
        push @{$values_ip{$ip}},"$id","$ip_int","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id";
    } elsif ( $key eq "ip_int" ) {
        push @{$values_ip{$ip_int}},"$id","$ip_int","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id";
    } else {
        push @{$values_ip{$id}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id";
    }
}

    $dbh->disconnect;
    return \%values_ip;
}



sub get_host_hash_count {
my ( $self,$client_id,$red_num ) = @_;
#	my $host_order_by = "IP" if ! $host_order_by;
#	my $host_order_by_statement;
#	$host_order_by_statement = "h.ip" if $host_order_by eq "IP";
#	$host_order_by_statement = "h.ip" if $host_order_by eq "IP_auf";
#	$host_order_by_statement = "h.ip DESC" if $host_order_by eq "IP_ab";
#	$host_order_by_statement = "h.hostname" if $host_order_by eq "hostname";
#	$host_order_by_statement = "h.hostname" if $host_order_by eq "hostname_auf";
#	$host_order_by_statement = "h.hostname DESC" if $host_order_by eq "hostname_ab";
my %values_ip;
my @helper_array;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
my $sth;
$sth = $dbh->prepare("SELECT COUNT(*) FROM host h, locations l, categorias c, update_type ut WHERE red_num=$qred_num AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.hostname != '' AND h.client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
my $count_host_entries = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $count_host_entries;
}


sub get_host_from_red_id_ntoa {
my ( $self,$client_id, $red_num,$match,$ip_version ) = @_;
my @values_ip;
$ip_version = "" if ! $ip_version;
my $ip_version_expr='';
if ( $ip_version eq "v4" ) {
    $ip_version_expr = " AND h.ip_version='v4'";
} elsif ( $ip_version eq "v6" ) {
    $ip_version_expr = " AND h.ip_version='v6'";
}
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
my $sth;
if ( $match ) {
    debug("SELECT INET_NTOA(h.ip), h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.ip_version, h.ip FROM host h, locations l, categorias c, update_type ut WHERE red_num = $qred_num  AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND ( INET_NTOA(h.ip) LIKE \"%$match%\" OR h.hostname LIKE \"%$match%\" OR h.host_descr LIKE \"%$match%\" OR l.loc LIKE \"%$match%\" OR c.cat LIKE \"%$match%\" OR h.comentario LIKE \"%$match%\" OR (h.id IN (SELECT host_id FROM custom_host_column_entries WHERE entry LIKE \"%$match%\" ))) AND hostname != 'NULL' AND hostname != '' AND h.client_id = $qclient_id $ip_version_expr ORDER BY INET_NTOA(h.ip)");
    $sth = $dbh->prepare("SELECT INET_NTOA(h.ip), h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.ip_version, h.ip FROM host h, locations l, categorias c, update_type ut WHERE red_num = $qred_num  AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND ( INET_NTOA(h.ip) LIKE \"%$match%\" OR h.hostname LIKE \"%$match%\" OR h.host_descr LIKE \"%$match%\" OR l.loc LIKE \"%$match%\" OR c.cat LIKE \"%$match%\" OR h.comentario LIKE \"%$match%\" OR (h.id IN (SELECT host_id FROM custom_host_column_entries WHERE entry LIKE \"%$match%\" ))) AND hostname != 'NULL' AND hostname != '' AND h.client_id = $qclient_id $ip_version_expr ORDER BY INET_NTOA(h.ip)") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} else {
    debug("SELECT INET_NTOA(h.ip), h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.ip_version, h.ip FROM host h, locations l, categorias c, update_type ut WHERE red_num = $qred_num  AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND hostname != 'NULL' AND hostname != '' AND h.client_id = $qclient_id $ip_version_expr ORDER BY INET_NTOA(h.ip)");
    $sth = $dbh->prepare("SELECT INET_NTOA(h.ip), h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.ip_version, h.ip FROM host h, locations l, categorias c, update_type ut WHERE red_num = $qred_num  AND h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND hostname != 'NULL' AND hostname != '' AND h.client_id = $qclient_id $ip_version_expr ORDER BY INET_NTOA(h.ip)") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_ip, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_ip;
}

sub comprueba_red {
my ( $self,$client_id, $red_num ) = @_;
my $red_check;
    my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT red,BM FROM net WHERE red_num=$qred_num AND client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $red_check = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $red_check;
}

sub delete_red {
my ( $self,$client_id, $red, $rootnet, $red_num, $red_ip, $BM ) = @_;
$rootnet = 0 if ! $rootnet;
my $dbh = $self->_mysql_connection();
my $qred = $dbh->quote( $red );
my $qclient_id = $dbh->quote( $client_id );
my $sth;
if ( $red =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ ) {
        $red_num = $self->get_red_id_from_red("$client_id","$red") if ! $red_num;
} elsif ( $red =~ /^\d{1,5}$/ ) {
        $red_num = $red;
} else {  $self->print_error("$client_id","invalid network"); }

my $qred_num = $dbh->quote( $red_num );

debug("DELETE FROM net WHERE red_num=$qred_num AND client_id = $qclient_id");
$sth = $dbh->prepare("DELETE FROM net WHERE red_num=$qred_num AND client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

#$sth = $dbh->prepare("DELETE FROM tag_entries_network WHERE net_id=$qred_num") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$self->delete_tag_entry_object_obj_id("$client_id", "$red_num", "network");


# update child networks
if ( $rootnet == 1 ) {
    my @child_networks = $self->get_child_networks_by_parent_id("$client_id","$red_num");

    my $i = 0;
    foreach (@child_networks ) {
        my $child_red = $child_networks[$i]->[0];
        my $child_bm = $child_networks[$i]->[1];
        my $child_red_num = $child_networks[$i]->[3];
        my $child_ip_version = $child_networks[$i]->[9];
        my ($overlap,$parent_network_id) = $self->get_parent_network("$child_red", "$child_bm","$client_id","$child_ip_version");
        $parent_network_id = "" if ! $parent_network_id;
        my $qparent_network_id = $dbh->quote( $parent_network_id );
        my $qchild_red_num = $dbh->quote( $child_red_num );
        $sth = $dbh->prepare("UPDATE net SET parent_network_id=$qparent_network_id WHERE red_num=$qchild_red_num") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $i++;
    }
}

$sth->finish();
$dbh->disconnect;
}

sub delete_red_ip {
my ( $self,$client_id, $red_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qred_id = $dbh->quote( $red_id );
my $qclient_id = $dbh->quote( $client_id );
    debug("DELETE FROM host WHERE red_num = $qred_id AND client_id = $qclient_id");
    my $sth = $dbh->prepare("DELETE FROM host WHERE red_num = $qred_id AND client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

#sub check_ip {
#	my ( $self,$client_id, $red, $BM ) = @_;
#	my $red_check;
#        my $dbh = $self->_mysql_connection();
#	my $qred = $dbh->quote( $red );
#	my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT red FROM net WHERE red=$qred AND BM=$qBM AND client_id=$qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        $red_check = $sth->fetchrow_array;
#        $sth->finish();
#        $dbh->disconnect;
#        return $red_check;
#}

#sub check_ip_BM {
#	my ( $self,$client_id, $red, $BM ) = @_;
#	my $red_check;
#        my $dbh = $self->_mysql_connection();
#	my $qred = $dbh->quote( $red );
#	my $qBM = $dbh->quote( $BM );
#	my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT red FROM net WHERE red=$qred AND BM=$qBM AND client_id=$qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        $red_check = $sth->fetchrow_array;
#        $sth->finish();
#        $dbh->disconnect;
#        return $red_check;
#}


sub get_host_network {
my $self = shift;
my %args = @_;

my $ip         = $args{"ip"};
my $ip_int     = $args{"ip_int"};
my $ip_version = $args{"ip_version"};
my $client_id = $args{"client_id"};
my $vars_file = $args{"vars_file"};

my %lang_vars = $self->_get_vars("$vars_file");

my $red_num = "";
my $error = "";

# red, BM, red_num, site, ip_version, rootnet
# TEST include ip_version within query to fetch only networks for adequat ip_version
my @values_host_redes = $self->get_host_redes_no_rootnet("$client_id");

my $k = 0;
foreach (@values_host_redes) {
    if ( !$values_host_redes[$k]->[0] || $values_host_redes[$k]->[5] == 1 )
    {
        $k++;
        next;
    }

    my $ip_version_checkred = $values_host_redes[$k]->[4];

    if ( $ip_version ne $ip_version_checkred ) {
        $k++;
        next;
    }

    my $host_red    = $values_host_redes[$k]->[0];
    my $host_red_bm = $values_host_redes[$k]->[1];

    if ( $ip_version eq "v4" ) {
        $host_red =~ /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/;
        my $third_host_red_oct = $3;
        $ip =~ /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/;
        my $third_host_oct = $3;
        if ( $host_red_bm >= 24 && $third_host_red_oct != $third_host_oct )
        {
            $k++;
            next;
        }
    }

    if ( $ip_version eq "v6" ) {
        $host_red = ip_expand_address( $host_red, 6 );
        $ip       = ip_expand_address( $ip,       6 );
        $host_red =~ /^(.+:.+:.+:.+:).+:.+:.+:.+/;
        my $net_part_host_red = $1;
        $ip =~ /^(.+:.+:.+:.+:).+:.+:.+:.+/;
        my $net_part_ip = $1;
        if ( $host_red_bm == 64 && $net_part_host_red ne $net_part_ip ) {
            $k++;
            next;
        }
    }

    my $next        = 0;
    my $redob_redes = "$host_red/$host_red_bm";
    my $ipob_redes  = new Net::IP($redob_redes) or $next = 1;
    if ($next) {
        $k++;
        next;
    }

    my $last_ip_int = ( $ipob_redes->last_int() );
    $last_ip_int = Math::BigInt->new("$last_ip_int");
    my $first_ip_int = ( $ipob_redes->intip() );
    $first_ip_int = Math::BigInt->new("$first_ip_int");

    if ( $ip_int < $first_ip_int || $ip_int > $last_ip_int ) {
        $k++;
        next;
    }
    elsif ( $ip_int == $first_ip_int ) {
        $error = "ERROR: $ip IS A NETWORK ADDRESS";
        last;
    }
    elsif ( $ip_int == $last_ip_int ) {
        $error = "ERROR: $ip IS A BROADCAST ADDRESS";
        last;
    }
    else {
        $red_num = $values_host_redes[$k]->[2];
        last;
    }
}

if ( !$red_num && !$error ) {
    $error = "$lang_vars{no_host_red_message}";
}

return ($red_num, $error);
}

sub get_overlap_red {
my ( $self, $ip_version, $client_id ) = @_;

my $format=$self->{'format'};
my $error;
my @overlap_redes;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qip_version = $dbh->quote( $ip_version );
my $qclient_id = $dbh->quote( $client_id );
my $order_by="";
$order_by = "ORDER BY INET_ATON(n.red)";
debug("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet FROM net n, locations l , categorias_net c WHERE l.id = n.loc AND n.categoria = c.id AND ip_version = $qip_version AND n.client_id = $qclient_id $order_by");
my $sth = $dbh->prepare("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet FROM net n, locations l , categorias_net c WHERE l.id = n.loc AND n.categoria = c.id AND ip_version = $qip_version AND n.client_id = $qclient_id $order_by") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @overlap_redes, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @overlap_redes;
}

sub get_host_redes {
my ( $self, $client_id ) = @_;
my @host_redes;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT red, BM, red_num, loc, ip_version, rootnet FROM net WHERE client_id = $qclient_id")
    or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @host_redes, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @host_redes;
}

sub get_host_redes_no_rootnet {
my ( $self, $client_id ) = @_;
my @host_redes;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT red, BM, red_num, loc, ip_version, rootnet FROM net WHERE rootnet = '0' AND client_id = $qclient_id")
    or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @host_redes, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @host_redes;
}

sub insert_net {
#	my ( $self,$client_id, $red_num, $red, $BM, $descr, $loc_id, $vigilada, $comentario, $cat_net, $ip_version, $rootnet_val, $dyn_dns_updates ) = @_;
my ( $self,$client_id, $red, $BM, $descr, $loc_id, $vigilada, $comentario, $cat_net, $ip_version, $rootnet_val, $dyn_dns_updates ) = @_;

my $format=$self->{'format'};
my $error;
my $dbh = $self->_mysql_connection();
$rootnet_val="0" if ! $rootnet_val;
$dyn_dns_updates=1 if ! $dyn_dns_updates;
my ($overlap,$parent_network_id) = $self->get_parent_network("$red", "$BM","$client_id","$ip_version");
$parent_network_id = "" if ! $parent_network_id;

#        my $qred_num = $dbh->quote( $red_num );
my $qred = $dbh->quote( $red );
my $qBM = $dbh->quote( $BM );
my $qdescr = $dbh->quote( $descr );
my $qloc_id = $dbh->quote( $loc_id );
my $qvigilada = $dbh->quote( $vigilada );
my $qcomentario = $dbh->quote( $comentario );
my $qcat_net = $dbh->quote( $cat_net );
my $qip_version = $dbh->quote( $ip_version );
my $qrootnet_val = $dbh->quote( $rootnet_val );
my $qdyn_dns_updates = $dbh->quote( $dyn_dns_updates );
my $qclient_id = $dbh->quote( $client_id );
my $qparent_network_id = $dbh->quote( $parent_network_id );


    debug("INSERT INTO net (red, BM, descr, loc, vigilada, comentario, categoria, ip_version, client_id, rootnet, dyn_dns_updates,parent_network_id) VALUES ( $qred,$qBM,$qdescr,$qloc_id,$qvigilada,$qcomentario,$qcat_net,$qip_version,$qclient_id,$qrootnet_val,$qdyn_dns_updates,$qparent_network_id)");
    my $sth = $dbh->prepare("INSERT INTO net (red, BM, descr, loc, vigilada, comentario, categoria, ip_version, client_id, rootnet, dyn_dns_updates,parent_network_id) VALUES ( $qred,$qBM,$qdescr,$qloc_id,$qvigilada,$qcomentario,$qcat_net,$qip_version,$qclient_id,$qrootnet_val,$qdyn_dns_updates,$qparent_network_id)") or $error="Can not execute statement:<p>$DBI::errstr";
if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";
if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth = $dbh->prepare("SELECT LAST_INSERT_ID()") or $error="Can not execute statement:<p>$DBI::errstr";
if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";
if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

my $red_num = $sth->fetchrow_array;


if ( $rootnet_val == 1 ) {
    # update parent_network_id of child networks
    my $child_networks = $self->get_child_networks("$red", "$BM", "$red_num", "$client_id","$ip_version");
    foreach my $child_red_num ( keys %{$child_networks}) {
        my $parent_id = $child_networks->{$child_red_num}[2];
        my $qparent_id = $dbh->quote( $parent_id );
        debug("UPDATE net SET parent_network_id=$qparent_id WHERE red_num=$child_red_num");
        $sth = $dbh->prepare("UPDATE net SET parent_network_id=$qparent_id WHERE red_num=$child_red_num") or $error="Can not execute statement:<p>$DBI::errstr";

        if ( $format eq 'html' && $error ) {
            croak $self->print_error("$client_id","$error");
        }

        $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";
        if ( $format eq 'html' && $error ) {
            croak $self->print_error("$client_id","$error");
        }
    }
}


$sth->finish();
$dbh->disconnect;

return $red_num;
}

sub get_last_red_num {
my ( $self, $client_id ) = @_;

my $format=$self->{'format'};
my $error;
my $red_num;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT red_num FROM net ORDER BY (red_num+0) DESC LIMIT 1") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $red_num = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $red_num;
}

sub get_last_cat_id {
my ( $self, $client_id ) = @_;
my $cat_id;
    my $dbh = $self->_mysql_connection();
    debug("SELECT id FROM categorias ORDER BY (id+0) desc");
    my $sth = $dbh->prepare("SELECT id FROM categorias ORDER BY (id+0) desc
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $cat_id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $cat_id;
}

sub get_last_cat_net_id {
my ( $self, $client_id ) = @_;
my $cat_net_id;
    my $dbh = $self->_mysql_connection();
    debug("SELECT id FROM categorias_net ORDER BY (id+0) desc");
    my $sth = $dbh->prepare("SELECT id FROM categorias_net ORDER BY (id+0) desc
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $cat_net_id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $cat_net_id;
}

sub get_last_loc_id {
my ( $self, $client_id ) = @_;
my $loc_id;
    my $dbh = $self->_mysql_connection();
    debug("SELECT id FROM locations ORDER BY (id+0) desc");
    my $sth = $dbh->prepare("SELECT id FROM locations ORDER BY (id+0) desc
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $loc_id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $loc_id;
}

sub get_loc_id {
my ( $self,$client_id, $loc ) = @_;

my $format=$self->{'format'};
my $error;
my $loc_id;
    my $dbh = $self->_mysql_connection();
my $qloc = $dbh->quote( $loc );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id FROM locations WHERE loc=$qloc AND ( client_id = $qclient_id OR client_id = '9999' )") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$loc_id = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $loc_id;
}

sub get_cat_net_from_id {
my ( $self,$client_id, $cat_net_id ) = @_;

my $format=$self->{'format'};
my $error;
my $cat_net;
    my $dbh = $self->_mysql_connection();
my $qcat_net_id = $dbh->quote( $cat_net_id );
my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT cat FROM categorias_net WHERE id=$qcat_net_id AND client_id = $qclient_id
    my $sth = $dbh->prepare("SELECT cat FROM categorias_net WHERE id=$qcat_net_id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $cat_net = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $cat_net;
}

sub get_cat_from_id {
my ( $self,$client_id, $cat ) = @_;
my $cat_id;
    my $dbh = $self->_mysql_connection();
my $qcat = $dbh->quote( $cat );
    my $sth = $dbh->prepare("SELECT id FROM categorias WHERE cat=$qcat
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $cat_id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $cat_id;
}

sub get_loc_from_redid {
my ( $self,$client_id, $red_num ) = @_;
my @values_locations;
my ( $ip_ref, $red_loc );
    my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT l.loc FROM locations l, net n WHERE n.red_num = $qred_num AND n.loc = l.id AND ( n.client_id = $qclient_id OR n.client_id = '9999')") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $red_loc = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $red_loc;
}

sub get_cat_id {
my ( $self,$client_id, $cat ) = @_;

my $format=$self->{'format'};
my $error;
my $cat_id;
    my $dbh = $self->_mysql_connection();
my $qcat = $dbh->quote( $cat );
    my $sth = $dbh->prepare("SELECT id FROM categorias WHERE cat=$qcat") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $cat_id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $cat_id;
}

sub get_loc_from_id {
my ( $self,$client_id, $loc_id ) = @_;

my $format=$self->{'format'};
my $error;
my $loc;
    my $dbh = $self->_mysql_connection();
my $qloc_id = $dbh->quote( $loc_id ); 
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT loc FROM locations WHERE id=$qloc_id AND ( client_id=$qclient_id OR client_id = '9999' )") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $loc = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $loc;
}


sub get_cat_net_id {
my ( $self,$client_id, $cat_net ) = @_;

my $format=$self->{'format'};
my $error;
my $cat_net_id;
    my $dbh = $self->_mysql_connection();
my $qcat_net = $dbh->quote( $cat_net );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id FROM categorias_net WHERE cat=$qcat_net") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $cat_net_id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $cat_net_id;
}

sub get_red_id_from_red {
my ( $self,$client_id, $red, $rootnet, $BM ) = @_;

my $format=$self->{'format'};
my $error;
my $red_id;
my $dbh = $self->_mysql_connection();
my $qred = $dbh->quote( $red );
my $qclient_id = $dbh->quote( $client_id );

my $rootnet_expr="AND rootnet = 0";
$rootnet_expr="AND rootnet = 1" if $rootnet;

my $BM_expr="";
$BM_expr="AND BM=$BM" if $BM;

my $sth = $dbh->prepare("SELECT red_num FROM net WHERE red=$qred AND client_id=$qclient_id $rootnet_expr $BM_expr") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$red_id = $sth->fetchrow_array || "";
$sth->finish();
$dbh->disconnect;
return $red_id;
}

sub get_range_type_from_id {
my ( $self,$client_id, $range_type_id ) = @_;
my $range_type;
    my $dbh = $self->_mysql_connection();
my $qrange_type_id = $dbh->quote( $range_type_id );
    my $sth = $dbh->prepare("SELECT range_type FROM range_type WHERE id=$qrange_type_id
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $range_type = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $range_type;
}

sub reset_host_cat_id {
my ( $self,$client_id, $cat_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qcat_id = $dbh->quote( $cat_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("UPDATE host SET categoria='-1' WHERE categoria=$qcat_id AND client_id=$qclient_id
                    ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub reset_host_cat_net_id {
my ( $self,$client_id, $cat_net_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qcat_net_id = $dbh->quote( $cat_net_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("UPDATE net SET categoria='-1' WHERE categoria=$qcat_net_id AND client_id=$qclient_id
                    ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub reset_host_loc_id {
my ( $self,$client_id, $loc_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qloc_id = $dbh->quote( $loc_id );
my $qclient_id = $dbh->quote( $client_id );
    debug("UPDATE host SET loc='-1' WHERE loc=$qloc_id AND client_id=$qclient_id");
    my $sth = $dbh->prepare("UPDATE host SET loc='-1' WHERE loc=$qloc_id AND client_id=$qclient_id
                    ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub update_host_red_id_ip {
my ( $self,$client_id, $red_num_new, $ip_int ) = @_;
    my $dbh = $self->_mysql_connection();
my $qip_int = $dbh->quote( $ip_int );
my $qred_num_new = $dbh->quote( $red_num_new );
my $qclient_id = $dbh->quote( $client_id );
    debug("UPDATE host SET red_num=$qred_num_new WHERE ip=$qip_int AND client_id=$qclient_id");
    my $sth = $dbh->prepare("UPDATE host SET red_num=$qred_num_new WHERE ip=$qip_int AND client_id=$qclient_id
                    ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub update_host_hostname {
my ( $self,$client_id, $host_id, $hostname ) = @_;
    my $dbh = $self->_mysql_connection();
my $qhost_id = $dbh->quote( $host_id );
my $qhostname = $dbh->quote( $hostname );
my $qclient_id = $dbh->quote( $client_id );
    debug("UPDATE host SET hostname=$qhostname WHERE id=$qhost_id AND client_id=$qclient_id");
    my $sth = $dbh->prepare("UPDATE host SET hostname=$qhostname WHERE id=$qhost_id AND client_id=$qclient_id
                    ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub update_host_red_id_ip_all {
my ( $self,$client_id, $red_num_new, $first_ip_int, $last_ip_int,$ip_version ) = @_;
    my $dbh = $self->_mysql_connection();
my $qfirst_ip_int = $dbh->quote( $first_ip_int );
my $qlast_ip_int = $dbh->quote( $last_ip_int );
my $qred_num_new = $dbh->quote( $red_num_new );
my $qclient_id = $dbh->quote( $client_id );
debug("UPDATE host SET red_num=$qred_num_new WHERE CAST(ip AS BINARY) BETWEEN $qfirst_ip_int AND $qlast_ip_int AND client_id=$qclient_id");
my $sth = $dbh->prepare("UPDATE host SET red_num=$qred_num_new WHERE CAST(ip AS BINARY) BETWEEN $qfirst_ip_int AND $qlast_ip_int AND client_id=$qclient_id
                ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_host_red_id_red_num {
my ( $self,$client_id, $red_num_new, $red_num_old ) = @_;
    my $dbh = $self->_mysql_connection();
my $qred_num_new = $dbh->quote( $red_num_new );
my $qred_num_old = $dbh->quote( $red_num_old );
my $qclient_id = $dbh->quote( $client_id );
debug("UPDATE host SET red_num=$qred_num_new WHERE red_num=$qred_num_old AND client_id=$qclient_id");
my $sth = $dbh->prepare("UPDATE host SET red_num=$qred_num_new WHERE red_num=$qred_num_old AND client_id=$qclient_id
                ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub reset_net_loc_id {
my ( $self,$client_id, $loc_id ) = @_;
my $dbh = $self->_mysql_connection();
my $qloc_id = $dbh->quote( $loc_id );
my $qclient_id = $dbh->quote( $client_id );
debug("UPDATE net SET loc='-1' WHERE loc=$qloc_id AND client_id = $qclient_id");
my $sth = $dbh->prepare("UPDATE net SET loc='-1' WHERE loc=$qloc_id AND client_id = $qclient_id
                    ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_host_loc_id {
my ( $self,$client_id,$loc_id,$red_id ) = @_;

my $format=$self->{'format'};
my $error;
my $sth;
$loc_id="-1" if ! $loc_id;
my $dbh = $self->_mysql_connection();
my $qloc_id = $dbh->quote( $loc_id );
my $qred_id = $dbh->quote( $red_id );
my $qclient_id = $dbh->quote( $client_id );
my $i = 0;
debug("UPDATE host SET loc=$qloc_id WHERE red_num=$qred_id AND ( loc='-1' OR loc= (SELECT loc FROM net WHERE red_num=$qred_id) ) AND client_id = $qclient_id");
$sth = $dbh->prepare("UPDATE host SET loc=$qloc_id WHERE red_num=$qred_id AND ( loc='-1' OR loc= (SELECT loc FROM net WHERE red_num=$qred_id) ) AND client_id = $qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->finish();
    $dbh->disconnect;
}

sub get_utype_id {
my ( $self,$client_id, $utype ) = @_;

my $format=$self->{'format'};
my $error;
my $utype_id;
    my $dbh = $self->_mysql_connection();
my $qutype = $dbh->quote( $utype );
#	my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT id FROM update_type WHERE type=$qutype AND client_id = $qclient_id
    my $sth = $dbh->prepare("SELECT id FROM update_type WHERE type=$qutype") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $utype_id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $utype_id;
}


sub update_ip_mod {
my ( $self,$client_id, $ip_int, $hostname, $host_descr, $loc, $int_admin, $cat, $comentario, $update_type, $mydatetime, $red_num, $alive, $ip_version, $dyn_dns_updates ) = @_;

my $dbh = $self->_mysql_connection();
my $sth;

$loc="-1" if ! $loc;
$cat="-1" if ! $cat;
$dyn_dns_updates=1 if ! $dyn_dns_updates;

my $qhostname = $dbh->quote( $hostname );
my $qhost_descr = $dbh->quote( $host_descr );
my $qloc = $dbh->quote( $loc );
my $qint_admin = $dbh->quote( $int_admin );
my $qcat = $dbh->quote( $cat );
my $qcomentario = $dbh->quote( $comentario );
my $qupdate_type = $dbh->quote( $update_type );
my $qmydatetime = $dbh->quote( $mydatetime );
my $qred_num = $dbh->quote( $red_num );
my $qip_int = $dbh->quote( $ip_int );
my $qip_version = $dbh->quote( $ip_version );
my $qdyn_dns_updates = $dbh->quote( $dyn_dns_updates );
my $qclient_id = $dbh->quote( $client_id );
if ( $alive != "-1" ) {
    my $qalive = $dbh->quote( $alive );
    my $qlast_response = $dbh->quote( time() );
    debug("UPDATE host SET hostname=$qhostname, host_descr=$qhost_descr, loc=$qloc, int_admin=$qint_admin, categoria=$qcat, comentario=$qcomentario, update_type=$qupdate_type, last_update=$qmydatetime, red_num=$qred_num, alive=$qalive, last_response=$qlast_response, ip_version=$qip_version, dyn_dns_updates=$qdyn_dns_updates WHERE ip=$qip_int AND client_id=$qclient_id");
    $sth = $dbh->prepare("UPDATE host SET hostname=$qhostname, host_descr=$qhost_descr, loc=$qloc, int_admin=$qint_admin, categoria=$qcat, comentario=$qcomentario, update_type=$qupdate_type, last_update=$qmydatetime, red_num=$qred_num, alive=$qalive, last_response=$qlast_response, ip_version=$qip_version, dyn_dns_updates=$qdyn_dns_updates WHERE ip=$qip_int AND client_id=$qclient_id"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
} else {
    debug("UPDATE host SET hostname=$qhostname, host_descr=$qhost_descr, loc=$qloc, int_admin=$qint_admin, categoria=$qcat, comentario=$qcomentario, update_type=$qupdate_type, last_update=$qmydatetime, red_num=$qred_num, ip_version=$qip_version, dyn_dns_updates=$qdyn_dns_updates WHERE ip=$qip_int AND client_id=$qclient_id");
    $sth = $dbh->prepare("UPDATE host SET hostname=$qhostname, host_descr=$qhost_descr, loc=$qloc, int_admin=$qint_admin, categoria=$qcat, comentario=$qcomentario, update_type=$qupdate_type, last_update=$qmydatetime, red_num=$qred_num, ip_version=$qip_version, dyn_dns_updates=$qdyn_dns_updates WHERE ip=$qip_int AND client_id=$qclient_id"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
}
 $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
 $sth->finish();
 $dbh->disconnect;

}

sub insert_ip_mod {
    my ( $self,$client_id, $ip_int, $hostname, $host_descr, $loc, $int_admin, $cat, $comentario, $update_type, $mydatetime, $red_num, $alive, $ip_version, $dyn_dns_updates  ) = @_;

    my $dbh = $self->_mysql_connection();
    my $sth;

    $loc="-1" if ! $loc;
    $cat="-1" if ! $cat;
    $dyn_dns_updates=1 if ! $dyn_dns_updates;

    my $qhostname = $dbh->quote( $hostname );
    my $qhost_descr = $dbh->quote( $host_descr );
    my $qloc = $dbh->quote( $loc );
    my $qint_admin = $dbh->quote( $int_admin );
    my $qcat = $dbh->quote( $cat );
    my $qcomentario = $dbh->quote( $comentario );
    my $qupdate_type = $dbh->quote( $update_type );
    my $qmydatetime = $dbh->quote( $mydatetime );
    my $qip_int = $dbh->quote( $ip_int );
    my $qred_num = $dbh->quote( $red_num );
    $alive = "-1" if ! defined($alive);
    my $qclient_id = $dbh->quote( $client_id );
    my $qip_version = $dbh->quote( $ip_version );
    my $qdyn_dns_updates = $dbh->quote( $dyn_dns_updates );
    if ( $alive != "-1" ) {
        my $qalive = $dbh->quote( $alive );
        my $qlast_response = $dbh->quote( time() );
        debug("INSERT INTO host (ip,hostname,host_descr,loc,red_num,int_admin,categoria,comentario,update_type,last_update,alive,last_response,ip_version,client_id,dyn_dns_updates) VALUES ($qip_int,$qhostname,$qhost_descr,$qloc,$qred_num,$qint_admin,$qcat,$qcomentario,$qupdate_type,$qmydatetime,$qalive,$qlast_response,$qip_version,$qclient_id,$qdyn_dns_updates");
        $sth = $dbh->prepare("INSERT INTO host (ip,hostname,host_descr,loc,red_num,int_admin,categoria,comentario,update_type,last_update,alive,last_response,ip_version,client_id,dyn_dns_updates) VALUES ($qip_int,$qhostname,$qhost_descr,$qloc,$qred_num,$qint_admin,$qcat,$qcomentario,$qupdate_type,$qmydatetime,$qalive,$qlast_response,$qip_version,$qclient_id,$qdyn_dns_updates)"
                                ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    } else {
        debug("INSERT INTO host (ip,hostname,host_descr,loc,red_num,int_admin,categoria,comentario,update_type,last_update,ip_version,client_id,dyn_dns_updates) VALUES ($qip_int,$qhostname,$qhost_descr,$qloc,$qred_num,$qint_admin,$qcat,$qcomentario,$qupdate_type,$qmydatetime,$qip_version,$qclient_id,$qdyn_dns_updates");
        $sth = $dbh->prepare("INSERT INTO host (ip,hostname,host_descr,loc,red_num,int_admin,categoria,comentario,update_type,last_update,ip_version,client_id,dyn_dns_updates) VALUES ($qip_int,$qhostname,$qhost_descr,$qloc,$qred_num,$qint_admin,$qcat,$qcomentario,$qupdate_type,$qmydatetime,$qip_version,$qclient_id,$qdyn_dns_updates)"
                                ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    }
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}



sub check_and_insert_host {
my ( $self,$client_id, $ip_int, $hostname, $host_descr, $loc, $int_admin, $cat, $comentario, $update_type, $mydatetime, $red_num, $alive, $ip_version, $ip,$default_resolver,$dns_servers,$ignore_generic_auto,$device_name ) = @_;

my @values_host;
$hostname="unknown" if ! $hostname;

my $return_ip;

my $dbh = $self->_mysql_connection();
my $sth;
my $ip_ref;

$loc="-1" if ! $loc;
$cat="-1" if ! $cat;
my $qhost_descr = $dbh->quote( $host_descr );
my $qloc = $dbh->quote( $loc );
my $qint_admin = $dbh->quote( $int_admin );
my $qcat = $dbh->quote( $cat );
my $qcomentario = $dbh->quote( $comentario );
my $qupdate_type = $dbh->quote( $update_type );
my $qmydatetime = $dbh->quote( $mydatetime );
my $qip_int = $dbh->quote( $ip_int );
my $qred_num = $dbh->quote( $red_num );
$alive = "-1" if ! defined($alive);
my $qalive = $dbh->quote( $alive );
my $qclient_id = $dbh->quote( $client_id );
my $qip_version = $dbh->quote( $ip_version );
my $qlast_response = $dbh->quote( time() );


# Check if host already exists in the DB
debug("SELECT id,hostname,range_id FROM host h WHERE ip=$qip_int AND client_id = $qclient_id");
$sth = $dbh->prepare("SELECT id,hostname,range_id FROM host h WHERE ip=$qip_int AND client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_host, [ @$ip_ref ];
}

my $id=$values_host[0]->[0];
my $hostname_found=$values_host[0]->[1] || "unknown";
$hostname_found = $hostname if $hostname && $hostname ne "unknown";
my $range_id=$values_host[0]->[2] || -1;

my $qhostname = $dbh->quote( $hostname_found );
my $new_id;

if ( ! $id ) {
    $return_ip=$ip;
    # Insert host
    debug("INSERT INTO host (ip,hostname,host_descr,loc,red_num,int_admin,categoria,comentario,update_type,last_update,alive,last_response,ip_version,client_id) VALUES ($qip_int,$qhostname,$qhost_descr,$qloc,$qred_num,$qint_admin,$qcat,$qcomentario,$qupdate_type,$qmydatetime,$qalive,$qlast_response,$qip_version,$qclient_id)");
    $sth = $dbh->prepare("INSERT INTO host (ip,hostname,host_descr,loc,red_num,int_admin,categoria,comentario,update_type,last_update,alive,last_response,ip_version,client_id) VALUES ($qip_int,$qhostname,$qhost_descr,$qloc,$qred_num,$qint_admin,$qcat,$qcomentario,$qupdate_type,$qmydatetime,$qalive,$qlast_response,$qip_version,$qclient_id)"
            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $new_id=$sth->{mysql_insertid} || "";

} elsif ( $id && $range_id != -1 && $hostname_found eq "unknown") {
    # IP from reserved range
    $return_ip=$ip if ! $values_host[0]->[1];
    $sth = $dbh->prepare("UPDATE host set hostname=$qhostname, last_update=$qmydatetime, alive=$qalive, last_response=$qlast_response WHERE id=$id"
            ) or croak $self->print_error("$client_id","prepare db<p>$DBI::errstr");
} else { 
    #entry exists
}

$sth->finish();
$dbh->disconnect;

return ($return_ip,$hostname_found,$new_id) if $return_ip;
}


sub get_red {
my ( $self,$client_id, $red_num ) = @_;

my $format=$self->{'format'};
my $error;
my $ip_ref;
my @values_redes;
my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
debug("SELECT red, BM, descr, loc, vigilada, comentario, categoria, ip_version, red_num, rootnet, dyn_dns_updates FROM net WHERE red_num=$qred_num AND client_id = $qclient_id");
my $sth = $dbh->prepare("SELECT red, BM, descr, loc, vigilada, comentario, categoria, ip_version, red_num, rootnet, dyn_dns_updates FROM net WHERE red_num=$qred_num AND client_id = $qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_redes, [ @$ip_ref ];
}
$dbh->disconnect;

return @values_redes;
}

sub get_redes_hash {
my ( $self,$client_id,$ip_version,$return_int,$client_only ) = @_;
my $ip_ref;
$ip_version="" if ! $ip_version;
$return_int="" if ! $return_int;
my %values_redes;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $client_expr="";
$client_expr="AND n.client_id=$qclient_id" if $client_only;

my $ip_version_expr="";
$ip_version_expr="AND n.ip_version='$ip_version'" if $ip_version;

debug("SELECT n.red_num, n.red, n.BM, n.descr, l.loc, n.vigilada, n.comentario, c.cat, n.ip_version, INET_ATON(n.red), n.rootnet, n.parent_network_id, n.client_id, n.dyn_dns_updates FROM net n, categorias_net c, locations l WHERE c.id = n.categoria AND l.id = n.loc $ip_version_expr $client_expr");
my $sth = $dbh->prepare("SELECT n.red_num, n.red, n.BM, n.descr, l.loc, n.vigilada, n.comentario, c.cat, n.ip_version, INET_ATON(n.red), n.rootnet, n.parent_network_id, n.client_id, n.dyn_dns_updates FROM net n, categorias_net c, locations l WHERE c.id = n.categoria AND l.id = n.loc $ip_version_expr $client_expr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $red_num = $ip_ref->{'red_num'} || "";
        my $red = $ip_ref->{'red'} || "";
        my $BM = $ip_ref->{'BM'};
        my $descr = $ip_ref->{'descr'};
        my $loc = $ip_ref->{'loc'} || "";
        my $cat = $ip_ref->{'cat'} || "";
        my $vigilada = $ip_ref->{'vigilada'} || "";
        my $comentario = $ip_ref->{'comentario'} || "";
        my $ip_version = $ip_ref->{'ip_version'} || "";
        my $red_int;
        if ( ! $return_int ) {
            $red_int="";
        } else {
            if ( $ip_version eq "v4" ) {
                $red_int=$ip_ref->{'INET_ATON(n.red)'};
            } else {
                # macht die sache langsam ....
                $red_int = $self->ip_to_int("$client_id",$red,"$ip_version");
            }
        }
        my $rootnet=$ip_ref->{'rootnet'};
        my $parent_network_id=$ip_ref->{'parent_network_id'} || "";
        my $client_id=$ip_ref->{'client_id'} || "";
        my $dyn_dns_updates=$ip_ref->{'dyn_dns_updates'} || "";

        push @{$values_redes{$red_num}},"$red","$BM","$descr","$loc","$cat","$vigilada","$comentario","$ip_version","$red_int","$rootnet","$parent_network_id","$client_id","$dyn_dns_updates";
    }

    $dbh->disconnect;
    return \%values_redes;
}

#sub get_redes_hash_key_ip_int {
#	my ( $self,$client_id ) = @_;
#	my $ip_ref;
#	my %values_redes;
#        my $dbh = $self->_mysql_connection();
#	my $qclient_id = $dbh->quote( $client_id );
#    my $sth = $dbh->prepare("SELECT n.red_num, n.red, n.BM, n.descr, l.loc, n.vigilada, n.comentario, c.cat, n.ip_version, INET_ATON(n.red) FROM net n, categorias_net c, locations l WHERE c.id = n.categoria AND l.id = n.loc AND n.client_id=$qclient_id");
#        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#		while ( $ip_ref = $sth->fetchrow_hashref ) {
#			my $red_num = $ip_ref->{'red_num'} || "";
#			my $red = $ip_ref->{'red'} || "";
#			my $BM = $ip_ref->{'BM'};
#			my $descr = $ip_ref->{'descr'};
#			my $loc = $ip_ref->{'loc'} || "";
#			my $cat = $ip_ref->{'cat'} || "";
#			my $vigilada = $ip_ref->{'vigilada'} || "";
#			my $comentario = $ip_ref->{'comentario'} || "";
#			my $ip_version = $ip_ref->{'ip_version'} || "";
#			my $red_int;
#			if ( $ip_version eq "v4" ) {
#				$red_int=$ip_ref->{'INET_ATON(h.ip)'};
#			} else {
#				$red_int = $self->int_to_ip("$client_id",$red,"$ip_version");
#			}
#
#			push @{$values_redes{$red_int}},"$red","$BM","$descr","$loc","$cat","$vigilada","$comentario","$ip_version";
#		}
#
#        $dbh->disconnect;
#        return \%values_redes;
#}


sub check_red_exists {
my ( $self,$client_id, $net, $BM, $ignore_rootnet ) = @_;
my $red_check="";
$ignore_rootnet=1 if $ignore_rootnet eq "";
my $ignore_rootnet_expr="AND rootnet='0'";
if ( $ignore_rootnet == 0 ) {
    $ignore_rootnet_expr="AND rootnet='1'";
}
my $dbh = $self->_mysql_connection();
my $qnet = $dbh->quote( $net );
my $qBM = $dbh->quote( $BM );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT red_num FROM net WHERE red=$qnet AND BM=$qBM AND client_id = $qclient_id $ignore_rootnet_expr
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $red_check = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
return $red_check;
}


sub update_redes {
my ( $self,$client_id, $red_num, $descr, $loc, $vigilada, $comentario, $cat_net_id, $dyn_dns_updates ) = @_;

my $format=$self->{'format'};
my $error;
    my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qdescr = $dbh->quote( $descr );
my $qloc = $dbh->quote( $loc );
my $qcat_net_id = $dbh->quote( $cat_net_id );
my $qvigilada = $dbh->quote( $vigilada );
my $qcomentario = $dbh->quote( $comentario );
my $qdyn_dns_updates = $dbh->quote( $dyn_dns_updates );
my $qclient_id = $dbh->quote( $client_id );
debug("UPDATE net SET descr=$qdescr, loc=$qloc, vigilada=$qvigilada, comentario=$qcomentario, categoria=$qcat_net_id, dyn_dns_updates=$qdyn_dns_updates WHERE red_num=$qred_num AND client_id = $qclient_id");
my $sth = $dbh->prepare("UPDATE net SET descr=$qdescr, loc=$qloc, vigilada=$qvigilada, comentario=$qcomentario, categoria=$qcat_net_id, dyn_dns_updates=$qdyn_dns_updates WHERE red_num=$qred_num AND client_id = $qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->finish();
    $dbh->disconnect;
}

sub update_red_BM {
my ( $self,$client_id, $red, $BM, $red_num, $rootnet, $ip_version, $BM_old ) = @_;

#    $rootnet = 0 if ! $rootnet;

    my $dbh = $self->_mysql_connection();
    my $qred = $dbh->quote( $red );
    my $qBM = $dbh->quote( $BM );
    my $qred_num = $dbh->quote( $red_num );
    my $sth = $dbh->prepare("UPDATE net SET BM=$qBM WHERE red=$qred AND red_num=$qred_num"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;

#	my %values;
#	my %values_change;
#	my $BM_check = $BM;
#	$BM_check = $BM_old if $BM > $BM_old;
#    my $ip = new Net::IP ("$red/$BM_check")  or croak $self->print_error("$client_id","Check Red: $red/$BM_check (1)");
##    my $ip_old = new Net::IP ("$red/$BM_old") or $error = "$red/$BM INVALID network/bitmask - IGNORED";
#
#print STDERR "TEST OOOOOOOO $red - $BM - $ip_version - $BM_old\n";
#    if ( $rootnet == 1 ) {
#		my $child_networks = $self->get_child_networks("$red", "$BM", "$red_num", "$client_id","$ip_version");
#		my $child_networks_old = $self->get_child_networks("$red", "$BM_old", "$red_num", "$client_id","$ip_version");
#        my $anz1 = keys %$child_networks;
#        my $anz2 = keys %$child_networks_old;
#        print STDERR "TEST ANZ: $anz1 - $anz2\n";
#		if ( $BM > $BM_old ) {
#			# neues root-net ist kleiner
#					print STDERR "ROOTNET SMALLER\n";
#		
#			foreach my $child_red_num_old ( keys %$child_networks_old ) {
#				my $red_child = $child_networks_old->{$child_red_num_old}[0];
#				my $BM_child = $child_networks_old->{$child_red_num_old}[1];
#				print STDERR "TEST 1111111: $red_child - $BM_child\n";
#				if ( ! exists $child_networks->{$child_red_num_old} ) {
#					# get new parent net if net does not fall any longer in the range of the old rootnet
##					my $BM_child_parent = $child_networks_old->{$child_red_num_old}[3];
#					my ($overlap,$parent_network_id) = $self->get_parent_network("$red_child", "$BM_child","$client_id","$ip_version");
#
#					$parent_network_id = "" if ! $parent_network_id;
#					my $qparent_network_id = $dbh->quote( $parent_network_id );
#
#					print STDERR "TEST 111111111XXXXXXXXX: $red_child - $BM_child - $parent_network_id\n";
#					if ( $red_child ne $red && $BM_child ne $BM ) {
#						debug("UPDATE net SET parent_network_id=$qparent_network_id WHERE red_num=$child_red_num_old");
#						$sth = $dbh->prepare("UPDATE net SET parent_network_id=$qparent_network_id WHERE red_num=$child_red_num_old") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#					$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#					}
#
#				}
#			}
#		} else {
#			# neues root-net ist groesser
#					print STDERR "ROOTNET BIGGER\n";
#			foreach my $child_red_num ( keys %$child_networks ) {
#
#				my $red_child = $child_networks->{$child_red_num}[0];
#				my $BM_child = $child_networks->{$child_red_num}[1];
#				print STDERR "TEST 2222222: $red_child - $BM_child - $red_num\n";
#				if ( ! exists $child_networks_old->{$child_red_num} ) {
#					my $qred_num = $dbh->quote( $red_num );
#
#					if ( $red_child ne $red && $BM_child ne $BM ) {
#					print STDERR "TEST 2222222XXXXXXXXXXXX: $red_child - $BM_child - $red_num\n";
#						debug("UPDATE net SET parent_network_id=$qred_num WHERE red_num=$child_red_num");
#						$sth = $dbh->prepare("UPDATE net SET parent_network_id=$qred_num WHERE red_num=$child_red_num") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#						$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#					}
#				}
#			}
#		}
#    }
}

sub insert_range {
my ( $self,$client_id, $comentario, $reserve_start_address, $reserve_end_address, $red_num, $range_type_id, $vars_file ) = @_;
my $dbh = $self->_mysql_connection();
my $id = $self-> get_last_range_id();
$id++;
my $qid = $dbh->quote( $id );
my $qcomentario = $dbh->quote( $comentario );
my $qreserve_start_address = $dbh->quote( $reserve_start_address );
my $qreserve_end_address = $dbh->quote( $reserve_end_address );
my $qrange_type_id = $dbh->quote( $range_type_id );
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
debug("INSERT INTO ranges (id,start_ip,end_ip,comentario,range_type,red_num,client_id) VALUES ($qid,$qreserve_start_address,$qreserve_end_address,$qcomentario,$qrange_type_id,$qred_num,$qclient_id)");
my $sth = $dbh->prepare("INSERT INTO ranges (id,start_ip,end_ip,comentario,range_type,red_num,client_id) VALUES ($qid,$qreserve_start_address,$qreserve_end_address,$qcomentario,$qrange_type_id,$qred_num,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub get_last_range_id {
my ($self,$client_id) = @_;
my $last_range_id;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
#	my $sth = $dbh->prepare("SELECT id FROM ranges AND client_id = $qclient_id ORDER BY (id+0) DESC LIMIT 1
my $sth = $dbh->prepare("SELECT id FROM ranges ORDER BY (id+0) DESC LIMIT 1
        ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$last_range_id = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
$last_range_id = "0" if ! $last_range_id;
$last_range_id = "0" if $last_range_id eq "NULL";
return $last_range_id;
}

sub update_red_id_ranges {
my ($self,$client_id,$old_id,$new_id) = @_;
my $dbh = $self->_mysql_connection();
my $qold_id = $dbh->quote( $old_id );
my $qnew_id = $dbh->quote( $new_id );
my $qclient_id = $dbh->quote( $client_id );
debug("UPDATE ranges SET red_num = $qnew_id WHERE red_num = $qold_id AND client_id = $qclient_id");
my $sth = $dbh->prepare("UPDATE ranges SET red_num = $qnew_id WHERE red_num = $qold_id AND client_id = $qclient_id
        ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_range_id_host {
my ( $self,$client_id, $range_id,$ip_int,$red_loc_id,$cat_id,$mydatetime ) = @_;
my $dbh = $self->_mysql_connection();
my $sth;
$red_loc_id="-1" if ! $red_loc_id;
$cat_id="-1" if ! $cat_id;
my $qmydatetime = $dbh->quote( $mydatetime );
my $qip_int = $dbh->quote( $ip_int );
my $qrange_id = $dbh->quote( $range_id );
my $qred_loc_id = $dbh->quote( $red_loc_id );
my $qcat_id = $dbh->quote( $cat_id );
my $qclient_id = $dbh->quote( $client_id );
debug("UPDATE host SET hostname='', host_descr='', loc=$qred_loc_id, int_admin='n', categoria=$qcat_id, comentario='', update_type='-1', last_update=$qmydatetime, alive='-1', last_response='0', range_id=$qrange_id WHERE ip=$qip_int AND client_id = $qclient_id");
$sth = $dbh->prepare("UPDATE host SET hostname='', host_descr='', loc=$qred_loc_id, int_admin='n', categoria=$qcat_id, comentario='', update_type='-1', last_update=$qmydatetime, alive='-1', last_response='0', range_id=$qrange_id WHERE ip=$qip_int AND client_id = $qclient_id"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub update_range_id_host_id_only {
my ( $self,$client_id, $range_id, $ip_int, $loc_id, $cat_id ) = @_;
my $dbh = $self->_mysql_connection();
my $sth;
my $qip_int = $dbh->quote( $ip_int );
my $qrange_id = $dbh->quote( $range_id );
my $qclient_id = $dbh->quote( $client_id );

my $loc_expr = "";
if ( $loc_id ) {
    my $qloc_id = $dbh->quote( $loc_id );
    $loc_expr = ", categoria=$qloc_id";
}
my $cat_expr = "";
if ( $cat_id ) {
    my $qcat_id = $dbh->quote( $cat_id );
    $cat_expr = ", categoria=$qcat_id";
}

$sth = $dbh->prepare("UPDATE host SET range_id=$qrange_id $loc_expr $cat_expr WHERE ip=$qip_int AND client_id = $qclient_id"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub insert_range_id_host {
my ( $self,$client_id, $range_id, $ip_int, $loc, $cat_id, $update_type, $mydatetime, $red_num, $ip_version ) = @_;
    my $dbh = $self->_mysql_connection();
my $sth;
$loc="-1" if ! $loc;
$cat_id="-1" if ! $cat_id;
    my $qrange_id = $dbh->quote( $range_id );
    my $qloc = $dbh->quote( $loc );
    my $qmydatetime = $dbh->quote( $mydatetime );
    my $qip_int = $dbh->quote( $ip_int );
    my $qred_num = $dbh->quote( $red_num );
    my $qcat_id = $dbh->quote( $cat_id );
my $qclient_id = $dbh->quote( $client_id );
my $qip_version = $dbh->quote( $ip_version );
debug("INSERT INTO host (ip,hostname,host_descr,loc,red_num,int_admin,categoria,comentario,alive,update_type,last_update,range_id,ip_version,client_id) VALUES ($qip_int,'','',$qloc,$qred_num,'n',$qcat_id,'','-1','-1',$qmydatetime,$qrange_id,$qip_version,$qclient_id)");
$sth = $dbh->prepare("INSERT INTO host (ip,hostname,host_descr,loc,red_num,int_admin,categoria,comentario,alive,update_type,last_update,range_id,ip_version,client_id) VALUES ($qip_int,'','',$qloc,$qred_num,'n',$qcat_id,'','-1','-1',$qmydatetime,$qrange_id,$qip_version,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub delete_range {
my ( $self,$client_id, $range_id, $preserve_hosts ) = @_;

my $format=$self->{'format'};
my $error;
    my $dbh = $self->_mysql_connection();
my $qrange_id = $dbh->quote( $range_id );
my $qclient_id = $dbh->quote( $client_id );
debug("DELETE FROM ranges WHERE id = $qrange_id AND client_id = $qclient_id");
my $sth = $dbh->prepare("DELETE FROM ranges WHERE id = $qrange_id AND client_id = $qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

if ( $preserve_hosts ) {
    debug("UPDATE host SET range_id='-1' WHERE hostname != '' AND range_id = $qrange_id AND client_id = $qclient_id");
    $sth = $dbh->prepare("UPDATE host SET range_id='-1' WHERE hostname != '' AND range_id = $qrange_id AND client_id = $qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";
    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    debug("1 - DELETE FROM host WHERE hostname='' AND range_id = $qrange_id AND client_id = $qclient_id");
    $sth = $dbh->prepare("DELETE FROM host WHERE hostname='' AND range_id = $qrange_id AND client_id = $qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";

} else {
    debug("2 - DELETE FROM host WHERE range_id = $qrange_id AND client_id = $qclient_id");
    $sth = $dbh->prepare("DELETE FROM host WHERE range_id = $qrange_id AND client_id = $qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";
}

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->finish();
$dbh->disconnect;
}

sub delete_range_red_id {
my ( $self,$client_id, $red_id ) = @_;
my @rangos = $self->get_rango("$client_id","$red_id");
my $dbh = $self->_mysql_connection();
my $qred_id = $dbh->quote( $red_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("DELETE FROM ranges WHERE red_num = $qred_id AND client_id = $qclient_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
my $i="0";
foreach ( @rangos ) {
    my $range_id = $rangos[$i]->[5];
    $sth = $dbh->prepare("DELETE FROM host WHERE range_id = $range_id"
                ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $i++;
}
$sth->finish();
$dbh->disconnect;
}

sub loc_del {
my ( $self,$client_id, $loc ) = @_;

my $loc_id=$self->get_loc_id("$client_id","$loc") || "-1";
my $no_loc_id="-1";

my $dbh = $self->_mysql_connection();
my $qloc = $dbh->quote( $loc );
my $qno_loc_id = $dbh->quote( $no_loc_id );
my $qloc_id = $dbh->quote( $loc_id );
my $qclient_id = $dbh->quote( $client_id );
debug("DELETE FROM locations WHERE loc=$qloc AND client_id = $qclient_id");
my $sth = $dbh->prepare("DELETE FROM locations WHERE loc=$qloc AND client_id = $qclient_id
            ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

debug("UPDATE llines SET loc=$qno_loc_id WHERE loc=$loc_id");
$sth = $dbh->prepare("UPDATE llines SET loc=$qno_loc_id WHERE loc=$loc_id
            ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
debug("UPDATE net SET loc=$qno_loc_id WHERE loc=$loc_id");
$sth = $dbh->prepare("UPDATE net SET loc=$qno_loc_id WHERE loc=$loc_id
            ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
debug("UPDATE host SET loc=$qno_loc_id WHERE loc=$loc_id");
$sth = $dbh->prepare("UPDATE host SET loc=$qno_loc_id WHERE loc=$loc_id
            ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth->finish();
$dbh->disconnect;
}

sub cat_del {
    my ( $self,$client_id, $cat ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qcat = $dbh->quote( $cat );
    my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("DELETE FROM categorias WHERE cat=$qcat AND client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    debug("DELETE FROM categorias WHERE cat=$qcat");
    my $sth = $dbh->prepare("DELETE FROM categorias WHERE cat=$qcat") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $dbh->disconnect;
}

sub cat_net_del {
    my ( $self,$client_id, $cat_net ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qcat_net = $dbh->quote( $cat_net );
    my $qclient_id = $dbh->quote( $client_id );
    debug("DELETE FROM categorias_net WHERE cat=$qcat_net");
    my $sth = $dbh->prepare("DELETE FROM categorias_net WHERE cat=$qcat_net") or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $dbh->disconnect;
}

sub cat_add {
    my ( $self,$client_id, $cat, $cat_id ) = @_;
    $cat = "" if ( $cat eq "NULL" );
    $cat_id++ if $cat_id == 0;
        my $dbh = $self->_mysql_connection();
    my $qcat = $dbh->quote( $cat );
    my $qcat_id = $dbh->quote( $cat_id );
    my $qclient_id = $dbh->quote( $client_id );
    debug("INSERT INTO categorias (id,cat) VALUES ($qcat_id,$qcat)");
    my $sth = $dbh->prepare("INSERT INTO categorias (id,cat) VALUES ($qcat_id,$qcat)") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub cat_net_add {
my ( $self,$client_id, $cat_net, $cat_net_id ) = @_;
$cat_net = "" if ( $cat_net eq "NULL" );
$cat_net_id++ if $cat_net_id == 0;
    my $dbh = $self->_mysql_connection();
my $qcat_net = $dbh->quote( $cat_net );
my $qcat_net_id = $dbh->quote( $cat_net_id );
my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("INSERT INTO categorias_net (id,cat,client_id) VALUES ($qcat_net_id,$qcat_net,$qclient_id)"
#        my $sth = $dbh->prepare("INSERT INTO categorias_net (id,cat,client_id) VALUES ($qcat_net_id,$qcat_net,'1')"
#        my $sth = $dbh->prepare("INSERT INTO categorias_net (id,cat,client_id) VALUES ($qcat_net_id,$qcat_net,'9999')"
    debug("INSERT INTO categorias_net (id,cat) VALUES ($qcat_net_id,$qcat_net)");
    my $sth = $dbh->prepare("INSERT INTO categorias_net (id,cat) VALUES ($qcat_net_id,$qcat_net)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub loc_add {
my ( $self,$client_id, $loc, $loc_id ) = @_;
my $dbh = $self->_mysql_connection();
$loc_id++ if $loc_id == 0;
my $qloc = $dbh->quote( $loc );
my $qloc_id = $dbh->quote( $loc_id );
my $qclient_id = $dbh->quote( $client_id );
debug("INSERT INTO locations (id,loc,client_id) VALUES ($qloc_id,$qloc,$qclient_id)");
my $sth = $dbh->prepare("INSERT INTO locations (id,loc,client_id) VALUES ($qloc_id,$qloc,$qclient_id)"
                        ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub get_red_nuevo {
my ( $self,$client_id, $red, $BM, $vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $redob="$red/$BM";
    my $ip = new Net::IP ($redob) or croak $self->print_error("$client_id","$lang_vars{comprueba_red_BM_message}: $red/$BM (2)");
    my ($broad, $mask, $hosts);
    $broad=($ip->last_ip());
    $mask=($ip->mask());
    $hosts=($ip->size());
    $hosts=$hosts - 2;
    return ($broad,$mask,$hosts);
}

#sub resolve_ip {
#        my ($self,$client_id,$ip)=@_;
#	no strict 'subs';
#        my @h = gethostbyaddr(inet_aton($ip), AF_INET);
#	use strict;
#        return @h;
#}

sub resolve_name {
    my ($self,$client_id,$hostname)=@_;
    my @packed = gethostbyname($hostname);
    return @packed;
}

sub int_to_ip {
    my ($self,$client_id,$ip_int,$ip_version)=@_;
    my ( $ip_bin, $ip_ad);
    if ( $ip_version eq "v4" ) {
        $ip_bin = ip_inttobin ($ip_int,4);
        $ip_ad = ip_bintoip ($ip_bin,4);
    } else {
        $ip_bin = ip_inttobin ($ip_int,6);
        $ip_ad = ip_bintoip ($ip_bin,6);
    }
    return $ip_ad;
}

sub ip_to_int {
    my ($self,$client_id,$ip,$ip_version)=@_;
    my ( $ip_bin, $ip_int);
    if ( $ip_version eq "v4" ) {
        $ip_bin = ip_iptobin ($ip,4);
        $ip_int = new Math::BigInt (ip_bintoint($ip_bin));
    } else {
        my $ip=ip_expand_address ($ip,6);
        $ip_bin = ip_iptobin ($ip,6);
        $ip_int = new Math::BigInt (ip_bintoint($ip_bin));
    }
    return $ip_int;
}



sub find_overlap_redes {
my ($self,$client_id,$new_range,$new_bm,$overlap_redes,$ip_version,$vars_file,$rootnet,$rootnet_num,$ignore_rootnet) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $k="0";
my $l="0";
my @overlap_found;
my $red=$new_range;
$red=ip_expand_address ($red,6) if $ip_version eq "v6";
my $BM=$new_bm;
$new_range = "$red/$BM";
my ($first_ocs,$first_ocs32,$first_ocs48);
$rootnet = "" if ! $rootnet;
$rootnet_num = "" if ! $rootnet_num;
$ignore_rootnet="" if ! $ignore_rootnet;
if ( $ip_version eq "v4" ) {
    $red =~ /^(\d{1,3}\.\d{1,3}\.\d{1,3})\.\d{1,3}$/;
    $first_ocs=$1;
}
if ( $ip_version eq "v6" ) {
    $red =~ /^(\w{1,4}:\w{4}:\w{4}:\w{3})/;
    $first_ocs=$1 || "";
    $red =~ /^(\w{1,4}:\w{4}:\w{3})/;
    $first_ocs48=$1 || "";
    $red =~ /^(\w{1,4}:\w{3})/;
    $first_ocs32=$1 || "";
}

foreach (@{$overlap_redes}) {
    my $overlap_red = @{$overlap_redes}[$k]->[0];
    $overlap_red=ip_expand_address ($overlap_red,6) if $ip_version eq "v6";
    my $BM_overlap_red = @{$overlap_redes}[$k]->[1];
    my $red_num = @{$overlap_redes}[$k]->[3];
    my $is_rootnet = @{$overlap_redes}[$k]->[10] || "0";
    if (( $is_rootnet == "1" && $BM >= $BM_overlap_red ) || $red_num eq $rootnet_num  || ($is_rootnet == "1" && $ignore_rootnet eq "1" )) {
        $k++;
        next;
    }
    my $first_ocs_overlap_red;
    if ( $ip_version eq "v4" ) {
        $overlap_red =~ /^(\d{1,3}\.\d{1,3}\.\d{1,3})\.\d{1,3}$/;
        $first_ocs_overlap_red=$1;
        if ( $first_ocs ne $first_ocs_overlap_red && $BM >= 24 && $BM_overlap_red >= 24) {
            $k++;
            next;
        }
    }
    if ( $ip_version eq "v6" ) {
        $overlap_red =~ /^(\w{4}:\w{4}:\w{4}:\w{3})/;
        $first_ocs_overlap_red=$1 || "";
        if ( $first_ocs ne $first_ocs_overlap_red && $BM >= 64 && $BM_overlap_red >= 64) {
            $k++;
            next;
        }
        $overlap_red =~ /^(\w{4}:\w{4}:\w{3})/;
        $first_ocs_overlap_red=$1 || "";
        if ( $first_ocs48 ne $first_ocs_overlap_red && $BM >= 48 && $BM_overlap_red >= 48) {
            $k++;
            next;
        }
        $overlap_red =~ /^(\w{4}:\w{3})/;
        $first_ocs_overlap_red=$1 || "";
        if ( $first_ocs32 ne $first_ocs_overlap_red && $BM >= 32 && $BM_overlap_red >= 32) {
            $k++;
            next;
        }
    }
    my $ip_new_range = new Net::IP ("$new_range") or $self->print_error("$client_id","$lang_vars{comprueba_red_BM_message}: <b>$new_range</b> (3)");
    my $ip_overs = new Net::IP ("@{$overlap_redes}[$k]->[0]/@{$overlap_redes}[$k]->[1]") or $self->print_error("$client_id","Net::IP error (0) @{$overlap_redes}[$k]->[0]/@{$overlap_redes}[$k]->[1]");

    if ( ! $ip_new_range->overlaps($ip_overs)==$IP_NO_OVERLAP) {
        if ( ! $rootnet ) {
            $overlap_found[$l++]=("@{$overlap_redes}[$k]->[0]/@{$overlap_redes}[$k]->[1]");
            $k++;
            next;
        } else {
            $overlap_found[$l++]=(@{$overlap_redes}[$k]);
            $k++;
            next;
        }
    }
    $k++;
}

return @overlap_found;
}

sub rename {
my ( $self,$client_id, $old, $new, $table ) = @_;
    my $dbh = $self->_mysql_connection();
my $qold = $dbh->quote( $old );
my $qnew = $dbh->quote( $new );
my $qclient_id = $dbh->quote( $client_id );
my $row;
my $client_id_expr = "AND client_id = " . $qclient_id;
if ( $table =~ /categoria/ ) {
    $row="cat";
    $client_id_expr = "";
} elsif ( $table =~ /vlan_provider/ ) {
    $row="name";
} else {
    $row="loc";
}
    my $sth = $dbh->prepare("UPDATE $table SET $row=$qnew WHERE $row=$qold $client_id_expr"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub get_rango {
my ( $self,$client_id, $range_id ) = @_;
my $ip_ref;
my @rango;
my $dbh = $self->_mysql_connection();
my $qrange_id = $dbh->quote( $range_id );
my $sth = $dbh->prepare("SELECT start_ip,end_ip,comentario,range_type,red_num,id FROM ranges WHERE id=$qrange_id ORDER BY start_ip");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @rango, [ @$ip_ref ];
}
$dbh->disconnect;
    return @rango;
}

sub get_rangos {
my ($self,$client_id)=@_;
my $ip_ref;
my @rangos;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id,start_ip,end_ip,comentario,range_type,red_num FROM ranges WHERE client_id = $qclient_id ORDER BY start_ip");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @rangos, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @rangos;
}

sub get_rangos_red {
my ($self,$client_id,$red_num)=@_;

my $format=$self->{'format'};
my $error;
my $ip_ref;
my @rangos;
    my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id,start_ip,end_ip,comentario,range_type,red_num FROM ranges WHERE red_num = $qred_num AND client_id = $qclient_id ORDER BY start_ip") or $error="Can not execute statement:<p>$DBI::errstr";;

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @rangos, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @rangos;
}

sub get_rangos_hash {
my ( $self,$client_id ) = @_;
my %rangos;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare(" SELECT r.red_num,r.start_ip,r.end_ip,r.comentario,n.ip_version FROM ranges r, net n WHERE r.red_num = n.red_num AND r.client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $ip_version = $ip_ref->{ip_version};
    my $start_ip = $self->int_to_ip("$client_id",$ip_ref->{start_ip},"$ip_version");
    $start_ip = ip_compress_address ($start_ip, 6) if $ip_version eq "v6";
    my $end_ip = $self->int_to_ip("$client_id",$ip_ref->{end_ip},"$ip_version");
    $end_ip = ip_compress_address ($end_ip, 6) if $ip_version eq "v6";
    if ( $rangos{"$ip_ref->{red_num}"} ) {
        $rangos{"$ip_ref->{red_num}"} = $rangos{"$ip_ref->{red_num}"} . '<br>[' . $start_ip . '-' . $end_ip . " " . '(' . $ip_ref->{comentario} . ')]';
    } else {
        $rangos{"$ip_ref->{red_num}"} = '[' . $start_ip . '-' . $end_ip . " " . '(' . $ip_ref->{comentario} . ')]';
    }
    }
    $dbh->disconnect;
    return %rangos;
}


sub get_rangos_hash_endip {
my ( $self,$client_id, $red_num ) = @_;
my %rangos;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT start_ip,end_ip,comentario FROM ranges WHERE red_num = $qred_num AND client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    $rangos{"$ip_ref->{start_ip}"} = "$ip_ref->{end_ip}-$ip_ref->{comentario}";
    }
    $dbh->disconnect;
    return %rangos;
}

sub get_rangos_hash_host_comentario {
my ( $self, $client_id ) = @_;
my %rangos;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT h.id, r.comentario FROM host h, ranges r WHERE h.range_id = r.id AND r.client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    $rangos{"$ip_ref->{id}"} = $ip_ref->{comentario};
    }
    $dbh->disconnect;
    return %rangos;
}


sub get_rango_comentario_host {
my ( $self,$client_id, $ip_int ) = @_;
my $comentario;
my $dbh = $self->_mysql_connection();
my $qip_int = $dbh->quote( $ip_int );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT r.comentario FROM ranges r, host h WHERE h.ip = $qip_int AND h.range_id = r.id AND r.client_id = $qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$comentario = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $comentario;
}


sub count_host_entries {
my ( $self,$client_id, $red_num ) = @_;
my $count_host_entries;
my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT COUNT(*) FROM host WHERE red_num=$qred_num AND hostname != 'NULL' AND hostname != '' AND client_id = $qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$count_host_entries = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $count_host_entries;
}

sub count_host_entries_between {
my ( $self,$client_id, $red_num, $first_ip_int, $last_ip_int,$ip_version ) = @_;
my $count_host_entries;
my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qfirst_ip_int = $dbh->quote( $first_ip_int );
my $qlast_ip_int = $dbh->quote( $last_ip_int );
my $qclient_id = $dbh->quote( $client_id );

my $match="CAST(ip AS BINARY) BETWEEN $qfirst_ip_int AND $qlast_ip_int";

debug("SELECT COUNT(*) FROM host WHERE red_num=$qred_num AND $match AND client_id = $qclient_id");
my $sth = $dbh->prepare("SELECT COUNT(*) FROM host WHERE red_num=$qred_num AND $match AND client_id = $qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$count_host_entries = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $count_host_entries;
}

sub count_all_host_entries {
my ( $self,$client_id, $all, $ip_version ) = @_;
my $count_host_entries;
$all="xxx" if ! $all;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $ip_version_expr = "" if ! $ip_version;
$ip_version_expr = "AND ip_version = '" . $ip_version . "'" if $ip_version;
my $sth;
if ( $all eq "all" ) {
    $sth = $dbh->prepare("SELECT COUNT(*) FROM host WHERE hostname != 'NULL' AND hostname != '' $ip_version_expr");
} else {
    $sth = $dbh->prepare("SELECT COUNT(*) FROM host WHERE hostname != 'NULL' AND hostname != '' AND client_id = $qclient_id $ip_version_expr");
}
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$count_host_entries = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $count_host_entries;
}

sub count_all_vlan_entries {
my ( $self,$client_id, $all ) = @_;
my $count_vlan_entries;
$all="xxx" if ! $all;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth;
if ( $all eq "all" ) {
    $sth = $dbh->prepare("SELECT COUNT(*) FROM vlans");
} else {
    $sth = $dbh->prepare("SELECT COUNT(*) FROM vlans WHERE client_id = $qclient_id");
}
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$count_vlan_entries = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $count_vlan_entries;
}


sub count_red_entries_all {
my ( $self,$client_id, $tipo_ele, $loc_ele, $all, $ip_version, $show_rootnet, $show_endnet ) = @_;
my $count_red_entries;
$all="xxx" if ! $all;

$show_rootnet="1" if ! defined($show_rootnet);
$show_endnet="1" if ! defined($show_endnet);

my $root_end_net_expr="";
if ( $show_rootnet eq 1 && $show_endnet eq 0 ) { 
    $root_end_net_expr="AND rootnet = '1'";
} elsif ( $show_rootnet eq 0 && $show_endnet eq 1 ) { 
    $root_end_net_expr="AND rootnet = '0'";
}

my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $ip_version_expr = "";
$ip_version_expr = "AND ip_version = '" . $ip_version . "'" if $ip_version;
my $sth;
if ( $tipo_ele ne "NULL" && $loc_ele ne "NULL" ) {
    my $loc_id=$self->get_loc_id("$client_id","$loc_ele");
    my $cat_net_id=$self->get_cat_net_id("$client_id","$tipo_ele");
    my $qloc_id = $dbh->quote( $loc_id );
    my $qcat_net_id = $dbh->quote( $cat_net_id );
    if ( $all eq "all" ) {
        $sth = $dbh->prepare("SELECT COUNT(*) FROM net WHERE loc=$qloc_id AND categoria=$qcat_net_id $root_end_net_expr");
    } else {
        $sth = $dbh->prepare("SELECT COUNT(*) FROM net WHERE loc=$qloc_id AND categoria=$qcat_net_id AND client_id = $qclient_id $ip_version_expr $root_end_net_expr");
    }
} elsif ( $tipo_ele eq "NULL" && $loc_ele ne "NULL" ) {
    my $loc_id=$self->get_loc_id("$client_id","$loc_ele");
    my $qloc_id = $dbh->quote( $loc_id );
    if ( $all eq "all" ) {
        $sth = $dbh->prepare("SELECT COUNT(*) FROM net WHERE loc=$qloc_id $root_end_net_expr");
    } else {
        $sth = $dbh->prepare("SELECT COUNT(*) FROM net WHERE loc=$qloc_id AND ( client_id = $qclient_id OR client_id = '9999') $ip_version_expr $root_end_net_expr");
    }
} elsif ( $tipo_ele ne "NULL" && $loc_ele eq "NULL" ) {
    my $cat_net_id=$self->get_cat_net_id("$client_id","$tipo_ele");
    my $qcat_net_id = $dbh->quote( $cat_net_id );
    if ( $all eq "all" ) {
        $sth = $dbh->prepare("SELECT COUNT(*) FROM net WHERE categoria=$qcat_net_id $root_end_net_expr");
    } else {
        $sth = $dbh->prepare("SELECT COUNT(*) FROM net WHERE categoria=$qcat_net_id AND client_id = $qclient_id  $ip_version_expr $root_end_net_expr");
    }
} else {
    if ( $all eq "all" ) {
        $sth = $dbh->prepare("SELECT COUNT(*) FROM net $root_end_net_expr");
    } else {
        $sth = $dbh->prepare("SELECT COUNT(*) FROM net WHERE client_id = $qclient_id  $ip_version_expr $root_end_net_expr");
    }
}
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$count_red_entries = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $count_red_entries;
}

sub count_red_entries_client {
my ( $self,$client_id ) = @_;
my $count_entries;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT COUNT(*) FROM net WHERE client_id = $qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$count_entries = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $count_entries;
}

sub count_host_entries_client {
my ( $self,$client_id ) = @_;
my $count_entries;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT COUNT(*) FROM host WHERE client_id = $qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$count_entries = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $count_entries;
}

#update host's alive field and last ping response field, given the ip_int and ping result
# Ping result should be 1 for a successful ping response and 0 for no response
sub update_host_ping_info {
    my ( $self,$client_id,$ip_int,$ping_result_new,$enable_ping_history,$ip_ad,$update_type_audit,$vars_file) = @_;

    $enable_ping_history="" if ! $enable_ping_history;
    $update_type_audit="6" if ! $update_type_audit;
    my $ping_result_old;

    my $dbh = $self->_mysql_connection();
    my $qip_int = $dbh->quote( $ip_int );

    my $qmydatetime = $dbh->quote( time() );
    my $alive = $dbh->quote( $ping_result_new );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth;

    $sth = $dbh->prepare("SELECT alive FROM host WHERE ip=$qip_int AND client_id = $qclient_id
        ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();

    $ping_result_old = $sth->fetchrow_array || "";
    $ping_result_old = 0 if ! $ping_result_old || $ping_result_old eq "NULL";

    $sth = $dbh->prepare("UPDATE host SET alive=$alive, last_response=$qmydatetime WHERE ip=$qip_int AND client_id = $qclient_id") or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;

    if ( $enable_ping_history eq 1 && $ping_result_old ne $ping_result_new ) {
        my $ping_state_old;
        my $ping_state_new;
        if ( $ping_result_old eq 1 ) {
            $ping_state_old="up";
            $ping_state_new="down";
        } else {
            $ping_state_old="down";
            $ping_state_new="up";
        }
        
        my $audit_type="100";
        my $audit_class="1";
        my $event="$ip_ad: $ping_state_old -> $ping_state_new";
        $self->insert_audit("$client_id","$audit_class","$audit_type","$event","$update_type_audit","$vars_file");
    }
}


sub insert_audit {
my ($self,$client_id,$event_class,$event_type,$event,$update_type_audit,$vars_file) = @_;

my $remote_host = $ENV{'REMOTE_ADDR'} || "N/A";

my $format=$self->{'format'};
my $error;
my %lang_vars = $self->_get_vars("$vars_file");
my $user=$ENV{'REMOTE_USER'};
my $mydatetime=time();
#my $audit_id=$self->get_last_audit_id("$client_id");
#$audit_id++;
my $dbh = $self->_mysql_connection();
#my $qaudit_id = $dbh->quote( $audit_id );
my $qevent_class = $dbh->quote( $event_class );
my $qevent_type = $dbh->quote( $event_type );
my $qevent = $dbh->quote( $event );
my $quser = $dbh->quote( $user );
my $qupdate_type_audit = $dbh->quote( $update_type_audit );
my $qmydatetime = $dbh->quote( $mydatetime );
my $qremote_host = $dbh->quote( $remote_host );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("INSERT INTO audit (event,user,event_class,event_type,update_type_audit,date,remote_host,client_id) VALUES ($qevent,$quser,$qevent_class,$event_type,$qupdate_type_audit,$qmydatetime,$qremote_host,$qclient_id)") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->finish();
}

sub get_last_audit_id {
my ($self,$client_id) = @_;
my $last_audit_id;
my $dbh = $self->_mysql_connection();
my $sth = $dbh->prepare("SELECT id FROM audit ORDER BY (id+0) DESC LIMIT 1
        ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$last_audit_id = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
$last_audit_id || 1;
return $last_audit_id;
}

sub get_all_audit_events {
my ( $self, $client_id,$all_clients ) = @_;
my @values_events;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my ($cl_a,$cl_aa);
if ( $all_clients eq "yy" ) {
    $cl_a="";
} else {
    $cl_a="AND a.client_id = $qclient_id";
}
my $sth = $dbh->prepare("SELECT a.event, a.user, a.date, ec.event_class, et.event_type, uta.update_types_audit, a.client_id, a.remote_host FROM audit a, event_classes ec, event_types et, update_types_audit uta WHERE a.event_class = ec.id AND a.event_type = et.id AND a.update_type_audit = uta.id $cl_a ORDER BY a.date,a.event_type DESC") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_events, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_events;
}

sub get_audit_event_classes {
my ( $self, $client_id ) = @_;
my @values_event_classes;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT event_class FROM event_classes") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_event_classes, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_event_classes;
}

sub get_audit_event_types {
my ( $self, $client_id ) = @_;
my @values_event_types;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT event_type FROM event_types") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_event_types, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_event_types;
}

sub get_audit_update_types {
my ( $self, $client_id ) = @_;
my @values_update_types;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT update_types_audit FROM update_types_audit") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_update_types, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_update_types;
}

sub get_anz_man_audit {
    my ( $self, $client_id ) = @_;
    my $count_audit_entries;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
my $sth;
if ( $client_id ) {
    $sth = $dbh->prepare("SELECT COUNT(*) FROM audit WHERE client_id = $qclient_id");
} else {
    $sth = $dbh->prepare("SELECT COUNT(*) FROM audit");
}
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $count_audit_entries = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $count_audit_entries;
}

sub get_anz_auto_audit {
    my ( $self, $client_id ) = @_;
    my $count_audit_entries;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
my $sth;
if ( $client_id ) {
    $sth = $dbh->prepare("SELECT COUNT(*) FROM audit_auto WHERE client_id = $qclient_id");
} else {
    $sth = $dbh->prepare("SELECT COUNT(*) FROM audit_auto");
}
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $count_audit_entries = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $count_audit_entries;
}

sub get_red_ocu {
my ( $self,$client_id,$red_num,$ip_total ) = @_;
my $ip_ocu=$self->count_host_entries("$client_id","$red_num");
my $free=$ip_total-$ip_ocu;
my ($free_calc,$percent_free,$ip_total_calc,$percent_ocu,$ocu_color);
if ( $free == 0 ) {
    $percent_free = '0%';
} elsif ( $free == $ip_total ) {
    $percent_free = '100%';
} else {
    $free_calc = $free . ".0";
    $ip_total_calc = $ip_total . ".0";
    $percent_free=100*$free_calc/$ip_total_calc;
    $percent_free =~ /^(\d+\.?\d?).*/;
    $percent_free = $1 . '%';
}
if ( $ip_ocu == 0 ) {
    $percent_ocu = '0%';
    $ocu_color = "green";
} elsif ( $ip_ocu == $ip_total ) {
    $percent_ocu = '100%';
    $ocu_color = "red";
} else {
    $ip_total_calc = $ip_total . ".0";
    $percent_ocu=100*$ip_ocu/$ip_total_calc;
    $percent_ocu =~ /^(\d+\.?\d?).*/;
    $percent_ocu = $1;
if ( $percent_ocu >= 90 ) {
    $ocu_color = "red";
} elsif ( $percent_ocu >= 80 ) {
    $ocu_color = "darkorange";
} else {
    $ocu_color = "green";
}
    $percent_ocu = $percent_ocu . '%';
}
return ($percent_ocu,$percent_free,$ocu_color);
}


sub get_pages_links_red {
my ( $self,$client_id,$vars_file,$start_entry,$anz_values_redes,$entries_per_page,$tipo_ele,$loc_ele,$order_by, $rootnet, $rootnet_num,$show_rootnet,$show_endnet, $hide_not_rooted,$red_search, $parent_network_id ) = @_;
my $uri = $self->get_uri();
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my %lang_vars = $self->_get_vars("$vars_file");

$rootnet="n" if ! $rootnet;
$show_rootnet="0" if ! $show_rootnet;
$show_endnet="0" if ! $show_endnet;
$hide_not_rooted="0" if ! $hide_not_rooted;
$red_search="" if ! $red_search;
$parent_network_id="" if ! $parent_network_id;
my $rootnet_hidden = "";
my $rootnet_num_hidden = "";
my $show_rootnet_hidden="";
my $show_endnet_hidden="";
my $hide_not_rooted_hidden="";
my $search_index_hidden="";
my $parent_network_id_hidden="";

$rootnet_hidden='<input name="rootnet" type="hidden" value="y">' if $rootnet eq "y";
$rootnet_num_hidden='<input name="red_num" type="hidden" value="' . $rootnet_num . '">' if $rootnet_num;
$show_rootnet_hidden='<input name="show_rootnet" type="hidden" value="1">' if $show_rootnet == 1;
$show_endnet_hidden='<input name="show_endnet" type="hidden" value="1">' if $show_endnet == 1;
$hide_not_rooted_hidden='<input name="hide_not_rooted" type="hidden" value="1">' if $hide_not_rooted == 1;
$search_index_hidden='<input name="search_index" type="hidden" value="true"><input name="red_search" type="hidden" value="'. $red_search . '">' if $red_search;
my $collapse_networks=$self->{collapse_networks} || 0;
my $collapse_networks_hidden="";
$collapse_networks_hidden='<input name="collapse_networks" type="hidden" value="' . $collapse_networks . '">' if $collapse_networks == 1;
$parent_network_id_hidden='<input name="parent_network_id" type="hidden" value="' . $parent_network_id . '">' if $parent_network_id;

my $script_name = $ENV{SCRIPT_NAME};
if ( $script_name =~ /index_nohead.cgi/ ) {
    $script_name =~ s/_nohead//;
}
my $cgi = "$ENV{SERVER_NAME}" . "$script_name";
$cgi = "$uri/ip_modred_list.cgi" if ( $cgi =~ /ip_modred.cgi/ || $cgi =~ /ip_deletered.cgi/ || $cgi =~ /ip_splitred.cgi/ || $cgi =~ /ip_unirred.cgi/ || $cgi =~ /ip_vaciarred.cgi/ || $cgi =~ /ip_reserverange/ || $cgi =~ /ip_modred_mass_update/);
$cgi = "$base_uri/index.cgi" if ( $cgi =~ /ip_searchred.cgi/ || $cgi =~ /ip_insertred.cgi/ );
$cgi = "$base_uri/ip_show_free_range.cgi" if ( $cgi =~ /ip_show_free_range/ || $cgi =~ /ip_show_free_range/ );

my $pages_links;
my $l = "0";
my $m = "0";
my $n = "1";
my $start_title;

my $last_n = int($anz_values_redes / $entries_per_page);

if ($last_n < 8 ) {
    if ( $anz_values_redes > $entries_per_page ) {
        while ( $l < $anz_values_redes ) {
            $m = $l + $entries_per_page;
            $start_title = $l +1;
            if ( $n >= 60 ) {
                $pages_links = $pages_links . "&nbsp;<span title=\"RESULT LIMITED TO $l ENTRIES\">$n</span>&nbsp;\n";
                last;
            }

            if ( $pages_links && $l ne $start_entry ) {
                $pages_links = $pages_links . "<form name=\"printredtabheadform0\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input type=\"submit\" value=\"$n\" name=\"pages_links_red_button\" class=\"audit_page_link\" title=\"$start_title-$m\"><input name=\"entries_per_page\" type=\"hidden\" value=\"$entries_per_page\"><input name=\"start_entry\" type=\"hidden\" value=\"$l\"><input name=\"tipo_ele\" type=\"hidden\" value=\"$tipo_ele\"><input name=\"loc_ele\" type=\"hidden\" value=\"$loc_ele\"><input name=\"order_by\" type=\"hidden\" value=\"$order_by\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">$rootnet_hidden $rootnet_num_hidden $show_rootnet_hidden $show_endnet_hidden $hide_not_rooted_hidden $search_index_hidden $collapse_networks_hidden $parent_network_id_hidden</form>";
            } elsif ( $pages_links  && $l eq $start_entry ) {
                $pages_links = $pages_links . "&nbsp;<span class=\"audit_page_link_actual\" title=\"$start_title-$m\">$n</span>&nbsp;";
            } elsif ( ! $pages_links  && $l eq $start_entry ) {
                $pages_links = "&nbsp;<span class=\"audit_page_link_actual\" title=\"$start_title-$m\">$n</span>&nbsp;";
            } elsif ( ! $pages_links  && $l ne $start_entry ) {
                $pages_links = "<form name=\"printredtabheadform0\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input type=\"submit\" value=\"$n\" name=\"pages_links_red_button\" class=\"audit_page_link\" title=\"$start_title-$m\"><input name=\"entries_per_page\" type=\"hidden\" value=\"$entries_per_page\"><input name=\"start_entry\" type=\"hidden\" value=\"$l\"><input name=\"tipo_ele\" type=\"hidden\" value=\"$tipo_ele\"><input name=\"loc_ele\" type=\"hidden\" value=\"$loc_ele\"><input name=\"order_by\" type=\"hidden\" value=\"$order_by\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">$rootnet_hidden $rootnet_num_hidden $show_rootnet_hidden $show_endnet_hidden $hide_not_rooted_hidden $search_index_hidden $collapse_networks_hidden $parent_network_id_hidden</form>";
            }
            $l = $l + $entries_per_page;
            $n++;
        }
    }
    $pages_links = "NO_LINKS" if ! $pages_links;
    return $pages_links;


} else {

    my $anz_show_entries = 7;
    my $anz_show_entries_before_after = 3;
    my $last_l = $entries_per_page * $last_n;

    my $first_show_entry_start = $start_entry / $entries_per_page;
    my $first_show_entry_start_real = $first_show_entry_start;
    $first_show_entry_start = 0 if $first_show_entry_start <= $anz_show_entries_before_after;
    my $first_show_entry_start_before = $first_show_entry_start_real - $anz_show_entries_before_after;

    my $last_show_entry_end = $first_show_entry_start_real + $anz_show_entries_before_after + 1;
    $last_show_entry_end = 7 if $first_show_entry_start <= 3;
    $last_show_entry_end = $last_n if $first_show_entry_start >= $last_n - 3;

    if ( $anz_values_redes > $entries_per_page ) {
        while ( $l < $anz_values_redes ) {

            $m = $l + $entries_per_page;
            $start_title = $l + 1;

            if ( $n == 1 ) {
                # print First link
                $pages_links = "<form name=\"printredtabheadform0\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input type=\"submit\" value=\"$lang_vars{'first_message'}\" name=\"pages_links_red_button\" class=\"audit_page_link\" title=\"$start_title-$m\"><input name=\"entries_per_page\" type=\"hidden\" value=\"$entries_per_page\"><input name=\"start_entry\" type=\"hidden\" value=\"$l\"><input name=\"tipo_ele\" type=\"hidden\" value=\"$tipo_ele\"><input name=\"loc_ele\" type=\"hidden\" value=\"$loc_ele\"><input name=\"order_by\" type=\"hidden\" value=\"$order_by\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">$rootnet_hidden $rootnet_num_hidden $show_rootnet_hidden $show_endnet_hidden $hide_not_rooted_hidden $search_index_hidden $collapse_networks_hidden $parent_network_id_hidden</form>";

                my $start_entry_before_link = 0;
                $start_entry_before_link = $entries_per_page * ($first_show_entry_start_real - 1) if $first_show_entry_start_real != 0; 
                $pages_links .= "<form name=\"printredtabheadform0\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input type=\"submit\" value=\"$lang_vars{before_message}\" name=\"pages_links_red_button\" class=\"audit_page_link\" title=\"$start_title-$m\"><input name=\"entries_per_page\" type=\"hidden\" value=\"$entries_per_page\"><input name=\"start_entry\" type=\"hidden\" value=\"$start_entry_before_link\"><input name=\"tipo_ele\" type=\"hidden\" value=\"$tipo_ele\"><input name=\"loc_ele\" type=\"hidden\" value=\"$loc_ele\"><input name=\"order_by\" type=\"hidden\" value=\"$order_by\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">$rootnet_hidden $rootnet_num_hidden $show_rootnet_hidden $show_endnet_hidden $hide_not_rooted_hidden $search_index_hidden $collapse_networks_hidden $parent_network_id_hidden</form>";

            }
            if ( $n <= $first_show_entry_start_before && $n <= $last_show_entry_end - 7 ) {
                $l = $l + $entries_per_page;
                $n++;
                next;
            } 

            
            if ( $pages_links && $l ne $start_entry ) {
                $pages_links = $pages_links . "<form name=\"printredtabheadform0\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input type=\"submit\" value=\"$n\" name=\"pages_links_red_button\" class=\"audit_page_link\" title=\"$start_title-$m\"><input name=\"entries_per_page\" type=\"hidden\" value=\"$entries_per_page\"><input name=\"start_entry\" type=\"hidden\" value=\"$l\"><input name=\"tipo_ele\" type=\"hidden\" value=\"$tipo_ele\"><input name=\"loc_ele\" type=\"hidden\" value=\"$loc_ele\"><input name=\"order_by\" type=\"hidden\" value=\"$order_by\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">$rootnet_hidden $rootnet_num_hidden $show_rootnet_hidden $show_endnet_hidden $hide_not_rooted_hidden $search_index_hidden $collapse_networks_hidden $parent_network_id_hidden</form>";
            } elsif ( $pages_links  && $l eq $start_entry ) {
                $pages_links = $pages_links . "&nbsp;<span class=\"audit_page_link_actual\" title=\"$start_title-$m\">$n</span>&nbsp;";
            } elsif ( ! $pages_links  && $l eq $start_entry ) {
                $pages_links = "&nbsp;<span class=\"audit_page_link_actual\" title=\"$start_title-$m\">$n</span>&nbsp;";
            } elsif ( ! $pages_links  && $l ne $start_entry ) {
                $pages_links = "<form name=\"printredtabheadform0\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input type=\"submit\" value=\"$n\" name=\"pages_links_red_button\" class=\"audit_page_link\" title=\"$start_title-$m\"><input name=\"entries_per_page\" type=\"hidden\" value=\"$entries_per_page\"><input name=\"start_entry\" type=\"hidden\" value=\"$l\"><input name=\"tipo_ele\" type=\"hidden\" value=\"$tipo_ele\"><input name=\"loc_ele\" type=\"hidden\" value=\"$loc_ele\"><input name=\"order_by\" type=\"hidden\" value=\"$order_by\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">$rootnet_hidden $rootnet_num_hidden $show_rootnet_hidden $show_endnet_hidden $hide_not_rooted_hidden $search_index_hidden $collapse_networks_hidden $parent_network_id_hidden</form>";
            }

            if ( $n == $last_show_entry_end + 1 ) {
                my $start_entry_after_link = $last_l;
                $start_entry_after_link = $entries_per_page * ($first_show_entry_start_real + 1) if $n <= $last_n - $anz_show_entries_before_after;
                $pages_links .= "<form name=\"printredtabheadform0\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input type=\"submit\" value=\"$lang_vars{next_message}\" name=\"pages_links_red_button\" class=\"audit_page_link\" title=\"$start_title-$m\"><input name=\"entries_per_page\" type=\"hidden\" value=\"$entries_per_page\"><input name=\"start_entry\" type=\"hidden\" value=\"$start_entry_after_link\"><input name=\"tipo_ele\" type=\"hidden\" value=\"$tipo_ele\"><input name=\"loc_ele\" type=\"hidden\" value=\"$loc_ele\"><input name=\"order_by\" type=\"hidden\" value=\"$order_by\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">$rootnet_hidden $rootnet_num_hidden $show_rootnet_hidden $show_endnet_hidden $hide_not_rooted_hidden $search_index_hidden $collapse_networks_hidden $parent_network_id_hidden</form>";

                $pages_links .= "<form name=\"printredtabheadform0\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input type=\"submit\" value=\"$lang_vars{last_message}\" name=\"pages_links_red_button\" class=\"audit_page_link\" title=\"$start_title-$m\"><input name=\"entries_per_page\" type=\"hidden\" value=\"$entries_per_page\"><input name=\"start_entry\" type=\"hidden\" value=\"$last_l\"><input name=\"tipo_ele\" type=\"hidden\" value=\"$tipo_ele\"><input name=\"loc_ele\" type=\"hidden\" value=\"$loc_ele\"><input name=\"order_by\" type=\"hidden\" value=\"$order_by\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">$rootnet_hidden $rootnet_num_hidden $show_rootnet_hidden $show_endnet_hidden $hide_not_rooted_hidden $search_index_hidden $collapse_networks_hidden $parent_network_id_hidden</form>";
                last;
            }

            $l = $l + $entries_per_page;
            $n++;
        }
    }
    $pages_links = "NO_LINKS" if ! $pages_links;
    return $pages_links;
    }
}


sub get_pages_links_host {
my ( $self,$client_id,$start_entry_hosts,$anz_values_hosts,$entries_per_page_hosts,$red_num,$knownhosts,$host_order_by,$first_ip_int,$ip_hash,$redbroad_int,$ip_version,$vars_file,$referer ) = @_;

my $pages_links;
if ( $anz_values_hosts - 2 <= $entries_per_page_hosts ) {
$pages_links = "NO_LINKS";
return $pages_links;
exit 0;
}

my $uri = $self->get_uri();
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my $cgi = "${base_uri}/ip_show.cgi";
my %lang_vars = $self->_get_vars("$vars_file");

$first_ip_int=Math::BigInt->new("$first_ip_int");
$anz_values_hosts=Math::BigInt->new("$anz_values_hosts");
$entries_per_page_hosts=Math::BigInt->new("$entries_per_page_hosts");
$start_entry_hosts = 0 if $start_entry_hosts == 1;
$start_entry_hosts = Math::BigInt->new("$start_entry_hosts");
$redbroad_int = Math::BigInt->new("$redbroad_int");
my $l = 0;
my $n = 1;
$n = Math::BigInt->new("$n");
my $start_ip_int=$first_ip_int;
$start_ip_int=Math::BigInt->new("$start_ip_int");
my $start_ip;
my $end_ip_int=1;
$end_ip_int = Math::BigInt->new("$end_ip_int");
my $end_ip;
my $ba=6;
my $start_title = "";
$referer="host_list_view" if ! $referer;

my $last_page_show=$anz_values_hosts/$entries_per_page_hosts;
my $rrr;
$rrr=$anz_values_hosts%$entries_per_page_hosts;
if ( $rrr ) {
$last_page_show++;
} else {
}
$last_page_show=Math::BigInt->new("$last_page_show");

if ( $start_entry_hosts >= $redbroad_int ) {
$start_entry_hosts=$anz_values_hosts/$entries_per_page_hosts;
$start_entry_hosts =~ s/\.*$//;
$start_entry_hosts *= 254;
}


my $first_link_start_helper;
my $a = $anz_values_hosts/$entries_per_page_hosts;
$a=Math::BigInt->new("$a");
$a =~ s/\.*$//;
$a = $a * $entries_per_page_hosts - $entries_per_page_hosts * ( $ba - 1 ) * 2;


if ( $start_entry_hosts >= $last_page_show * $entries_per_page_hosts - $entries_per_page_hosts * ( $ba -1 ) * 2 && $start_entry_hosts <= $last_page_show * $entries_per_page_hosts - $entries_per_page_hosts * ( $ba -1 ) && $start_entry_hosts - $entries_per_page_hosts * $ba >= 0 ) {
$first_link_start_helper=$start_entry_hosts - $entries_per_page_hosts * $ba;
} elsif ( $start_entry_hosts > $a && $start_entry_hosts > ( $ba - 1 ) * $entries_per_page_hosts ) {
$first_link_start_helper=$a;
} elsif ( $start_entry_hosts > $entries_per_page_hosts * $ba ) {
$first_link_start_helper=$start_entry_hosts - $entries_per_page_hosts * $ba;
} else {
$first_link_start_helper=0;
}

my $next_start_entry_hosts = $start_entry_hosts + $entries_per_page_hosts * ( $ba - 1 ) * 2;
$next_start_entry_hosts=Math::BigInt->new("$next_start_entry_hosts");


my $helper=$first_link_start_helper/$entries_per_page_hosts;
$helper =~ s/\.*$//;
$helper=Math::BigInt->new("$helper");
$l=Math::BigInt->new("$l");

$l = $l + $entries_per_page_hosts * $helper;
if ( $ip_version eq "v4" ) {
$start_ip_int = $start_ip_int + $entries_per_page_hosts * $helper;
} else {
$start_ip_int = $start_ip_int + $entries_per_page_hosts * $helper - 1;
}

$n=$n + $n * $helper;

while ( $l < $anz_values_hosts ) {

if ( $l < $first_link_start_helper ) {
    $l += $entries_per_page_hosts;
    $start_ip_int += $entries_per_page_hosts;
    $n++;
    next;
}

if ( $knownhosts eq "all" && $host_order_by =~ /IP/ )  {
    $start_ip = $self->int_to_ip("$client_id","$start_ip_int","$ip_version");
    $start_ip_int++ if $ip_version eq "v6";
    if ( $ip_version eq "v4" ) {
        $end_ip_int=$start_ip_int + $entries_per_page_hosts - 1;
        $end_ip_int = $redbroad_int - 1 if $end_ip_int - 1 > $redbroad_int - 1;
    } else {
        $end_ip_int=$start_ip_int + $entries_per_page_hosts - 2;
        $end_ip_int = $redbroad_int - 2 if $end_ip_int - 2 > $redbroad_int - 2;
    }
    $end_ip = $self->int_to_ip("$client_id","$end_ip_int","$ip_version");
    $start_ip_int = $end_ip_int + 1;
    $start_title = $start_ip . " - " . $end_ip;
}

if ( ! $pages_links && $l <= $first_link_start_helper && $l != 0 && $l > 0 ) {
    my $start_entry_hosts_form_first=0;
    my $start_entry_hosts_form_previous=0;
    $start_entry_hosts_form_previous=$start_entry_hosts - $entries_per_page_hosts * ( $ba - 1 ) * 2 if $start_entry_hosts - $entries_per_page_hosts * ( $ba - 1 ) * 2 > 0;
    $pages_links = "<form name=\"printredtabheadform1\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"&lt;&lt;\" name=\"B2\" class=\"audit_page_link\" title=\"$lang_vars{'previous_10_message'}\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts_form_first\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"referer\" type=\"hidden\" value=\"$referer\"></form> <form name=\"printredtabheadform2\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"&lt;\" name=\"B2\" class=\"audit_page_link\" title=\"$lang_vars{'first_message'}\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts_form_previous\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"referer\" type=\"hidden\" value=\"$referer\"></form>";	

} elsif ( $l == $start_entry_hosts ) {
    $pages_links .= "&nbsp;<span class=\"audit_page_link_actual\" title=\"$start_title\">$n</span>&nbsp;";	

} elsif ( $l == $start_entry_hosts + $entries_per_page_hosts * $ba ) {
    my $m=$n*$entries_per_page_hosts - $entries_per_page_hosts;
    if ( $n * $entries_per_page_hosts - $entries_per_page_hosts >= $anz_values_hosts ) {
        last;
        }
        if ( $n <= ( $ba - 1 ) * 2 ) {
             $pages_links .= "<form name=\"printredtabheadform3\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"$n\" name=\"B2\" class=\"audit_page_link\" title=\"$start_title\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$m\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"referer\" type=\"hidden\" value=\"$referer\"></form>";
            $n++;
            next;
        }

        my $start_entry_host_form_last=$anz_values_hosts/$entries_per_page_hosts;
        $start_entry_host_form_last =~ s/\.*$//;
        $start_entry_host_form_last *= $entries_per_page_hosts;
        $start_entry_host_form_last=Math::BigInt->new("$start_entry_host_form_last");

        $pages_links .= "<form name=\"printredtabheadform4\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"&gt;\" name=\"B2\" class=\"audit_page_link\" title=\"$lang_vars{next_10_message}\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$next_start_entry_hosts\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"referer\" type=\"hidden\" value=\"$referer\"></form> <form name=\"printredtabheadform5\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"&gt;&gt;\" name=\"B2\" class=\"audit_page_link\" title=\"$lang_vars{'last_message'}\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_host_form_last\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"referer\" type=\"hidden\" value=\"$referer\"></form>";
        last;

    } elsif ( $l < 0 ) {
        $n++;
        $l = $l + $entries_per_page_hosts;
        next;
    } else {
         $pages_links .= "<form name=\"printredtabheadform6\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"$n\" name=\"B2\" class=\"audit_page_link\" title=\"$start_title\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$l\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"referer\" type=\"hidden\" value=\"$referer\"></form>";
    }

    $l = $l + $entries_per_page_hosts;
    $n++;
}

$pages_links = "NO_LINKS" if ! $pages_links;
$pages_links .= "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<form name=\"printredtabheadform_text\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"$lang_vars{go_to_page_message}\" name=\"text_field_number_given\" class=\"audit_page_link\"><input type=\"text\" name=\"start_entry_hosts\" size=\"5\" maxsize=\"35\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"referer\" type=\"hidden\" value=\"$referer\"></form> <span style=\"color: gray;\">($lang_vars{from_message} $last_page_show)</span>" if $pages_links ne "NO_LINKS" && $anz_values_hosts > $ba * 4;

$pages_links .= "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<div style=\"nowrap; float: right;\"><form name=\"printredtabheadform_go_to_ip\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"$lang_vars{go_to_message}\" name=\"B1\" class=\"audit_page_link\"><input type=\"text\" name=\"go_to_address\" size=\"30\" maxsize=\"41\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"referer\" type=\"hidden\" value=\"$referer\"></form></div>";
#	$pages_links .= "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<form name=\"printredtabheadform_go_to_host\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"$lang_vars{go_to_host_message}\" name=\"B1\" class=\"audit_page_link\"><input type=\"text\" name=\"go_to_host\" size=\"30\" maxsize=\"41\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page_hosts\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"knownhosts\" type=\"hidden\" value=\"$knownhosts\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"referer\" type=\"hidden\" value=\"$referer\"></form>";

return $pages_links;
}

sub get_pages_links_cm {
my $self = shift;
my %args = @_;

my $vars_file = $args{vars_file} || "";
my $ip_version = $args{ip_version} || "";
my $client_id = $args{client_id} || "";
my $anz_host_total = $args{anz_host_total} || 0;
my $entries_per_page = $args{entries_per_page_hosts} || "";
my $host_order_by = $args{host_order_by} || "";
my $start_entry_hosts = $args{start_entry_hosts} || 0;

my %lang_vars = $self->_get_vars("$vars_file");

my $CM_show_hosts=$self->{CM_show_hosts} || 0;
my $CM_show_hosts_by_jobs=$self->{CM_show_hosts_by_jobs} || 0;

my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();

my $cgi;
if ( $CM_show_hosts ) {
    $cgi = "${base_uri}/res/cm/ip_show_cm_hosts.cgi";
} else {
    $cgi = "${base_uri}/res/cm/ip_list_device_by_job.cgi";
}

my $pages_links="";

if ( $anz_host_total < $entries_per_page ) {
    return "NO_LINKS";
}

my $n=1;
my $start_entry_hosts_hidden="";
for ( my $i=0; $i < $anz_host_total; $i=$i+$entries_per_page) {
    my $start_entry_hosts_hidden=$i;
    if ( $i == $start_entry_hosts ) {
        $pages_links .= "&nbsp;<span class=\"audit_page_link_actual\" title=\"$n\">$n</span>&nbsp;";	
    } else { 
        $pages_links .= "<form name=\"printredtabheadform3\" method=\"POST\" action=\"$server_proto://$cgi\" style=\"display:inline\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"$n\" name=\"B2\" class=\"audit_page_link\" title=\"$n\"><input name=\"entries_per_page_hosts\" type=\"hidden\" value=\"$entries_per_page\"><input name=\"start_entry_hosts\" type=\"hidden\" value=\"$start_entry_hosts_hidden\"><input name=\"host_order_by\" type=\"hidden\" value=\"$host_order_by\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"></form>\n";
    }
    $n++;
} 

return $pages_links;
}


sub convert_mask {
my ($self,$client_id,$network,$mask,$vars_file) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $BM;
if ( $mask =~ /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/ ) {
    $mask =~ /(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/;
    my $fi_oc = $1;
    my $se_oc = $2;
    my $th_oc = $3;
    my $fo_oc = $4;
    if ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.255.252" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.255.252") { $BM = "30"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.255.248" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.255.248" ) { $BM = "29"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.255.240" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.255.240" ) { $BM = "28"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.255.224" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.255.224" ) { $BM = "27"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.255.192" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.255.192" ) { $BM = "26"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.255.128" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.255.128" ) { $BM = "25"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.255.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.255.0" ) { $BM = "24"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.254.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.254.0" ) { $BM = "23"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.252.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.252.0" ) { $BM = "22"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.248.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.248.0" ) { $BM = "21"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.240.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.240.0" ) { $BM = "20"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.224.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.224.0" ) { $BM = "19"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.192.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.192.0" ) { $BM = "18"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.128.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.128.0" ) { $BM = "17"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.255.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.255.0.0" ) { $BM = "16"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.254.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.254.0.0" ) { $BM = "15"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.252.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.252.0.0" ) { $BM = "14"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.248.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.248.0.0" ) { $BM = "13"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.240.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.240.0.0" ) { $BM = "12"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.224.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.224.0.0" ) { $BM = "11"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.192.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.192.0.0" ) { $BM = "10"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.128.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.128.0.0" ) { $BM = "9"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "255.0.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "255.0.0.0" ) { $BM = "8"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "254.0.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "254.0.0.0" ) { $BM = "7"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "252.0.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "252.0.0.0" ) { $BM = "6"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "248.0.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "248.0.0.0" ) { $BM = "5"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "240.0.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "240.0.0.0" ) { $BM = "4"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "224.0.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "224.0.0.0" ) { $BM = "3"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "192.0.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "192.0.0.0" ) { $BM = "2"; }
    elsif ( "$fi_oc.$se_oc.$th_oc.$fo_oc" eq "128.0.0.0" || "$fo_oc.$th_oc.$se_oc.$fi_oc" eq "128.0.0.0" ) { $BM = "1"; }
    elsif ( $mask eq "255.255.255.255" ) {
        print "<b>$network/$mask</b>: HOSTROUTE - $lang_vars{ignorado_message}<br>\n";
    } else {
        print "<b>$network/$mask</b>: Bad Netmask - $lang_vars{ignorado_message}<br>\n";
    }
}
return $BM;
}

sub get_version {
return "$VERSION";
}

sub get_patch_version {
return "$PATCH_VERSION";
}

sub get_sub_version {
return "$SUB_VERSION";
}

sub get_global_config {
my ( $self, $client_id ) = @_;
my @values_config;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT version, default_client_id, confirmation, mib_dir, vendor_mib_dirs, ipv4_only, as_enabled, leased_line_enabled, configuration_management_enabled, cm_backup_dir, cm_licence_key, cm_log_dir, cm_xml_dir, auth_enabled, freerange_ignore_non_root, arin_enabled, local_filter_enabled, site_management_enabled, password_management_enabled, dyn_dns_updates_enabled, acl_management_enabled, mac_management_enabled, site_search_main_menu, line_search_main_menu, limit_cc_output_enabled, debug_enabled FROM global_config");
#        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_config, [ @$ip_ref ];
    }
    $dbh->disconnect;

    # set DEBUG variable
    $DEBUG = 1 if $values_config[0]->[25] eq "yes";

    return @values_config;
}

sub get_config {
my ( $self, $client_id ) = @_;
my @values_config;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT smallest_bm, max_sinc_procs, ignorar, ignore_generic_auto, generic_dyn_host_name, dyn_ranges_only, ping_timeout, smallest_bm6, ocs_enabled, ocs_database_user, ocs_database_name, ocs_database_pass, ocs_database_ip, ocs_database_port, ignore_dns, confirm_dns_delete, delete_down_hosts FROM config WHERE client_id = $qclient_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_config, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_config;
}

sub get_config_confirmation {
    my ( $self, $client_id ) = @_;
    my $confirm;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT confirmation FROM global_config") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $confirm = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $confirm;
}

sub change_config {
my ( $self,$client_id, $smallest_bm, $max_sinc_procs, $ignorar, $ignore_generic_auto, $generic_dyn_host_name,$dyn_ranges_only,$ping_timeout,$smallest_bm6,$ocs_enabled,$ocs_database_user,$ocs_database_name,$ocs_database_pass,$ocs_database_ip,$ocs_database_port,$ignore_dns,$confirm_dns_delete, $delete_down_hosts ) = @_;
    my $dbh = $self->_mysql_connection();
    $ocs_database_user="" if ! $ocs_database_user;
    $ocs_database_name="" if ! $ocs_database_name;
    $ocs_database_pass="" if ! $ocs_database_pass;
    $ocs_database_ip="" if ! $ocs_database_ip;
    $ocs_database_port="" if ! $ocs_database_port;
    $ignore_dns=0 if ! $ignore_dns;
    my $qsmallest_bm = $dbh->quote( $smallest_bm );
    my $qsmallest_bm6 = $dbh->quote( $smallest_bm6 );
    my $qmax_sinc_procs = $dbh->quote( $max_sinc_procs );
    my $qignorar = $dbh->quote( $ignorar );
    my $qignore_generic_auto = $dbh->quote( $ignore_generic_auto );
    my $qgeneric_dyn_host_name = $dbh->quote( $generic_dyn_host_name );
    my $qdyn_ranges_only = $dbh->quote( $dyn_ranges_only );
    my $qping_timeout = $dbh->quote( $ping_timeout );
    my $qocs_enabled = $dbh->quote( $ocs_enabled );
    my $qocs_database_user = $dbh->quote( $ocs_database_user );
    my $qocs_database_name = $dbh->quote( $ocs_database_name );
    my $qocs_database_pass = $dbh->quote( $ocs_database_pass );
    my $qocs_database_ip = $dbh->quote( $ocs_database_ip );
    my $qocs_database_port = $dbh->quote( $ocs_database_port );
    my $qignore_dns = $dbh->quote( $ignore_dns );
    my $qconfirm_dns_delete = $dbh->quote( $confirm_dns_delete );
    my $qdelete_down_hosts = $dbh->quote( $delete_down_hosts );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("UPDATE config set smallest_bm=$qsmallest_bm,max_sinc_procs=$qmax_sinc_procs,ignorar=$qignorar,ignore_generic_auto=$qignore_generic_auto,generic_dyn_host_name=$qgeneric_dyn_host_name,dyn_ranges_only=$qdyn_ranges_only,ping_timeout=$qping_timeout, smallest_bm6=$qsmallest_bm6, ocs_enabled=$qocs_enabled, ocs_database_user=$qocs_database_user, ocs_database_name=$qocs_database_name, ocs_database_pass=$qocs_database_pass, ocs_database_ip=$qocs_database_ip, ocs_database_port=$qocs_database_port, ignore_dns=$qignore_dns, confirm_dns_delete=$qconfirm_dns_delete, delete_down_hosts=$qdelete_down_hosts WHERE client_id = $qclient_id"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_confirmation_config {
my ( $self,$client_id, $confirmation ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qconfirmation = $dbh->quote( $confirmation );
    my $sth = $dbh->prepare("UPDATE global_config set confirmation=$qconfirmation"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_mib_dir_config {
my ( $self,$client_id, $mib_dir ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qmib_dir = $dbh->quote( $mib_dir );
    my $sth = $dbh->prepare("UPDATE global_config set mib_dir=$qmib_dir"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_vendor_mib_dirs_config {
my ( $self,$client_id, $vendor_mib_dirs ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qvendor_mib_dirs = $dbh->quote( $vendor_mib_dirs );
    my $sth = $dbh->prepare("UPDATE global_config set vendor_mib_dirs=$qvendor_mib_dirs"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_ipv4_only_config {
my ( $self,$client_id, $ip_version_ele ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qip_version_ele = $dbh->quote( $ip_version_ele );
    my $sth = $dbh->prepare("UPDATE global_config set ipv4_only=$qip_version_ele"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_user_management_enabled_config {
my ( $self,$client_id, $user_management_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $quser_management_enabled = $dbh->quote( $user_management_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set auth_enabled=$quser_management_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_as_enabled_config {
my ( $self,$client_id, $as_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qas_enabled = $dbh->quote( $as_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set as_enabled=$qas_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_ll_enabled_config {
my ( $self,$client_id, $ll_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qll_enabled = $dbh->quote( $ll_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set leased_line_enabled=$qll_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_debug_enabled_config {
my ( $self,$client_id, $debug_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qdebug_enabled = $dbh->quote( $debug_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set debug_enabled=$qdebug_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub update_config_client_id {
my ( $self,$client_id,$new_client_id ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qnew_client_id = $dbh->quote( $new_client_id );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("UPDATE config set client_id=$qnew_client_id WHERE client_id=$qclient_id"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub insert_config {
my ( $self,$client_id, $smallest_bm, $max_sinc_procs, $ignorar, $ignore_generic_auto, $generic_dyn_host_name,$set_sync_flag,$dyn_ranges_only,$ping_timeout,$confirmation ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qsmallest_bm = $dbh->quote( $smallest_bm );
    my $qmax_sinc_procs = $dbh->quote( $max_sinc_procs );
    my $qignorar = $dbh->quote( $ignorar );
    my $qignore_generic_auto = $dbh->quote( $ignore_generic_auto );
    my $qgeneric_dyn_host_name = $dbh->quote( $generic_dyn_host_name );
    my $qset_sync_flag = $dbh->quote( $set_sync_flag );
    my $qdyn_ranges_only = $dbh->quote( $dyn_ranges_only );
    my $qping_timeout = $dbh->quote( $ping_timeout );
#        my $qconfirmation = $dbh->quote( $confirmation );
    my $qclient_id = $dbh->quote( $client_id );
    debug("INSERT INTO config (smallest_bm,max_sinc_procs,ignorar,ignore_generic_auto,generic_dyn_host_name,set_sync_flag,dyn_ranges_only,ping_timeout,client_id) VALUES ($qsmallest_bm,$qmax_sinc_procs,$qignorar,$qignore_generic_auto,$qgeneric_dyn_host_name,$qset_sync_flag,$qdyn_ranges_only,$qping_timeout,$qclient_id)");
    my $sth = $dbh->prepare("INSERT INTO config (smallest_bm,max_sinc_procs,ignorar,ignore_generic_auto,generic_dyn_host_name,set_sync_flag,dyn_ranges_only,ping_timeout,client_id) VALUES ($qsmallest_bm,$qmax_sinc_procs,$qignorar,$qignore_generic_auto,$qgeneric_dyn_host_name,$qset_sync_flag,$qdyn_ranges_only,$qping_timeout,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_config {
my ( $self,$client_id ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM config WHERE client_id=$qclient_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_audit_auto {
my ( $self,$client_id, $time_range_start, $which_clients_audit_delete ) = @_;
    my $dbh = $self->_mysql_connection();
my $qtime_range_start = $dbh->quote( $time_range_start );
my $qclient_id = $dbh->quote( $client_id );

my $client_id_expr="AND client_id = $qclient_id";
$which_clients_audit_delete="" if ! $which_clients_audit_delete;
$client_id_expr="" if $which_clients_audit_delete eq "all_clients";

    my $sth = $dbh->prepare("DELETE FROM audit_auto WHERE date BETWEEN '0' AND $qtime_range_start $client_id_expr"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_audit_auto_without_networks {
my ( $self,$client_id, $time_range_start, $which_clients_audit_delete ) = @_;
    my $dbh = $self->_mysql_connection();
my $qtime_range_start = $dbh->quote( $time_range_start );
my $qclient_id = $dbh->quote( $client_id );

my $client_id_expr="AND client_id = $qclient_id";
$which_clients_audit_delete="" if ! $which_clients_audit_delete;
$client_id_expr="" if $which_clients_audit_delete eq "all_clients";

    my $sth = $dbh->prepare("DELETE FROM audit_auto WHERE date BETWEEN '0' AND $qtime_range_start AND event_class != '2' $client_id_expr"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_audit_man {
my ( $self,$client_id, $time_range_start,$which_clients_audit_delete ) = @_;

    my $dbh = $self->_mysql_connection();
my $qtime_range_start = $dbh->quote( $time_range_start );
my $qclient_id = $dbh->quote( $client_id );

my $client_id_expr="AND client_id = $qclient_id";
$which_clients_audit_delete="" if ! $which_clients_audit_delete;
$client_id_expr="" if $which_clients_audit_delete eq "all_clients";

    my $sth = $dbh->prepare("DELETE FROM audit WHERE date BETWEEN '0' AND $qtime_range_start $client_id_expr"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub find_smallest_valid_BM {
my ( $self,$client_id, $red, $ip_version ) = @_;
my ( $ipob, $BM );
my @config = $self->get_config("$client_id");
my ($smallest_bm,$biggest_bm);
if ( $ip_version eq "v4" ) {
    $smallest_bm = $config[0]->[0] || "22";
    $biggest_bm = 32;
    
} else {
    $smallest_bm = 16;
    $biggest_bm = 128;
}
for ( my $i = $smallest_bm; $i <= $biggest_bm; $i++ ) {
    $BM = $i;
    my $redob = "$red/$BM";
    $ipob = new Net::IP ($redob);
    if ( $ipob ) {
        last;
    }
}
return $BM;
}

sub get_size_db {
    my ( $self, $client_id ) = @_;
my $config_file = $self->_get_config_file();
my %config = $self->_get_vars("$config_file");
    my $size;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT ROUND((sum( data_length + index_length ) / 1024 / 1024 ),2)\"Data Base Size in MB\" FROM information_schema.TABLES where TABLE_SCHEMA like \"$config{'sid'}\" GROUP BY table_schema");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $size = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $size;
}

sub get_size_table_audit {
    my ( $self, $client_id ) = @_;
my $config_file = $self->_get_config_file();
my %config = $self->_get_vars("$config_file");
    my $size;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT ROUND(((DATA_LENGTH + INDEX_LENGTH - DATA_FREE) / 1024 / 1024),2) AS Size FROM INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA like \"$config{'sid'}\" AND table_name = 'audit'");
    my $sth = $dbh->prepare("SELECT ROUND(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024),2) AS \"Size in MB\" FROM INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA like \"$config{'sid'}\" AND table_name = 'audit'");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $size = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $size;
}


sub get_size_table_audit_auto {
    my ( $self, $client_id ) = @_;
my $config_file = $self->_get_config_file();
my %config = $self->_get_vars("$config_file");
    my $size;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT ROUND(((DATA_LENGTH + INDEX_LENGTH - DATA_FREE) / 1024 / 1024),2) AS \"Size in MB\" FROM INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA like \"$config{'sid'}\" AND table_name = 'audit_auto'");
    my $sth = $dbh->prepare("SELECT ROUND(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024),2) AS \"Size in MB\" FROM INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA like \"$config{'sid'}\" AND table_name = 'audit_auto'");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $size = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $size;
}

#sub get_stat_redes {
#	my ( $self, $client_id ) = @_;
#	my @host_redes;
#	my $ip_ref;
#        my $dbh = $self->_mysql_connection();
#	my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT n.red, n.BM, l.loc, c.cat,  FROM net n, locations l, c.categorias_net WHERE n.client_id = $qclient_id ORDER BY INET_ATON(red)") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        while ( $ip_ref = $sth->fetchrow_arrayref ) {
#        push @host_redes, [ @$ip_ref ];
#        }
#        $dbh->disconnect;
#        return @host_redes;
#}

sub get_redes_stat_hash {
my ( $self, $client_id,$ip_version ) = @_;
my %redes;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qip_version = $dbh->quote( $ip_version );
    my $sth = $dbh->prepare("SELECT n.red,n.BM,n.red_num,n.descr,n.comentario,c.cat,l.loc,n.client_id,n.ip_version FROM net n, categorias_net c, locations l WHERE c.id = n.categoria AND l.id = n.loc AND n.client_id = $qclient_id AND n.rootnet='0' ORDER BY c.cat"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $red = $ip_ref->{red};
    my $BM = $ip_ref->{BM};
    my $red_num = $ip_ref->{red_num};
    my $cat_net = $ip_ref->{cat};
    my $descr = $ip_ref->{descr};
    my $cat = $ip_ref->{cat};
    my $loc = $ip_ref->{loc};
    my $comentario = $ip_ref->{comentario};
    my $ip_version = $ip_ref->{ip_version};
    push @{$redes{$red_num}},"$red","$BM","$descr","$cat","$loc","$comentario","$ip_version";
    }
    $dbh->disconnect;
    return %redes;
}


# NEW STAT
sub get_stat_site_cat_generic {
    my ( $self, $client_id, $vars_file, $object, $show_by, $filter, $filter_value, $ip_version ) = @_;

	my %lang_vars;
	%lang_vars = $self->_get_vars("$vars_file") if $vars_file;

    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
	my $qfilter_value = $dbh->quote( $filter_value ) if $filter_value;
    my $qclient_id = $dbh->quote( $client_id );

	my ( $table1, $t1_id_name, $t1_value_name, $table2, $t2_id_name, $t2_value_name, $filter_expr, $filter_table_expr, $filter_table_name, $filter_table_value_name, $t1_filter_value_name);
	$table1=$t1_id_name=$t1_value_name=$table2=$t2_id_name=$t2_value_name=$filter_expr=$filter_table_expr=$t1_filter_value_name="";

	if ( $object eq "network" ) {
		$table1 = "net";
		$t1_id_name = "red_num";
		if ( $show_by eq "$lang_vars{loc_message}" ) {
			$t1_value_name = "loc";
			$t2_value_name = "loc";
			$table2 = "locations";
		} elsif ( $show_by eq "$lang_vars{cat_message}" ){
			$t1_value_name = "categoria";
			$t2_value_name = "cat";
			$table2 = "categorias_net";
		}
		if ( $filter eq "$lang_vars{loc_message}" ) {
			$t1_filter_value_name = "loc";
			$filter_table_name = "locations";
			$filter_table_value_name = "loc";
		} elsif ( $filter eq "$lang_vars{cat_message}" ){
			$t1_filter_value_name = "categoria";
			$filter_table_name = "categorias_net";
			$filter_table_value_name = "cat";
		}
	} elsif ( $object eq "host" ) {
		$table1 = "host";
		$t1_id_name = "red_num";
		if ( $show_by eq "$lang_vars{loc_message}" ) {
			$t1_value_name = "loc";
			$t2_value_name = "loc";
			$table2 = "locations";
		} elsif ( $show_by eq "$lang_vars{cat_message}" ){
			$t1_value_name = "categoria";
			$t2_value_name = "cat";
			$table2 = "categorias_net";
		}
		if ( $filter eq "$lang_vars{loc_message}" ) {
			$t1_filter_value_name = "loc";
			$filter_table_name = "locations";
			$filter_table_value_name = "loc";
		} elsif ( $filter eq "$lang_vars{cat_message}" ){
			$t1_filter_value_name = "categoria";
			$filter_table_name = "categorias";
			$filter_table_value_name = "cat";
		}
	}

	my $ip_version_expr = "AND t1.ip_version='$ip_version'";
	my $loc_client_id_expr = "AND client_id = $qclient_id" if $filter eq "$lang_vars{loc_message}";
    $filter_table_expr = " AND t1.$t1_filter_value_name = ( SELECT id from $filter_table_name WHERE $filter_table_value_name = $qfilter_value $loc_client_id_expr)" if $filter;

    debug("SELECT t2.${t2_value_name} FROM $table2 t2, $table1 t1 WHERE t2.id = t1.${t1_value_name} $ip_version_expr $filter_table_expr AND t1.client_id = $qclient_id ORDER BY t2.${t2_value_name}");
    my $sth = $dbh->prepare("SELECT t2.${t2_value_name} FROM $table2 t2, $table1 t1 WHERE t2.id = t1.${t1_value_name} $ip_version_expr $filter_table_expr AND t1.client_id = $qclient_id ORDER BY t2.${t2_value_name}")
		or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    while ( $ip_ref = $sth->fetchrow_arrayref ) {
		push @values, [ @$ip_ref ];
    } 

    $dbh->disconnect;

    return @values;
}


sub get_stat_site_cat_cc_select_generic {
    my ( $self, $client_id, $vars_file, $object, $show_by, $filter, $filter_cc_id, $filter_value, $ip_version ) = @_;

    my %lang_vars;
    %lang_vars = $self->_get_vars("$vars_file") if $vars_file;

    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qfilter_cc_id = $dbh->quote( $filter_cc_id ) if $filter_cc_id;
    my $qfilter_value = $dbh->quote( $filter_value ) if $filter_value;
    my $qclient_id = $dbh->quote( $client_id );

    my ( $table1, $t1_id_name, $t1_value_name, $table2, $t2_id_name, $t2_value_name, $filter_expr, $filter_table_expr, $filter_table_name, $filter_table_value_name, $t1_filter_value_name, $tag_table_name, $tag_table_id_name);
    $table1=$t1_id_name=$t1_value_name=$table2=$t2_id_name=$t2_value_name=$filter_expr=$filter_table_expr=$t1_filter_value_name="";

    if ( $object eq "network" ) {
        $table1 = "net";
        $t1_id_name = "red_num";
        $t2_id_name = "net_id";
		$filter_table_name = "custom_net_column_entries";
		$tag_table_name = "tag_entries_network";
		$tag_table_id_name = "net_id";
        if ( $show_by eq "$lang_vars{loc_message}" ) {
            $t1_value_name = "loc";
            $t2_value_name = "loc";
			$table2 = "locations";
        } elsif ( $show_by eq "$lang_vars{cat_message}" ){
            $t1_value_name = "categoria";
            $t2_value_name = "cat";
			$table2 = "categorias_net";
        }
    } elsif ( $object eq "host" ) {
        $table1 = "host";
        $t1_id_name = "id";
        $t2_id_name = "host_id";
		$filter_table_name = "custom_host_column_entries";
		$tag_table_name = "tag_entries_host";
		$tag_table_id_name = "host_id";
        if ( $show_by eq "$lang_vars{loc_message}" ) {
            $t1_value_name = "loc";
            $t2_value_name = "loc";
			$table2 = "locations";
        } elsif ( $show_by eq "$lang_vars{cat_message}" ){
            $t1_value_name = "categoria";
            $t2_value_name = "cat";
			$table2 = "categorias";
        }
    }

	my $cc_filter_expr;
	if ( $filter eq "Tag" ) {
		$cc_filter_expr = "AND t1.${t1_id_name} IN ( SELECT $tag_table_id_name FROM $tag_table_name tte WHERE tag_id = ( SELECT tt.id FROM tag tt, $tag_table_name tte WHERE tte.tag_id=tt.id AND tt.name=$qfilter_value limit 1))" if $filter_cc_id;
	} elsif ( $filter eq "DNSSG" ) {
		$cc_filter_expr = "AND t1.${t1_id_name} IN ( SELECT $tag_table_id_name FROM $filter_table_name t3 WHERE cc_id = $qfilter_cc_id AND t3.entry  = ( SELECT td.id FROM dns_server_group td WHERE name=$qfilter_value limit 1)" if $filter_cc_id;
	} else {
		$cc_filter_expr = "AND t1.${t1_id_name} IN ( SELECT ${t2_id_name} FROM $filter_table_name t3 WHERE cc_id = $qfilter_cc_id AND t3.entry = $qfilter_value )" if $filter_cc_id;
	}

	my $ip_version_expr = "AND t1.ip_version='$ip_version'";
	my $loc_client_id_expr = "AND t2.client_id = $qclient_id" if $show_by eq "$lang_vars{loc_message}";

    debug("SELECT t2.${t2_value_name} FROM $table2 t2, $table1 t1 WHERE t2.id = t1.${t1_value_name} $loc_client_id_expr $ip_version_expr $cc_filter_expr ORDER BY t2.${t2_value_name}");
    my $sth = $dbh->prepare("SELECT t2.${t2_value_name} FROM $table2 t2, $table1 t1 WHERE t2.id = t1.${t1_value_name} $loc_client_id_expr $ip_version_expr $cc_filter_expr ORDER BY t2.${t2_value_name}")
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }

    $dbh->disconnect;

    return @values;
}



sub get_stat_cc_select_site_cat_generic {
    my ( $self, $client_id, $vars_file, $object, $show_by, $cc_id, $filter, $filter_value, $ip_version ) = @_;

	my %lang_vars;
	%lang_vars = $self->_get_vars("$vars_file") if $vars_file;

    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qcc_id = $dbh->quote( $cc_id ) if $cc_id;
    my $qfilter_value = $dbh->quote( $filter_value ) if $filter_value;
    my $qclient_id = $dbh->quote( $client_id );

    my ( $table1, $t1_id_name, $t1_value_name, $table2, $t2_id_name, $t2_value_name, $filter_expr, $filter_table_expr, $filter_table_name, $filter_table_value_name, $t1_filter_value_name);
    $table1=$t1_id_name=$t1_value_name=$table2=$t2_id_name=$t2_value_name=$filter_expr=$filter_table_expr=$t1_filter_value_name="";

    if ( $object eq "network" ) {
        $table1 = "net";
        $table2 = "custom_net_column_entries";
        $t1_id_name = "red_num";
        $t2_id_name = "net_id";

        if ( $filter eq "$lang_vars{loc_message}" ) {
            $t1_filter_value_name = "loc";
            $filter_table_name = "locations";
            $filter_table_value_name = "loc";
        } elsif ( $filter eq "$lang_vars{cat_message}" ){
            $t1_filter_value_name = "categoria";
            $filter_table_name = "categorias_net";
            $filter_table_value_name = "cat";
        }
    } elsif ( $object eq "host" ) {
        $table1 = "host";
        $table2 = "custom_host_column_entries";
        $t1_id_name = "id";
        $t2_id_name = "host_id";

        if ( $filter eq "$lang_vars{loc_message}" ) {
            $t1_filter_value_name = "loc";
            $filter_table_name = "locations";
            $filter_table_value_name = "loc";
        } elsif ( $filter eq "$lang_vars{cat_message}" ){
            $t1_filter_value_name = "categoria";
            $filter_table_name = "categorias";
            $filter_table_value_name = "cat";
		}
    }

	my $ip_version_expr = "AND t1.ip_version='$ip_version'";

	my $expr = "";
	my $loc_client_id_expr = "";
	$loc_client_id_expr = "AND t3.client_id = $qclient_id" if $filter eq "$lang_vars{loc_message}";
    
    debug("SELECT t2.entry FROM $table2 t2, $table1 t1, $filter_table_name t3 WHERE t2.cc_id = $qcc_id $ip_version_expr $expr AND t2.${t2_id_name} = t1.${t1_id_name} $loc_client_id_expr  AND t3.id = t1.${filter_table_value_name} AND t3.${filter_table_value_name} = $qfilter_value AND t1.client_id = $qclient_id ORDER BY t2.entry");
    my $sth = $dbh->prepare("SELECT t2.entry FROM $table2 t2, $table1 t1, $filter_table_name t3 WHERE t2.cc_id = $qcc_id $ip_version_expr $expr AND t2.${t2_id_name} = t1.${t1_id_name} $loc_client_id_expr  AND t3.id = t1.${t1_filter_value_name} AND t3.${filter_table_value_name} = $qfilter_value AND t1.client_id = $qclient_id ORDER BY t2.entry")
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }

    $dbh->disconnect;

    return @values;
}


sub get_stat_dnssg_site_cat {
    my ( $self, $client_id, $vars_file, $object, $show_by, $cc_id, $filter, $filter_value, $ip_version ) = @_;

	my %lang_vars;
	%lang_vars = $self->_get_vars("$vars_file") if $vars_file;

    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qcc_id = $dbh->quote( $cc_id ) if $cc_id;
    my $qfilter = $dbh->quote( $filter ) if $filter;
    my $qfilter_value = $dbh->quote( $filter_value ) if $filter_value;
    my $qclient_id = $dbh->quote( $client_id );

    my ( $table1, $t1_id_name, $t1_value_name, $table2, $t2_id_name, $t2_value_name, $filter_expr, $filter_table_expr, $filter_table_name, $filter_table_value_name, $t1_filter_value_name, $table4, $t4_id_name);
    $table1=$t1_id_name=$t1_value_name=$table2=$t2_id_name=$t2_value_name=$filter_expr=$filter_table_expr=$t1_filter_value_name="";

    if ( $object eq "network" ) {
        $table1 = "net";
        $table4 = "custom_net_column_entries";
        $t1_id_name = "red_num";
        $t2_id_name = "net_id";
        $t4_id_name = "net_id";

        if ( $filter eq "$lang_vars{loc_message}" ) {
            $t1_value_name = "loc";
            $filter_table_name = "locations";
            $filter_table_value_name = "loc";
        } elsif ( $filter eq "$lang_vars{cat_message}" ){
            $t1_value_name = "categoria";
            $filter_table_name = "categorias_net";
            $filter_table_value_name = "cat";
        }
    } elsif ( $object eq "host" ) {
        $table1 = "host";
        $table4 = "custom_host_column_entries";
        $t1_id_name = "id";
        $t2_id_name = "host_id";
        $t4_id_name = "host_id";

        if ( $filter eq "$lang_vars{loc_message}" ) {
            $t1_value_name = "loc";
            $filter_table_name = "locations";
            $filter_table_value_name = "loc";
        } elsif ( $filter eq "$lang_vars{cat_message}" ){
            $t1_value_name = "categoria";
            $filter_table_name = "categorias";
            $filter_table_value_name = "cat";
        }
    }

	my $ip_version_expr = "AND t1.ip_version='$ip_version'";
    
	$filter_table_expr = ",${filter_table_name} t3" if $filter_value;
    $filter_expr = "AND t4.net_id IN ( SELECT t1.${t1_id_name} WHERE t1.${t1_value_name} = t3.id AND t3.${filter_table_value_name} = $qfilter_value)" if $filter_value;

    debug("SELECT t2.name FROM dns_server_group t2, $table1 t1, $table4 t4 $filter_table_expr WHERE t2.id = t4.entry $ip_version_expr AND t4.${t4_id_name} = t1.${t1_id_name} AND t4.cc_id = $qcc_id $filter_expr AND t1.client_id = $qclient_id ORDER BY t2.name");
    my $sth = $dbh->prepare("SELECT t2.name FROM dns_server_group t2, $table1 t1, $table4 t4 $filter_table_expr WHERE t2.id = t4.entry $ip_version_expr AND t4.${t4_id_name} = t1.${t1_id_name} AND t4.cc_id = $qcc_id $filter_expr AND t1.client_id = $qclient_id ORDER BY t2.name")
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }

    $dbh->disconnect;

    return @values;
}


sub get_stat_dnssg_cc_select {
    my ( $self, $client_id, $vars_file, $object, $filter_cc_id, $filter_value, $ip_version ) = @_;

	my %lang_vars;
	%lang_vars = $self->_get_vars("$vars_file") if $vars_file;

    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qfilter_cc_id = $dbh->quote( $filter_cc_id ) if $filter_cc_id;
    my $qfilter_value = $dbh->quote( $filter_value ) if $filter_value;
    my $qclient_id = $dbh->quote( $client_id );

    my ( $table1, $t1_id_name, $t1_value_name, $table2, $t2_id_name, $t2_value_name, $filter_expr, $filter_table_expr, $filter_table_name, $filter_table_value_name, $t1_filter_value_name, $table4, $t4_id_name);
    $table1=$t1_id_name=$t1_value_name=$table2=$t2_id_name=$t2_value_name=$filter_expr=$filter_table_expr=$t1_filter_value_name="";

    if ( $object eq "network" ) {
        $table1 = "net";
        $table4 = "custom_net_column_entries";
        $t1_id_name = "red_num";
        $t2_id_name = "net_id";
        $t4_id_name = "net_id";
    } elsif ( $object eq "host" ) {
        $table1 = "host";
        $table4 = "custom_host_column_entries";
        $t1_id_name = "id";
        $t2_id_name = "host_id";
        $t4_id_name = "host_id";

    }

	my $ip_version_expr = "AND t1.ip_version='$ip_version'";

	my $cc_filter_expr = "AND t1.${t1_id_name} IN ( SELECT t4.$t4_id_name from $table4 t4 WHERE cc_id = $qfilter_cc_id AND t4.entry = $qfilter_value )" if $filter_cc_id;

    debug("SELECT t2.name FROM dns_server_group t2, $table1 t1, $table4 t4 WHERE t2.id = t4.entry AND t4.${t4_id_name} = t1.${t1_id_name} $ip_version_expr $cc_filter_expr AND t1.client_id = $qclient_id ORDER BY t2.name");
    my $sth = $dbh->prepare("SELECT t2.name FROM dns_server_group t2, $table1 t1, $table4 t4 WHERE t2.id = t4.entry AND t4.${t4_id_name} = t1.${t1_id_name} $ip_version_expr $cc_filter_expr AND t1.client_id = $qclient_id ORDER BY t2.name")
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }

    $dbh->disconnect;

    return @values;
}


sub get_stat_dnssg_tag {
    my ( $self, $client_id, $vars_file, $object, $filter_value, $ip_version ) = @_;

	my %lang_vars;
	%lang_vars = $self->_get_vars("$vars_file") if $vars_file;

    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qfilter_value = $dbh->quote( $filter_value ) if $filter_value;
    my $qclient_id = $dbh->quote( $client_id );

    my ( $table1, $t1_id_name, $t1_value_name, $table2, $t2_id_name, $t2_value_name, $filter_expr, $filter_table_expr, $filter_table_name, $filter_table_value_name, $t1_filter_value_name, $table4, $t4_id_name, $tag_table, $tag_table_id);
    $table1=$t1_id_name=$t1_value_name=$table2=$t2_id_name=$t2_value_name=$filter_expr=$filter_table_expr=$t1_filter_value_name="";

    if ( $object eq "network" ) {
        $table1 = "net";
        $table4 = "custom_net_column_entries";
        $t1_id_name = "red_num";
        $t2_id_name = "net_id";
        $t4_id_name = "net_id";
		$tag_table = "tag_entries_network";
		$tag_table_id = "net_id";
    } elsif ( $object eq "host" ) {
        $table1 = "host";
        $table4 = "custom_host_column_entries";
        $t1_id_name = "id";
        $t2_id_name = "host_id";
        $t4_id_name = "host_id";
		$tag_table = "tag_entries_host";
		$tag_table_id = "host_id";
    }

	my $ip_version_expr = "AND t1.ip_version='$ip_version'";

    debug("SELECT t2.name FROM dns_server_group t2, $table1 t1, $table4 t4 WHERE t2.id = t4.entry $ip_version_expr AND t1.${t1_id_name} = t4.${t4_id_name} AND t1.${t1_id_name} IN ( SELECT $tag_table_id FROM $tag_table tte WHERE tag_id = ( SELECT tt.id FROM tag tt, $tag_table tte WHERE tte.tag_id=tt.id AND tt.client_id=$qclient_id AND tt.name=$qfilter_value limit 1)) AND t1.client_id = $qclient_id ORDER BY t2.name");
    my $sth = $dbh->prepare("SELECT t2.name FROM dns_server_group t2, $table1 t1, $table4 t4 WHERE t2.id = t4.entry $ip_version_expr AND t1.${t1_id_name} = t4.${t4_id_name} AND t1.${t1_id_name} IN ( SELECT $tag_table_id FROM $tag_table tte WHERE tag_id = ( SELECT tt.id FROM tag tt, $tag_table tte WHERE tte.tag_id=tt.id AND tt.client_id=$qclient_id AND tt.name=$qfilter_value limit 1)) AND t1.client_id = $qclient_id ORDER BY t2.name")
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }

    $dbh->disconnect;

    return @values;
}

sub get_stat_tag_site_cat {
    my ( $self, $client_id, $vars_file, $object, $filter, $filter_value, $ip_version ) = @_;

	my %lang_vars;
	%lang_vars = $self->_get_vars("$vars_file") if $vars_file;
   
    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qfilter_value = $dbh->quote( $filter_value ) if $filter_value;
    my $qclient_id = $dbh->quote( $client_id );
   
    my ( $table1, $t1_id_name, $t1_value_name, $table2, $t2_id_name, $t2_value_name, $filter_expr, $filter_table_expr, $filter_table_name, $filter_table_value_name, $t1_filter_value_name, $table4, $t4_id_name);
    $table1=$t1_id_name=$t1_value_name=$table2=$t2_id_name=$t2_value_name=$filter_expr=$filter_table_expr=$t1_filter_value_name="";
   
    if ( $object eq "network" ) {
        $table1 = "net";
		$table4 = "tag_entries_network";
        $t1_id_name = "red_num";
		$t4_id_name = "net_id";

        if ( $filter eq "$lang_vars{loc_message}" ) {
			$t1_value_name = "loc";
            $filter_table_name = "locations";
            $filter_table_value_name = "loc";
        } elsif ( $filter eq "$lang_vars{cat_message}" ){
			$t1_value_name = "categoria";
            $filter_table_name = "categorias_net";
            $filter_table_value_name = "cat";
        }
    } elsif ( $object eq "host" ) {
        $table1 = "host";
		$table4 = "tag_entries_host";
        $t1_id_name = "id";
		$t4_id_name = "host_id";

        if ( $filter eq "$lang_vars{loc_message}" ) {
			$t1_value_name = "loc";
            $filter_table_name = "locations";
            $filter_table_value_name = "loc";
        } elsif ( $filter eq "$lang_vars{cat_message}" ){
			$t1_value_name = "categoria";
            $filter_table_name = "categorias";
            $filter_table_value_name = "cat";
        }
    }

	my $ip_version_expr = "AND t1.ip_version='$ip_version'";

	$filter_table_expr = ",${filter_table_name} t3" if $filter_value;
    $filter_expr = "AND t4.${t4_id_name} = ( SELECT t1.${t1_id_name} WHERE t1.${t1_value_name} = t3.id AND t3.${filter_table_value_name} = $qfilter_value)" if $filter_value;

    debug("SELECT t2.name FROM tag t2, $table1 t1, $table4 t4 $filter_table_expr WHERE t2.id = t4.tag_id AND t2.client_id=$qclient_id AND t4.${t4_id_name} = t1.${t1_id_name} $ip_version_expr $filter_expr AND t1.client_id = $qclient_id ORDER BY t2.name");
    my $sth = $dbh->prepare("SELECT t2.name FROM tag t2, $table1 t1, $table4 t4 $filter_table_expr WHERE t2.id = t4.tag_id AND t2.client_id=$qclient_id AND t4.${t4_id_name} = t1.${t1_id_name} $ip_version_expr $filter_expr AND t1.client_id = $qclient_id ORDER BY t2.name")
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
   
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
   
    $dbh->disconnect;
   
    return @values;
}

sub get_stat_tag_dnssg {
    my ( $self, $client_id, $vars_file, $object, $filter_cc_id, $filter_value, $ip_version ) = @_;

	my %lang_vars;
	%lang_vars = $self->_get_vars("$vars_file") if $vars_file;
   
    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qfilter_cc_id = $dbh->quote( $filter_cc_id ) if $filter_cc_id;
    my $qfilter_value = $dbh->quote( $filter_value ) if $filter_value;
    my $qclient_id = $dbh->quote( $client_id );
   
    my ( $table1, $t1_id_name, $t1_value_name, $table2, $t2_id_name, $t2_value_name, $filter_expr, $filter_table_expr, $filter_table_name, $filter_table_value_name, $t1_filter_value_name, $table4, $t4_id_name, $filter_id_name);
    $table1=$t1_id_name=$t1_value_name=$table2=$t2_id_name=$t2_value_name=$filter_expr=$filter_table_expr=$t1_filter_value_name="";
   
    if ( $object eq "network" ) {
        $table1 = "net";
        $table2 = "custom_net_column_entries";
		$table4 = "tag_entries_network";
        $filter_table_name = "custom_net_column_entries";
		$t1_id_name = "red_num";
		$t4_id_name = "net_id";
		$filter_id_name = "net_id";
    } elsif ( $object eq "host" ) {
        $table1 = "host";
        $table2 = "custom_host_column_entries";
		$table4 = "tag_entries_host";
        $filter_table_name = "custom_host_column_entries";
		$t1_id_name = "id";
		$t4_id_name = "host_id";
		$filter_id_name = "host_id";
    }

	my $ip_version_expr = "AND t1.ip_version='$ip_version'";

	my $cc_filter_expr = "AND t1.${t1_id_name} IN ( SELECT $filter_id_name FROM $filter_table_name t3 WHERE cc_id = $qfilter_cc_id AND t3.entry  = ( SELECT td.id FROM dns_server_group td WHERE name=$qfilter_value limit 1 ))" if $filter_cc_id;

    debug("SELECT t2.name FROM tag t2, $table1 t1, $table4 t4 WHERE t2.id = t4.tag_id AND t2.client_id=$qclient_id AND t4.${t4_id_name} = t1.${t1_id_name} $cc_filter_expr AND t1.client_id = $qclient_id ORDER BY t2.name");
    my $sth = $dbh->prepare("SELECT t2.name FROM tag t2, $table1 t1, $table4 t4 WHERE t2.id = t4.tag_id AND t2.client_id=$qclient_id AND t4.${t4_id_name} = t1.${t1_id_name} $cc_filter_expr AND t1.client_id = $qclient_id ORDER BY t2.name")
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
   
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
   
    $dbh->disconnect;
   
    return @values;
}

sub get_stat_tag_cc_select {
    my ( $self, $client_id, $vars_file, $object, $filter_cc_id, $filter_value, $ip_version ) = @_;

	my %lang_vars;
	%lang_vars = $self->_get_vars("$vars_file") if $vars_file;
   
    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qfilter_cc_id = $dbh->quote( $filter_cc_id ) if $filter_cc_id;
    my $qfilter_value = $dbh->quote( $filter_value ) if $filter_value;
    my $qclient_id = $dbh->quote( $client_id );
   
    my ( $table1, $t1_id_name, $t1_value_name, $table2, $t2_id_name, $t2_value_name, $filter_expr, $filter_table_expr, $filter_table_name, $filter_table_value_name, $t1_filter_value_name, $table4, $t4_id_name);
    $table1=$t1_id_name=$t1_value_name=$table2=$t2_id_name=$t2_value_name=$filter_expr=$filter_table_expr=$t1_filter_value_name="";
   
    if ( $object eq "network" ) {
        $table1 = "net";
        $table2 = "custom_net_column_entries";
		$table4 = "tag_entries_network";
		$t1_id_name = "red_num";
		$t2_id_name = "net_id";
		$t4_id_name = "net_id";
    } elsif ( $object eq "host" ) {
        $table1 = "host";
        $table2 = "custom_host_column_entries";
		$table4 = "tag_entries_host";
		$t1_id_name = "id";
		$t2_id_name = "host_id";
		$t4_id_name = "host_id";
    }

	my $ip_version_expr = "AND t1.ip_version='$ip_version'";

	my $cc_filter_expr = "AND t1.${t1_id_name} IN ( SELECT $t2_id_name from $table2 t2 WHERE cc_id = $qfilter_cc_id AND t2.entry = $qfilter_value )" if $filter_cc_id;

    debug("SELECT t2.name FROM tag t2, $table1 t1, $table4 t4 WHERE t2.id = t4.tag_id AND t2.client_id=$qclient_id AND t4.${t4_id_name} = t1.${t1_id_name} $ip_version_expr $cc_filter_expr AND t1.client_id = $qclient_id ORDER BY t2.name");
    my $sth = $dbh->prepare("SELECT t2.name FROM tag t2, $table1 t1, $table4 t4 WHERE t2.id = t4.tag_id AND t2.client_id=$qclient_id AND t4.${t4_id_name} = t1.${t1_id_name} $ip_version_expr $cc_filter_expr AND t1.client_id = $qclient_id ORDER BY t2.name")
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
   
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
   
    $dbh->disconnect;
   
    return @values;
}

sub get_stat_cc_select_cc_select_generic {
    my ( $self, $client_id, $vars_file, $object, $cc_id, $filter_cc_id, $filter_value, $ip_version, $filter ) = @_;

	my %lang_vars;
	%lang_vars = $self->_get_vars("$vars_file") if $vars_file;
   
    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qcc_id = $dbh->quote( $cc_id ) if $cc_id;
    my $qfilter_cc_id = $dbh->quote( $filter_cc_id ) if $filter_cc_id;
    my $qfilter_value = $dbh->quote( $filter_value ) if $filter_value;
    my $qclient_id = $dbh->quote( $client_id );
   
    my ( $table1, $t1_id_name, $t1_value_name, $table2, $t2_id_name, $t2_value_name, $filter_expr, $filter_table_expr, $filter_table_name, $filter_table_value_name, $t1_filter_value_name, $filter_table_id_name);
    $table1=$t1_id_name=$t1_value_name=$table2=$t2_id_name=$t2_value_name=$filter_expr=$filter_table_expr=$t1_filter_value_name="";
   
    if ( $object eq "network" ) {
        $table1 = "net";
		$table2 = "custom_net_column_entries";
		if ( $filter eq "Tag" ) {
			$filter_table_name = "tag_entries_network";
			$filter_table_id_name = "net_id";
		}
        $t1_id_name = "red_num";
        $t2_id_name = "net_id";
    } elsif ( $object eq "host" ) {
        $table1 = "host";
        $table2 = "custom_host_column_entries";
		if ( $filter eq "Tag" ) {
			$filter_table_name = "tag_entries_host";
			$filter_table_id_name = "host_id";
		}
        $t1_id_name = "id";
        $t2_id_name = "host_id";
    }

	my $ip_version_expr = "AND t1.ip_version='$ip_version'";
	my $cc_filter_expr = "";
	if ( $filter eq "Tag" ) {
    	$cc_filter_expr = "AND t1.${t1_id_name} IN ( SELECT $filter_table_id_name from $filter_table_name t2 WHERE t2.tag_id = ( SELECT tt.id FROM tag tt, tag_entries_network tte WHERE tte.tag_id=tt.id AND tt.name=$qfilter_value AND tt.client_id=$qclient_id limit 1))";
	} elsif ( $filter eq "DNSSG" ) {
		$cc_filter_expr = "AND t1.${t1_id_name} IN ( SELECT $t2_id_name from $table2 t2 WHERE t2.cc_id = '23' AND t2.entry = ( SELECT id FROM dns_server_group d WHERE name='localhost' AND d.client_id=1))";
	} elsif ( $filter_cc_id ) {
	    $cc_filter_expr = "AND t1.${t1_id_name} IN ( SELECT $t2_id_name from $table2 t2 WHERE t2.cc_id = $qfilter_cc_id AND t2.entry = $qfilter_value )";
	}

    debug("SELECT t2.entry FROM $table2 t2, $table1 t1 WHERE t2.cc_id = $qcc_id AND t2.${t2_id_name} = t1.${t1_id_name} $ip_version_expr $cc_filter_expr AND t1.client_id = $qclient_id ORDER BY t2.entry");
    my $sth = $dbh->prepare("SELECT t2.entry FROM $table2 t2, $table1 t1 WHERE t2.cc_id = $qcc_id AND t2.${t2_id_name} = t1.${t1_id_name} $ip_version_expr $cc_filter_expr AND t1.client_id = $qclient_id ORDER BY t2.entry")
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
   
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
   
    $dbh->disconnect;
   
    return @values;
}





sub get_stat_net_cats {
my ( $self, $client_id, $ip_version ) = @_;
	my @values_config;
	my $ip_ref;
    my $dbh = $self->_mysql_connection();
	my $qclient_id = $dbh->quote( $client_id );
	my $ip_version_expr = "" if ! $ip_version;
	$ip_version_expr = "AND ip_version = '" . $ip_version . "'" if $ip_version;
    my $sth = $dbh->prepare("SELECT c.cat FROM categorias_net c, net n WHERE c.id = n.categoria AND n.client_id = $qclient_id $ip_version_expr ORDER BY n.categoria"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_config, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_config;
}

sub get_stat_net_locs {
	my ( $self, $client_id,$ip_version ) = @_;
	my @values_config;
	my $ip_ref;
	my $ip_version_expr = "" if ! $ip_version;
	$ip_version_expr = "AND ip_version = '" . $ip_version . "'" if $ip_version;
    my $dbh = $self->_mysql_connection();
	my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT l.loc FROM locations l, net n WHERE l.id = n.loc AND n.client_id = $qclient_id $ip_version_expr ORDER BY n.loc") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_config, [ @$ip_ref ];
    }
    $dbh->disconnect;

    return @values_config;
}

sub get_stat_host_num_cat {
my ( $self,$client_id, $cat ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qcat = $dbh->quote( $cat );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT n.red_num FROM net n, categorias_net c WHERE c.id = n.categoria AND c.cat = $qcat AND n.client_id = $qclient_id order by red_num;") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

sub get_stat_host_num_cat_red_num {
my ( $self,$client_id, $cat, $ip_version ) = @_;
my $count;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qcat = $dbh->quote( $cat );
my $qip_version = $dbh->quote( $ip_version );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT COUNT(*) FROM host WHERE red_num IN ( SELECT n.red_num FROM net n, categorias_net c WHERE c.id = n.categoria AND c.cat = $qcat AND n.client_id = $qclient_id order by red_num )  AND hostname != 'NULL' AND hostname != '' AND client_id = $qclient_id AND ip_version = $qip_version"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $count = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $count;
}

sub get_stat_host_num_loc_red_num {
my ( $self,$client_id, $loc, $ip_version ) = @_;
my $count;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qloc = $dbh->quote( $loc );
my $qip_version = $dbh->quote( $ip_version );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT COUNT(*) FROM host WHERE red_num IN ( SELECT n.red_num FROM locations l, net n WHERE l.id = n.loc AND l.loc = $qloc AND n.client_id = $qclient_id ORDER BY red_num )  AND hostname != 'NULL' AND hostname != '' AND client_id = $qclient_id AND ip_version = $qip_version"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $count = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $count;
}


sub count_stat_host_num {
my ( $self,$client_id, $red_num,$ip_version ) = @_;
my $count;
my $ip_version_expr = "" if ! $ip_version;
$ip_version_expr = "AND ip_version = '" . $ip_version . "'" if $ip_version;

    my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT COUNT(*) FROM host WHERE red_num = $qred_num AND hostname != 'NULL' AND hostname != '' AND client_id = $qclient_id $ip_version_expr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $count = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $count;
}

sub get_stat_host_num_loc {
my ( $self,$client_id, $loc, $ip_version ) = @_;
my @values;
my $ip_ref;
my $ip_version_expr = "" if ! $ip_version;
$ip_version_expr = "AND ip_version = '" . $ip_version . "'" if $ip_version;

    my $dbh = $self->_mysql_connection();
my $qloc = $dbh->quote( $loc );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT n.red_num FROM net n, locations l WHERE l.id = n.loc AND l.loc = $qloc AND ( l.client_id = $qclient_id OR l.client_id='9999' ) $ip_version_expr order by red_num") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}


sub get_stat_host_cats {
my ( $self, $client_id, $ip_version ) = @_;
my @values_config;
my $ip_ref;
my $ip_version_expr = "" if ! $ip_version;
$ip_version_expr = "AND ip_version = '" . $ip_version . "'" if $ip_version;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT c.cat FROM categorias c, host h WHERE c.id = h.categoria AND h.client_id = $qclient_id $ip_version_expr ORDER BY h.categoria") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_config, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_config;
}

sub get_stat_host_locs {
my ( $self, $client_id, $ip_version ) = @_;
my @values_config;
my $ip_ref;
my $ip_version_expr = "" if ! $ip_version;
$ip_version_expr = "AND ip_version = '" . $ip_version . "'" if $ip_version;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT l.loc FROM locations l, host h WHERE l.id = h.loc AND h.client_id = $qclient_id $ip_version_expr ORDER BY h.loc") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_config, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values_config;
}

sub get_stat_host_vendors {
my ( $self, $client_id ) = @_;
my @values_config;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT entry FROM custom_host_column_entries WHERE cc_id=( SELECT id FROM custom_host_columns WHERE name='vendor' ) AND client_id = $qclient_id ORDER BY entry") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
push @values_config, [ @$ip_ref ];
}
$dbh->disconnect;
return @values_config;
}

sub get_stat_host_all_red {
my ( $self,$client_id, $filter, $ip_version ) = @_;
my @values;
my $ip_ref;
my @config = $self->get_config("$client_id");
my $smallest_bm = $config[0]->[0] || "22";
my $smallest_bmv6 = $config[0]->[7] || "64";

    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qsmallest_bm = $dbh->quote( $smallest_bm );
my $qsmallest_bmv6 = $dbh->quote( $smallest_bmv6 );
my $ip_version_expr = "" if ! $ip_version;
if ( $ip_version eq "v4" ) {
    $ip_version_expr = "AND h.ip_version = 'v4' AND h.red_num=n.red_num";
} elsif ( $ip_version eq "v6" ) {
    $ip_version_expr = "AND h.ip_version = 'v6' AND h.red_num=n.red_num";
} else {
    $ip_version_expr = "AND (( h.ip_version = 'v4' ) OR ( h.ip_version = 'v6')) AND h.red_num=n.red_num";
}
my $sth;
if ( $filter ) {
#		$sth = $dbh->prepare("SELECT DISTINCT h.red_num FROM host h, net n, locations l, categorias_net cn WHERE ( INET_NTOA(h.ip) LIKE \"%$filter%\" OR n.descr LIKE \"%$filter%\" OR cn.cat LIKE \"%$filter%\" OR l.loc LIKE \"%$filter%\" OR n.comentario LIKE \"%$filter%\" ) AND n.loc = l.id AND h.red_num = n.red_num AND cn.id = n.categoria AND h.hostname != '' AND h.hostname != 'NULL' AND n.client_id = $qclient_id $ip_version_expr ORDER BY red_num")
    $sth = $dbh->prepare("SELECT h.red_num FROM host h, net n, locations l, categorias_net cn WHERE ( INET_NTOA(h.ip) LIKE \"%$filter%\" OR n.descr LIKE \"%$filter%\" OR cn.cat LIKE \"%$filter%\" OR l.loc LIKE \"%$filter%\" OR n.comentario LIKE \"%$filter%\" ) AND n.loc = l.id AND h.red_num = n.red_num AND cn.id = n.categoria AND h.hostname != '' AND h.hostname != 'NULL' AND n.client_id = $qclient_id $ip_version_expr ORDER BY red_num")
     or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} else {
#		$sth = $dbh->prepare("SELECT DISTINCT h.red_num FROM host h, net n WHERE h.hostname != '' AND h.hostname != 'NULL' AND h.client_id = $qclient_id $ip_version_expr ORDER BY red_num"
    $sth = $dbh->prepare("SELECT h.red_num FROM host h, net n WHERE h.hostname != '' AND h.hostname != 'NULL' AND h.client_id = $qclient_id $ip_version_expr AND n.rootnet = '0' ORDER BY red_num"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

sub get_stat_all_red_nums {
my ( $self,$client_id, $filter,$ip_version ) = @_;
my @values;
my $ip_ref;
my @config = $self->get_config("$client_id");
my $smallest_bm = $config[0]->[0] || "22";
my $smallest_bmv6 = $config[0]->[7] || "64";

    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qsmallest_bm = $dbh->quote( $smallest_bm );
my $qsmallest_bmv6 = $dbh->quote( $smallest_bmv6 );

my $ip_version_expr = "" if ! $ip_version;
if ( $ip_version eq "v4" ) {
    $ip_version_expr = "AND ip_version = 'v4' AND BM BETWEEN $qsmallest_bm AND '30'";
} elsif ( $ip_version eq "v6" ) {
    $ip_version_expr = "AND ip_version = 'v6' AND BM BETWEEN '64' AND '127'";
} else {
    $ip_version_expr = "AND (( ip_version = 'v4' AND BM BETWEEN $qsmallest_bm AND '30' ) OR ( h.ip_version = 'v6' AND BM BETWEEN '64' AND '127' ))";
}
my $sth;
if ( $filter ) {
    $sth = $dbh->prepare("SELECT red_num FROM net n, locations l, categorias_net cn WHERE ( red LIKE \"%$filter%\" OR n.descr LIKE \"%$filter%\" OR cn.cat LIKE \"%$filter%\" OR l.loc LIKE \"%$filter%\" OR n.comentario LIKE \"%$filter%\" ) AND n.rootnet = '0' AND n.loc = l.id AND cn.id = n.categoria AND n.client_id = $qclient_id $ip_version_expr ORDER BY red_num") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} else {
    $sth = $dbh->prepare("SELECT red_num FROM net WHERE rootnet = '0' AND client_id = $qclient_id $ip_version_expr ORDER BY red_num"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

sub get_ranges_stat_hash {
my ( $self, $client_id ) = @_;
my %ranges;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT r.id,r.start_ip,r.end_ip,r.comentario,rt.range_type,r.red_num,n.red,n.BM,INET_NTOA(h.ip),n.ip_version FROM host h, ranges r, range_type rt, net n WHERE r.range_type = rt.id AND h.range_id = r.id AND r.red_num = n.red_num AND n.rootnet = '0' order by INET_NTOA(h.ip)") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $range_id = $ip_ref->{id};
    my $start_ip = $ip_ref->{start_ip};
    my $end_ip = $ip_ref->{end_ip};
    my $comentario = $ip_ref->{comentario};
    my $range_type = $ip_ref->{range_type};
    my $red_num = $ip_ref->{red_num};
    my $red_ip = $ip_ref->{red};
    my $BM = $ip_ref->{BM};
    my $ip_version = $ip_ref->{ip_version};
    push @{$ranges{$range_id}},"$start_ip","$end_ip","$comentario","$range_type","$red_num","$red_ip","$BM","$ip_version";
    }
    $dbh->disconnect;
    return %ranges;
}

sub get_stat_host_all_range {
my ( $self, $client_id, $ip_version ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $ip_version_expr = "" if ! $ip_version;
$ip_version_expr = "AND h.ip_version = '" . $ip_version . "'" if $ip_version;
my $sth;
$sth = $dbh->prepare("SELECT h.range_id,r.start_ip,r.end_ip,r.comentario,rt.range_type FROM host h, ranges r, range_type rt WHERE r.range_type = rt.id AND h.range_id = r.id AND h.hostname != '' AND h.hostname != 'NULL' AND h.client_id = $qclient_id $ip_version_expr ORDER BY range_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

sub get_stat_all_range_nums {
my ( $self, $client_id, $ip_version ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $ip_version_expr = "" if ! $ip_version;
$ip_version_expr = "AND h.ip_version = '" . $ip_version . "'" if $ip_version;
my $sth;
$sth = $dbh->prepare("SELECT h.range_id FROM host h WHERE h.range_id != \"-1\" AND client_id = $qclient_id $ip_version_expr ORDER BY range_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

sub get_anz_hosts_bm_hash {
my ( $self, $client_id, $ip_version ) = @_;
my %bm;
if ( $ip_version eq "v4" ) {
    %bm = (
        8 => '16777216',
        9 => '8388608',
        10 => '4194304',
        11 => '2097152',
        12 => '1048576',
        13 => '524288',
        14 => '262144',
        15 => '131072',
        16 => '65536',
        17 => '32768',
        18 => '16384',
        19 => '8192',
        20 => '4096',
        21 => '2048',
        22 => '1024',
        23 => '512',
        24 => '256',
        25 => '128',
        26 => '64',
        27 => '32',
        28 => '16',
        29 => '8',
        30 => '4',
        31 => '1',
        32 => '1'
    );
} else {
    %bm = (
#			1 => '9,223,372,036,854,775,808',
#			2 => '4,611,686,018,427,387,904',
#			3 => '2,305,843,009,213,693,952',
#			4 => '1,152,921,504,606,846,976',
#			5 => '576,460,752,303,423,488',
#			6 => '288,230,376,151,711,744',
#			7 => '144,115,188,075,855,872',
        8 => '72,057,594,037,927,936',
        9 => '36,028,797,018,963,968',
        10 => '18,014,398,509,481,984',
        11 => '9,007,199,254,740,992',
        12 => '4,503,599,627,370,496',
        13 => '2,251,799,813,685,248',
        14 => '1,125,899,906,842,624',
        15 => '562,949,953,421,312',
        16 => '281,474,976,710,656',
        17 => '140,737,488,355,328',
        18 => '70,368,744,177,664',
        19 => '35,184,372,088,832',
        20 => '17,592,186,044,416',
        21 => '8,796,093,022,208',
        22 => '4,398,046,511,104',
        23 => '2,199,023,255,552',
        24 => '1,099,511,627,776',
        25 => '549,755,813,888',
        26 => '274,877,906,944',
        27 => '137,438,953,472',
        28 => '68,719,476,736',
        29 => '34,359,738,368',
        30 => '17,179,869,184',
        31 => '8,589,934,592',
        32 => '4,294,967,296',
        33 => '2,147,483,648',
        34 => '1,073,741,824',
        35 => '536,870,912',
        36 => '268,435,456',
        37 => '134,217,728',
        38 => '67,108,864',
        39 => '33,554,432',
        40 => '16,777,216',
        41 => '8,388,608',
        42 => '4,194,304',
        43 => '2,097,152',
        44 => '1,048,576',
        45 => '524,288',
        46 => '262,144',
        47 => '131,072',
        48 => '65,536',
        49 => '32,768',
        50 => '16,384',
        51 => '8,192',
        52 => '4,096',
        53 => '2,048',
        54 => '1,024',
        55 => '512',
        56 => '256',
        57 => '128',
        58 => '64',
        59 => '32',
        60 => '16',
        61 => '8',
        62 => '4',
        63 => '2',
# hosts
        64 => '18,446,744,073,709,551,616',
        65 => '9,223,372,036,854,775,808',
        66 => '4,611,686,018,427,387,904',
        67 => '2,305,843,009,213,693,952',
        68 => '1,152,921,504,606,846,976',
        69 => '576,460,752,303,423,488',
        70 => '288,230,376,151,711,744',
        71 => '144,115,188,075,855,872',
        72 => '72,057,594,037,927,936',
        73 => '36,028,797,018,963,968',
        74 => '18,014,398,509,481,984',
        75 => '9,007,199,254,740,992',
        76 => '4,503,599,627,370,496',
        77 => '2,251,799,813,685,248',
        78 => '1,125,899,906,842,624',
        79 => '562,949,953,421,312',
        80 => '281,474,976,710,656',
        81 => '140,737,488,355,328',
        82 => '70,368,744,177,664',
        83 => '35,184,372,088,832',
        84 => '17,592,186,044,416',
        85 => '8,796,093,022,208',
        86 => '4,398,046,511,104',
        87 => '2,199,023,255,552',
        88 => '1,099,511,627,776',
        89 => '549,755,813,888',
        90 => '274,877,906,944',
        91 => '137,438,953,472',
        92 => '68,719,476,736',
        93 => '34,359,738,368',
        94 => '17,179,869,184',
        95 => '8,589,934,592',
        96 => '4,294,967,296',
        97 => '2,147,483,648',
        98 => '1,073,741,824',
        99 => '536,870,912',
        100 => '268,435,456',
        101 => '134,217,728',
        102 => '67,108,864',
        103 => '33,554,432',
        104 => '16,777,216',
        105 => '8,388,608',
        106 => '4,194,304',
        107 => '2,097,152',
        108 => '1,048,576',
        109 => '524,288',
        110 => '262,144',
        111 => '131,072',
        112 => '65,536',
        113 => '32,768',
        114 => '16,384',
        115 => '8,192',
        116 => '4,096',
        117 => '2,048',
        118 => '1,024',
        119 => '512',
        120 => '256',
        121 => '128',
        122 => '64',
        123 => '32',
        124 => '16',
        125 => '8',
        126 => '4',
        127 => '2',
        128 => '1'
    );
}
return %bm;
}

sub get_bm_to_netmask {
my ( $self ) = @_;
my %bm = (
    32 => '255.255.255.255',
    31 => '255.255.255.254',
    30 => '255.255.255.252',
    29 => '255.255.255.248',
    28 => '255.255.255.240',
    27 => '255.255.255.224',
    26 => '255.255.255.192',
    25 => '255.255.255.128',
    24 => '255.255.255.0',
    23 => '255.255.254.0',
    22 => '255.255.252.0',
    21 => '255.255.248.0',
    20 => '255.255.240.0',
    19 => '255.255.224.0',
    18 => '255.255.192.0',
    17 => '255.255.128.0',
    16 => '255.255.0.0',
    15 => '255.254.0.0',
    14 => '255.252.0.0',
    13 => '255.248.0.0',
    12 => '255.240.0.0',
    11 => '255.224.0.0',
    10 => '255.192.0.0',
    9 => '255.128.0.0',
    8 => '255.0.0.0'
);
return %bm;
}

sub get_red_num_from_red_ip {
my ( $self,$client_id, $red_from ) = @_;
my $red_num;
    my $dbh = $self->_mysql_connection();
my $qred_from = $dbh->quote( $red_from );
my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT red_num FROM net WHERE red=$qred_from AND client_id=$qclient_id");
    my $sth = $dbh->prepare("SELECT red_num FROM net WHERE red=$qred_from AND rootnet = '0' AND client_id=$qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $red_num = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $red_num;
}

sub check_module {
my ( $self, $module ) = @_;
my $loaded;
eval("use $module");
if (! $@ ) {
    $loaded="1";
} else {
    $loaded="0";
}
return $loaded;
}



sub get_vlan_import_devices {
my ( $self, $client_id, $categoria,$ip_version ) = @_;
my @values;
my $ip_ref;
my $ip_expr;
if ( $ip_version eq "v4" ) {
    $ip_expr="INET_NTOA(h.ip)";
} else {
    $ip_expr="h.ip";
}
    my $dbh = $self->_mysql_connection();
my $qcategoria = $dbh->quote( $categoria );
my $qip_version = $dbh->quote( $ip_version );
my $qclient_id = $dbh->quote( $client_id );
my $sth;
$sth = $dbh->prepare("SELECT $ip_expr, h.hostname, id FROM host h WHERE h.categoria=$qcategoria AND h.client_id = $qclient_id AND h.ip_version=$qip_version ORDER BY h.ip") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

sub get_cat_id_from_cat_name {
my ( $self,$client_id, $cat_name ) = @_;
my $id;
    my $dbh = $self->_mysql_connection();
my $qcat_name = $dbh->quote( $cat_name );
    my $sth = $dbh->prepare("SELECT id FROM categorias WHERE cat=$qcat_name");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $id;
}




# CUSTOM NET COLUMNS

sub insert_custom_column {
my ( $self,$client_id, $id, $custom_column,$column_type_id, $vars_file, $select_type, $select_items, $mandatory ) = @_;

my %lang_vars;
%lang_vars = $self->_get_vars("$vars_file") if $vars_file;

my $dbh = $self->_mysql_connection();
my $qcolumn_type_id = $dbh->quote( $column_type_id );
my $qcustom_column = $dbh->quote( $custom_column );
my $qid = $dbh->quote( $id );
my $qmandatory = $dbh->quote( $mandatory );
my $qclient_id = $dbh->quote( $client_id );
debug("INSERT INTO custom_net_columns (id,name,client_id,column_type_id,mandatory) VALUES ($qid,$qcustom_column,$qclient_id,$qcolumn_type_id,$qmandatory)");
my $sth = $dbh->prepare("INSERT INTO custom_net_columns (id,name,client_id,column_type_id,mandatory) VALUES ($qid,$qcustom_column,$qclient_id,$qcolumn_type_id,$qmandatory)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

if ( $select_type eq "$lang_vars{select_message}" || $select_type eq "$lang_vars{multiple_select_message}" ) {
    my $type = "s";
    $type = "m" if $select_type eq "$lang_vars{multiple_select_message}";
    my $qtype = $dbh->quote( $type );
    my $qselect_items = $dbh->quote( $select_items );
    $select_items=$self->remove_whitespace_se("$select_items");
    debug("INSERT INTO custom_column_select (type,items,cc_id) VALUES ($qtype,$qselect_items,$qid)");
    $sth = $dbh->prepare("INSERT INTO custom_column_select (type,items,cc_id) VALUES ($qtype,$qselect_items,$qid)");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}

$sth->finish();
$dbh->disconnect;
}


sub delete_custom_column {
my ( $self,$client_id, $cc_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qcc_id = $dbh->quote( $cc_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM custom_net_columns WHERE id = $qcc_id AND ( client_id = $qclient_id OR client_id = '9999' )"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("DELETE FROM custom_net_column_entries WHERE cc_id = $qcc_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("DELETE FROM custom_column_select WHERE cc_id = $qcc_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_custom_net_column_entry {
my ( $self,$client_id, $entry ) = @_;

my $error;
my $format=$self->{'format'};
my $dbh = $self->_mysql_connection();
my $qentry = $dbh->quote( $entry );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("DELETE FROM custom_net_column_entries WHERE entry = $qentry AND ( client_id = $qclient_id OR client_id = '9999')") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->finish();
$dbh->disconnect;
}

sub delete_custom_net_column_entry_modred {
my ( $self,$client_id, $cc_id, $red_num, $entry ) = @_;

my $format=$self->{'format'};
my $error;
    my $dbh = $self->_mysql_connection();
my $qentry = $dbh->quote( $entry );
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM custom_net_column_entries WHERE entry = $qentry AND net_id = $qred_num AND ( client_id = $qclient_id OR client_id = '9999' )") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->finish();
    $dbh->disconnect;
}

sub delete_custom_column_entry {
my ( $self,$client_id, $red_num ) = @_;

my $format=$self->{'format'};
my $error;
    my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE host_id IN ( SELECT id FROM host WHERE red_num = $qred_num AND client_id = $qclient_id )") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}


    $sth = $dbh->prepare("DELETE FROM custom_net_column_entries WHERE net_id = $qred_num"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_custom_column_from_name {
my ( $self,$client_id, $cc_name ) = @_;
    my $dbh = $self->_mysql_connection();
my $qcc_name = $dbh->quote( $cc_name );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM custom_net_columns WHERE name = $qcc_name"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_custom_host_column_entry_between {
my ( $self,$client_id, $first_ip_int, $last_ip_int, $ip_version ) = @_;

my $format=$self->{'format'};
my $error;
    my $dbh = $self->_mysql_connection();
my $qfirst_ip_int = $dbh->quote( $first_ip_int );
my $qlast_ip_int = $dbh->quote( $last_ip_int );
my $qclient_id = $dbh->quote( $client_id );

my $match="CAST(ip AS BINARY) BETWEEN $qfirst_ip_int AND $qlast_ip_int";

my $sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE host_id IN ( SELECT id FROM host WHERE $match AND client_id = $qclient_id )") or $error="Can not execute statement:<p>$DBI::errstr"; 

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->finish();
    $dbh->disconnect;
}

sub get_last_custom_column_id {
my ( $self, $client_id ) = @_;
my $cc_id;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT id FROM custom_net_columns ORDER BY (id+0) desc
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $cc_id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $cc_id;
}

sub get_custom_column_name {
my ( $self, $client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
    my $sth = $dbh->prepare("SELECT name FROM custom_net_columns WHERE id=$qid
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $name = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $name;
}

sub get_custom_column_entry {
my ( $self, $client_id, $red_num, $cc_name ) = @_;
my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qcc_name = $dbh->quote( $cc_name );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT cce.entry from custom_net_column_entries cce WHERE cce.net_id = $qred_num AND cce.cc_id = ( SELECT id FROM custom_net_columns WHERE name = $qcc_name AND (client_id = $qclient_id OR client_id='9999'))
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $entry = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $entry;
}

sub get_custom_column_client_id {
my ( $self, $client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
    my $sth = $dbh->prepare("SELECT client_id FROM custom_net_columns WHERE id=$qid
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $val = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $val;
}

sub get_custom_columns {
my ( $self, $client_id ) = @_;

my $format=$self->{'format'};
my $error;

my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth;
$sth = $dbh->prepare("SELECT name,id,client_id,column_type_id,mandatory FROM custom_net_columns WHERE client_id = $qclient_id OR client_id = '9999' ") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }

    $dbh->disconnect;
    return @values;
}

sub get_custom_column_ids {
my ( $self, $client_id ) = @_;

my $format=$self->{'format'};
my $error;

my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth;
$sth = $dbh->prepare("SELECT id FROM custom_net_columns WHERE client_id = $qclient_id OR client_id = '9999'") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }

    $dbh->disconnect;
    return @values;
}

sub get_custom_columns_from_net_id_hash {
my ( $self,$client_id,$red_num ) = @_;

my $format=$self->{'format'};
my $error;

my %cc_values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT c.id,c.name,cn.entry FROM custom_net_columns c, custom_net_column_entries cn WHERE net_id = $qred_num AND cn.cc_id = c.id AND (c.client_id = $qclient_id OR c.client_id = '9999')") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $name = $ip_ref->{name};
    my $entry = $ip_ref->{entry};
    push @{$cc_values{$id}},"$name","$entry";
    }

    $sth->finish();
    $dbh->disconnect;
    return %cc_values;
}

sub get_custom_columns_hash_client_all {
my ( $self,$client_id ) = @_;
my %cc_values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id,name FROM custom_net_columns WHERE client_id = $qclient_id OR client_id = '9999'") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    $cc_values{"$ip_ref->{name}"} = $ip_ref->{id};
    }
    $dbh->disconnect;
    return %cc_values;
}

sub get_custom_columns_id_from_net_id_hash {
my ( $self,$client_id,$red_num ) = @_;
my %cc_values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id,name FROM custom_net_columns WHERE ( client_id = $qclient_id OR client_id = '9999')") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    $cc_values{"$ip_ref->{name}"} = $ip_ref->{id};
    }
    $dbh->disconnect;
    return %cc_values;
}

sub get_custom_columns_name_from_net_id_hash {
my ( $self,$client_id,$red_num ) = @_;
my %cc_values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id,name FROM custom_net_columns WHERE ( client_id = $qclient_id OR client_id = '9999')") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    $cc_values{"$ip_ref->{id}"} = $ip_ref->{name};
    }
    $dbh->disconnect;
    return %cc_values;
}

sub print_mod_column_form {
#	my ( $self, $vars_file,  $server_proto, $base_uri, $cc_values, $object ) = @_;
my ( $self, $client_id, $vars_file, $cc_values, $object ) = @_;


my %lang_vars = $self->_get_vars("$vars_file") if $vars_file;

my @cc_values = @$cc_values;
my %ce_values;
if ( $object eq "network" || $object eq "host" ) {
    %ce_values = $self->get_predef_column_hash("$client_id","$object");
}


#	my $j = 0;
#	my $mandatory;
#	foreach (@cc_values) {
#		if ( $ce_values{$cc_values[$j]->[0]} ) {
#			$j++;
#			next;
#		}
#		if ( $object eq "network" || $object eq "host" ) {
#			$mandatory = $cc_values[$j]->[4] || 0;
#		} else {
#			$mandatory = $cc_values[$j]->[2] || 0;
#		}
#		last;
#	}
#	my $mandatory_checked = "";
#	$mandatory_checked = "checked" if $mandatory == 1;
#

print "<table border=\"0\" cellpadding=\"7\">\n";
print "<tr><td align=\"right\">$lang_vars{name_message}</td><td>";
print "<select class='custom-select custom-select-sm' style='width: 12em' name=\"cc_id\" size=\"1\" onchange=\"changeMandatoryMod_" . $object . "(this.value);\">\n";
print "<option></option>";

my $j=0;
foreach (@cc_values) {
    if ( $ce_values{$cc_values[$j]->[0]} ) {
        $j++;
        next;
    }
    print "<option value=\"$cc_values[$j]->[1]\">$cc_values[$j]->[0]</option>";
    $j++;
}
print "</select></td>\n";

print "<tr><td align=\"right\">$lang_vars{new_name_message}</td><td><input type=\"text\" class='form-control form-control-sm m-1' style='width: 12em'  size=\"15\" name=\"new_custom_column_name\" value=\"\" maxlength=\"15\"></td></tr>\n";
print "<tr><td align=\"left\" colspan=\"2\">$lang_vars{mandatory_message}  <input type=\"checkbox\" id=\"mandatory_custom_mod_" . $object . "\" name=\"mandatory_custom_mod_" . $object . "\" value=\"yes\"></td></tr>\n";
print "<tr><td><input name=\"manage_type\" type=\"hidden\" value=\"mod_cc_name_" . $object . "\"><input type=\"submit\" class=\"btn\" value=\"$lang_vars{update_message}\" name=\"B1\"></td><td></td></tr>\n";
print "</table>\n";
print "</form>\n";

}

sub create_custom_column_asso_js {
my ( $self,$cc_values, $object ) = @_;

my $function_name = "changeMandatoryMod_" . $object;
my $field_name = "mandatory_custom_mod_" . $object;
my $array_name = "mandatory_asso_" . $object;
my $array_name_id = $array_name . "[id]";

my @cc_values = @$cc_values;
my $js_object_mandatory_net = 'var ' . $array_name . '= {';
my $j = 0;
foreach (@cc_values) {
    my $id = $cc_values[$j]->[1];
    my $mandatory;
    if ( $object eq "network" || $object eq "host" ) {
        $mandatory = $cc_values[$j]->[4] || 0;
    } else {
        $mandatory = $cc_values[$j]->[2] || 0;
    }
    $js_object_mandatory_net .= $id . ":" . $mandatory . ",";
    $j++;
}
$js_object_mandatory_net =~ s/,$//;
$js_object_mandatory_net .= '};';


print <<EOF;

<script type="text/javascript">
<!--

$js_object_mandatory_net;

function $function_name(id){
if ( $array_name_id == 1 ) {
document.getElementById('$field_name').checked = true;
} else {
document.getElementById('$field_name').checked = false;
}
}
-->
</script>
EOF

}

sub insert_custom_column_value_red {
my ( $self,$client_id, $cc_id, $net_id, $entry ) = @_;

my $ip_ref;
my @values;
my $format=$self->{'format'};
my $error;
my $dbh = $self->_mysql_connection();
my $qcc_id = $dbh->quote( $cc_id );
my $qnet_id = $dbh->quote( $net_id );
my $qentry = $dbh->quote( $entry );
my $qclient_id = $dbh->quote( $client_id );


my $sth = $dbh->prepare("SELECT cc_id FROM custom_net_column_entries WHERE cc_id=$qcc_id AND net_id=$qnet_id AND entry=$qentry") or die "Can not execute statement:<p>$DBI::errstr";
$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";
while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
}
if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}


if ( ! $values[0] ) {
    $sth = $dbh->prepare("INSERT INTO custom_net_column_entries (cc_id,net_id,entry,client_id) VALUES ($qcc_id,$qnet_id,$qentry,$qclient_id)") or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }
}

$sth->finish();
$dbh->disconnect;
}

sub update_custom_column_value_red {
my ( $self,$client_id, $cc_id, $net_id, $entry ) = @_;
my $dbh = $self->_mysql_connection();
my $qcc_id = $dbh->quote( $cc_id );
my $qnet_id = $dbh->quote( $net_id );
my $qentry = $dbh->quote( $entry );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("UPDATE custom_net_column_entries SET entry=$qentry WHERE cc_id=$qcc_id AND net_id=$qnet_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_or_insert_custom_column_value_red {
my ( $self,$client_id, $cc_id, $net_id, $entry ) = @_;
my $format=$self->{'format'};
my $error;

my $dbh = $self->_mysql_connection();
my $qcc_id = $dbh->quote( $cc_id );
my $qnet_id = $dbh->quote( $net_id );
my $qentry = $dbh->quote( $entry );
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT entry FROM custom_net_column_entries WHERE cc_id=$qcc_id AND net_id=$qnet_id")  or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}


my $entry_found = $sth->fetchrow_array;

if ( $entry_found ) {
    $sth = $dbh->prepare("UPDATE custom_net_column_entries SET entry=$qentry WHERE cc_id=$qcc_id AND net_id=$qnet_id") or $error="Can not execute statement:<p>$DBI::errstr";
} else {
    $sth = $dbh->prepare("INSERT INTO custom_net_column_entries (cc_id,net_id,entry,client_id) VALUES ($qcc_id,$qnet_id,$qentry,$qclient_id)") or $error="Can not execute statement:<p>$DBI::errstr";
}

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->finish();
$dbh->disconnect;
}


sub get_custom_column_values_red {
my ( $self, $client_id, $client_independent ) = @_;
my $format=$self->{'format'};
my $error;
my %redes;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

$client_independent="no" if ! $client_independent;
my $client_expr="WHERE client_id = $qclient_id";
if ( $client_independent eq "yes" ) {
    $client_expr="";
}

my $sth = $dbh->prepare("SELECT cc_id,net_id,entry FROM custom_net_column_entries $client_expr") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $cc_id = $ip_ref->{cc_id};
        my $net_id = $ip_ref->{net_id};
        my $entry = $ip_ref->{entry};
        $redes{"${cc_id}_${net_id}"}="$entry";
    }
    $dbh->disconnect;
    return %redes;
}

sub change_custom_column_entry_cc_id {
    my ( $self, $client_id, $old_id, $new_id ) = @_;
my $val;
    my $dbh = $self->_mysql_connection();
my $qold_id = $dbh->quote( $old_id );
my $qnew_id = $dbh->quote( $new_id );
    my $sth = $dbh->prepare("UPDATE custom_net_column_entries SET cc_id=$qnew_id WHERE cc_id=$qold_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub get_custom_column_ids_from_name {
my ( $self, $client_id, $column_name ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qcolumn_name = $dbh->quote( $column_name );
my $sth;
$sth = $dbh->prepare("SELECT id FROM custom_net_columns WHERE name=$qcolumn_name") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

#sub get_custom_column_values_red_hash {
#	my ( $self, $client_id ) = @_;
#	my %redes;
#	my $ip_ref;
#        my $dbh = $self->_mysql_connection();
#	my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare(" SELECT cnce.cc_id,cnce.net_id,cnce.entry, cnc.name FROM custom_net_column_entries cnce, custom_net_columns cnc WHERE cnce.cc_id = cnc.id AND cnce.client_id=$qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        while ( $ip_ref = $sth->fetchrow_hashref ) {
#		my $cc_id = $ip_ref->{cc_id};
#		my $net_id = $ip_ref->{net_id};
#		my $entry = $ip_ref->{entry};
#		my $name = $ip_ref->{name};
#		$redes{"${net_id}"}="$name","$entry","$cc_id";
#        }
#        $dbh->disconnect;
#        return %redes;
#}


##### PREDEF NET COLUMNS

sub get_predef_columns_all {
my ( $self, $client_id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth;
$sth = $dbh->prepare("SELECT DISTINCT pc.id,pc.name FROM predef_net_columns pc WHERE pc.id NOT IN ( SELECT DISTINCT cc.column_type_id FROM custom_net_columns cc WHERE client_id=$qclient_id OR client_id='9999')") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

#sub get_predef_columns_hash {
#	my ( $self, $client_id, $key ) = @_;
#
#    $key = "id" if ! $key;
#
#	my %values;
#	my $ip_ref;
#    my $dbh = $self->_mysql_connection();
#	my $qclient_id = $dbh->quote( $client_id );
#	my $sth;
#	$sth = $dbh->prepare("SELECT id, name from predef_net_columns") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#    while ( $ip_ref = $sth->fetchrow_hashref ) {
#		my $id = $ip_ref->{id};
#		my $name = $ip_ref->{name};
#        if ( $key eq "id" ) {
#            $values{$id}=$name;
#        } elsif ( $key eq "name" ) {
#            $values{$name}=$id;
#        }
#    }
#    $dbh->disconnect;
#    return %values;
#}

sub get_predef_column_name {
my ( $self, $client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
    my $sth = $dbh->prepare("SELECT name FROM predef_net_columns WHERE id=$qid
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $name = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $name;
}

sub get_custom_column_id_from_name {
my ( $self, $client_id, $name ) = @_;
    my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );
    my $sth = $dbh->prepare("SELECT id FROM custom_net_columns WHERE name=$qname
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $id;
}



sub print_custom_net_colums_form {
my ( $self, $client_id, $vars_file, $red_num, $ip_version, $mass_elements, $call_from ) = @_;

$red_num="" if ! $red_num;
$call_from = "" if ! $call_from;

my %lang_vars = $self->_get_vars("$vars_file");

my @custom_columns = $self->get_custom_columns("$client_id");
my %cc_value=$self->get_custom_columns_from_net_id_hash("$client_id","$red_num");
my %custom_colums_select = $self->get_custom_columns_select_hash("$client_id","network");


my $j=0;
my %cc_mandatory_check_hash;
foreach ( @custom_columns ) {
    my $column_name=$custom_columns[$j]->[0];
    my $mandatory=$custom_columns[$j]->[4];
    $cc_mandatory_check_hash{$column_name}++ if $mandatory;
    $j++;
}

my $no_mandatory = 0;
if ( $ENV{'SCRIPT_NAME'} =~ /search/ ) {
    $no_mandatory = 1;
}

my ($form, $form_elements, @item_order, %items, $opt_name, $opt_value);

my $n=0;
$j=0;
my $required;
foreach my $cc_ele(@custom_columns) {
    my $cc_id = $custom_columns[$n]->[1];
    my ($cc_name, $m_id);
    if ( $call_from eq "ip_searchred_form" ) {
        $m_id = "cc_id_${cc_id}";
    } else {
        $m_id = "custom_${n}_value";
    }
    $cc_name = $custom_columns[$n]->[0];
    my $cc_entry = $cc_value{$cc_id}[1] || "";
    $required = "";
    $required = "required" if exists $cc_mandatory_check_hash{$cc_name} && $no_mandatory == 0;
    my $m_cc_name = "custom_${n}_name";
    if ( $mass_elements ) { 
        if ( ! defined($mass_elements->{$cc_name})) {
            $n++;
            next;
        }
        $m_id = "${cc_name}_value";
        $m_cc_name = $cc_name;
    }
    if ( $cc_name ) {
        if ( exists $custom_colums_select{$cc_id} ) {
            # CC column is a select

            my $select_values = $custom_colums_select{$cc_id}->[2];
            my $selected = "";

            $j = 0;
            @item_order = ();
            push @item_order, "";
            foreach my $opt(@$select_values) {
                $opt = $self->remove_whitespace_se("$opt");
                push @item_order, $opt;
                $j++;
            }

            $form_elements .= GipTemplate::create_form_element_select(
                name => $cc_name,
                item_order => \@item_order,
                selected_value => $cc_entry,
                id => $m_id,
                width => "10em",
                required => $required,
            );

            if ( $call_from ne "ip_searchred_form" ) {
                $form_elements .= GipTemplate::create_form_element_hidden(
                    value => $cc_name,
                    name => $m_cc_name,
                );

                $form_elements .= GipTemplate::create_form_element_hidden(
                    value => $cc_id,
                    name => "custom_${n}_id",
                );
            }

            $n++;
            next;
        }

        if ( $cc_name eq "vlan" ) {
            my @vlans=$self->get_vlans("$client_id");
            $j=0;
            if ( ! $vlans[0] ) {

                $form_elements .= GipTemplate::create_form_element_comment(
                    label => $lang_vars{vlan_message},
                    comment => "$lang_vars{no_vlans_message}",
#						id => "custom_${n}_value",
                    id => $m_id,
                );

            } else {

                $j = 0;
                @item_order = ();
                push @item_order, "";
                foreach my $opt(@vlans) {
                    $opt_name = "$vlans[$j]->[1] - $vlans[$j]->[2]";
                    push @item_order, $opt_name;
                    $j++;
                }

                my $size = 6;
                $size = 3 if $j <= 3;

                $form_elements .= GipTemplate::create_form_element_select(
                    name => $cc_name,
                    item_order => \@item_order,
                    selected_value => $cc_entry,
#						id => "custom_${n}_value",
                    id => $m_id,
                    size => 6,
                    width => "20em",
                );

                if ( $call_from ne "ip_searchred_form" ) {
                    $form_elements .= GipTemplate::create_form_element_hidden(
                        name => $m_cc_name,
                        value => $cc_name,
                    );

                    $form_elements .= GipTemplate::create_form_element_hidden(
                        name => "custom_${n}_id",
                        value => $cc_id,
                    );
                }
            
            }

        } elsif ( $cc_name eq "SNMPGroup" ) {
            my @snmp_groups=$self->get_snmp_groups("$client_id");

            $j=0;
            if ( ! $snmp_groups[0] ) {

                $form_elements .= GipTemplate::create_form_element_comment(
                    label => "SNMPGroup",
                    comment => "$lang_vars{no_snmp_groups_message}",
#						id => "custom_${n}_value",
                    id => $m_id,
                );

            } else {

                $j = 0;
                @item_order = ();
                push @item_order, "";
                foreach my $opt(@snmp_groups) {
                    $opt_name = $snmp_groups[$j]->[1];
                    push @item_order, $opt_name;
                    $j++;
                }

                $form_elements .= GipTemplate::create_form_element_select(
                    name => $cc_name,
                    item_order => \@item_order,
                    selected_value => $cc_entry,
                    id => $m_id,
                    width => "10em",
                );


                if ( $call_from ne "ip_searchred_form" ) {
                    $form_elements .= GipTemplate::create_form_element_hidden(
                        name => $m_cc_name,
                        value => $cc_name,
                    );

                    $form_elements .= GipTemplate::create_form_element_hidden(
                        name => "custom_${n}_id",
                        value => $cc_id,
                    );
                }
            }

        } elsif ( $cc_name eq "DNSSG" ) {
            my @dns_server_group=$self->get_dns_server_group("$client_id");
            $j=0;
            if ( ! $dns_server_group[0] ) {

                $form_elements .= GipTemplate::create_form_element_comment(
                    label => "DNSSG",
                    comment => "$lang_vars{no_dns_server_group_message}",
#						id => "custom_${n}_value",
                    id => $m_id,
                );

            } else {

                $j = 0;
                @item_order = ();
                %items = ();
                push @item_order, "";
                foreach my $opt(@dns_server_group) {
                    $opt_name = $dns_server_group[$j]->[1];
                    my $id = $dns_server_group[$j]->[0];
                    push @item_order, $opt_name;
                    $items{$opt_name} = $id;
                    $j++;
                }

                $form_elements .= GipTemplate::create_form_element_select(
                    name => $cc_name,
                    items => \%items,
                    item_order => \@item_order,
                    selected_value => $cc_entry,
#                        id => "custom_${n}_value",
                    id => $m_id,
                    width => "10em",
                );


                if ( $call_from ne "ip_searchred_form" ) {
                    $form_elements .= GipTemplate::create_form_element_hidden(
                        name => $m_cc_name,
                        value => $cc_name,
                    );

                    $form_elements .= GipTemplate::create_form_element_hidden(
                        name => "custom_${n}_id",
                        value => $cc_id,
                    );
                }
            }

        } elsif ( $cc_name eq "usage" ) {
            # ignore usage column in forms
            $n++;
            next;
        } elsif ( $cc_name eq "DNSZone" ) {
            my $entry_type = "A";
            $entry_type = "AAAA" if $ip_version eq "v6";
            my @dns_zones=$self->get_dns_zones("$client_id","","","$entry_type");
            $j=0;
            if ( ! $dns_zones[0] ) {

                $form_elements .= GipTemplate::create_form_element_comment(
                    label => "DNSZone",
                    comment => "$lang_vars{no_zone_message}",
#						id => "custom_${n}_value",
                    id => $m_id,
                );
            } else {

                $j = 0;
                @item_order = ();
                push @item_order, "";
                foreach my $opt(@dns_zones) {
                    $opt_name = $dns_zones[$j]->[1];
                    push @item_order, $opt_name;
                    $j++;
                }

                $form_elements .= GipTemplate::create_form_element_select(
                    name => $cc_name,
                    item_order => \@item_order,
                    selected_value => $cc_entry,
                    id => $m_id,
                    width => "10em",
                );


                if ( $call_from ne "ip_searchred_form" ) {
                    $form_elements .= GipTemplate::create_form_element_hidden(
                        name => $m_cc_name,
                        value => $cc_name,
                    );

                    $form_elements .= GipTemplate::create_form_element_hidden(
                        name => "custom_${n}_id",
                        value => $cc_id,
                    );
                }
            } 

        } elsif ( $cc_name eq "DNSPTRZone" ) {
            my @dns_zones=$self->get_dns_zones("$client_id","","","PTR");
            $j=0;
            if ( ! $dns_zones[0] ) {

                $form_elements .= GipTemplate::create_form_element_comment(
                    label => "DNSPTRZone",
                    comment => "$lang_vars{no_dns_ptr_zone_defined_messsage}",
#						id => "custom_${n}_value",
                    id => $m_id,
                );

            } else {

                $j = 0;
                @item_order = ();
                push @item_order, "";
                foreach my $opt(@dns_zones) {
                    $opt_name = $dns_zones[$j]->[1];
                    push @item_order, $opt_name;
                    $j++;
                }

                $form_elements .= GipTemplate::create_form_element_select(
                    name => $cc_name,
                    item_order => \@item_order,
                    selected_value => $cc_entry,
                    id => $m_id,
                    width => "10em",
                );


                if ( $call_from ne "ip_searchred_form" ) {
                    $form_elements .= GipTemplate::create_form_element_hidden(
                        name => $m_cc_name,
                        value => $cc_name,
                    );

                    $form_elements .= GipTemplate::create_form_element_hidden(
                        name => "custom_${n}_id",
                        value => $cc_id,
                    );
                }
            } 

        } elsif ( $cc_name eq "Fav" ) {
            my $fav_checked="";
            $fav_checked="checked" if $cc_entry;

            $form_elements .= GipTemplate::create_form_element_checkbox(
                label => $cc_name,
                value => "yes",
                id => $m_id,
                checked => $fav_checked,
            );

            if ( $call_from ne "ip_searchred_form" ) {
                $form_elements .= GipTemplate::create_form_element_hidden(
                    name => $m_cc_name,
                    value => $cc_name,
                );

                $form_elements .= GipTemplate::create_form_element_hidden(
                    name => "custom_${n}_id",
                    value => $cc_id,
                );
            }

        } elsif ( $cc_name eq "Tag" ) {
            my @values = $self->get_tag("$client_id","$vars_file");
            if ( ! $values[0] ) {

                $form_elements .= GipTemplate::create_form_element_comment(
                    label => "Tag",
                    comment => "$lang_vars{no_tags_message}",
                    id => "tag",
                );

            } else {
                my $form_elements_tag = $self->print_tag_form("$client_id","$vars_file","$red_num","network");
                $form_elements .= $form_elements_tag;
            }

        } elsif ( $cc_name eq "ScanAZone" ) {
            my $zt = "A";
            $zt = "AAAA" if $ip_version eq "v6"; 
            my @values = $self->get_dns_zones("$client_id","","","$zt");
            if ( ! $values[0] ) {

                $form_elements .= GipTemplate::create_form_element_comment(
                    label => "ScanAZone",
                    comment => "$lang_vars{no_scanazone_message}",
                    id => "ScanAZone",
                );

            } else {
                my $form_elements_scanazone = $self->print_network_scan_zones("$client_id","$red_num","A","ScanAZone","scanazone", \@values);
                $form_elements .= $form_elements_scanazone;
            }

        } elsif ( $cc_name eq "ScanPTRZone" ) {
            my @values = $self->get_dns_zones("$client_id","","","PTR");
            if ( ! $values[0] ) {

                $form_elements .= GipTemplate::create_form_element_comment(
                    label => "ScanPTRZone",
                    comment => "$lang_vars{no_scanptrzone_message}",
                    id => "PTRZone",
                );

            } else {
                my $form_elements_scanptrzone = $self->print_network_scan_zones("$client_id","$red_num","PTR","ScanPTRZone", "scanptrzone", \@values);
my ( $self, $client_id, $id, $type, $name, $select_id, $values, $selected_value_arg) = @_;
                $form_elements .= $form_elements_scanptrzone;
            }

        } else {
            $required = "";
            $required = "required" if exists $cc_mandatory_check_hash{$cc_name} && $no_mandatory == 0;
            $form_elements .= GipTemplate::create_form_element_text(
                label => $cc_name,
                value => $cc_entry,
                id => $m_id,
                maxlength => 500,
                required => $required,
            );

            if ( $call_from ne "ip_searchred_form" ) {
                $form_elements .= GipTemplate::create_form_element_hidden(
                    name => $m_cc_name,
                    value => $cc_name,
                );

                $form_elements .= GipTemplate::create_form_element_hidden(
                    name => "custom_${n}_id",
                    value => $cc_id,
                );
            }
        }
    }
    $n++;
}

return $form_elements;
}


#### CUSTOM HOST COLUMNS

sub insert_custom_host_column {
my ( $self,$client_id, $id, $custom_column,$column_type_id, $vars_file, $select_type, $select_items, $mandatory ) = @_;

my %lang_vars;
%lang_vars = $self->_get_vars("$vars_file") if $vars_file;

$mandatory = "0" if ! $mandatory;
$select_type = "" if ! $select_type;
$select_items = "" if ! $select_items;

my $dbh = $self->_mysql_connection();
my $qcolumn_type_id = $dbh->quote( $column_type_id );
my $qcustom_column = $dbh->quote( $custom_column );
my $qid = $dbh->quote( $id );
my $qmandatory = $dbh->quote( $mandatory );
my $qclient_id = $dbh->quote( $client_id );
debug("INSERT INTO custom_host_columns (id,name,client_id,column_type_id,mandatory) VALUES ($qid,$qcustom_column,$qclient_id,$qcolumn_type_id,$qmandatory)");
my $sth = $dbh->prepare("INSERT INTO custom_host_columns (id,name,client_id,column_type_id,mandatory) VALUES ($qid,$qcustom_column,$qclient_id,$qcolumn_type_id,$qmandatory)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

if ( $select_type eq "$lang_vars{select_message}" || $select_type eq "$lang_vars{multiple_select_message}" ) {
    my $type = "s";
    $type = "m" if $select_type eq "$lang_vars{multiple_select_message}";
    my $qtype = $dbh->quote( $type );
    my $qselect_items = $dbh->quote( $select_items );
    $select_items=$self->remove_whitespace_se("$select_items");
    debug("INSERT INTO custom_host_column_select (type,items,cc_id) VALUES ($qtype,$qselect_items,$qid)");
    $sth = $dbh->prepare("INSERT INTO custom_host_column_select (type,items,cc_id) VALUES ($qtype,$qselect_items,$qid)");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
$sth->finish();
$dbh->disconnect;
}

sub get_custom_host_columns {
my ( $self, $client_id ) = @_;

my $format=$self->{'format'};
my $error="";

my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth;
debug("SELECT cc.name,cc.id,cc.client_id,pc.id,cc.mandatory FROM custom_host_columns cc, predef_host_columns pc WHERE cc.column_type_id = pc.id AND (client_id = $qclient_id OR client_id = '9999') ORDER BY cc.id");
$sth = $dbh->prepare("SELECT cc.name,cc.id,cc.client_id,pc.id,cc.mandatory FROM custom_host_columns cc, predef_host_columns pc WHERE cc.column_type_id = pc.id AND (client_id = $qclient_id OR client_id = '9999') ORDER BY cc.id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;

return @values;
}

sub get_predef_host_column_name {
my ( $self, $client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
    my $sth = $dbh->prepare("SELECT name FROM predef_host_columns WHERE id=$qid
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $name = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $name;
}

sub get_predef_host_column_id {
my ( $self, $client_id, $name ) = @_;
my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );
    my $sth = $dbh->prepare("SELECT id FROM predef_host_columns WHERE name=$qname
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $id;
}


sub get_host_hash_hash {
my ( $self, $client_id, $red_num ) = @_;

my $format=$self->{'format'};
my $error;
    my $dbh = $self->_mysql_connection();
my $ip_ref;
my %values;
my $qclient_id = $dbh->quote( $client_id );

my $qred_num;
my $red_num_expr="";
if ( $red_num ) {
    $qred_num = $dbh->quote( $red_num );
    $red_num_expr="AND host.red_num = $qred_num";
}

my $sth = $dbh->prepare("SELECT DISTINCT cce.host_id,cc.column_type_id,cce.entry FROM custom_host_column_entries cce INNER JOIN custom_host_columns cc INNER JOIN host ON cce.cc_id = cc.id and cce.host_id = host.id WHERE cce.client_id = $qclient_id $red_num_expr order  by cc.column_type_id;
                     ") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $host_id = $ip_ref->{host_id};
    my $column_type_id = $ip_ref->{column_type_id};
    my $entry = $ip_ref->{entry};
    $values{$host_id}{$column_type_id}=$entry;
}
my $val=\%values;
    $sth->finish();
    $dbh->disconnect;
    return \%values;
}

sub get_predef_host_column_all_hash {
my ( $self, $client_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $ip_ref;
my %values;
    my $sth = $dbh->prepare("SELECT id,name FROM predef_host_columns WHERE id != '-1'
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $name = $ip_ref->{name};
    push @{$values{$name}},"$id";
    }
    $sth->finish();
    $dbh->disconnect;
    return %values;
}

sub get_predef_host_columns_all {
my ( $self, $client_id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth;
$sth = $dbh->prepare("select distinct pc.id,pc.name FROM predef_host_columns pc WHERE pc.id NOT IN ( SELECT cc.column_type_id FROM custom_host_columns cc WHERE client_id=$qclient_id OR client_id='9999')") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

sub get_custom_host_columns_from_net_id_hash {
my ( $self,$client_id,$host_id ) = @_;

my $format=$self->{'format'};
my $error;
my %cc_values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qhost_id = $dbh->quote( $host_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT DISTINCT cce.cc_id,cce.entry,cc.name,cc.column_type_id FROM custom_host_column_entries cce, custom_host_columns cc WHERE  cce.cc_id = cc.id AND host_id = $host_id AND cce.client_id = $qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{cc_id};
    my $name = $ip_ref->{name};
    my $entry = $ip_ref->{entry};
    my $column_type_id = $ip_ref->{column_type_id};
    push @{$cc_values{$id}},"$name","$entry","$column_type_id";
    }
    $dbh->disconnect;
    return %cc_values;
}

sub get_custom_host_column_ids_from_name {
my ( $self, $client_id, $column_name ) = @_;
my $dbh = $self->_mysql_connection();
my @values;
my $ip_ref;
my $qcolumn_name = $dbh->quote( $column_name );
my $sth;
$sth = $dbh->prepare("SELECT id FROM custom_host_columns WHERE name=$qcolumn_name") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
return @values;
}

sub get_custom_host_column_id_from_name_client {
my ( $self, $client_id, $column_name ) = @_;
my $cc_id;
    my $dbh = $self->_mysql_connection();
my $qcolumn_name = $dbh->quote( $column_name );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id FROM custom_host_columns WHERE name=$qcolumn_name AND ( client_id = $qclient_id OR client_id = '9999' )
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $cc_id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $cc_id;
}

sub change_custom_host_column_entry_cc_id {
    my ( $self, $client_id, $old_id, $new_id ) = @_;
my $val;
    my $dbh = $self->_mysql_connection();
my $qold_id = $dbh->quote( $old_id );
my $qnew_id = $dbh->quote( $new_id );
    my $sth = $dbh->prepare("UPDATE custom_host_column_entries SET cc_id=$qnew_id WHERE cc_id=$qold_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub delete_custom_host_column_entry_from_rednum {
my ( $self,$client_id, $red_num ) = @_;
my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE host_id IN ( SELECT id FROM host WHERE red_num = $qred_num AND client_id = $qclient_id )"
            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth->finish();
$dbh->disconnect;
}

sub delete_custom_host_column_from_name {
my ( $self,$client_id, $cc_name ) = @_;
    my $dbh = $self->_mysql_connection();
my $qcc_name = $dbh->quote( $cc_name );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM custom_host_columns WHERE name = $qcc_name"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub get_last_custom_host_column_id {
my ( $self, $client_id ) = @_;
my $cc_id;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT id FROM custom_host_columns ORDER BY (id+0) desc
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $cc_id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;

$cc_id=0 if ! $cc_id;
    return $cc_id;
}

sub get_custom_host_column_name {
my ( $self, $client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
    my $sth = $dbh->prepare("SELECT name FROM custom_host_columns WHERE id=$qid
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $name = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $name;
}

sub get_custom_host_column_client_id {
my ( $self, $client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
    my $sth = $dbh->prepare("SELECT client_id FROM custom_host_columns WHERE id=$qid
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $val = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $val;
}

sub delete_custom_host_column {
my ( $self,$client_id, $cc_id ) = @_;
my $dbh = $self->_mysql_connection();
my $qcc_id = $dbh->quote( $cc_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("DELETE FROM custom_host_columns WHERE id = $qcc_id AND ( client_id = $qclient_id OR client_id = '9999' )"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE cc_id = $qcc_id"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth = $dbh->prepare("DELETE FROM custom_host_column_select WHERE cc_id = $qcc_id"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub get_custom_host_columns_hash_client_all {
my ( $self,$client_id ) = @_;
my %cc_values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id,name FROM custom_host_columns WHERE client_id = $qclient_id OR client_id = '9999'") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    $cc_values{"$ip_ref->{name}"} = $ip_ref->{id};
    }
    $dbh->disconnect;
    return %cc_values;
}

sub get_custom_host_columns_id_from_net_id_hash {
my ( $self,$client_id,$red_num ) = @_;
my %cc_values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id,name FROM custom_host_columns WHERE ( client_id = $qclient_id OR client_id = '9999')") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    $cc_values{"$ip_ref->{name}"} = $ip_ref->{id};
    }
    $dbh->disconnect;
    return %cc_values;
}

sub get_custom_host_column_entry {
my ( $self, $client_id, $host_id, $cc_name, $pc_id ) = @_;
my $dbh = $self->_mysql_connection();
my $qhost_id = $dbh->quote( $host_id );
my $qcc_name = $dbh->quote( $cc_name );
my $qpc_id = $dbh->quote( $pc_id );
my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT cce.cc_id,cce.entry from custom_host_column_entries cce, custom_host_columns cc, predef_host_columns pc WHERE cc.name=$qcc_name AND cce.host_id = $qhost_id AND cce.cc_id = cc.id AND cc.column_type_id= pc.id AND pc.id = $qpc_id AND cce.client_id = $qclient_id
    my $sth = $dbh->prepare("SELECT cce.entry from custom_host_column_entries cce, custom_host_columns cc, predef_host_columns pc WHERE cc.name=$qcc_name AND cce.host_id = $qhost_id AND cce.cc_id = cc.id AND cc.column_type_id= pc.id AND pc.id = $qpc_id AND cce.client_id = $qclient_id
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $entry = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $entry;
}

sub get_custom_host_column_entry_from_name {
my ( $self, $client_id, $host_id, $cc_name ) = @_;
my $dbh = $self->_mysql_connection();
my $qhost_id = $dbh->quote( $host_id );
my $qcc_name = $dbh->quote( $cc_name );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT cce.entry from custom_host_column_entries cce WHERE cce.host_id = $qhost_id AND cce.cc_id = ( SELECT id FROM custom_host_columns WHERE name = $qcc_name AND (client_id = $qclient_id OR client_id='9999'))
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $entry = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $entry;
}


sub get_custom_host_column_entry_complete {
my ( $self, $client_id, $host_id, $ce_id ) = @_;
my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qhost_id = $dbh->quote( $host_id );
my $qce_id = $dbh->quote( $ce_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("select distinct cce.entry,cce.cc_id from custom_host_column_entries cce WHERE cce.host_id = $qhost_id AND cce.cc_id = $qce_id AND cce.client_id = $qclient_id 
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;
    return \@values;
}

sub update_custom_host_column_value_host {
my ( $self,$client_id, $cc_id, $pc_id, $host_id, $entry ) = @_;
my $dbh = $self->_mysql_connection();
my $qcc_id = $dbh->quote( $cc_id );
my $qpc_id = $dbh->quote( $pc_id );
my $qhost_id = $dbh->quote( $host_id );
my $qentry = $dbh->quote( $entry );
my $qclient_id = $dbh->quote( $client_id );

if ( ! $entry ) {
    my $sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE cc_id=$qcc_id AND pc_id=$qpc_id AND host_id=$qhost_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;

    return;
}
my $sth = $dbh->prepare("UPDATE custom_host_column_entries SET cc_id=$qcc_id,entry=$qentry WHERE pc_id=$qpc_id AND host_id=$qhost_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_custom_host_column_value_host_modip {
my ( $self,$client_id, $cc_id, $pc_id, $host_id, $entry ) = @_;

my $format=$self->{'format'};
my $error;
my $dbh = $self->_mysql_connection();
my $qcc_id = $dbh->quote( $cc_id );
my $qpc_id = $dbh->quote( $pc_id );
my $qhost_id = $dbh->quote( $host_id );
my $qentry = $dbh->quote( $entry );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("UPDATE custom_host_column_entries SET entry=$qentry WHERE pc_id=$qpc_id AND host_id=$qhost_id AND cc_id=$qcc_id") or $error="Can not execute statement:<p>$DBI::errstr";;

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->finish();
    $dbh->disconnect;
}

sub insert_custom_host_column_value_host {
my ( $self,$client_id, $cc_id, $pc_id, $host_id, $entry ) = @_;

my $format=$self->{'format'};

my $error;
my $dbh = $self->_mysql_connection();
my $qcc_id = $dbh->quote( $cc_id );
my $qpc_id = $dbh->quote( $pc_id );
my $qhost_id = $dbh->quote( $host_id );
my $qentry = $dbh->quote( $entry );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("INSERT INTO custom_host_column_entries (cc_id,pc_id,host_id,entry,client_id) VALUES ($qcc_id,$pc_id,$qhost_id,$qentry,$qclient_id)"
        ) or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->finish();
$dbh->disconnect;
}

sub get_last_host_id {
my ( $self, $client_id ) = @_;
my $id;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT id FROM host ORDER BY (id+0) desc
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $id;
}

sub get_custom_host_column_ids {
my ( $self, $client_id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth;
$sth = $dbh->prepare("SELECT id,column_type_id FROM custom_host_columns WHERE client_id = $qclient_id OR client_id = '9999' ORDER BY id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

sub get_custom_host_column_values_host_hash {
my ( $self, $client_id, $red_num ) = @_;
my %redes;
my $ip_ref;
my $red_num_expr = "" if ! $red_num;
$red_num_expr = "AND host.red_num = '" . $red_num . "'" if $red_num;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT DISTINCT cce.cc_id,cce.host_id,cce.entry,pc.name,pc.id FROM custom_host_column_entries cce INNER JOIN predef_host_columns pc INNER JOIN custom_host_columns cc INNER JOIN host ON cc.column_type_id = pc.id AND cce.cc_id = cc.id AND cce.host_id = host.id WHERE cce.client_id = $qclient_id $red_num_expr ORDER BY pc.id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");	
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $cc_id = $ip_ref->{cc_id};
    my $host_id = $ip_ref->{host_id};
    my $entry = $ip_ref->{entry};
    my $name = $ip_ref->{name};
    push @{$redes{"${cc_id}_${host_id}"}},"$entry","$name";
    }
    $dbh->disconnect;
    return %redes;
}

sub delete_custom_host_column_entry {
my ( $self,$client_id, $host_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qhost_id = $dbh->quote( $host_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE host_id = $qhost_id AND client_id = $qclient_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_single_custom_host_column_entry {
my ( $self,$client_id, $host_id, $cc_entry_host, $pc_id, $cc_id ) = @_;

my $format=$self->{'format'};
my $error;
$cc_id="" if ! $cc_id;

$cc_entry_host = "" if ! $cc_entry_host;

my $dbh = $self->_mysql_connection();
my $qhost_id = $dbh->quote( $host_id );
my $qcc_entry_host = $dbh->quote( $cc_entry_host );
my $qpc_id = $dbh->quote( $pc_id );
my $qcc_id = $dbh->quote( $cc_id );
my $qclient_id = $dbh->quote( $client_id );

my $cc_id_expr="";
$cc_id_expr="AND cc_id=$qcc_id" if $cc_id;
my $sth;
if ( $cc_entry_host ) {
    $sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE host_id = $qhost_id AND entry = $qcc_entry_host AND pc_id = $qpc_id $cc_id_expr") or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }
} else {
    $sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE host_id = $qhost_id AND pc_id = $qpc_id $cc_id_expr") or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->finish();
$dbh->disconnect;
}


sub delete_single_custom_host_column_entry_all {
my ( $self,$client_id, $mass_update_host_ids, $pc_id ) = @_;

my @mass_update_host_ids=(); 
if ( $mass_update_host_ids =~ /_/ ) {
    @mass_update_host_ids=split("_",$mass_update_host_ids);
} else {
    $mass_update_host_ids[0]=$mass_update_host_ids;
}

    my $dbh = $self->_mysql_connection();
my $qpc_id = $dbh->quote( $pc_id );
my $qclient_id = $dbh->quote( $client_id );

my $sth;
foreach my $muhid ( @mass_update_host_ids ) {
    my $qmuhid = $dbh->quote( $muhid );
    if ( $muhid =~ /^\d{1,3}\.\d{1,3}/ ) {
        $sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE host_id = ( SELECT id FROM host WHERE INET_NTOA(ip)=$qmuhid AND ip_version='v4' ) AND pc_id=$qpc_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    } else {
#TEST TEST testen!!
        my $ip_int=$self->ip_to_int("$client_id","$muhid","v6");
        $sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE host_id = ( SELECT id FROM host WHERE ip=$ip_int AND ip_version='v6') AND pc_id=$qpc_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    }

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}

    $sth->finish();
    $dbh->disconnect;
}


sub get_used_vendor_array {
my ( $self, $client_id, $ip_version ) = @_;
my @values;
my $ip_version_expr = "" if ! $ip_version;
$ip_version_expr = "AND host.ip_version = '" . $ip_version . "'" if $ip_version;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT cce.entry FROM custom_host_column_entries cce JOIN host ON cce.host_id = host.id WHERE cce.pc_id = '1' AND (cce.client_id = $qclient_id OR cce.client_id = '9999') $ip_version_expr ORDER BY entry"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
return @values;
}


#### CLIENTS

sub get_last_client_id {
my ( $self, $client_id ) = @_;
my $id;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT id FROM clients ORDER BY (id+0) desc
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $id;
}

sub get_first_client_id {
my ( $self, $client_id ) = @_;
my $id;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT default_client_id FROM global_config
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $id;
}

sub insert_client {
my ( $self, $client ) = @_;
my $last_client_id=$self->get_last_client_id() || 0;
$last_client_id++;
    my $dbh = $self->_mysql_connection();
my $qlast_client_id = $dbh->quote( $last_client_id );
my $qclient = $dbh->quote( $client );
    my $sth = $dbh->prepare("INSERT INTO clients (id,client) VALUES ($qlast_client_id,$qclient)");
    $sth->execute() or croak $self->print_error("$client ($last_client_id)","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;

return $last_client_id;
}

sub insert_client_entry {
my ( $self, $client_id, $phone, $fax, $address, $comment, $contact_name_1, $contact_phone_1, $contact_cell_1, $contact_email_1, $contact_comment_1, $contact_name_2, $contact_phone_2, $contact_cell_2, $contact_email_2, $contact_comment_2, $contact_name_3, $contact_phone_3, $contact_cell_3, $contact_email_3, $contact_comment_3 ) = @_;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qphone = $dbh->quote( $phone );
my $qfax = $dbh->quote( $fax );
my $qcomment = $dbh->quote( $comment );
my $qaddress = $dbh->quote( $address );
my $qcontact_name_1 = $dbh->quote( $contact_name_1 );
my $qcontact_phone_1 = $dbh->quote( $contact_phone_1 );
my $qcontact_cell_1 = $dbh->quote( $contact_cell_1 );
my $qcontact_email_1 = $dbh->quote( $contact_email_1 );
my $qcontact_comment_1 = $dbh->quote( $contact_comment_1 );
my $qcontact_name_2 = $dbh->quote( $contact_name_2 );
my $qcontact_phone_2 = $dbh->quote( $contact_phone_2 );
my $qcontact_cell_2 = $dbh->quote( $contact_cell_2 );
my $qcontact_email_2 = $dbh->quote( $contact_email_2 );
my $qcontact_comment_2 = $dbh->quote( $contact_comment_2 );
my $qcontact_name_3 = $dbh->quote( $contact_name_3 );
my $qcontact_phone_3 = $dbh->quote( $contact_phone_3 );
my $qcontact_cell_3 = $dbh->quote( $contact_cell_3 );
my $qcontact_email_3 = $dbh->quote( $contact_email_3 );
my $qcontact_comment_3 = $dbh->quote( $contact_comment_3 );
    my $sth = $dbh->prepare("INSERT INTO client_entries (client_id,phone,fax,address,comment,contact_name_1,contact_phone_1,contact_cell_1,contact_email_1,contact_comment_1,contact_name_2,contact_phone_2,contact_cell_2,contact_email_2,contact_comment_2,contact_name_3,contact_phone_3,contact_cell_3,contact_email_3,contact_comment_3) VALUES ($qclient_id,$qphone,$qfax,$qaddress,$qcomment,$qcontact_name_1,$qcontact_phone_1,$qcontact_cell_1,$qcontact_email_1,$qcontact_comment_1,$qcontact_name_2,$qcontact_phone_2,$qcontact_cell_2,$qcontact_email_2,$qcontact_comment_2,$qcontact_name_3,$qcontact_phone_3,$qcontact_cell_3,$qcontact_email_3,$qcontact_comment_3)");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_client {
    my ( $self, $client_id, $id ) = @_;

    my @global_config = $self->get_global_config("1");

    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $qid = $dbh->quote( $id );

    my $sth = $dbh->prepare("delete from clients WHERE id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from client_entries WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from audit WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from audit_auto WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    my @locations = $self->get_loc_all("$client_id");
    foreach my $loc ( @locations ) {
        my $loc_id = $loc->[0];
        my $qloc_id = $dbh->quote( $loc_id );
        $sth = $dbh->prepare("delete from custom_site_column_entries WHERE site_id = $qloc_id");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    }
    $sth = $dbh->prepare("delete from locations WHERE id != '-1' AND client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth = $dbh->prepare("delete from config WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from custom_net_column_entries WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from custom_net_columns WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from custom_host_column_entries WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from custom_host_columns WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from host WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from net WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from ranges WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from vlans WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from vlan_providers WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from autonomous_systems WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from autonomous_systems_clients WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    my @lines = $self->get_ll("$client_id");
    foreach my $line ( @lines ) {
        my $line_id = $line->[0];
        my $qline_id = $dbh->quote( $line_id );
        $sth = $dbh->prepare("delete from custom_line_column_entries WHERE line_id = $qline_id");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    }
    $sth = $dbh->prepare("delete from llines WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from llines_clients WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    # CM
    $sth = $dbh->prepare("delete from device_cm_config WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id - device_cm_config","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from device_user_groups WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id - device_user_groups","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from cm_server WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id - cm_server","Can not execute statement:<p>$DBI::errstr");

    # Tags
    $sth = $dbh->prepare("delete from tag WHERE client_id = $qid");
    $sth->execute() or croak $self->print_error("$client_id - tag","Can not execute statement:<p>$DBI::errstr");

my $user_management_enabled=$global_config[0]->[13] || "";
if ( $user_management_enabled eq "yes" ) {

    my %values_clients_perm=$self->get_user_group_perms_perm_hash("$client_id","clients_perm");

    for my $group_id ( keys %values_clients_perm ) { 
        my $new_perm = $values_clients_perm{$group_id};
        next if $new_perm !~ /${id}/;
        my $old_perm = $new_perm;
        $new_perm =~ s/^${id}_//;
        $new_perm =~ s/_${id}$//;
        $new_perm =~ s/_${id}_$/_/;
        $new_perm =~ s/^${id}$//;
        my $qnew_perm = $dbh->quote( $new_perm );
        my $qold_perm = $dbh->quote( $old_perm );

        $sth = $dbh->prepare("UPDATE gip_user_group_perms SET clients_perm = $qnew_perm WHERE clients_perm = $qold_perm");
        $sth->execute() or croak $self->print_error("$id - cm_server","Can not execute statement:<p>$DBI::errstr");
    }
}

    $sth->finish();
    $dbh->disconnect;
}


sub get_clients {
my ( $self, $client_id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT id,client FROM clients ORDER BY client") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

sub get_clients_hash {
my ( $self, $client_id ) = @_;
my %clients;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT id,client FROM clients") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'};
    my $client = $ip_ref->{'client'};
    $clients{"$id"}="$client";
}
    $dbh->disconnect;
    return %clients;
}

sub get_client_from_id {
my ( $self,$client_id ) = @_;
my $val;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT client FROM clients WHERE id=$qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $val = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $val;
}

sub get_client_entries {
my ( $self, $client_id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT c.client,ce.phone,ce.fax,ce.address,ce.comment,ce.contact_name_1,ce.contact_phone_1,ce.contact_cell_1,ce.contact_email_1,ce.contact_comment_1,ce.contact_name_2,ce.contact_phone_2,ce.contact_cell_2,ce.contact_email_2,ce.contact_comment_2,ce.contact_name_3,ce.contact_phone_3,ce.contact_cell_3,ce.contact_email_3,ce.contact_comment_3,ce.default_resolver,ce.dns_server_1,ce.dns_server_2,ce.dns_server_3 FROM clients c, client_entries ce WHERE c.id = ce.client_id AND c.id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    return @values;
}

sub get_allowed_client_perm {
my ( $self, $client_id, $vars_file ) = @_;

my %lang_vars = $self->_get_vars("$vars_file");

my $user=$ENV{'REMOTE_USER'};

my $id=$self->get_user_id("$client_id","$user") || "";
if ( ! $id ) {
    my $error_message = "$lang_vars{access_denied_message}<p>$lang_vars{user_not_found_message} (1)";
    $self->print_error_with_head(title=>"$lang_vars{gestioip_message}",headline=>"$lang_vars{redes_dispo_message}",notification=>"$error_message",vars_file=>"$vars_file",client_id=>"$client_id");
}
my %values_user_group_perms=$self->get_user_group_perms_hash("$vars_file","","$user");
my $clients_perm=$values_user_group_perms{clients_perm};

if ( $clients_perm !~ /^${client_id}$/ && $clients_perm !~ /_${client_id}$/ && $clients_perm !~ /^${client_id}_/ && $clients_perm !~ /_${client_id}_/ && $clients_perm !~ /^9999$/ ) {
    if ( $clients_perm =~ /^(\d+)$/ ) {
        $client_id=$clients_perm;
    } else {
        $clients_perm =~ /^(\d+)_?/;
        $client_id=$1;
    }
}

return $client_id;
}

sub update_client {
    my ( $self, $client_id, $id, $client_name ) = @_;
my $val;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qid = $dbh->quote( $id );
my $qclient_name = $dbh->quote( $client_name );
    my $sth = $dbh->prepare("UPDATE clients SET client=$qclient_name WHERE id=$qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub update_client_entry {
my ( $self, $client_id, $id, $phone, $fax, $address, $comment, $contact_name_1, $contact_phone_1, $contact_cell_1, $contact_email_1, $contact_comment_1, $contact_name_2, $contact_phone_2, $contact_cell_2, $contact_email_2, $contact_comment_2, $contact_name_3, $contact_phone_3, $contact_cell_3, $contact_email_3, $contact_comment_3 ) = @_;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qid = $dbh->quote( $id );
my $qphone = $dbh->quote( $phone );
my $qfax = $dbh->quote( $fax );
my $qcomment = $dbh->quote( $comment );
my $qaddress = $dbh->quote( $address );
my $qcontact_name_1 = $dbh->quote( $contact_name_1 );
my $qcontact_phone_1 = $dbh->quote( $contact_phone_1 );
my $qcontact_cell_1 = $dbh->quote( $contact_cell_1 );
my $qcontact_email_1 = $dbh->quote( $contact_email_1 );
my $qcontact_comment_1 = $dbh->quote( $contact_comment_1 );
my $qcontact_name_2 = $dbh->quote( $contact_name_2 );
my $qcontact_phone_2 = $dbh->quote( $contact_phone_2 );
my $qcontact_cell_2 = $dbh->quote( $contact_cell_2 );
my $qcontact_email_2 = $dbh->quote( $contact_email_2 );
my $qcontact_comment_2 = $dbh->quote( $contact_comment_2 );
my $qcontact_name_3 = $dbh->quote( $contact_name_3 );
my $qcontact_phone_3 = $dbh->quote( $contact_phone_3 );
my $qcontact_cell_3 = $dbh->quote( $contact_cell_3 );
my $qcontact_email_3 = $dbh->quote( $contact_email_3 );
my $qcontact_comment_3 = $dbh->quote( $contact_comment_3 );
    my $sth = $dbh->prepare("UPDATE client_entries SET phone=$qphone, fax=$qfax, address=$qaddress, comment=$qcomment, contact_name_1=$qcontact_name_1, contact_phone_1=$qcontact_phone_1,contact_cell_1=$qcontact_cell_1,contact_email_1=$qcontact_email_1,contact_comment_1=$qcontact_comment_1,contact_name_2=$qcontact_name_2, contact_phone_2=$qcontact_phone_2,contact_cell_2=$qcontact_cell_2,contact_email_2=$qcontact_email_2,contact_comment_2=$qcontact_comment_2,contact_name_3=$qcontact_name_3, contact_phone_3=$qcontact_phone_3,contact_cell_3=$qcontact_cell_3,contact_email_3=$qcontact_email_3,contact_comment_3=$qcontact_comment_3 WHERE client_id=$qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub update_dns_server {
my ( $self, $client_id, $default_resolver, $dns1, $dns2, $dns3) = @_;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qdefault_resolver = $dbh->quote( $default_resolver );
my $qdns1 = $dbh->quote( $dns1 );
my $qdns2 = $dbh->quote( $dns2 );
my $qdns3 = $dbh->quote( $dns3 );
    my $sth = $dbh->prepare("UPDATE client_entries SET default_resolver=$qdefault_resolver, dns_server_1=$qdns1, dns_server_2=$qdns2, dns_server_3=$qdns3 WHERE client_id=$qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub count_clients {
my ( $self, $client_id ) = @_;
my $count;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT COUNT(*) from clients
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $count = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $count;
}

sub get_default_client_id {
my ( $self,$client_id ) = @_;
my $val;
my $dbh = $self->_mysql_connection();
my $sth = $dbh->prepare("SELECT default_client_id from global_config
                    ") or print STDERR "$DBI::errstr\n";
$sth->execute() or print STDERR "$DBI::errstr\n";
$val = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $val;
}

sub update_default_client {
my ( $self,$client_id,$default_client_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qdefault_client_id = $dbh->quote( $default_client_id );
    my $sth = $dbh->prepare("UPDATE global_config SET default_client_id = $qdefault_client_id
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}



##### VLANs ####

sub get_vlan_providers {
my ( $self,$client_id ) = @_;
my (@values_clientes,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT name,id,comment FROM vlan_providers WHERE client_id=$qclient_id OR client_id='9999'");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_clientes, [ @$ip_ref ];
}
$dbh->disconnect;
return @values_clientes;
}

sub get_vlan_providers_hash_key_name {
my ( $self,$client_id ) = @_;
my (%values,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT name,id,comment FROM vlan_providers WHERE client_id=$qclient_id OR client_id='9999'");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'};
    my $name = $ip_ref->{'name'};
    $values{"$name"}="$id";
}
$dbh->disconnect;
return %values;
}

sub get_vlan_provider {
my ( $self,$client_id,$provider_id ) = @_;

my $format=$self->{'format'};
my $error;

my (@values_providers,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qprovider_id = $dbh->quote( $provider_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT name,comment FROM vlan_providers WHERE id=$qprovider_id AND client_id=$qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";;

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_providers, [ @$ip_ref ];
}

$dbh->disconnect;
return @values_providers;
}

sub update_vlanprovider {
my ( $self,$client_id,$provider_id,$comment,$name ) = @_;

my $format=$self->{'format'};
my $error;

my $dbh = $self->_mysql_connection();
my $qprovider_id = $dbh->quote( $provider_id );
my $qname = $dbh->quote( $name );
my $qcomment = $dbh->quote( $comment );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("UPDATE vlan_providers SET comment=$qcomment, name=$qname WHERE id=$qprovider_id AND client_id=$qclient_id"
    ) or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->finish(  );
    $dbh->disconnect;
}

sub count_vlan_providers {
my ( $self, $client_id ) = @_;
my $count;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT COUNT(*) from vlan_providers WHERE client_id=$qclient_id
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $count = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $count;
}

sub PrintVLANproviderTab {
my ( $self,$client_id,$vars_file ) = @_;

my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @values_vlan_providers=$self->get_vlan_providers("$client_id");

my $color_helper=0;
my $color="white";

if ( ! $values_vlan_providers[1]->[0] ) {
    print "<p><br><i>$lang_vars{no_vlan_providers_message}</i><br><p>\n";
    print "<form name=\"vlan_providors\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_insert_vlanclient_form.cgi\" style=\"display:inline\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"input_link_w\" value=\"$lang_vars{add_message}\" name=\"B1\"></form></li><br>\n";
    return; 
}   

print "<p>\n";
print "<table border=\"0\"  style=\"border-collapse:collapse\" width=\"50%\" cellpadding=\"2\">\n";
if ( ! $values_vlan_providers[0]->[0] ) {
    print "<tr><td><b>$lang_vars{vlan_providor_message}</b></td><td><b>$lang_vars{comentario_message}</b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";
} else {
    if ( $vars_file =~ /vars_he$/ ) {
        print "<span style=\"float: right\"><b>$lang_vars{no_vlan_provider_message}</b></span>\n";
    } else {
        print "<b>$lang_vars{no_vlan_provider_message}</b>\n";
    }
    print "<tr><td></td></tr>\n";

}

my $j="0";
foreach (@values_vlan_providers) {
    if ( ! $values_vlan_providers[$j]->[0] || $values_vlan_providers[$j]->[0] eq "NULL" ) {
        $j++;
        next;
    }
    my $provider_name = $values_vlan_providers[$j]->[0];
    my $provider_id = $values_vlan_providers[$j]->[1];
    my $provider_comment = $values_vlan_providers[$j]->[2];

    if ( $color_helper eq "0" ) {
        $color="#f2f2f2";
        $color_helper="1";
    } else {
        $color="white";
        $color_helper="0";
    }

    $provider_comment=~s/^M/<br>/g;

    print "<tr bgcolor=\"$color\"><td>$provider_name</td><td>$provider_comment</td>\n";
    print "<td><form method=\"POST\" name=\"edit_vlan_provider\" action=\"$server_proto://$base_uri/res/ip_mod_vlanprovider_form.cgi\">\n";
    print "<input name=\"provider_id\" type=\"hidden\" value=\"$provider_id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">\n";
    print "<input type=\"submit\" value=\"\" name=\"B2\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td>\n";
    print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_vlanprovider.cgi\"><input name=\"provider_id\" type=\"hidden\" value=\"$provider_id\"><input name=\"provider_name\" type=\"hidden\" value=\"$provider_name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_vlanprovider_explic_message}\"></form></td></tr>\n";
    $j++;
}

print "</table>\n";
}

sub get_vlans {

my ( $self,$client_id ) = @_;
my (@values_vlans,$ip_ref);

my $format=$self->{'format'};
my $error;


my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT v.id, v.vlan_num, v.vlan_name, v.comment, vp.name, v.bg_color, v.font_color, v.client_id FROM vlans v, vlan_providers vp WHERE v.provider_id=vp.id AND v.asso_vlan IS NULL AND ( v.client_id=$qclient_id || v.client_id='9999' ) order by (vlan_num+0)") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_vlans, [ @$ip_ref ];
}

$dbh->disconnect;
$sth->finish(  );
return @values_vlans;
}

sub get_vlans_match {
my ( $self,$client_id,$match ) = @_;
my (@values_vlans,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT v.id, v.vlan_num, v.vlan_name, v.comment, vp.name, v.bg_color, v.font_color, v.client_id FROM vlans v, vlan_providers vp WHERE v.provider_id=vp.id AND v.asso_vlan IS NULL AND ( v.client_id=$qclient_id || v.client_id='9999' ) AND ( v.vlan_num LIKE '%$match%' || v.vlan_name LIKE '%$match%' || v.comment LIKE '%$match%' || vp.name LIKE '%$match%' ) ORDER BY (vlan_num+0)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_vlans, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values_vlans;
}



sub get_asso_vlans {
my ( $self,$client_id,$vlan_id ) = @_;

my $format=$self->{'format'};
my $error;
my (@values_vlans,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qvlan_id = $dbh->quote( $vlan_id );
my $sth = $dbh->prepare("SELECT v.id, v.vlan_num, v.vlan_name, v.comment, vp.name, v.bg_color, v.font_color, v.client_id, v.asso_vlan FROM vlans v, vlan_providers vp WHERE v.provider_id=vp.id AND v.asso_vlan=$qvlan_id AND ( v.client_id=$qclient_id || v.client_id='9999' ) order by (vlan_num+0)") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_vlans, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values_vlans;
}

sub get_asso_vlan_hash {
my ( $self,$client_id ) = @_;
my (@values_vlans,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my %vlans;
my $sth = $dbh->prepare("SELECT v.id, v.vlan_num, v.vlan_name, v.comment, vp.name, v.asso_vlan FROM vlans v, vlan_providers vp WHERE v.asso_vlan IS NOT NULL AND ( v.client_id=$qclient_id || v.client_id='9999' ) order by (vlan_num+0)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $vlan_id = $ip_ref->{'id'};
    my $asso_vlan_id = $ip_ref->{'asso_vlan'};
    $vlans{"$asso_vlan_id"}="$vlan_id";
}
$dbh->disconnect;
$sth->finish();
return %vlans;
}

sub get_asso_vlan_reverse_hash_ref {
my ( $self,$client_id ) = @_;
my (@values_vlans,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my %vlans;
my $sth = $dbh->prepare("SELECT v.id, v.vlan_num, v.vlan_name, v.comment, vp.name, v.switches, v.asso_vlan FROM vlans v, vlan_providers vp WHERE v.asso_vlan IS NOT NULL AND ( v.client_id=$qclient_id || v.client_id='9999' ) order by (vlan_num+0)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $vlan_id = $ip_ref->{'id'};
    my $switches = $ip_ref->{'switches'};
    my $asso_vlan_id = $ip_ref->{'asso_vlan'};
    push @{$vlans{"$vlan_id"}},"$switches","$asso_vlan_id";

}
$dbh->disconnect;
$sth->finish();
return \%vlans;
}

sub get_asso_vlan_reverse_hash {
my ( $self,$client_id, $vlan_ids ) = @_;
my (@values_vlans,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my @vlan_id_array=split("_",$vlan_ids);
my $search_string = "";
foreach ( @vlan_id_array ) {
    if ( $search_string ) {
            $search_string = $search_string . " OR v.asso_vlan = $_";
    } else {
            $search_string = "v.asso_vlan = $_";
        }
}
my %vlans;

my $sth = $dbh->prepare("SELECT v.id, v.vlan_num, v.vlan_name, v.comment, vp.name, v.asso_vlan FROM vlans v, vlan_providers vp WHERE  ( $search_string ) AND v.asso_vlan IS NOT NULL AND ( v.client_id=$qclient_id || v.client_id='9999' ) order by (vlan_num+0)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $vlan_id = $ip_ref->{'id'};
    my $asso_vlan_id = $ip_ref->{'asso_vlan'};
#		$vlans{"$vlan_id"}="$asso_vlan_id";
    $vlans{"$asso_vlan_id"}="$vlan_id";
}
$dbh->disconnect;
$sth->finish();
return %vlans;
}

sub get_vlans_from_multiple_id_hash {
my ( $self,$client_id,$vlan_ids ) = @_;
my (@values_vlans,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my @vlan_id_array=split("_",$vlan_ids);
my $search_string = "";
foreach ( @vlan_id_array ) {
    if ( $search_string ) {
            $search_string = $search_string . " OR v.id = $_";
    } else {
            $search_string = "v.id = $_";
        }
}
my %vlans;

my $sth = $dbh->prepare("SELECT v.id, v.vlan_num, v.vlan_name, v.comment, vp.name, v.asso_vlan FROM vlans v, vlan_providers vp WHERE ( $search_string ) AND v.provider_id=vp.id AND ( v.client_id=$qclient_id || v.client_id='9999' ) order by (vlan_num+0)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'};
    my $vlan_num = $ip_ref->{'vlan_num'};
    my $vlan_name = $ip_ref->{'vlan_name'};
    my $vlan_comment = $ip_ref->{'vlan_comment'} || "";
    my $vlan_provider_name = $ip_ref->{'name'} || "";
    my $asso_vlan = $ip_ref->{'asso_vlan'} || "";
    push @{$vlans{$id}},"$vlan_num","$vlan_name","$vlan_comment","$vlan_provider_name","$asso_vlan";
}
$dbh->disconnect;
$sth->finish();
return %vlans;
}

sub get_vlan {
my ( $self,$client_id,$vlan_id ) = @_;

my $format=$self->{'format'};
my $error;
my (@values_vlan,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qvlan_id = $dbh->quote( $vlan_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT v.vlan_num,v.vlan_name,v.comment,v.bg_color,v.font_color,v.provider_id,v.switches,v.asso_vlan,vp.name FROM vlans v, vlan_providers vp WHERE v.id=$qvlan_id AND v.provider_id=vp.id AND v.client_id=$qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_vlan, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish();
return @values_vlan;
}


sub get_cc_name_net_id_hash {
	my ( $self, $client_id, $cc_name ) = @_;

	my %vlans;
	my $ip_ref;
	my $dbh = $self->_mysql_connection();
	my $qclient_id = $dbh->quote( $client_id );
	my $qcc_name = $dbh->quote( $cc_name );

	debug("SELECT net_id, entry from custom_net_column_entries WHERE cc_id = (SELECT id FROM custom_net_columns WHERE name=$qcc_name)");
	my $sth = $dbh->prepare("SELECT net_id, entry from custom_net_column_entries WHERE cc_id = (SELECT id FROM custom_net_columns WHERE name=$qcc_name)")
	or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

	while ( $ip_ref = $sth->fetchrow_hashref ) {
		my $net_id = $ip_ref->{'net_id'};
		my $entry = $ip_ref->{'entry'};
		$vlans{$net_id} = $entry;
	}

	$dbh->disconnect;
	$sth->finish();
	return %vlans;
}


sub insert_vlan {
my ( $self,$client_id, $vlan_num, $vlan_name, $comment, $vlan_provider_id, $font_color, $bg_color, $switches ) = @_;
my $dbh = $self->_mysql_connection();
my $qvlan_num = $dbh->quote( $vlan_num );
my $qvlan_name = $dbh->quote( $vlan_name );
my $qcomment = $dbh->quote( $comment );
my $qvlan_provider_id = $dbh->quote( $vlan_provider_id );
my $qfont_color = $dbh->quote( $font_color );
my $qbg_color = $dbh->quote( $bg_color );
my $qswitches = $dbh->quote( $switches );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("INSERT INTO vlans (vlan_num,vlan_name,comment,provider_id,bg_color,font_color,switches,client_id) VALUES ( $qvlan_num,$qvlan_name,$qcomment,$qvlan_provider_id,$qbg_color,$qfont_color,$qswitches,$qclient_id)"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub get_last_vlan_id {
my ( $self,$client_id ) = @_;
my ($vlan_id);
my $dbh = $self->_mysql_connection();
my $sth = $dbh->prepare("SELECT id FROM vlans ORDER BY (id+0) desc
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute();
$vlan_id = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $vlan_id;
}

sub check_vlan_name {
my ( $self,$client_id,$vlan_name ) = @_;
my @vlan;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qvlan_name = $dbh->quote( $vlan_name );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT vlan_num,vlan_name FROM vlans where vlan_name=$qvlan_name AND client_id=$qclient_id
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @vlan, [ @$ip_ref ];
}
    $sth->finish();
    $dbh->disconnect;
    return @vlan;
}

sub check_vlan_num {
my ( $self,$client_id,$vlan_num ) = @_;
my $vlan;
my $dbh = $self->_mysql_connection();
my $qvlan_num = $dbh->quote( $vlan_num );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT vlan_num FROM vlans where vlan_num=$qvlan_num AND client_id=$qclient_id
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();
    $vlan = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $vlan;
}

sub update_vlan {
my ( $self,$client_id,$vlan_id,$vlan_num,$vlan_name,$vlan_provider_id,$comment,$bg_color,$font_color ) = @_;
my $dbh = $self->_mysql_connection();
my $qvlan_id = $dbh->quote( $vlan_id );
my $qvlan_num = $dbh->quote( $vlan_num );
my $qvlan_name = $dbh->quote( $vlan_name );
my $qvlan_provider_id = $dbh->quote( $vlan_provider_id );
my $qcomment = $dbh->quote( $comment );
my $qbg_color = $dbh->quote( $bg_color );
my $qfont_color = $dbh->quote( $font_color );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("UPDATE vlans SET vlan_num=$qvlan_num, vlan_name=$qvlan_name, provider_id=$qvlan_provider_id, comment=$qcomment, bg_color=$qbg_color, font_color=$qfont_color WHERE id=$qvlan_id AND client_id=$qclient_id"
                            ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish(  );
    $dbh->disconnect;
}

sub update_vlan_assos {
my ( $self,$client_id,$vlan_ids,$asso_vlan ) = @_;

my @vlan_id_array=split("_",$vlan_ids);
my $search_string = "";
foreach ( @vlan_id_array ) {
    if ( $search_string ) {
            $search_string = $search_string . " OR asso_vlan = \"$_\"";
    } else {
            $search_string = "asso_vlan = \"$_\"";
        }
}

my $dbh = $self->_mysql_connection();
my $qasso_vlan = $dbh->quote( $asso_vlan );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("UPDATE vlans SET asso_vlan=$qasso_vlan WHERE ( $search_string ) AND client_id=$qclient_id"
                            ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish(  );
    $dbh->disconnect;
}

sub delete_vlan {
my ( $self,$client_id,$vlan_id,$vlan_entry ) = @_;
my $dbh = $self->_mysql_connection();
my $qvlan_id = $dbh->quote( $vlan_id );
my $qclient_id = $dbh->quote( $client_id );
my $qvlan_entry = $dbh->quote( $vlan_entry );

my $sth = $dbh->prepare("DELETE FROM vlans WHERE id=$qvlan_id AND client_id=$qclient_id
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute();

$sth = $dbh->prepare("DELETE FROM custom_net_column_entries WHERE entry=$qvlan_entry AND client_id=$qclient_id
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();

$sth = $dbh->prepare("DELETE FROM vlans WHERE asso_vlan=$qvlan_id AND client_id=$qclient_id
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();

    $sth->finish();
    $dbh->disconnect;
}

#sub delete_vlan_with_asso {
#	my ( $self,$client_id,$vlan_id,$vlan_entry ) = @_;
#	my $dbh = $self->_mysql_connection();
#	my $qvlan_id = $dbh->quote( $vlan_id );
#	my $qclient_id = $dbh->quote( $client_id );
#	my $qvlan_entry = $dbh->quote( $vlan_entry );
#        my $sth = $dbh->prepare("DELETE FROM vlans WHERE id=$qvlan_id AND client_id=$qclient_id
#                        ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        $sth->execute();
#        $sth = $dbh->prepare("DELETE FROM vlans WHERE asso_vlan=$qvlan_id AND client_id=$qclient_id
#                        ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        $sth->execute();
#        $sth->finish();
#        $dbh->disconnect;
#}


sub get_vlan_network_asso_hash {
my ( $self, $client_id ) = @_;

my $ip_ref;
my %values;

my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT net_id, entry from custom_net_column_entries WHERE cc_id = (SELECT id FROM custom_net_columns WHERE name='vlan') AND client_id=$qclient_id"
                            ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $net_id = $ip_ref->{'net_id'};
    my $entry = $ip_ref->{'entry'};
    $values{$entry} = $net_id;
}

$sth->finish(  );
$dbh->disconnect;

return %values;
}

sub PrintVLANTab {
my ( $self,$client_id,$ip,$script,$boton,$vars_file,$mode ) = @_;
$mode="show" if ! $mode;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my %asso_vlan_hash = $self->get_asso_vlan_hash("$client_id");
my %vlan_network_asso_hash = $self->get_vlan_network_asso_hash("$client_id");
my %vlan_provider_hash = $self->get_vlan_provider_hash("$client_id","name");
my $redes_hash = $self->get_redes_hash("$client_id","","","client_only");

print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('net_scrollx');
var y = readCookie('net_scrolly');
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('net_scrollx', x, 0);
createCookie('net_scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}
// -->
</SCRIPT>


<script type="text/javascript">
<!--
function confirmation(NET,TYPE) {

    if (TYPE == 'delete'){
            answer = confirm(NET + ": $lang_vars{delete_vlan_confirme_message}")
    }

    if (answer){
            return true;
    }
    else{
            return false;
    }
}
//-->
</script>


EOF

my $onclick_confirmation_delete = "";
my $color_helper=0;

my %vlan_switches = ();
my %switches = ();
%vlan_switches=$self->get_vlan_switches_all_hash("$client_id");
%switches=$self->get_vlan_switches_hash_key_switchid("$client_id");
my $j=0;
my $unir_check;
my $anz=@{$ip};
$anz--;
my $unified_vlan_title="";
if ( $mode eq "unir" ) {
    print "<form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_unirvlan_form.cgi\">\n";
} elsif ( $mode eq "asso_vlans" ) {
    $unified_vlan_title="";
} else {
    $unified_vlan_title="$lang_vars{unified_vlan_message}";
}

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td></td><td><font size=\"2\"><b>$lang_vars{vlan_number_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{vlan_name_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{vlan_description_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{network_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{vlan_provider_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{devices_message} </font></b></td><td><b>$unified_vlan_title</b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";
foreach my $refs(@{$ip}) {
    $unir_check="";
    my $vlan_id = @{$ip}[$j]->[0];
    my $vlan_num = @{$ip}[$j]->[1];
    my $k=$j+1;
    my $l=$j-1;
    my $vlan_name = @{$ip}[$j]->[2];
    my $vlan_network_id = $vlan_network_asso_hash{"$vlan_num - $vlan_name"} || "";
    my $vlan_network_show = "";
    my $vlan_network_title = "";
    if ( $vlan_network_id ) {
        my $red=$redes_hash->{"$vlan_network_id"}[0];
        my $red_bm=$redes_hash->{"$vlan_network_id"}[1];
        my $red_descr=$redes_hash->{"$vlan_network_id"}[2] || "";
        my $red_cat=$redes_hash->{"$vlan_network_id"}[4] || "$lang_vars{'without_cat_message'}";
        $vlan_network_show = $red . '/' . $red_bm;
        $vlan_network_title = "$red/$red_bm - $red_cat - $red_descr";
    }
    my $switch_ids = $vlan_switches{"${vlan_name}_${vlan_id}"};
    my @switch_id_array=split(",",$switch_ids);
    my $switch_string = "";
    foreach ( @switch_id_array ) {
        if ( $switches{$_} ) {
            if ( $switch_string ) {
                $switch_string=$switch_string . ", <acronym title=\"$switches{$_}[1]\">" . $switches{$_}[0] . "</acronym>";
            } else {
                $switch_string="<acronym title=\"$switches{$_}[1]\">$switches{$_}[0]</acronym>";
            }
        }
    }
    
    my $vlan_comment = @{$ip}[$j]->[3] || "";
    my $vlan_provider = @{$ip}[$j]->[4] || "";
    #TEST
#    my $vlan_provider_id = $self->get_vlan_provider_id("$client_id","$vlan_provider") || "";
    my $vlan_provider_id = $vlan_provider_hash{$vlan_provider}->[0] || "";
    my $bg_color = @{$ip}[$j]->[5] || "";
    my $font_color = @{$ip}[$j]->[6] || "";
    my $client_id = @{$ip}[$j]->[7] || "";
    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$vlan_num - $vlan_name\',\'delete\');\"";
    }

    my $asso_vlan_link = "";
    if ( $mode eq "unir" ) {
        $unir_check = "";
        if ( $j < $anz ) {
            $unir_check="<input type=\"checkbox\" name=\"unir_vlans\" value=\"$vlan_id\">" if @{$ip}[$k]->[1] eq @{$ip}[$j]->[1];
        }
        if ( @{$ip}[$l]->[1] && @{$ip}[$j]->[1] ) {
            $unir_check="<input type=\"checkbox\" name=\"unir_vlans\" value=\"$vlan_id\">" if @{$ip}[$l]->[1] eq @{$ip}[$j]->[1];
        }
        if ( ! $unir_check ) {
            $j++;
            next;
        }
    }
    if ( $mode ne "unir" && $asso_vlan_hash{$vlan_id} ) {
        $asso_vlan_link = "<form name=\"search_red\" method=\"POST\" action=\"$server_proto://$base_uri/show_vlans.cgi\" style=\"display:inline\"><input type=\"hidden\" name=\"mode\" value=\"asso_vlans\"><input type=\"hidden\" name=\"vlan_id\" value=\"$vlan_id\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"UnifiedVlanLink\" value=\"x\" title=\"$lang_vars{show_vlan_asso_message}\" name=\"B1\"></form>";
    }

    if ( $font_color =~ /rojo/ ) { $font_color = "red"; 
    } elsif ( $font_color =~ /blanco/ ) { $font_color = "white";
    } elsif ( $font_color =~ /negro/ ) { $font_color = "black";
    } elsif ( $font_color =~ /verde/ ) { $font_color = "green";
    } elsif ( $font_color =~ /azul/ ) { $font_color = "blue";
    } elsif ( $font_color =~ /amari/ ) { $font_color = "yellow";
    } elsif ( $font_color =~ /maro/ ) { $font_color = "brown";
    } elsif ( $font_color =~ /nara/ ) { $font_color = "orange";
    }

    if ( $bg_color =~ /rojo/ ) { $bg_color = "red"; 
    } elsif ( $bg_color =~ /blanco/ ) { $bg_color = "white";
    } elsif ( $bg_color =~ /negro/ ) { $bg_color = "black";
    } elsif ( $bg_color =~ /verde/ ) { $bg_color = "green";
    } elsif ( $bg_color =~ /azul/ ) { $bg_color = "blue";
    } elsif ( $bg_color =~ /amari/ ) { $bg_color = "yellow";
    } elsif ( $bg_color =~ /maro/ ) { $bg_color = "brown";
    } elsif ( $bg_color =~ /nara/ ) { $bg_color = "orange";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color_show=$bg_color;

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    if ( $mode eq "unir" ) {
        print "<tr bgcolor=\"$bg_color_show\"align=\"center\"><td>$unir_check</td><td><span style=\"color: $font_color;\">$vlan_num</span></td><td align=\"center\"><span style=\"color: $font_color;\">$vlan_name</span></td></td><td><span style=\"color: $font_color;\">$vlan_comment</span></td><td><span style=\"color: $font_color;\">$vlan_provider</span></td><td>$switch_string</td><td></td><td></td><td></td>";
    } else {
        print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$unir_check</td><td><span style=\"color: $font_color;\">$vlan_num</span></td><td align=\"center\"><span style=\"color: $font_color;\">$vlan_name</span></td></td><td><span style=\"color: $font_color;\">$vlan_comment</span></td><td><span style=\"color: $font_color;\" title='$vlan_network_title' >$vlan_network_show</span></td><td><span style=\"color: $font_color;\">$vlan_provider</span></td><td>$switch_string</td><td>$asso_vlan_link</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_modvlan_form.cgi\"><input name=\"vlan_num\" type=\"hidden\" value=\"$vlan_num\"><input name=\"vlan_id\" type=\"hidden\" value=\"$vlan_id\"><input name=\"vlan_name\" type=\"hidden\" value=\"$vlan_name\"><input name=\"comment\" type=\"hidden\" value=\"$vlan_comment\"><input name=\"bg_color\" type=\"hidden\" value=\"$bg_color\"><input name=\"vlan_provider_id\" type=\"hidden\" value=\"$vlan_provider_id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_deletevlan.cgi\"><input name=\"vlan_id\" type=\"hidden\" value=\"$vlan_id\"><input name=\"vlan_num\" type=\"hidden\" value=\"$vlan_num\"><input name=\"vlan_name\" type=\"hidden\" value=\"$vlan_name\"><input name=\"comment\" type=\"hidden\" value=\"$vlan_comment\"><input name=\"bg_color\" type=\"hidden\" value=\"$bg_color\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_vlan_explic_message}\" $onclick_confirmation_delete></form></td>";
}
    print "</tr>\n";
    $j++;
}
print "</table><p>\n";
if ( $mode eq "unir" ) {
    print "<input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"$lang_vars{unify_vlans_message}\" name=\"B1\" class=\"execute_link\" title=\"$lang_vars{unir_selected_vlans_message}\">\n";
    print "</form>\n";
}
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}


sub get_vlan_provider_hash {
my ( $self, $client_id, $key ) = @_;
    my %values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id,name,comment FROM vlan_providers WHERE client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{'id'};
        my $name = $ip_ref->{'name'};
        my $comment = $ip_ref->{'comment'} || "";
        if ( $key eq "name" ) {
            push @{$values{$name}},"$id","$comment";
        } else {
            push @{$values{$id}},"$name","$comment";
        }
    }
    $dbh->disconnect;
    return %values;
}


sub reset_vlan_provider_id {
my ( $self,$client_id,$vlan_provider_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qvlan_provider_id = $dbh->quote( $vlan_provider_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("UPDATE vlans SET provider_id='-1' WHERE provider_id=$qvlan_provider_id AND client_id=$qclient_id
                    ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_vlan_provider {
my ( $self,$client_id,$vlan_provider_id ) = @_;

    my $format=$self->{'format'};
    my $error;

my $dbh = $self->_mysql_connection();
my $qvlan_provider_id = $dbh->quote( $vlan_provider_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM vlan_providers WHERE id=$qvlan_provider_id AND client_id=$qclient_id")
     or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->finish();
    $dbh->disconnect;
}

sub update_vlans_vlan_provider {
my ( $self,$client_id,$vlan_provider_id ) = @_;
my $dbh = $self->_mysql_connection();
my $qvlan_provider_id = $dbh->quote( $vlan_provider_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("UPDATE vlans SET provider_id='-1' WHERE provider_id=$qvlan_provider_id AND client_id=$qclient_id
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub insert_vlan_provider {
my ( $self,$client_id,$vlan_provider_id, $vlan_provider_name,$comment ) = @_;

my $format=$self->{'format'};
my $error;

my $dbh = $self->_mysql_connection();
my $qvlan_provider_id = $dbh->quote( $vlan_provider_id );
my $qvlan_provider_name = $dbh->quote( $vlan_provider_name );
my $qcomment = $dbh->quote( $comment );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("INSERT INTO vlan_providers (id,name,comment,client_id) VALUES ( $qvlan_provider_id,$qvlan_provider_name,$qcomment,$qclient_id)")
     or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

#    my $new_id=$sth->{mysql_insertid} || 0; 

$sth->finish();
$dbh->disconnect;
}

sub check_vlan_provider_exists {
my ( $self,$client_id,$vlan_provider_name ) = @_;
my $vlan;
my $dbh = $self->_mysql_connection();
my $qvlan_provider_name = $dbh->quote( $vlan_provider_name  );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT name FROM vlan_providers where name=$qvlan_provider_name AND client_id=$qclient_id
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();
    $vlan = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $vlan;
}

sub get_vlan_provider_id {
my ( $self,$client_id,$vlan_provider_name ) = @_;

    my $format=$self->{'format'};
    my $error;

my $id;
my $dbh = $self->_mysql_connection();
my $qvlan_provider_name = $dbh->quote( $vlan_provider_name  );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id FROM vlan_providers where name=$qvlan_provider_name AND client_id=$qclient_id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $id = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $id;
}

sub get_last_vlan_provider_id {
my ( $self,$client_id ) = @_;
my ($id);
my $dbh = $self->_mysql_connection();
my $sth = $dbh->prepare("SELECT id FROM vlan_providers ORDER BY (id+0) desc
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute();
$id = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $id;
}

sub check_vlan_switch_exists {
my ( $self,$client_id,$switch_strings ) = @_;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth;
my @no_existing_switches=();
my $ip="";
my $i=0;
foreach ( @$switch_strings ) {
    my $id = $_;
    my $qid = $dbh->quote( $id );
    $sth = $dbh->prepare("SELECT ip FROM host WHERE id=$qid AND client_id=$qclient_id
        ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();
    $ip = $sth->fetchrow_array;
    if (! $ip ) {
        $no_existing_switches[$i]=$id;
        $i++;
    }
    $ip="";
    $sth->finish();
}
$dbh->disconnect;
return @no_existing_switches;
}

sub get_vlan_switches {
my ( $self,$client_id,$vlan_id ) = @_;
my $switches;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qvlan_id = $dbh->quote( $vlan_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT switches FROM vlans WHERE id=$qvlan_id AND client_id=$qclient_id
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute();
$switches = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $switches;
}

sub get_vlan_switches_match {
my ( $self,$client_id,$switch_host_id ) = @_;

my $format=$self->{'format'};
my $error;
my @switches;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id,switches FROM vlans WHERE ( switches LIKE \"%,$switch_host_id,%\" OR switches REGEXP \"^$switch_host_id,\" OR switches REGEXP \",$switch_host_id\$\" OR switches = \"$switch_host_id\" ) AND client_id=$qclient_id
    ") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @switches, [ @$ip_ref ];
}
$sth->finish();
$dbh->disconnect;
return @switches;
}

sub get_vlan_switches_all {
my ( $self,$client_id ) = @_;
my @switches;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id,switches FROM vlans WHERE client_id=$qclient_id
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute();
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @switches, [ @$ip_ref ];
}
$sth->finish();
$dbh->disconnect;
return @switches;
}

sub update_vlan_switches {
my ( $self,$client_id,$vlan_id,$switches ) = @_;

my $format=$self->{'format'};
my $error;
my ($id);
my $dbh = $self->_mysql_connection();
my $qvlan_id = $dbh->quote( $vlan_id );
my $qswitches = $dbh->quote( $switches );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("UPDATE vlans SET switches=$qswitches WHERE id=$qvlan_id AND client_id=$qclient_id
    ") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->finish();
$dbh->disconnect;
}

sub update_vlan_switches_by_id {
my ( $self,$client_id,$vlan_id,$switches ) = @_;
my ($id);
my $dbh = $self->_mysql_connection();
my $qvlan_id = $dbh->quote( $vlan_id );
my $qswitches = $dbh->quote( $switches );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("UPDATE vlans SET switches=$qswitches WHERE id=$qvlan_id AND client_id=$qclient_id
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute();
$sth->finish();
$dbh->disconnect;
}

sub update_cc_vlan_entry {
my ( $self,$client_id,$old_vlan_entry,$new_vlan_entry ) = @_;
my $dbh = $self->_mysql_connection();
my $qold_vlan_entry = $dbh->quote( $old_vlan_entry );
my $qnew_vlan_entry = $dbh->quote( $new_vlan_entry );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("UPDATE custom_net_column_entries SET entry=$qnew_vlan_entry WHERE entry=$qold_vlan_entry AND client_id=$qclient_id
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute();
$sth->finish();
$dbh->disconnect;
}


sub get_vlan_switches_hash_key_switchid {
my ( $self, $client_id ) = @_;
my %switches;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
## TEST: was ist mit switchen, die nicht cat 1 oder 2 sind????????
##        my $sth = $dbh->prepare("SELECT id,INET_NTOA(ip),hostname FROM host WHERE client_id = $qclient_id AND (categoria = '1' OR categoria = '2')"
#        my $sth = $dbh->prepare("SELECT id,INET_NTOA(ip),hostname FROM host WHERE client_id = $qclient_id"
    my $sth = $dbh->prepare("SELECT id,INET_NTOA(ip),hostname, ip_version, ip FROM host WHERE client_id = $qclient_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'};
    my ($ip,$ip_int);
    my $ip_version = $ip_ref->{'ip_version'};;
    if ( $ip_version eq 'v4' ) {
        $ip = $ip_ref->{'INET_NTOA(ip)'};
    } else {
        $ip_int = $ip_ref->{'ip'};
        $ip = $self->int_to_ip("$client_id","$ip_int","$ip_version");
    }
    my $hostname = $ip_ref->{'hostname'};
    push @{$switches{$id}},"$ip","$hostname";
    }
    $dbh->disconnect;
    return %switches;
}

sub get_vlan_switches_all_hash {
my ( $self, $client_id ) = @_;
my %switches;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id,vlan_name,switches FROM vlans WHERE client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'};
    my $vlan_name = $ip_ref->{'vlan_name'};
    my $switches = $ip_ref->{'switches'} || "";
    $switches{"${vlan_name}_${id}"}="$switches";
    }
    $dbh->disconnect;
    return %switches;
}

#sub insert_vlan_asso {
#	my ( $self,$client_id,$vlan_id,$asso_vlan_name ) = @_;
#	my $dbh = $self->_mysql_connection();
#	my $qvlan_id = $dbh->quote( $vlan_id );
#	my $qasso_vlan_name = $dbh->quote( $asso_vlan_name );
#	my $qclient_id = $dbh->quote( $client_id );
#	my $sth = $dbh->prepare("INSERT INTO vlan_assos (gip_vlan_id,asso_vlan_name,client_id) VALUES ( $qvlan_id,$qasso_vlan_name,$qclient_id)"
#		) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#	$sth->execute() or die "Fehler bei execute db: $DBI::errstr\n";
#	$sth->finish();
#	$dbh->disconnect;
#}

sub insert_vlan_asso_new {
my ( $self,$client_id,$good_vlan_id,$vlan_id ) = @_;
my $dbh = $self->_mysql_connection();
my $qgood_vlan_id = $dbh->quote( $good_vlan_id );
my $qvlan_id = $dbh->quote( $vlan_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("UPDATE vlans SET asso_vlan=$qgood_vlan_id WHERE id=$qvlan_id AND client_id = $qclient_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub get_vlan_assos_hash_name_key {
my ( $self, $client_id ) = @_;
my %switches;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT gip_vlan_id,asso_vlan_name FROM vlan_assos WHERE client_id = $qclient_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $gip_vlan_id = $ip_ref->{'gip_vlan_id'};
    my $asso_vlan_name = $ip_ref->{'asso_vlan_name'};
    $switches{"${asso_vlan_name}"}="$gip_vlan_id";
    }
    $dbh->disconnect;
    return %switches;
}


sub get_vlans_with_asso_vlans {
my ( $self,$client_id ) = @_;
my (@values_vlans,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id,vlan_num,vlan_name FROM vlans WHERE client_id=$qclient_id || client_id='9999'");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_vlans, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values_vlans;
}


#sub get_host_id_from_ip {
#	my ( $self,$client_id,$ip ) = @_;
#	my $val;
#        my $dbh = $self->_mysql_connection();
#	my $qip = $dbh->quote( $ip );
#	my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT id FROM host WHERE ip=INET_ATON($qip) AND client_id=$qclient_id");
#        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        $val = $sth->fetchrow_array;
#        $sth->finish();
#        $dbh->disconnect;
#        return $val;
#}

sub get_host_id_from_ip_int {
my ( $self,$client_id,$ip_int,$red_num ) = @_;
my $val;
my $dbh = $self->_mysql_connection();
my $qip_int = $dbh->quote( $ip_int );
my $qclient_id = $dbh->quote( $client_id );
my $qred_num = $dbh->quote( $red_num );
my $red_num_expr="";
$red_num_expr="AND red_num = $qred_num" if $red_num;
my $sth = $dbh->prepare("SELECT id FROM host WHERE ip=$qip_int AND client_id=$qclient_id $red_num_expr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$val = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $val;
}

sub get_host_ip_int_from_hostname {
## TEST ipv6 ?
my ( $self,$client_id,$hostname ) = @_;
my $val;
my $dbh = $self->_mysql_connection();
my $qhostname = $dbh->quote( $hostname );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT ip FROM host WHERE hostname=$qhostname AND client_id=$qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$val = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $val;
}

sub get_host_ip_int_from_hostname_all {
my ( $self,$client_id,$hostname ) = @_;
my @vals;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qhostname = $dbh->quote( $hostname );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT ip, hostname, ip_version FROM host WHERE hostname=$qhostname AND client_id=$qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @vals, [ @$ip_ref ];
}
$sth->finish();
$dbh->disconnect;
return \@vals;
}

sub get_host_value_from_host_id {
my ( $self,$client_id,$host_id,$value ) = @_;

$self->print_error("$client_id","not supportet value") if $value !~ /^(id|ip_int|ip|hostname|host_descr|loc|red_num|categoria|int_admin|comentario|update_type|last_update|alive|last_response|range_id|ip_version|client_id)$/;

my $val;
    my $dbh = $self->_mysql_connection();
my $qhost_id = $dbh->quote( $host_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth;

my $ip_version="";
if ( $value eq "ip" || $value eq "ip_int" ) {
    $sth = $dbh->prepare("SELECT ip_version FROM host WHERE id=$qhost_id AND client_id=$qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $ip_version = $sth->fetchrow_array;
    $sth->finish();

    if ( $value eq "ip" ) {
        if ( $ip_version eq "v4" ) {
            $value="INET_NTOA(ip)";
        } else {
            $value="ip";
        }
    } elsif ( $value eq "ip_int" ) {
        $value="ip";
    }
}

$sth = $dbh->prepare("SELECT $value FROM host WHERE id=$qhost_id AND client_id=$qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$val = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;

if ( $ip_version eq "v6" && $value eq "ip" ) {
    $val = $self->int_to_ip("$client_id","$val","$ip_version");
}

return $val;
}

sub check_mib_dir {
my ( $self,$client_id,$vars_file,$mib_dir,$vendor_mib_dirs ) = @_;

my %lang_vars = $self->_get_vars("$vars_file");
my @global_config = $self->get_global_config("$client_id");
$mib_dir=$global_config[0]->[3] || "" if ! $mib_dir;
$vendor_mib_dirs=$global_config[0]->[4] || "" if ! $vendor_mib_dirs;

$self->print_error("$client_id","$lang_vars{mib_dir_no_exist_message}: $mib_dir<p>$lang_vars{check_mib_config}") if ! -e $mib_dir;
my @vendor_mib_dirs = split(",",$vendor_mib_dirs);
my @mibdirs_array;
foreach ( @vendor_mib_dirs ) {
    my $mib_vendor_dir = $mib_dir . "/" . $_;
    if ( ! -e $mib_vendor_dir ) {
        $self->print_error("$client_id","$lang_vars{mib_dir_not_exists}: $mib_vendor_dir<p>$lang_vars{check_mib_config}");
        if ( ! -r $mib_vendor_dir ) {
            $self->print_error("$client_id","$lang_vars{mib_dir_not_readable}: $mib_vendor_dir<p>$lang_vars{check_mib_permission}");
        }
    }
    push (@mibdirs_array,$mib_vendor_dir);
}

return \@mibdirs_array;

}


sub search_net_hosts_down {
my ( $self,$client_id,$ip_version ) = @_;
my @vals;
my $ip_ref;
my $ip_version_expr="";
if ( $ip_version eq "v4" ) {
    $ip_version_expr = "AND ip_version = 'v4'";
} elsif ( $ip_version eq "v6" ) {
    $ip_version_expr = "AND ip_version = 'v6'";
}
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("select distinct red_num from net where red_num IN ( select h.red_num from net n, host h where h.alive = 0 AND n.red_num = h.red_num ) AND red_num NOT IN ( select h.red_num from net n, host h where h.alive = 1 AND n.red_num = h.red_num ) AND red_num NOT IN ( select h.red_num from net n, host h where alive = '-1' AND  n.red_num = h.red_num) AND client_id=$qclient_id $ip_version_expr
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute();
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @vals, [ @$ip_ref ];
}
$sth->finish();
$dbh->disconnect;
return @vals;
}

sub search_net_hosts_down_never_checked {
my ( $self,$client_id,$ip_version ) = @_;
my @vals;
my $ip_ref;
my $ip_version_expr="";
if ( $ip_version eq "v4" ) {
    $ip_version_expr = "AND ip_version = 'v4'";
} elsif ( $ip_version eq "v6" ) {
    $ip_version_expr = "AND ip_version = 'v6'";
}
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("select distinct red_num from net where red_num IN ( select h.red_num from net n, host h where ( h.alive = 0 OR h.alive = '-1' ) AND n.red_num = h.red_num ) AND red_num NOT IN ( select h.red_num from net n, host h where h.alive = 1 AND n.red_num = h.red_num ) AND client_id=$qclient_id $ip_version_expr
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @vals, [ @$ip_ref ];
}
    $sth->finish();
    $dbh->disconnect;
    return @vals;
}


sub create_snmp_session {
my ($self,$client_id,$node,$community,$community_type,$snmp_version,$auth_pass,$auth_proto,$auth_is_key,$priv_proto,$priv_pass,$priv_is_key,$sec_level,$vars_file,$snmp_port) = @_;

my %lang_vars = $self->_get_vars("$vars_file");
my $session;
my $error;

$snmp_port=161 if ! $snmp_port;

my $timeout = 400000;
my $retries = 1;

my $ipversion = ip_get_version ($node);
$node="udp6:" . $node if $ipversion eq "6";

if ( $snmp_version == "1" || $snmp_version == "2" ) {
    $session = new SNMP::Session(DestHost => $node,
                    $community_type => $community,
                    Version => $snmp_version,
                    UseSprintValue => 1,
                    RemotePort => $snmp_port,
                    Timeout => $timeout,
                    Retries => $retries,
                    Verbose => 1
                    );
} elsif ( $snmp_version == "3" && $community && ! $auth_proto && ! $priv_proto ) {
    $session = new SNMP::Session(DestHost => $node,
                    $community_type => $community,
                    Version => $snmp_version,
                    SecLevel => $sec_level,
                    UseSprintValue => 1,
                    RemotePort => $snmp_port,
                    Timeout => $timeout,
                    Retries => $retries,
                    );
} elsif ( $snmp_version == "3" && $auth_proto && ! $auth_is_key && ! $priv_proto ) {
    $session = new SNMP::Session(DestHost => $node,
                    Debug=>1,
                    $community_type => $community,
                    Version => $snmp_version,
                    SecLevel => $sec_level,
                    AuthPass => $auth_pass,
                    AuthProto => $auth_proto,
                    UseSprintValue => 1,
                    RemotePort => $snmp_port,
                    Timeout => $timeout,
                    Retries => $retries,
                    );
} elsif ( $snmp_version == "3" && $auth_proto && $auth_is_key && ! $priv_proto ) {
    $session = new SNMP::Session(DestHost => $node,
                    $community_type => $community,
                    Version => $snmp_version,
                    SecLevel => $sec_level,
                    AuthMasterKey => $auth_pass,
                    AuthProto => $auth_proto,
                    UseSprintValue => 1,
                    RemotePort => $snmp_port,
                    Timeout => $timeout,
                    Retries => $retries,
                    );
} elsif ( $snmp_version == "3" && $auth_proto && $priv_proto && ! $auth_is_key && ! $priv_is_key ) {
    $session = new SNMP::Session(DestHost => $node,
                    $community_type => $community,
                    Version => $snmp_version,
                    SecLevel => $sec_level,
                    AuthPass => $auth_pass,
                    AuthProto => $auth_proto,
                    PrivPass => $priv_pass,
                    PrivProto => $priv_proto,
                    UseSprintValue => 1,
                    RemotePort => $snmp_port,
                    Timeout => $timeout,
                    Retries => $retries,
                    );
} elsif ( $snmp_version == "3" && $auth_proto && $priv_proto && $auth_is_key && ! $priv_is_key ) {
    $session = new SNMP::Session(DestHost => $node,
                    $community_type => $community,
                    Version => $snmp_version,
                    SecLevel => $sec_level,
                    AuthMasterKey => $auth_pass,
                    AuthProto => $auth_proto,
                    PrivPass => $priv_pass,
                    PrivProto => $priv_proto,
                    UseSprintValue => 1,
                    RemotePort => $snmp_port,
                    Timeout => $timeout,
                    Retries => $retries,
                    );
} elsif ( $snmp_version == "3" && $auth_proto && $priv_proto && ! $auth_is_key && $priv_is_key ) {
    $session = new SNMP::Session(DestHost => $node,
                    $community_type => $community,
                    Version => $snmp_version,
                    SecLevel => $sec_level,
                    AuthPass => $auth_pass,
                    AuthProto => $auth_proto,
                    PrivMasterKey => $priv_pass,
                    PrivProto => $priv_proto,
                    UseSprintValue => 1,
                    RemotePort => $snmp_port,
                    Timeout => $timeout,
                    Retries => $retries,
                    );
} elsif ( $snmp_version == "3" && $auth_proto && $priv_proto && $auth_is_key && $priv_is_key ) {
    $session = new SNMP::Session(DestHost => $node,
                    $community_type => $community,
                    Version => $snmp_version,
                    SecLevel => $sec_level,
                    AuthMasterKey => $auth_pass,
                    AuthProto => $auth_proto,
                    PrivMasterKey => $priv_pass,
                    PrivProto => $priv_proto,
                    UseSprintValue => 1,
                    RemotePort => $snmp_port,
                    Timeout => $timeout,
                    Retries => $retries,
                    );
} else {
    $self->print_error("$client_id","$lang_vars{can_not_determe_sec_level}");
}


if ( $ENV{HTTP_REFERER} !~ /ip_discover_net_snmp_form.cgi|ip_fetch_switchinfo/ ) {
    print "<p><b>$node</b>: $lang_vars{snmp_connect_error_message} (2)\n<p><br><p><FORM><INPUT TYPE=\"BUTTON\" VALUE=\"$lang_vars{atras_message}\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM>" unless
(defined $session);
}

return $session;
}


sub create_snmp_info_session {
my ($self,$client_id,$node,$community,$community_type,$snmp_version,$auth_pass,$auth_proto,$auth_is_key,$priv_proto,$priv_pass,$priv_is_key,$sec_level,$mibdirs_ref,$vars_file,$debug,$snmp_port) = @_;

my %lang_vars = $self->_get_vars("$vars_file");
my $session;
my $error;
$debug="0" if ! $debug;

my $timeout = 400000;
my $retries = 1;

$snmp_port=161 if ! $snmp_port;

my $ipversion = ip_get_version ($node);
$node="udp6:" . $node if $ipversion eq "6";

if ( $snmp_version == "1" || $snmp_version == "2" ) {
    $session = new SNMP::Info (
        AutoSpecify => 1,
        Debug       => $debug,
        DestHost    => $node,
        $community_type => $community,
        Version     => $snmp_version,
        MibDirs     => $mibdirs_ref,
        RemotePort => $snmp_port,
        Timeout => $timeout,
        Retries => $retries,
        );

} elsif ( $snmp_version == "3" && $community && ! $auth_proto && ! $priv_proto ) {

    $session = new SNMP::Info (
        AutoSpecify => 1,
        Debug       => 0,
        DestHost    => $node,
        $community_type => $community,
        Version     => $snmp_version,
        SecLevel => $sec_level,
        MibDirs     => $mibdirs_ref,
        RemotePort => $snmp_port,
        Timeout => $timeout,
        Retries => $retries,
        );

} elsif ( $snmp_version == "3" && $auth_proto && ! $auth_is_key && ! $priv_proto ) {

    $session = new SNMP::Info (
        AutoSpecify => 1,
        Debug       => 0,
        DestHost    => $node,
        $community_type => $community,
        Version     => $snmp_version,
        SecLevel => $sec_level,
        AuthPass => $auth_pass,
        AuthProto => $auth_proto,
        MibDirs     => $mibdirs_ref,
        RemotePort => $snmp_port,
        Timeout => $timeout,
        Retries => $retries,
        );
} elsif ( $snmp_version == "3" && $auth_proto && $auth_is_key && ! $priv_proto ) {

    $session = new SNMP::Info (
        AutoSpecify => 1,
        Debug       => 0,
        DestHost    => $node,
        $community_type => $community,
        Version     => $snmp_version,
        SecLevel => $sec_level,
        AuthLocalizedKey => $auth_pass,
        AuthProto => $auth_proto,
        MibDirs     => $mibdirs_ref,
        RemotePort => $snmp_port,
        Timeout => $timeout,
        Retries => $retries,
        );
} elsif ( $snmp_version == "3" && $auth_proto && $priv_proto && ! $auth_is_key && ! $priv_is_key ) {

    $session = new SNMP::Info (
        AutoSpecify => 1,
        Debug       => 0,
        DestHost    => $node,
        $community_type => $community,
        Version     => $snmp_version,
        SecLevel => $sec_level,
        AuthPass => $auth_pass,
        AuthProto => $auth_proto,
        PrivPass => $priv_pass,
        PrivProto => $priv_proto,
        MibDirs     => $mibdirs_ref,
        RemotePort => $snmp_port,
        Timeout => $timeout,
        Retries => $retries,
        );

} elsif ( $snmp_version == "3" && $auth_proto && $priv_proto && $auth_is_key && ! $priv_is_key ) {
    $session = new SNMP::Session(DestHost => $node,
        $community_type => $community,
        Version => $snmp_version,
        SecLevel => $sec_level,
        AuthMasterKey => $auth_pass,
        AuthProto => $auth_proto,
        PrivPass => $priv_pass,
        PrivProto => $priv_proto,
        UseSprintValue => 1,
        RemotePort => $snmp_port,
        Timeout => $timeout,
        Retries => $retries,
        );
} elsif ( $snmp_version == "3" && $auth_proto && $priv_proto && ! $auth_is_key && $priv_is_key ) {
    $session = new SNMP::Session(DestHost => $node,
        $community_type => $community,
        Version => $snmp_version,
        SecLevel => $sec_level,
        AuthPass => $auth_pass,
        AuthProto => $auth_proto,
        PrivMasterKey => $priv_pass,
        PrivProto => $priv_proto,
        UseSprintValue => 1,
        RemotePort => $snmp_port,
        Timeout => $timeout,
        Retries => $retries,
        );
} elsif ( $snmp_version == "3" && $auth_proto && $priv_proto && $auth_is_key && $priv_is_key ) {
    $session = new SNMP::Session(DestHost => $node,
        $community_type => $community,
        Version => $snmp_version,
        SecLevel => $sec_level,
        AuthMasterKey => $auth_pass,
        AuthProto => $auth_proto,
        PrivMasterKey => $priv_pass,
        PrivProto => $priv_proto,
        UseSprintValue => 1,
        RemotePort => $snmp_port,
        Timeout => $timeout,
        Retries => $retries,
        );
} else {
    $self->print_error("$client_id","$lang_vars{can_not_determe_sec_level}");
}

if ( $ENV{HTTP_REFERER} !~ /ip_discover_net_snmp_form.cgi|ip_fetch_switchinfo/ ) {
    print "<p><b>$node</b>: $lang_vars{snmp_connect_error_message} (1)<p><br><p><FORM><INPUT TYPE=\"BUTTON\" VALUE=\"$lang_vars{atras_message}\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM>" unless
(defined $session);
}

return $session;
}


sub create_net_snmp_form {
my ($self, $client_id, $script, $vars_file) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
    my $server_proto=$self->get_server_proto();
my $base_uri = $self->get_base_uri();

print <<EOF;
<tr><td align="right">$lang_vars{snmp_version_message}</td>
<td colspan="3"><select name="snmp_version" id="snmp_version" onchange="changeText1(this.value); targ=document.getElementById('Hide1b');this.value=='1' || this.value=='2'? targ.style.visibility='visible' : targ.style.visibility='hidden';                 targ=document.getElementById('community_string'); this.value=='3'? targ.type='text' : targ.type='password'; this.value=='3'? targ.value='' : targ.value='public'; targ=document.getElementById('Hide3a'); this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('Hide3b'); this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('Hide3c'); this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('Hide3d'); this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('Hide3e'); this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('Hide3f'); this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('Hide3g'); this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('auth_proto');this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('priv_proto');this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden';  targ=document.getElementById('auth_pass');this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('priv_pass');this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('priv_pass');this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('auth_is_key');this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden'; targ=document.getElementById('priv_is_key');this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden';  targ=document.getElementById('sec_level');this.value=='3'? targ.style.visibility='visible' : targ.style.visibility='hidden';">

<option value="1" selected>v1</option>
<option value="2">v2c</option>
<option value="3">v3</option>
</select>
</td></tr>

<tr><td align="right">
<span id="Hide1a">$lang_vars{snmp_community_message}</span>
</td><td colspan=\"3\"><input type="password" size="10" name="community_string" id="community_string" value="public" maxlength="55" style="visibility:visible;"> <span id="Hide1b">$lang_vars{snmp_default_public_message}</span></td></tr>


<tr><td align="right">
<span id="Hide3e" style="visibility:hidden;">$lang_vars{security_level_message}</span>
</td><td colspan=\"3\">
<select name="sec_level" id="sec_level" style="visibility:hidden;"> 
<option value="noAuthNoPriv">noAuthNoPriv</option>
<option value="authNoPriv" selected>authNoPriv</option>
<option value="authPriv">authPriv</option>
</select>

</td></tr>

<tr><td align="right"></td><td><span id="Hide3a" style="visibility:hidden;">$lang_vars{auth_proto_message}</span></td><td><span id="Hide3f" style="visibility:hidden;">$lang_vars{auth_pass_message}</span></td><td><span id="Hide3c" style="visibility:hidden;">$lang_vars{is_key_message}</span></td></tr>

<tr><td align="right"></td><td><select name="auth_proto" id="auth_proto" style="visibility:hidden;"> 
<option value="" selected>---</option>
<option value="MD5">MD5</option>
<option value="SHA">SHA</option>
</select>

</td><td><input type="password" size="15" name="auth_pass" id="auth_pass" maxlength="100" style="visibility:hidden;"></td><td><input type="checkbox" name="auth_is_key" id="auth_is_key" value="yes" style="visibility:hidden;"></tr>

<tr><td align="right"></td><td><span id="Hide3b" style="visibility:hidden;">$lang_vars{priv_proto_message}</span></td><td><span id="Hide3g" style="visibility:hidden;">$lang_vars{priv_pass_message}</span></td><td><span id="Hide3d" style="visibility:hidden;">$lang_vars{is_key_message}</span></td></tr>

<tr><td align="right"></td><td><select name="priv_proto" id="priv_proto" style="visibility:hidden;"> 
<option value="" selected>---</option>
<option value="DES" >DES</option>
<option value="3DES">3DES</option>
<option value="AES">AES</option>
</select>
</td><td><input type="password" size="15" name="priv_pass" id="priv_pass" maxlength="100" style="visibility:hidden;"></td><td><input type="checkbox" name="priv_is_key" id="priv_is_key" value="yes" style="visibility:hidden;"></tr>

<tr><td colespan="4"></td></tr>

<!-- <tr><td align="right"><span id="Hide3h" style="visibility:hidden;">$lang_vars{context_name_message}</span></td><td colspan=\"1\"><input type="text" size="10" name="context_name" id="context_name" value="" maxlength="55" style="visibility:hidden;"></td><td colspan="2"><span id="Hide3i" style="visibility:hidden;">$lang_vars{context_explic_message}</span></td></tr> -->
<!-- <tr><td align="right"><span id="Hide3j" style="visibility:hidden;">$lang_vars{context_engine_id_message}</span></td><td colspan=\"1\"><input type="text" size="10" name="context_engine_id" id="context_engine_id" value="" maxlength="55" style="visibility:hidden;"></td><td colspan="2"><span id="Hide3k" style="visibility:hidden;">$lang_vars{context_explic_message}</span></td></tr> -->

<tr><td align="right"><br>$lang_vars{add_comment_snmp_query_message}</td><td><br><input type="checkbox" name="add_comment" value="y"></td></tr>

<tr><td align="right">$lang_vars{mark_sync_message}</td><td><input type=\"checkbox\" name=\"mark_sync\" value="y" checked></td>
<tr><td><br><input type="hidden" name="client_id" value="$client_id"><input type="submit" value="$lang_vars{query_message}" name=\"B1\" class=\"input_link_w\"></td></tr>

</form>
</table>

EOF
}

#### IPv6

sub check_valid_ipv4 {
my ($self, $ip) = @_;
my $valid = ip_is_ipv4("$ip");

# 1 if valid
return $valid;
}

sub check_valid_ipv6 {
my ($self, $ip) = @_;
my $valid = ip_is_ipv6("$ip");

# 1 if valid
return $valid;
}

sub exec_ip_open {
my ($self) = @_;
my $error="";
my %ips=();
my $if="";
my $if_index="";
my $command="";
if ( -e "/bin/ip" ) {
    $command="/bin/ip";
} elsif ( -e "/sbin/ip" ) {
    $command="/sbin/ip";
}
if ( ! $command ) {
    $ips{error}="COMMAND 'ip' NOT FOUND";
    return %ips
}
open(IP,"$command addr |") or $error=$!;
while ( <IP> ) {
    if ( $_ =~/^\d+: / ) {
        $_ =~ /^(\d+): (\w+):/;
        $if_index=$1;
        $if=$2;
    }
    
    next if $_ !~ /inet/;
    next if $_ =~ /inet6 ::1\/128/;
    next if $_ =~ /127.0.0.1/;
    $_=~ /inet.? (.+\/\d{1,3}).*/;
    my $ip=$1;
    $ip =~ s/\/\d{1,3}//;
    if ( $ip =~ /:/ ) {
        $ip=$ip . " " . $if;
    }
    $ip =~ s/\/d{1,3}//;
    $ips{$ip}++;
}
$ips{error}=$error;

return %ips;
}

sub ping_system {
my ($self, $ip, $timeout) = @_;

my @args;
$timeout = 2 if ! $timeout || $timeout !~ /^\d{1,3}$/;

$ENV{PATH} = "/bin";
my $devnull = "/dev/null";
my $command = "/bin/ping -c 2 -W $timeout -w 6 " . $ip . " 1>$devnull 2>&1";
my $exit_status = system($command) >> 8;

# O = OK
return $exit_status;
}

sub ping6_system {
my ($self,$command,$success) = @_;
my $devnull = "/dev/null";
$command .= " 1>$devnull 2>$devnull";
my $exit_status = system($command) >> 8;
return $exit_status;
}

sub fetch_config {
my ($self,$command_path,$command_options,$log_file_name) = @_;
my $command="fetch_config.pl";
my $devnull = "/dev/null";
$command = $command_path . "/" . $command;
$command .= " " . $command_options;
#	$command .= " 1>$devnull 2>$devnull";
$command .= " 1>$devnull";
my $exit_status = system($command) >> 8;

return $exit_status;
}


### CHARTS

sub create_stat_pie_chart_data {
my $self = shift;
my %args = @_;

my $client_id = $self->{client_id};
my $vars_file = $self->{vars_file};
my %lang_vars = $self->_get_vars("$vars_file");

my $counts=$args{counts} || "";
#my $type=$args{type} || "";
my $im_name=$args{im_name} || "";
my $im_title=$args{im_title} || "";
my $cm_stat=$args{cm_stat} || "";
my $ip_version=$args{ip_version} || "";

my $data = "";

my @bg_colors = (

'rgba(40, 116, 166 , 0.7)',
'rgba(118, 68, 138 , 0.7)',
'rgba(20, 143, 119 , 0.7)',
'rgba(176, 58, 46, 0.7)',
'rgba(175, 96, 26 , 0.7)',
'rgba(183, 149, 11 , 0.7)',
'rgba(40, 55, 71 , 0.7)',
'rgba(179, 182, 183, 0.7)',

'rgba(231, 76, 60 , 0.7)',
'rgba(155, 89, 182, 0.7)',
'rgba(52, 152, 219, 0.7)',
'rgba(26, 188, 156 , 0.7)',
'rgba(241, 196, 15 , 0.7)',
'rgba(230, 126, 34, 0.7)',
'rgba(46, 64, 83 , 0.7)',
'rgba(208, 211, 212, 0.7)',

'rgba(250, 219, 216 , 0.7)',
'rgba(232, 218, 239 , 0.7)',
'rgba(214, 234, 248 , 0.7)',
'rgba(253, 235, 208, 0.7)',
'rgba(209, 242, 235 , 0.7)',
'rgba(252, 243, 207 , 0.7)',
'rgba(214, 219, 223 , 0.7)',
'rgba(251, 252, 252, 0.7)',

'rgba(120, 40, 31, 0.7)',
'rgba(81, 46, 95 , 0.7)',
'rgba(27, 79, 114 , 0.7)',
'rgba(14, 98, 81 , 0.7)',
'rgba(125, 102, 8 , 0.7)',
'rgba(110, 44, 0, 0.7)',
'rgba(123, 125, 125, 0.7)',
'rgba(27, 38, 49, 0.7)',

'rgba(240, 178, 122, 0.7)',
'rgba(247, 220, 111, 0.7)',
'rgba(118, 215, 196 , 0.7)',
'rgba(133, 193, 233 , 0.7)',
'rgba(195, 155, 211 , 0.7)',
'rgba(241, 148, 138 , 0.7)',
'rgba(153, 163, 164 , 0.7)',
'rgba(240, 243, 244 , 0.7)',

'rgba(175, 96, 26 , 0.7)',
'rgba(183, 149, 11 , 0.7)',
'rgba(20, 143, 119 , 0.7)',
'rgba(40, 116, 166 , 0.7)',
'rgba(118, 68, 138 , 0.7)',
'rgba(176, 58, 46, 0.7)',
'rgba(40, 55, 71 , 0.7)',
'rgba(179, 182, 183, 0.7)',

);

my $label_string = "";
my $counts_string = "";
my $bg_color_string = "";
my $border_color_string = "";

my $i = 0;
my %counts = %$counts;
foreach my $name ( sort { $a cmp $b } keys %counts ) {
    my $count = $counts{$name};
    $label_string .= '","' . $name;
    $counts_string .= '","' . $count;
    $bg_color_string .= '","' . $bg_colors[$i];
    $i++;
}

$label_string =~ s/^",//;
$counts_string =~ s/^",//;
$bg_color_string =~ s/^",//;
$label_string =~ s/$/"/;
$label_string =~ s/NULL/$lang_vars{no_value_message}/;
$counts_string =~ s/$/"/;
$bg_color_string =~ s/$/"/;
$border_color_string = $bg_color_string;

$data .= '
data: {
    datasets: [{
        data: [';

$data .= $counts_string;
$data .= '],
        backgroundColor: [';
$data .= $bg_color_string;
$data .= '],
        borderColor: [';
$data .= $border_color_string;
$data .= '],
    }],';
$data .= 'labels: [';
$data .= $label_string;
$data .= ']
}';

return $data;
}



sub create_stat_pie_chart {
#	use GD::Graph::pie;
my ( $self,$counts,$type,$im_name,$ip_version,$client_id,$vars_file,$im_title,$cm_stat) = @_;
$im_title = $im_name if ! $im_title;
my %lang_vars = $self->_get_vars("$vars_file");
$cm_stat="" if ! $cm_stat;

my @stat_net_new=();
my @net_count;
my %host_net_count=();
my $m=0;

my %counts=%$counts;
    foreach my $key ( sort { $a cmp $b } keys %counts ) {
    my $value=$counts{$key};

    if ( $type ) {
        my $count_tot = "0";
        my $k = "0";
        my @stat_host_num=();

        if ( $type eq "cat" ) {
            $count_tot=$self->get_stat_host_num_cat_red_num("$client_id", "$key", "$ip_version") || 0;
        } elsif ( $type eq "cm_stat" ) {
            #do nothing
        } else {
            $count_tot=$self->get_stat_host_num_loc_red_num("$client_id", "$key", "$ip_version") || 0;
        }

        $host_net_count{$key}=$count_tot;
    }
    if ( $im_name =~ /cat/ ) {
        $key = $lang_vars{without_cat_message} if $key eq "NULL";
    } else {
        $key = $lang_vars{without_loc_message} if $key eq "NULL";
    }
    $stat_net_new[$m]=$key;
    $net_count[$m]=$value;
    $m++;
}


#	my $lang_ip_version = "4";
#	$lang_ip_version = "6" if $ip_version eq "v6";
#	$im_name =~ s/\s/_/g;
#	my $im_name_big=$im_name . "_big";
#	if ( $m < 250 ) {
#		$self->create_pie_chart("$vars_file",\@stat_net_new,\@net_count,"$im_name","$im_title","","$cm_stat");
#		$self->create_pie_chart("$vars_file",\@stat_net_new,\@net_count,"$im_name_big","$im_title","big","$cm_stat");
#	}

if ( $type ) {
    return (\%host_net_count);
}

}

#sub create_pie_chart {
#	use GD::Graph::pie;
#	my ( $self,$vars_file,$ar1,$ar2,$im_name,$im_title,$big,$cm_stat) = @_;
#
#	my $dir;
#	if ( $cm_stat ) {
#		$dir = "../../";
#	} else {
#		$dir="." if ! $dir;
#	}
#
#	my %lang_vars = $self->_get_vars("$vars_file");
#
#	my ($DOCUMENT_ROOT, $SCRIPT_NAME) = _get_script_context();
#	$SCRIPT_NAME =~ s/^\/.*(\/.*)/$1/;
#	$DOCUMENT_ROOT =~ s/$SCRIPT_NAME//;
#
#	$big="" if ! $big;
#
#	my $pie_height=20;
#	my $width=200;
#	my $height=160;
#	my $im_title_big=$im_title;
#	$im_title="";
#	if ( $big ) {
#		$width=800;
#		$height=640;
#		$pie_height=40;
#		$im_title=$im_title_big;
#	}
#
#	my @data = (
#		($ar1),
#		($ar2)
#	);
#
#	my $graph = new GD::Graph::pie( $width, $height );
#
#	$graph->set(
#	        title => $im_title,
#		axislabelclr => 'black',
#		pie_height => $pie_height,
#
#		l_margin => 15,
#		r_margin => 15,
#		start_angle => 235,
#		transparent => 0,
#		show_values => 1,
#	);
#
#	if ( -e "$DOCUMENT_ROOT/fonts/arial.ttf" ) {
#		my $arial=$graph->set_value_font("$DOCUMENT_ROOT/fonts/arial.ttf",10);
#	}
#
#	no warnings;
#	if ( $cm_stat ) {
#		my @colors=();
#		my $failed_color="";
#		my $changed_color="";
#		my $unchanged_color="";
#		for (@$ar1) {
#			if ( $_ eq "failed" ) {
#				$failed_color="#FF0000";	
#				push(@colors,"$failed_color");
#			} elsif ( $_ eq "changed" ) {
#				$changed_color="#FFCC00";
#				push(@colors,"$changed_color");
#			} elsif ( $_ eq "unchanged" ) {
##			$unchanged_color="#D0D0D0" if $_ eq "unchanged";	
##			$unchanged_color="#A2AEC8" if $_ eq "unchanged";	
#				$unchanged_color="#CBD1E1";	
#				push(@colors,"$unchanged_color");
#			}
#		}
#		my $colors=\@colors;
#		$graph->set( dclrs => $colors );
#	} else {
#		$graph->set( dclrs => [ qw(#BAD6FF #90C8FF #6699FF #6666FF #B28BC0 #C297D1 #D7A8E8 #ECB8FF #66CC99 #58B185 #6FDFA7 #7DFBBC #B5882D #CC9933 #E1A938 #FFC040 ) ] );
#	}
#	use warnings;
#
#	my $im = $graph->plot(\@data);
#
#	$im_name =~ /^(.*)$/;
#	$im_name = $1;
#	open(PICTURE,">${dir}/imagenes/dyn/${im_name}.png") or warn("Cannot open file for writing: $!");
#	binmode PICTURE;
#	print PICTURE $im->png;
#	close PICTURE;
#}


### OCS



sub _ocs_mysql_connection {
my ($self,$vars_file,$client_id) = @_;

my %lang_vars = $self->_get_vars("$vars_file");
my @config = $self->get_config("$client_id");
my $ocs_database_user=$config[0]->[9] || "";
my $ocs_database_name=$config[0]->[10] || "";
my $ocs_database_pass=$config[0]->[11] || "";
my $ocs_database_ip=$config[0]->[12] || "";
my $ocs_database_port=$config[0]->[13] || "";

my $connect_error = "0";
my $dbh = DBI->connect("DBI:mysql:$ocs_database_name:$ocs_database_ip:$ocs_database_port",$ocs_database_user,$ocs_database_pass,{
            PrintError => 1,
            RaiseError => 0
    } ) or $connect_error = "$DBI::errstr";
if ( $connect_error =~ /Unknown database|Can't connect to MySQL server|Access denied for user/i ) {
#		$self->print_init("gestioip","$lang_vars{fetch_from_ocs_message}","$lang_vars{ocs_bbdd_connect_error_message}","$vars_file","$client_id");
    croak $self->print_error("1","$lang_vars{ocs_bbdd_connect_error_message}<p>$DBI::errstr");
} elsif ( $connect_error =~ /Lost connection to MySQL server at 'reading authorization packet/ ) {
#		print "Mysql connection error - device ignorado $$lang_vars{ignorado_message}<br>\n";
} elsif ( $connect_error ne "0" ) {
    croak $self->print_error("$client_id","$lang_vars{ocs_bbdd_connect_error_message}<p>$DBI::errstr");
}
return $dbh;
}

sub get_ocs_values {
my ( $self,$client_id, $ip_address, $vars_file ) = @_;
my $ip_ref;
    my $dbh = $self->_ocs_mysql_connection("$vars_file","$client_id");
my $qip_address = $dbh->quote( $ip_address );
#	my $qBM = $dbh->quote( $BM );
my $qclient_id = $dbh->quote( $client_id );
my @vals;


###TEST: BESSER HIER ZUSAETZLICH NOCH BM/NETMASK BENUTZEN
    my $sth = $dbh->prepare("SELECT h.id,unix_timestamp(h.LASTDATE),h.LASTDATE,n.IPADDRESS FROM hardware h, networks n WHERE n.hardware_id = h.id AND n.IPADDRESS = $qip_address ORDER BY h.LASTDATE DESC LIMIT 1"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @vals, [ @$ip_ref ];
}
my $ocs_host_id="";
$ocs_host_id = "$vals[0]->[0]" if $vals[0]->[0];

my $time=$vals[0]->[2];

my @values_netmap=();
    $sth = $dbh->prepare("SELECT n.MAC,unix_timestamp(n.DATE),n.IP,n.DATE FROM netmap n WHERE n.IP = $qip_address ORDER BY n.DATE DESC LIMIT 1;"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_netmap, [ @$ip_ref ];
}

my $ocs_MAC=$values_netmap[0]->[0];

if ( $ocs_host_id ) {
    $sth = $dbh->prepare("SELECT n.IPADDRESS,n.IPSUBNET,n.IPMASK,h.NAME,h.WORKGROUP,h.OSNAME,h.OSVERSION,h.PROCESSORT,h.PROCESSORS,h.PROCESSORN,h.MEMORY,h.SWAP,h.TYPE,h.DESCRIPTION,h.WINCOMPANY,h.WINOWNER,h.WINPRODID,h.LASTDATE from networks n, hardware h WHERE n.hardware_id = h.id AND h.id=\"$ocs_host_id\" AND h.LASTDATE=\"$time\""
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    my $i=0;
    my %values_networks=();
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        $values_networks{'NAME'}=$ip_ref->{'NAME'} if $ip_ref->{'NAME'};
        $values_networks{'WORKGROUP'}=$ip_ref->{'WORKGROUP'} if $ip_ref->{'WORKGROUP'};
        $values_networks{'OSNAME'}=$ip_ref->{'OSNAME'} if $ip_ref->{'OSNAME'};
        $values_networks{'OSVERSION'}=$ip_ref->{'OSVERSION'} if $ip_ref->{'OSVERSION'};
        $values_networks{'PROCESSORT'}=$ip_ref->{'PROCESSORT'} if $ip_ref->{'PROCESSORT'};
        $values_networks{'PROCESSORS'}=$ip_ref->{'PROCESSORS'} if $ip_ref->{'PROCESSORS'};
        $values_networks{'PROCESSORN'}=$ip_ref->{'PROCESSORN'} if $ip_ref->{'PROCESSORN'};
        $values_networks{'MEMORY'}=$ip_ref->{'MEMORY'} if $ip_ref->{'MEMORY'};
        $values_networks{'WINCOMPANY'}=$ip_ref->{'WINCOMPANY'} if $ip_ref->{'WINCOMPANY'};
        $values_networks{'WINOWNER'}=$ip_ref->{'WINOWNER'} if $ip_ref->{'WINOWNER'};
        $values_networks{'WINPRODID'}=$ip_ref->{'WINPRODID'} if $ip_ref->{'WINPRODID'};
        $values_networks{'LASTDATE'}=$ip_ref->{'LASTDATE'} if $ip_ref->{'LASTDATE'};
    }


    my @values_memories=();
    $sth = $dbh->prepare("SELECT h.id,m.DESCRIPTION,m.CAPACITY,m.TYPE,m.SPEED,m.NUMSLOTS FROM memories m, hardware h WHERE m.HARDWARE_ID = h.id AND  h.id=\"$ocs_host_id\" AND h.LASTDATE=\"$time\""
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_memories, [ @$ip_ref ];
    }
    $values_memories[0]->[0] = "NOVAL" if ! $values_memories[0]->[0];

    my @values_inputs=();
    $sth = $dbh->prepare("SELECT h.id,i.TYPE,i.MANUFACTURER,i.CAPTION,i.DESCRIPTION,i.interface,i.POINTTYPE FROM inputs i, hardware h WHERE i.HARDWARE_ID = h.id AND h.id=\"$ocs_host_id\" AND h.LASTDATE=\"$time\""
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_inputs, [ @$ip_ref ];
    }
    $values_inputs[0]->[0] = "NOVAL" if ! $values_inputs[0]->[0];


    my @values_storages=();
    $sth = $dbh->prepare("SELECT h.id,s.MANUFACTURER,s.NAME,s.MODEL,s.DESCRIPTION,s.TYPE,s.DISKSIZE FROM storages s, hardware h WHERE s.HARDWARE_ID = h.id AND h.id=\"$ocs_host_id\" AND h.LASTDATE=\"$time\""
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_storages, [ @$ip_ref ];
    }
    $values_storages[0]->[0] = "NOVAL" if ! $values_storages[0]->[0];


    my @values_videos=();
    $sth = $dbh->prepare("SELECT h.id,v.NAME,v.CHIPSET,v.MEMORY,v.RESOLUTION FROM videos v, hardware h WHERE v.HARDWARE_ID = h.id AND h.id=\"$ocs_host_id\" AND h.LASTDATE=\"$time\""
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_videos, [ @$ip_ref ];
    }
    $values_videos[0]->[0] = "NOVAL" if ! $values_videos[0]->[0];


    my @values_sounds=();
    $sth = $dbh->prepare("SELECT h.id,s.MANUFACTURER,s.NAME,s.DESCRIPTION FROM sounds s, hardware h WHERE s.HARDWARE_ID = h.id AND h.id=\"$ocs_host_id\" AND h.LASTDATE=\"$time\""
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_sounds, [ @$ip_ref ];
    }
    $values_sounds[0]->[0] = "NOVAL" if ! $values_sounds[0]->[0];


    my @values_modems=();
    $sth = $dbh->prepare("SELECT h.id, m.NAME,m.MODEL,m.DESCRIPTION,m.TYPE FROM modems m, hardware h WHERE m.HARDWARE_ID = h.id AND h.id=\"$ocs_host_id\" AND h.LASTDATE=\"$time\""
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_modems, [ @$ip_ref ];
    }
    $values_modems[0]->[0] = "NOVAL" if ! $values_modems[0]->[0];


    my @values_softwares=();
    $sth = $dbh->prepare("SELECT h.id,s.name,s.version FROM softwares s, hardware h WHERE s.HARDWARE_ID = h.id AND h.id=\"$ocs_host_id\" AND h.LASTDATE=\"$time\""
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_softwares, [ @$ip_ref ];
    }
    $values_softwares[0]->[0] = "NOVAL" if ! $values_softwares[0]->[0];


    $dbh->disconnect;
    return (\%values_networks,\@values_softwares,\@values_memories,\@values_inputs,\@values_storages,\@values_videos,\@values_sounds,\@values_modems,$ocs_MAC);
}
}

sub reset_database_client {
my ( $self, $client_id, $ip_version_reset ) = @_;
    my $dbh = $self->_mysql_connection();
my $ip_version_expr='';
if ( $ip_version_reset eq "v4" ) {
    $ip_version_expr = " ip_version='v4'";
} elsif ( $ip_version_reset eq "v6" ) {
    $ip_version_expr = " ip_version='v6'";
}
my $qclient_id = $dbh->quote( $client_id );
my $qip_version_reset = $dbh->quote( $ip_version_reset );
my $sth;
if ( $ip_version_reset eq "all" ) {
    $sth = $dbh->prepare("delete from custom_net_column_entries WHERE client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from custom_net_columns WHERE client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from custom_host_column_entries WHERE client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from custom_host_columns WHERE client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from host WHERE client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from net WHERE client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from ranges WHERE client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from vlans WHERE client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    #CM
    $sth = $dbh->prepare("delete from device_cm_config WHERE client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id - device_cm_config","Can not execute statement:<p>$DBI::errstr");
#		$sth = $dbh->prepare("delete from device_type_groups WHERE client_id = $qclient_id");
#		$sth->execute() or croak $self->print_error("$client_id - device_type_groups","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from device_user_groups WHERE client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id - device_user_groups","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from cm_server WHERE client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id - cm_server","Can not execute statement:<p>$DBI::errstr");
} else {
    print "delete from custom_net_column_entries WHERE client_id = $qclient_id AND net_id IN ( SELECT red_num FROM net WHERE $ip_version_expr)<br>\n";
    $sth = $dbh->prepare("delete from custom_net_column_entries WHERE client_id = $qclient_id AND net_id IN ( SELECT red_num FROM net WHERE $ip_version_expr)");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from custom_host_column_entries WHERE client_id = $qclient_id AND host_id IN ( SELECT id FROM host WHERE $ip_version_expr )");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from ranges WHERE client_id = $qclient_id AND red_num IN ( SELECT red_num FROM net WHERE $ip_version_expr)" );
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from host WHERE client_id = $qclient_id AND $ip_version_expr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth = $dbh->prepare("delete from net WHERE client_id = $qclient_id AND $ip_version_expr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    #CM
    $sth = $dbh->prepare("delete from device_cm_config WHERE client_id = $qclient_id AND host_id IN ( SELECT id FROM host WHERE $ip_version_expr )");
    $sth->execute() or croak $self->print_error("$client_id - device_cm_config","Can not execute statement:<p>$DBI::errstr");
#		$sth = $dbh->prepare("delete from device_user_groups WHERE client_id = $qclient_id AND id IN ( SELECT id FROM device_cm_config WHERE host_id IN ( SELECT id FROM host WHERE $ip_version_expr))");
#		$sth->execute() or croak $self->print_error("$client_id - device_user_groups","Can not execute statement:<p>$DBI::errstr");
#		$sth = $dbh->prepare("delete from cm_server WHERE client_id = $qclient_id");
#		$sth->execute() or croak $self->print_error("$client_id - cm_server","Can not execute statement:<p>$DBI::errstr");
}
    $sth->finish();
    $dbh->disconnect;
}

sub GenerateBase {
my ( $self, $base ) = @_;
my @nums = (0..9,'a'..'z','A'..'Z','!','#','$','%','&','(', ')','*','+','-',';','<','=','>','?','@','^','_','`','{', '|', '}','~')[0..$base-1];
my $index = 0;
my %nums = map {$_,$index++} @nums;

my $To = sub
{
    my $number = shift;
    return $nums[0] if $number == 0;
    my $rep = ""; # this will be the end value.
    while( $number > 0 ) {
        $rep = $nums[$number % $base] . $rep;
        $number = int( $number / $base );
    }
    return $rep;
};

my $From = sub
{
    my $rep = shift;
    my $number = 0;
    for( split //, $rep ) {
        $number *= $base;
        $number += $nums{$_};
    }
    return $number;
};

return ( $To, $From );
}



sub get_redes_mig {
my ( $self,$client_id, $match, $map_type, $BM6 ) = @_;
    my @values_redes;
my $ip_ref;
$BM6 = "1" if ! $BM6;

    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth;
$match = "" if ! $match;
$map_type="" if ! $map_type;
my $match_expr="";
my $bm_expr="";
if ( $match ) {
    $match.="\\\\.";
    $match_expr="AND n.red REGEXP \"^$match\"";
    if ( $map_type eq "first_two_octs"  && $BM6 > 40 ) {
        $bm_expr="AND n.BM BETWEEN '17' AND '24'"; 
    } elsif ( $map_type eq "first_three_octs" && $BM6 > 40 ) {
        $bm_expr="AND n.BM BETWEEN '25' AND '32'"; 
    } else {
    }
}
    
$sth = $dbh->prepare("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.vigilada, n.loc, n.categoria FROM net n, locations l , categorias_net c WHERE l.id = n.loc AND n.categoria = c.id AND n.ip_version = 'v4' AND n.rootnet='0' $match_expr $bm_expr ORDER BY INET_ATON(n.red)")
    or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_redes, [ @$ip_ref ];
    }
    $dbh->disconnect;
    $sth->finish();
    return @values_redes;
}


sub count_site_cats_nets {
my ($self,$client_id,$values_categorias,$values_locations) = @_;
my ($ip_ref,$sth);
    my $dbh = $self->_mysql_connection();
my %site_cat_counts;
my $qclient_id = $dbh->quote( $client_id );
foreach my $loc( @$values_locations ) {
    my $qloc = $dbh->quote( $loc->[0] );
    foreach my $cat( @$values_categorias ) {
        my $qcat = $dbh->quote( $cat->[0] );
        $sth = $dbh->prepare("SELECT COUNT(*) FROM net WHERE categoria=( SELECT id from categorias_net WHERE cat=$qcat ) AND loc=( SELECT id from locations WHERE loc=$qloc ) AND client_id=$qclient_id AND ip_version='v4' AND rootnet!='1'")
            or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        while ( $ip_ref = $sth->fetchrow_hashref ) {
            my $count=${ip_ref}->{'COUNT(*)'} if $ip_ref->{'COUNT(*)'} || $ip_ref->{'COUNT(*)'} == 0;
            push @{$site_cat_counts{"$loc->[0]_$cat->[0]"}},"$count";
        }
    }
}
return \%site_cat_counts;
}


sub count_locs {
my ( $self,$client_id ) = @_;
my $val;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT COUNT(*) FROM locations WHERE client_id=$qclient_id")
            or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $val = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $val;
}

sub count_cats {
my ( $self,$client_id ) = @_;
my $val;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT COUNT(*) FROM categorias_net")
            or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $val = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $val;
}


sub fetch_zone {
my ($self,$zone_name,$default_resolver,$dns_servers)=@_;
use Net::DNS;
$default_resolver="" if ! $default_resolver;
my @zone_records;
my $res;

if ( $default_resolver eq "yes" && ! @$dns_servers ) {
    # prefer dns_servers to default_resolver
    $res = Net::DNS::Resolver->new(
    retry       => 2,
    udp_timeout => 5,
    recurse     => 1,
    debug       => 0,
    );
} else {
    $res = Net::DNS::Resolver->new(
    retry       => 2,
    udp_timeout => 5,
    nameservers => [@$dns_servers],
    recurse     => 1,
    debug       => 0,
    );
}


my @fetch_zone = $res->axfr("$zone_name");

my $i=0;
my $rr;
foreach $rr (@fetch_zone) {
    $zone_records[$i]=$rr->string;
    $i++;
}
return @zone_records;
}


sub get_net_cat_hash {
my ( $self,$client_id ) = @_;
my $ip_ref;
my %values;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id,cat FROM categorias_net")
    or croak $self->print_error("$client_id","Can not prepare statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{'id'} || "";
        my $cat = $ip_ref->{'cat'} || "";

        $values{$cat}="$id";
    }

    $dbh->disconnect;
    return \%values;
}

sub get_loc_hash {
my ( $self,$client_id ) = @_;
my $ip_ref;
my %values;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id,loc FROM locations WHERE client_id=$qclient_id or client_id=9999")
    or croak $self->print_error("$client_id","Can not prepare statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{'id'} || "";
        my $loc = $ip_ref->{'loc'} || "";

        $values{$loc}="$id";
    }

    $dbh->disconnect;
    return \%values;
}

sub get_cat_hash {
	my ( $self,$client_id ) = @_;
	my $ip_ref;
	my %values;
    my $dbh = $self->_mysql_connection();
	my $qclient_id = $dbh->quote( $client_id );
	my $sth = $dbh->prepare("SELECT id,cat FROM categorias")
    or croak $self->print_error("$client_id","Can not prepare statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{'id'} || "";
        my $cat = $ip_ref->{'cat'} || "";

        $values{$cat}="$id";
    }

    $dbh->disconnect;
    return \%values;
}



sub get_red_hostnames {
my ( $self, $client_id, $red_num ) = @_;
my @hostnames=();
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT ip,hostname FROM host WHERE red_num = $qred_num ORDER BY hostname"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @hostnames, [ @$ip_ref ];
}
$sth->finish();
$dbh->disconnect;
return @hostnames;
}




## AUTONOMOUS SYSTEMS

sub get_as_clients {
my ( $self,$client_id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare(" SELECT id, client_name, type, description, comment, phone, fax, address, contact, contact_email, contact_phone, contact_cell FROM autonomous_systems_clients WHERE (client_id = $qclient_id || client_id='9999')") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
    $dbh->disconnect;
    return @values;
}

sub get_one_as_client {
my ( $self,$client_id,$as_client_id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qas_client_id = $dbh->quote( $as_client_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare(" SELECT id, client_name, type, description, comment, phone, fax, address, contact, contact_email, contact_phone, contact_cell FROM autonomous_systems_clients WHERE id=$qas_client_id AND ( client_id = $qclient_id || client_id='9999')") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
    $dbh->disconnect;
    return @values;
}


sub check_as_client_exists {
my ( $self,$client_id,$as_client_name ) = @_;
my $value;
my $dbh = $self->_mysql_connection();
my $qas_client_name = $dbh->quote( $as_client_name  );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT client_name FROM autonomous_systems_clients where client_name=$qas_client_name AND ( client_id=$qclient_id || client_id='9999')
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();
    $value = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $value;
}

sub insert_as_client {
my ( $self,$client_id,$as_client_name,$type,$description,$comment,$phone,$fax,$address,$contact,$contact_email,$contact_phone,$contact_cell) = @_;
    my $dbh = $self->_mysql_connection();
    my $qas_client_name = $dbh->quote( $as_client_name );
    my $qtype = $dbh->quote( $type );
    my $qdescription = $dbh->quote( $description );
    my $qcomment = $dbh->quote( $comment );
    my $qphone = $dbh->quote( $phone );
    my $qfax = $dbh->quote( $fax );
    my $qaddress = $dbh->quote( $address );
    my $qcontact = $dbh->quote( $contact );
    my $qcontact_email = $dbh->quote( $contact_email );
    my $qcontact_phone = $dbh->quote( $contact_phone );
    my $qcontact_cell = $dbh->quote( $contact_cell );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("INSERT INTO autonomous_systems_clients (client_name, type, description, comment, phone, fax, address, contact, contact_email, contact_phone, contact_cell, client_id) VALUES ( $qas_client_name,$qtype,$qdescription,$qcomment,$qphone,$qfax,$qaddress,$qcontact,$qcontact_email,$qcontact_phone,$qcontact_cell,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub count_as_clients {
my ( $self, $client_id ) = @_;
my $count;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT COUNT(*) from autonomous_systems_clients
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $count = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $count;
}

sub update_as_client {
my ( $self,$client_id,$as_client_id,$name,$type,$comment,$description,$phone,$fax,$address,$contact,$contact_email,$contact_phone,$contact_cell ) = @_;
my $dbh = $self->_mysql_connection();
my $qas_client_id = $dbh->quote( $as_client_id );
my $qname = $dbh->quote( $name );
my $qtype = $dbh->quote( $type );
my $qcomment = $dbh->quote( $comment );
my $qdescription = $dbh->quote( $description );
my $qphone = $dbh->quote( $phone );
my $qfax = $dbh->quote( $fax );
my $qaddress = $dbh->quote( $address );
my $qcontact = $dbh->quote( $contact );
    my $qcontact_email = $dbh->quote( $contact_email );
    my $qcontact_phone = $dbh->quote( $contact_phone );
    my $qcontact_cell = $dbh->quote( $contact_cell );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("UPDATE autonomous_systems_clients SET client_name=$qname,type=$qtype,comment=$qcomment,description=$qdescription,phone=$qphone,fax=$qfax,address=$qaddress,contact=$qcontact,contact_email=$qcontact_email,contact_phone=$qcontact_phone,contact_cell=$qcontact_cell WHERE id=$qas_client_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}


sub delete_as_client {
my ( $self,$client_id, $as_client_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qas_client_id = $dbh->quote( $as_client_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM autonomous_systems_clients WHERE id=$qas_client_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth = $dbh->prepare("UPDATE autonomous_systems SET as_client_id='-1' WHERE as_client_id=$qas_client_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub PrintASClientTab {
my ( $self,$client_id,$as_client_values,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";

print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('net_scrollx');
var y = readCookie('net_scrolly');
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('net_scrollx', x, 0);
createCookie('net_scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}
// -->
</SCRIPT>


<script type="text/javascript">
<!--
function confirmation(NET,TYPE) {

    if (TYPE == 'delete'){
            answer = confirm(NET + ": $lang_vars{delete_as_client_confirme_message}")
    }

    if (answer){
            return true;
    }
    else{
            return false;
    }
}
//-->
</script>


EOF

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $j=0;
my $anz=@{$as_client_values};
$anz--;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{tipo_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{description_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{comentario_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{phone_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{fax_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{address_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{contact_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

foreach my $refs(@{$as_client_values}) {
    my $as_client_id=@{$as_client_values}[$j]->[0];
    if ( $as_client_id == "-1" ) {
        $j++;
        next;
    }
    my $name=@{$as_client_values}[$j]->[1] || "";
    my $type=@{$as_client_values}[$j]->[2] || "";
    my $comment=@{$as_client_values}[$j]->[3] || "";
    my $description=@{$as_client_values}[$j]->[4] || "";
    my $phone=@{$as_client_values}[$j]->[5] || "";
    my $fax=@{$as_client_values}[$j]->[6] || "";
    my $address=@{$as_client_values}[$j]->[7] || "";
    my $contact=@{$as_client_values}[$j]->[8] || "";
    my $contact_email=@{$as_client_values}[$j]->[9] || "";
    my $contact_phone=@{$as_client_values}[$j]->[10] || "";
    my $contact_cell=@{$as_client_values}[$j]->[11] || "";

    my $k=$j+1;
    my $l=$j-1;
    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }


    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td><td align=\"center\">$type</td></td><td>$comment</td><td>$description</td><td>$phone</td><td>$fax</td><td>$address</td><td><span title=\"$contact_email - $contact_phone - $contact_cell\">$contact</span></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_asclient_form.cgi\"><input name=\"as_client_id\" type=\"hidden\" value=\"$as_client_id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"type\" type=\"hidden\" value=\"$type\"><input name=\"comment\" type=\"hidden\" value=\"$comment\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"phone\" type=\"hidden\" value=\"$phone\"><input name=\"fax\" type=\"hidden\" value=\"$fax\"><input name=\"address\" type=\"hidden\" value=\"$address\"><input name=\"contact\" type=\"hidden\" value=\"$contact\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_asclient.cgi\"><input name=\"as_client_id\" type=\"hidden\" value=\"$as_client_id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
    $j++;
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}


sub get_as {
my ( $self,$client_id ) = @_;
my (@values_as,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT a.id, a.as_number, a.description, a.comment, a.client_id, c.client_name, c.id, c.type FROM autonomous_systems a, autonomous_systems_clients c WHERE a.as_client_id=c.id AND a.client_id=$qclient_id order by (a.as_number+0)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_as, [ @$ip_ref ];
}
$sth->finish(  );
$dbh->disconnect;
return @values_as;
}

sub get_as_match {
my ( $self,$client_id,$match ) = @_;
my (@values_as,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT a.id, a.as_number, a.description, a.comment, a.client_id, c.client_name, c.id, c.type FROM autonomous_systems a, autonomous_systems_clients c WHERE a.as_client_id=c.id AND a.client_id=$qclient_id AND (a.as_number LIKE \"%$match%\" || a.description LIKE \"%$match%\" || a.comment LIKE \"%$match%\" || c.client_name LIKE \"%$match%\" || c.type LIKE \"%$match%\") order by (a.as_number+0)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_as, [ @$ip_ref ];
}
$sth->finish(  );
$dbh->disconnect;
return @values_as;
}

sub get_one_as {
my ( $self,$client_id,$as_id ) = @_;
my (@values_as,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qas_id = $dbh->quote( $as_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT a.id, a.as_number, a.description, a.comment, a.client_id, c.client_name, c.id FROM autonomous_systems a, autonomous_systems_clients c WHERE a.id=$qas_id AND a.as_client_id=c.id AND a.client_id=$qclient_id order by (a.as_number+0)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_as, [ @$ip_ref ];
}
$sth->finish(  );
$dbh->disconnect;
return @values_as;
}

sub insert_as {
my ( $self,$client_id, $as_number, $comment, $description, $as_client_id ) = @_;
my $dbh = $self->_mysql_connection();
$as_client_id = "-1" if ! $as_client_id;
my $qas_number = $dbh->quote( $as_number );
my $qcomment = $dbh->quote( $comment );
my $qdescription = $dbh->quote( $description );
my $qas_client_id = $dbh->quote( $as_client_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("INSERT INTO autonomous_systems (as_number,comment,description,as_client_id,client_id) VALUES ( $qas_number,$qcomment,$qdescription,$qas_client_id,$qclient_id)"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_as {
my ( $self,$client_id, $as_id, $comment, $description, $as_client_id ) = @_;
my $dbh = $self->_mysql_connection();
my $qas_id = $dbh->quote( $as_id );
my $qcomment = $dbh->quote( $comment );
my $qdescription = $dbh->quote( $description );
my $qas_client_id = $dbh->quote( $as_client_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("UPDATE autonomous_systems SET comment=$qcomment,description=$qdescription,as_client_id=$qas_client_id WHERE id=$qas_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub delete_as {
my ( $self,$client_id, $as_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qas_id = $dbh->quote( $as_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM autonomous_systems WHERE id=$qas_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub PrintASTab {
my ( $self,$client_id,$as_values,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";

print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('net_scrollx');
var y = readCookie('net_scrolly');
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('net_scrollx', x, 0);
createCookie('net_scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}
// -->
</SCRIPT>


<script type="text/javascript">
<!--
function confirmation(NET,TYPE) {

    if (TYPE == 'delete'){
            answer = confirm(NET + ": $lang_vars{delete_as_confirme_message}")
    }

    if (answer){
            return true;
    }
    else{
            return false;
    }
}
//-->
</script>


EOF

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $j=0;
my $anz=@{$as_values};
$anz--;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{as_number_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{description_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{as_client_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{as_client_type_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{comentario_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

foreach my $refs(@{$as_values}) {
    my $as_id = @{$as_values}[$j]->[0];
    my $as_number = @{$as_values}[$j]->[1];
    my $k=$j+1;
    my $l=$j-1;
    my $description = @{$as_values}[$j]->[2];
    my $comment = @{$as_values}[$j]->[3] || "";
    my $client_id = @{$as_values}[$j]->[4] || "";
    my $as_client = @{$as_values}[$j]->[5] || "";
    my $as_client_id = @{$as_values}[$j]->[6] || "";
    $as_client="" if $as_client eq "_DEFAULT_";
    my $as_client_type = @{$as_values}[$j]->[7] || "";
    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$as_number\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }


    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$as_number</td><td align=\"center\">$description</td></td><td>$as_client</td><td>$as_client_type</td><td>$comment</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_as_form.cgi\"><input name=\"as_number\" type=\"hidden\" value=\"$as_number\"><input name=\"as_id\" type=\"hidden\" value=\"$as_id\"><input name=\"comment\" type=\"hidden\" value=\"$comment\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"as_client_id\" type=\"hidden\" value=\"$as_client_id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_as.cgi\"><input name=\"as_id\" type=\"hidden\" value=\"$as_id\"><input name=\"as_number\" type=\"hidden\" value=\"$as_number\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
    $j++;
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}



## LEASED LINES

sub get_ll_clients {
my ( $self,$client_id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare(" SELECT id, client_name, type, description, comment, phone, fax, address, contact, contact_email, contact_phone, contact_cell FROM llines_clients WHERE (client_id = $qclient_id || client_id='9999')") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
    $dbh->disconnect;
    return @values;
}

sub get_one_ll_client {
my ( $self,$client_id,$ll_client_id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qll_client_id = $dbh->quote( $ll_client_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare(" SELECT id, client_name, type, description, comment, phone, fax, address, contact, contact_email, contact_phone, contact_cell FROM llines_clients WHERE id=$qll_client_id AND ( client_id = $qclient_id || client_id='9999')") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
    $dbh->disconnect;
    return @values;
}


sub get_ll_client_id {
my ( $self,$client_id,$ll_client_name ) = @_;
my $value;
my $dbh = $self->_mysql_connection();
my $qll_client_name = $dbh->quote( $ll_client_name  );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id FROM llines_clients where client_name=$qll_client_name
                ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute();
$value = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $value;
}



sub check_ll_client_exists {
my ( $self,$client_id,$ll_client_name ) = @_;
my $value;
my $dbh = $self->_mysql_connection();
my $qll_client_name = $dbh->quote( $ll_client_name  );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT client_name FROM llines_clients where client_name=$qll_client_name AND ( client_id=$qclient_id || client_id='9999')
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();
    $value = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $value;
}

sub insert_ll_client {
my ( $self,$client_id,$ll_client_name,$type,$description,$comment,$phone,$fax,$address,$contact,$contact_email,$contact_phone,$contact_cell) = @_;
    my $dbh = $self->_mysql_connection();
    my $qll_client_name = $dbh->quote( $ll_client_name );
    my $qtype = $dbh->quote( $type );
    my $qdescription = $dbh->quote( $description );
    my $qcomment = $dbh->quote( $comment );
    my $qphone = $dbh->quote( $phone );
    my $qfax = $dbh->quote( $fax );
    my $qaddress = $dbh->quote( $address );
    my $qcontact = $dbh->quote( $contact );
    my $qcontact_email = $dbh->quote( $contact_email );
    my $qcontact_phone = $dbh->quote( $contact_phone );
    my $qcontact_cell = $dbh->quote( $contact_cell );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("INSERT INTO llines_clients (client_name, type, description, comment, phone, fax, address, contact, contact_email, contact_phone, contact_cell, client_id) VALUES ( $qll_client_name,$qtype,$qdescription,$qcomment,$qphone,$qfax,$qaddress,$qcontact,$qcontact_email,$qcontact_phone,$qcontact_cell,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub count_ll_clients {
my ( $self, $client_id ) = @_;
my $count;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT COUNT(*) from llines_clients
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $count = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $count;
}

sub update_ll_client {
my ( $self,$client_id,$ll_client_id,$name,$type,$comment,$description,$phone,$fax,$address,$contact,$contact_email,$contact_phone,$contact_cell ) = @_;
my $dbh = $self->_mysql_connection();
my $qll_client_id = $dbh->quote( $ll_client_id );
my $qname = $dbh->quote( $name );
my $qtype = $dbh->quote( $type );
my $qcomment = $dbh->quote( $comment );
my $qdescription = $dbh->quote( $description );
my $qphone = $dbh->quote( $phone );
my $qfax = $dbh->quote( $fax );
my $qaddress = $dbh->quote( $address );
my $qcontact = $dbh->quote( $contact );
my $qcontact_email = $dbh->quote( $contact_email );
my $qcontact_phone = $dbh->quote( $contact_phone );
my $qcontact_cell = $dbh->quote( $contact_cell );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("UPDATE llines_clients SET client_name=$qname,type=$qtype,comment=$qcomment,description=$qdescription,phone=$qphone,fax=$qfax,address=$qaddress,contact=$qcontact,contact_email=$qcontact_email,contact_phone=$qcontact_phone,contact_cell=$qcontact_cell WHERE id=$qll_client_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}


sub delete_ll_client {
my ( $self,$client_id, $ll_client_id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qll_client_id = $dbh->quote( $ll_client_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM llines_clients WHERE id=$qll_client_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth = $dbh->prepare("UPDATE llines SET ll_client_id='-1' WHERE ll_client_id=$qll_client_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub PrintLLClientTab {
my ( $self,$client_id,$ll_client_values,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";

print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('net_scrollx');
var y = readCookie('net_scrolly');
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('net_scrollx', x, 0);
createCookie('net_scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}
// -->
</SCRIPT>


<script type="text/javascript">
<!--
function confirmation(NET,TYPE) {

    if (TYPE == 'delete'){
            answer = confirm(NET + ": $lang_vars{delete_ll_client_confirme_message}")
    }

    if (answer){
            return true;
    }
    else{
            return false;
    }
}
//-->
</script>


EOF

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $j=0;
my $anz=@{$ll_client_values};
$anz--;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{description_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{comentario_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{phone_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{fax_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{address_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{contact_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

foreach my $refs(@{$ll_client_values}) {
    my $ll_client_id=@{$ll_client_values}[$j]->[0];
    if ( $ll_client_id == "-1" ) {
        $j++;
        next;
    }
    my $name=@{$ll_client_values}[$j]->[1] || "";
    my $type=@{$ll_client_values}[$j]->[2] || "";
    my $comment=@{$ll_client_values}[$j]->[3] || "";
    my $description=@{$ll_client_values}[$j]->[4] || "";
    my $phone=@{$ll_client_values}[$j]->[5] || "";
    my $fax=@{$ll_client_values}[$j]->[6] || "";
    my $address=@{$ll_client_values}[$j]->[7] || "";
    my $contact=@{$ll_client_values}[$j]->[8] || "";
    my $contact_email=@{$ll_client_values}[$j]->[9] || "";
    my $contact_phone=@{$ll_client_values}[$j]->[10] || "";
    my $contact_cell=@{$ll_client_values}[$j]->[11] || "";

    my $k=$j+1;
    my $l=$j-1;
    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }


    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td></td><td>$comment</td><td>$description</td><td>$phone</td><td>$fax</td><td>$address</td><td><span title=\"$contact_email - $contact_phone - $contact_cell\">$contact</span></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_llclient_form.cgi\"><input name=\"ll_client_id\" type=\"hidden\" value=\"$ll_client_id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"type\" type=\"hidden\" value=\"$type\"><input name=\"comment\" type=\"hidden\" value=\"$comment\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"phone\" type=\"hidden\" value=\"$phone\"><input name=\"fax\" type=\"hidden\" value=\"$fax\"><input name=\"address\" type=\"hidden\" value=\"$address\"><input name=\"contact\" type=\"hidden\" value=\"$contact\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_llclient.cgi\"><input name=\"ll_client_id\" type=\"hidden\" value=\"$ll_client_id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
    $j++;
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}


sub get_ll {
my ( $self,$client_id,$ll_id ) = @_;
my (@values_ll,$ip_ref);
my $dbh = $self->_mysql_connection();

my $ll_id_expr = "";
if ( $ll_id ) {
    my $qll_id = $dbh->quote( $ll_id );
    $ll_id_expr = "AND a.id=$qll_id";
}

my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT a.id, a.phone_number, a.description, a.comment, a.client_id, c.client_name, c.id, c.type, a.loc, l.loc, a.type, a.service, a.device, a.room, a.ad_number FROM llines a, llines_clients c, locations l WHERE a.ll_client_id=c.id AND a.loc=l.id AND a.client_id=$qclient_id $ll_id_expr order by (c.client_name)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_ll, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values_ll;
}

sub get_ll_from_phone_number {
my ( $self,$client_id,$phone_number ) = @_;
my (@values_ll,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qphone_number = $dbh->quote( $phone_number );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT a.id, a.phone_number, a.description, a.comment, a.client_id, c.client_name, c.id as cid, c.type as ctype, a.loc, l.loc as lloc, a.type, a.service, a.device, a.room, a.ad_number FROM llines a, llines_clients c, locations l WHERE a.ll_client_id=c.id AND a.loc=l.id AND a.client_id=$qclient_id AND phone_number=$qphone_number");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_ll, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );

return @values_ll;
}

sub get_ll_from_phone_number_and_as_number {
my ( $self,$client_id,$phone_number, $ad_number ) = @_;
my (@values_ll,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qphone_number = $dbh->quote( $phone_number );
my $qad_number = $dbh->quote( $ad_number );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT a.id, a.phone_number, a.description, a.comment, a.client_id, c.client_name, c.id as cid, c.type as ctype, a.loc, l.loc as lloc, a.type, a.service, a.device, a.room, a.ad_number FROM llines a, llines_clients c, locations l WHERE a.ll_client_id=c.id AND a.loc=l.id AND a.client_id=$qclient_id AND phone_number=$qphone_number AND a.ad_number=$qad_number");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_ll, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );

return @values_ll;
}

sub get_ll_match {
my ( $self,$client_id, $match ) = @_;
my (@values_ll,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT a.id, a.phone_number, a.description, a.comment, a.client_id, c.client_name, c.id, c.type, a.loc, l.loc, a.type, a.service, a.device, a.room, a.ad_number FROM llines a, llines_clients c, locations l WHERE a.ll_client_id=c.id AND a.loc=l.id AND a.client_id=$qclient_id AND ( a.phone_number LIKE \"%$match%\" || a.description LIKE \"%$match%\" || a.comment LIKE \"%$match%\" || c.client_name LIKE \"%$match%\" || a.type LIKE \"%$match%\" || a.service LIKE \"%$match%\" || a.device LIKE \"%$match%\" || a.room LIKE \"%$match%\" || a.ad_number LIKE \"%$match%\" || a.loc = (SELECT id FROM locations WHERE loc=\"$match\" AND client_id=$qclient_id)) ORDER BY (c.client_name)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_ll, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values_ll;
}

sub get_ll_match_hash {
my ( $self,$client_id, $match ) = @_;
my (%values,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT a.id, a.phone_number, a.description, a.comment, a.client_id, c.client_name AS cclient_name, c.id AS cid, c.type AS ctype, a.loc, l.loc AS lloc, a.type, a.service, a.device, a.room, a.ad_number FROM llines a, llines_clients c, locations l WHERE a.ll_client_id=c.id AND a.loc=l.id AND a.client_id=$qclient_id AND (( a.phone_number LIKE \"%$match%\" || a.description LIKE \"%$match%\" || a.comment LIKE \"%$match%\" || c.client_name LIKE \"%$match%\" || a.type LIKE \"%$match%\" || a.service LIKE \"%$match%\" || a.device LIKE \"%$match%\" || a.room LIKE \"%$match%\" || a.ad_number LIKE \"%$match%\" || a.loc = (SELECT id FROM locations WHERE loc=\"$match\" AND client_id=$qclient_id)) OR a.id IN ( select line_id from custom_line_column_entries where entry LIKE '%$match%' )) ORDER BY (c.client_name)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'} || "";
    my $phone_number = $ip_ref->{'phone_number'} || "";
    my $description = $ip_ref->{'description'} || "";
    my $comment = $ip_ref->{'comment'} || "";
    my $client_id = $ip_ref->{'client_id'} || "";
    my $cclient_name = $ip_ref->{'cclient_name'} || "";
    my $cid = $ip_ref->{'cid'} || "";
    my $ctype = $ip_ref->{'ctype'} || "";
    my $loc_id = $ip_ref->{'loc'} || "";
    my $loc = $ip_ref->{'lloc'} || "";
    my $type = $ip_ref->{'type'} || "";
    my $service = $ip_ref->{'service'} || "";
    my $device = $ip_ref->{'device'} || "";
    my $room = $ip_ref->{'room'} || "";
    my $ad_number = $ip_ref->{'ad_number'} || "";
    push @{$values{$id}},"$phone_number","$description","$comment","$client_id","$cclient_name","$cid","$ctype","$loc_id","$loc","$type","$service","$device","$room","$ad_number";
}
$dbh->disconnect;
$sth->finish(  );

return \%values;
}

sub get_ll_hash_from_id {
my ( $self,$client_id, $id ) = @_;

my (%values,$ip_ref);

$id = "" if ! $id;

my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT a.id, a.phone_number, a.description, a.comment, a.client_id, c.client_name AS client_name, c.id AS cid, c.type AS ctype, a.loc, l.loc AS lloc, a.type, a.service, a.device, a.room, a.ad_number FROM llines a, llines_clients c, locations l WHERE a.ll_client_id=c.id AND a.loc=l.id AND a.client_id=$qclient_id AND a.id=$qid ORDER BY (c.client_name)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'} || "";
    my $phone_number = $ip_ref->{'phone_number'} || "";
    my $description = $ip_ref->{'description'} || "";
    my $comment = $ip_ref->{'comment'} || "";
    my $client_id = $ip_ref->{'client_id'} || "";
    my $cclient_name = $ip_ref->{'c.client_name'} || "";
    my $cid = $ip_ref->{'c.id'} || "";
    my $ctype = $ip_ref->{'c.type'} || "";
    my $loc_id = $ip_ref->{'loc_id'} || "";
    my $loc = $ip_ref->{'l.loc'} || "";
    my $type = $ip_ref->{'type'} || "";
    my $service = $ip_ref->{'service'} || "";
    my $device = $ip_ref->{'device'} || "";
    my $room = $ip_ref->{'room'} || "";
    my $ad_number = $ip_ref->{'ad_number'} || "";
    push @{$values{$id}},"$phone_number","$description","$comment","$client_id","$cclient_name","$cid","$ctype","$loc_id","$loc","$type","$service","$device","$room","$ad_number";
}
$dbh->disconnect;
$sth->finish(  );

return \%values;
}

sub get_ll_hash {
my ( $self,$client_id ) = @_;
my $ip_ref;
my %values;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT a.id, a.phone_number, a.description, a.comment, a.client_id, c.client_name, c.id AS cid, c.type AS ctype, a.loc, l.loc AS loc_name, a.type, a.service, a.device, a.room, a.ad_number FROM llines a, llines_clients c, locations l WHERE a.ll_client_id=c.id AND a.loc=l.id AND a.client_id=$qclient_id order by (c.client_name)")
    or croak $self->print_error("$client_id","Can not prepare statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{'id'} || "";
        my $phone_number = $ip_ref->{'phone_number'} || "";
        my $description = $ip_ref->{'description'} || "";
        my $comment = $ip_ref->{'comment'} || "";
        my $client_id = $ip_ref->{'client_id'} || "";
        my $cclient_name = $ip_ref->{'client_name'} || "";
        my $cid = $ip_ref->{'cid'} || "";
        my $ctype = $ip_ref->{'ctype'} || "";
        my $loc_id = $ip_ref->{'loc'} || "";
        my $loc = $ip_ref->{'loc_name'} || "";
        my $type = $ip_ref->{'type'} || "";
        my $service = $ip_ref->{'service'} || "";
        my $device = $ip_ref->{'device'} || "";
        my $room = $ip_ref->{'room'} || "";
        my $ad_number = $ip_ref->{'ad_number'} || "";
        push @{$values{$id}},"$phone_number","$description","$comment","$client_id","$cclient_name","$cid","$ctype","$loc_id","$loc","$type","$service","$device","$room","$ad_number";
    }

    $dbh->disconnect;
    return \%values;
}

sub get_line_columns {
my ( $self, $client_id ) = @_;
my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth;
$sth = $dbh->prepare("SELECT id, name, mandatory FROM custom_line_columns")
    or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
return @values;
}

sub get_custom_line_columns {
my ( $self, $client_id ) = @_;

my $format=$self->{'format'};
my $error="";

my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT cc.name,cc.id,cc.mandatory FROM custom_line_columns cc ORDER BY cc.id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;

return @values;
}

sub get_line_column_values_hash {
my ( $self, $client_id ) = @_;

my %values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $sth = $dbh->prepare("SELECT id,column_id,line_id,entry FROM custom_line_column_entries")
 or croak $self->print_error("$client_id","select<p>$DBI::errstr");

$sth->execute() or croak $self->print_error("$client_id","select<p>$DBI::errstr");

while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $column_id = $ip_ref->{column_id};
    my $line_id = $ip_ref->{line_id};
    my $entry = $ip_ref->{entry};
    $values{"${column_id}_${line_id}"}="$entry";
}

$sth->finish();
$dbh->disconnect;

return %values;
}

sub insert_line_column {
my ( $self,$client_id, $column, $vars_file, $select_type, $select_items, $mandatory ) = @_;

my %lang_vars;
%lang_vars = $self->_get_vars("$vars_file") if $vars_file;

my $dbh = $self->_mysql_connection();
my $qcolumn = $dbh->quote( $column );
my $qmandatory = $dbh->quote( $mandatory );
my $sth = $dbh->prepare("INSERT INTO custom_line_columns (name, mandatory) VALUES ($qcolumn, $qmandatory)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth = $dbh->prepare("SELECT MAX(id) FROM custom_line_columns") or croak $self->print_error("$client_id","$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
my $id = $sth->fetchrow_array;

if ( $select_type eq "$lang_vars{select_message}" || $select_type eq "$lang_vars{multiple_select_message}" ) {
    my $type = "s";
    $type = "m" if $select_type eq "$lang_vars{multiple_select_message}";
    my $qtype = $dbh->quote( $type );
    my $qselect_items = $dbh->quote( $select_items );
    my $qid = $dbh->quote( $id );
    $select_items=$self->remove_whitespace_se("$select_items");
    $sth = $dbh->prepare("INSERT INTO custom_line_column_select (type,items,cc_id) VALUES ($qtype,$qselect_items,$qid)");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}

$sth->finish();
$dbh->disconnect;
}

sub delete_line_column {
my ( $self,$client_id, $column_id ) = @_;

my $dbh = $self->_mysql_connection();
my $qcolumn_id = $dbh->quote( $column_id );

my $sth = $dbh->prepare("DELETE FROM custom_line_columns WHERE id = $qcolumn_id"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth = $dbh->prepare("DELETE FROM custom_line_column_entries WHERE column_id = $qcolumn_id"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth = $dbh->prepare("DELETE FROM custom_line_column_select WHERE cc_id = $qcolumn_id"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub insert_line_column_entry {
my ( $self,$client_id,$column_id,$line_id,$entry ) = @_;
my $dbh = $self->_mysql_connection();
my $qcolumn_id = $dbh->quote( $column_id );
my $qline_id = $dbh->quote( $line_id );
my $qentry = $dbh->quote( $entry );
my $sth = $dbh->prepare("INSERT INTO custom_line_column_entries (column_id,line_id,entry) VALUES ($qcolumn_id,$qline_id,$qentry)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_line_column_entry {
my ( $self,$client_id,$column_id,$line_id,$entry ) = @_;
my $dbh = $self->_mysql_connection();
my $qcolumn_id = $dbh->quote( $column_id );
my $qline_id = $dbh->quote( $line_id );
my $qentry = $dbh->quote( $entry );
my $sth = $dbh->prepare("UPDATE custom_line_column_entries SET entry=$qentry WHERE line_id=$qline_id AND column_id=$qcolumn_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}


sub delete_line_column_entry {
my ( $self,$client_id, $column_id, $line_id ) = @_;

my $error;
my $format=$self->{'format'};
my $dbh = $self->_mysql_connection();
my $qcolumn_id = $dbh->quote( $column_id );
my $qline_id = $dbh->quote( $line_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("DELETE FROM custom_line_column_entries WHERE column_id = $qcolumn_id AND line_id=$qline_id")
     or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->finish();
$dbh->disconnect;
}


sub get_line_id_from_name {
my ( $self, $client_id, $name ) = @_;

my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );
my $sth = $dbh->prepare("SELECT id FROM custom_line_columns WHERE name=$qname
                ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

my $id = $sth->fetchrow_array;

$sth->finish();
$dbh->disconnect;

return $id;
}

sub get_line_column_name {
my ( $self, $client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
    my $sth = $dbh->prepare("SELECT name FROM custom_line_columns WHERE id=$qid
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $name = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $name;
}

sub get_one_ll {
my ( $self,$client_id,$ll_id ) = @_;
my (@values_ll,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qll_id = $dbh->quote( $ll_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT a.id, a.phone_number, a.description, a.comment, a.client_id, c.client_name, c.id, c.type, a.loc, l.loc, a.type, a.service, a.device, a.room, a.ad_number FROM llines a, llines_clients c, locations l WHERE a.id=$qll_id AND a.loc=l.id AND a.ll_client_id=c.id AND a.client_id=$qclient_id order by (c.client_name)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_ll, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values_ll;
}

sub insert_ll {
my ( $self,$client_id, $phone_number, $loc_id, $comment, $description, $ll_client_id, $type, $service, $device, $room, $ad_number ) = @_;
my $dbh = $self->_mysql_connection();
$ll_client_id = "-1" if ! $ll_client_id;
my $qphone_number = $dbh->quote( $phone_number );
my $qloc_id = $dbh->quote( $loc_id );
my $qcomment = $dbh->quote( $comment );
my $qdescription = $dbh->quote( $description );
my $qtype = $dbh->quote( $type );
my $qservice = $dbh->quote( $service );
my $qdevice = $dbh->quote( $device );
my $qll_client_id = $dbh->quote( $ll_client_id );
my $qroom = $dbh->quote( $room );
my $qad_number = $dbh->quote( $ad_number );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("INSERT INTO llines (phone_number,loc,comment,description,ll_client_id,type,service,device,room,ad_number,client_id) VALUES ( $qphone_number,$qloc_id,$qcomment,$qdescription,$qll_client_id,$qtype,$qservice,$qdevice,$qroom,$qad_number,$qclient_id)"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth = $dbh->prepare("SELECT LAST_INSERT_ID()") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
my $id = $sth->fetchrow_array;

$sth->finish();
$dbh->disconnect;

return $id;
}

sub update_ll {
my ( $self,$client_id, $ll_id, $comment, $description, $ll_client_id, $loc_id, $type, $service, $device, $room, $phone_number, $ad_number  ) = @_;
my $dbh = $self->_mysql_connection();
my $qll_id = $dbh->quote( $ll_id );
my $qcomment = $dbh->quote( $comment );
my $qdescription = $dbh->quote( $description );
my $qll_client_id = $dbh->quote( $ll_client_id );
my $qloc_id = $dbh->quote( $loc_id );
my $qtype = $dbh->quote( $type );
my $qservice = $dbh->quote( $service );
my $qdevice = $dbh->quote( $device );
my $qroom = $dbh->quote( $room );
my $qphone_number = $dbh->quote( $phone_number );
my $qad_number = $dbh->quote( $ad_number );
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("UPDATE llines SET comment=$qcomment,description=$qdescription,ll_client_id=$qll_client_id,loc=$qloc_id,type=$qtype,service=$qservice,device=$qdevice,room=$qroom,phone_number=$qphone_number,ad_number=$qad_number WHERE id=$qll_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub delete_ll {
my ( $self,$client_id, $ll_id ) = @_;
my $dbh = $self->_mysql_connection();
my $qll_id = $dbh->quote( $ll_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("DELETE FROM llines WHERE id=$qll_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth = $dbh->prepare("DELETE FROM custom_line_column_entries WHERE line_id=$qll_id"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth->finish();
$dbh->disconnect;
}


sub search_db_hash_lines {
my ( $self,$client_id, $vars_file, $daten ) = @_;

my %lang_vars = $self->_get_vars("$vars_file") if $vars_file;

no strict 'refs';
my $client_independent=${$daten}{client_independent} || "n";
my @search;
my %values;

foreach my $loc (keys %{$daten}) {
    my $dat = ${$daten}{$loc};
    if ( ! $dat ) { next; }
#		if ( $loc =~ /(save_config_changes|job_enabled_|other_job_descr_|device_other_job_|other_job_group_|device_other_jobs_anz|cm_description|connection_proto|backup_proto|ele_auth|enable_cm|group_id|user_name|_pass|_proto)/ || $loc eq "ip_int" || $loc =~ /gip_query/ || $loc =~ /_id$/ || $loc =~ /custom_/ || $loc eq "client_independent" || $loc eq "ipv4" || $loc eq "ipv6" || $loc eq "B2" || $loc eq "vendor_radio" || $loc =~ /known/ || $loc eq "B1" || $loc eq "entries_per_page_hosts" || $loc eq "host_order_by" || $loc eq "anz_values_hosts" || $loc eq "anz_hosts" || $loc eq "ip_version" || $loc =~ /mass_update_host_submit/ || $loc eq "red_num" || $loc eq "mass_submit" || $loc eq "mass_action_type" || $ENV{SCRIPT_NAME} =~ /ip_modip/ && ($loc eq "comentario" || $loc eq "BM" || $loc eq "host_descr" || $loc eq "ip" || $loc eq "loc" || $loc eq "cat" || $loc eq "ip" || $loc eq "int_admin" || $loc eq "hostname_exact" || $loc eq "mass_update_type" || $loc eq "mass_update_host_ids" || $loc eq "model_id" || $loc eq "model_pcid" || $loc eq "cc_name" || $loc =~ /_value$/ || $loc =~ /_id$/ || $loc =~ /_pcid$/ || $loc =~ /update_type/ || $loc =~ /no_create_linked_entry/ || $loc =~ /dyn_dns_updates/ )) { next; }
    if ( $loc eq "ip_int" || $loc =~ /gip_query/ || $loc =~ /client_id$/ || $loc =~ /custom_/ || $loc eq "client_independent" || $loc eq "ipv4" || $loc eq "ipv6" || $loc eq "B2" || $loc eq "vendor_radio" || $loc =~ /known/ || $loc eq "B1" || $loc eq "entries_per_page_hosts" || $loc eq "host_order_by" || $loc eq "anz_values_hosts" || $loc eq "anz_hosts" || $loc eq "ip_version" || $loc =~ /mass_update_host_submit/ || $loc eq "red_num" || $loc eq "mass_submit" || $loc eq "mass_action_type" || $ENV{SCRIPT_NAME} =~ /ip_modip/ && ($loc eq "comentario" || $loc eq "BM" || $loc eq "host_descr" || $loc eq "ip" || $loc eq "loc" || $loc eq "cat" || $loc eq "ip" || $loc eq "int_admin" || $loc eq "hostname_exact" || $loc eq "mass_update_type" || $loc eq "mass_update_host_ids" || $loc eq "model_id" || $loc eq "model_pcid" || $loc eq "cc_name" || $loc =~ /_value$/ || $loc =~ /_id$/ || $loc =~ /_pcid$/ || $loc =~ /update_type/ || $loc =~ /no_create_linked_entry/ || $loc =~ /dyn_dns_updates/ )) { next; }

    if ( $dat !~ /../ && $loc ne "line" && $loc ne "loc_id" ) {
        $self->print_error("$client_id","$lang_vars{dos_signos_message} $loc - $dat");
        $self->print_end("$client_id");
        exit 1;
    }
    if ( $dat =~ /$lang_vars{buscar_message}/ || $loc =~ /search_index/  ) {
        next;
    }
    $loc =~ s/advanced_search_//;
    $dat = "$loc:X-X:$dat";
    push @search, $dat;
}

my $dbh = $self->_mysql_connection();

my $qclient_id = $dbh->quote( $client_id );

my $search = "SELECT a.id, a.phone_number, a.description, a.comment, a.client_id, c.client_name as cclient_name, c.id AS cid, c.type AS ctype, a.loc, l.loc AS lloc, a.type, a.service, a.device, a.room, a.ad_number FROM llines a, llines_clients c, locations l WHERE a.ll_client_id=c.id AND a.loc=l.id AND a.client_id=$qclient_id AND (";
my $search_found1;

my $line = "";
my $line_expr = "";
my $qline ="''";
if ( ${$daten}{'line'} ) {
    my $line = ${$daten}{'line'};
    $qline = $dbh->quote( $line );
    $search .= " AND" if $search_found1;
    $line_expr = " a.id = $qline ";
    $search .= $line_expr;
    $search_found1 = 1;
}
my $ll_client_id = "";
my $ll_client_id_expr = "";
my $qll_client_id ="''";
if ( ${$daten}{'ll_client_id'} ) {
    my $ll_client_id = ${$daten}{'ll_client_id'};
    $qll_client_id = $dbh->quote( $ll_client_id );
    $search .= " AND" if $search_found1;
    $ll_client_id_expr = " a.ll_client_id = $qll_client_id ";
    $search .= $ll_client_id_expr;
    $search_found1 = 1;
}
my $phone_number = "";
my $phone_number_expr = "";
my $qphone_number ="''";
if ( ${$daten}{'phone_number'} ) {
    my $phone_number = ${$daten}{'phone_number'};
    $phone_number = "%" . $phone_number . "%";
    $qphone_number = $dbh->quote( $phone_number );
    $search .= " AND" if $search_found1;
    $phone_number_expr = " a.phone_number LIKE $qphone_number ";
    $search .= $phone_number_expr;
    $search_found1 = 1;
}
my $description = "";
my $description_expr = "";
my $qdescription ="''";
if ( ${$daten}{'description'} ) {
    $description=${$daten}{'description'};
    $description = "%" . $description . "%";
    $qdescription = $dbh->quote( $description );
    $search .= " AND" if $search_found1;
    $description_expr = " a.description LIKE $qdescription ";
    $search .= $description_expr;
    $search_found1 = 1;
}
my $comment = "";
my $comment_expr = "";
my $qcomment ="''";
if ( ${$daten}{'comment'} ) {
    $comment=${$daten}{'comment'};
    $comment = "%" . $comment . "%";
    $qcomment = $dbh->quote( $comment );
    $search .= " AND" if $search_found1;
    $comment_expr = " a.comment LIKE $qcomment ";
    $search .= $comment_expr;
    $search_found1 = 1;
}
my $type = "";
my $type_expr = "";
my $qtype ="''";
if ( ${$daten}{'type'} ) {
    $type=${$daten}{'type'};
    $type = "%" . $type . "%";
    $qtype = $dbh->quote( $type );
    $search .= " AND" if $search_found1;
    $type_expr = " a.type LIKE $qtype ";
    $search .= $type_expr;
    $search_found1 = 1;
}
my $service = "";
my $service_expr = "";
my $qservice ="''";
if ( ${$daten}{'service'} ) {
    $service=${$daten}{'service'};
    $service = "%" . $service . "%";
    $qservice = $dbh->quote( $service );
    $search .= " AND" if $search_found1;
    $service_expr = " a.service LIKE $qservice ";
    $search .= $service_expr;
    $search_found1 = 1;
}
my $device = "";
my $device_expr = "";
my $qdevice ="''";
if ( ${$daten}{'device'} ) {
    $device=${$daten}{'device'};
    $device = "%" . $device . "%";
    $qdevice = $dbh->quote( $device );
    $search .= " AND" if $search_found1;
    $device_expr = " a.device LIKE $qdevice ";
    $search .= $device_expr;
    $search_found1 = 1;
}
my $room = "";
my $room_expr = "";
my $qroom ="''";
if ( ${$daten}{'room'} ) {
    $room=${$daten}{'room'};
    $room = "%" . $room . "%";
    $qroom = $dbh->quote( $room );
    $search .= " AND" if $search_found1;
    $room_expr = " a.room LIKE $qroom ";
    $search .= $room_expr;
    $search_found1 = 1;
}
my $ad_number = "";
my $ad_number_expr = "";
my $qad_number ="''";
if ( ${$daten}{'ad_number'} ) {
    $ad_number=${$daten}{'ad_number'};
    $ad_number = "%" . $ad_number . "%";
    $qad_number = $dbh->quote( $ad_number );
    $search .= " AND" if $search_found1;
    $ad_number_expr = " a.ad_number LIKE $qad_number";
    $search .= $ad_number_expr;
    $search_found1 = 1;
}
my $loc_id = "";
my $loc_id_expr = "";
my $qloc_id ="''";
if ( ${$daten}{'loc_id'} ) {
    $loc_id=${$daten}{'loc_id'};
    $qloc_id = $dbh->quote( $loc_id );
    $search .= " AND" if $search_found1;
    $loc_id_expr = " a.loc = $qloc_id";
    $search .= $loc_id_expr;
    $search_found1 = 1;
}

my %values_ip = ();
my @helper_array;
my ($ele, $ip_ref);
my $ele_num = @search;
$ele_num=$ele_num - 1;
my $ignore_search = "";

#   my $client_search = "";
#   my $client_cce_search = "";
#   if ( $client_independent ne "yes" ) {
#       $client_search="AND l.client_id = $qclient_id";
#       $client_cce_search="AND (l.client_id = $qclient_id)";
#   }

for (my $i = 0; $i <= $ele_num; $i++) {
   my ($name,$val) = split(":X-X:",$search[$i]);
   if ( $name =~ /^cc_id_/ ) {
       $name =~ /^cc_id_(\d+)$/;
       my $cc_id_search = $1;
       $val = "%" . $val . "%";
       my $qval = $dbh->quote( $val );

       $search .= " AND a.id IN ( SELECT cce.line_id FROM custom_line_column_entries cce  WHERE cce.entry LIKE $qval AND cce.column_id = \"$cc_id_search\")";
    }
}

    $search .= ")";

#        $search .= " $client_cce_search";

    my $sth = $dbh->prepare("$search") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");


    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{'id'} || "";
        my $phone_number = $ip_ref->{'phone_number'} || "";
        my $description = $ip_ref->{'description'} || "";
        my $comment = $ip_ref->{'comment'} || "";
        my $client_id = $ip_ref->{'client_id'} || "";
        my $cclient_name = $ip_ref->{'cclient_name'} || "";
        my $cid = $ip_ref->{'cid'} || "";
        my $ctype = $ip_ref->{'ctype'} || "";
        my $loc_id = $ip_ref->{'loc'} || "";
        my $loc = $ip_ref->{'lloc'} || "";
        my $type = $ip_ref->{'type'} || "";
        my $service = $ip_ref->{'service'} || "";
        my $device = $ip_ref->{'device'} || "";
        my $room = $ip_ref->{'room'} || "";
        my $ad_number = $ip_ref->{'ad_number'} || "";
        push @{$values{$id}},"$phone_number","$description","$comment","$client_id","$cclient_name","$cid","$ctype","$loc_id","$loc","$type","$service","$device","$room","$ad_number";
    }

    $dbh->disconnect;

    return \%values;
}


sub reset_line_loc_id {
my ( $self,$client_id, $loc_id ) = @_;
my $dbh = $self->_mysql_connection();
my $qloc_id = $dbh->quote( $loc_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("UPDATE llines SET loc='-1' WHERE loc=$qloc_id AND client_id = $qclient_id
                    ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}


sub PrintLLTab {
my ( $self,$client_id,$vars_file,$match,$daten,$host_created,$ll_id,$changed_id ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my @global_config = $self->get_global_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my $line_search_main_menu = $global_config[0]->[23] || 0;
my $user_management_enabled=$global_config[0]->[13] || "";
my $locs_ro_perm = $self->{locs_ro_perm} || "";
my $locs_rw_perm = $self->{locs_rw_perm} || "";

my $values_lines;
my $count;
my $replace_count = "";
if ( $daten ) {
    $values_lines=$self->search_db_hash_lines("$client_id","$vars_file",$daten);
    $count = scalar keys %$values_lines;
    $replace_count = "<span>$count $lang_vars{entry_found_message}</span>" if $count == 1;
    $replace_count = "<span>$count $lang_vars{entries_found_message}</span>" if $count > 1;
} elsif ( $match ) {
    $values_lines=$self->get_ll_match_hash("$client_id","$match");
    $count = scalar keys %$values_lines;
    $replace_count = "<span>$count $lang_vars{entry_found_message}</span>" if $count == 0;
    $replace_count = "<span>$count $lang_vars{entries_found_message}</span>" if $count > 0;
} elsif ( $ll_id ) {
    $values_lines=$self->get_ll_hash_from_id("$client_id","$ll_id");
} else {
    $values_lines=$self->get_ll_hash("$client_id");
}


my @ll_values=$self->get_ll("$client_id");
my $ll_values = \@ll_values;

my %changed_id=();
$changed_id = \%changed_id if ! $changed_id;

$self->PrintJavaScriptPrint("$lang_vars{delete_ll_confirm_message}");

my @line_columns=$self->get_line_columns("$client_id"); # id, name
my %values_line_cc=$self->get_line_column_values_hash("$client_id"); # $values{"${column_id}_${site_id}"}="$entry";

print "$replace_count" if $replace_count;

#    if ( ! $line_search_main_menu ) {
#
#print <<EOF;
#        <form name="search_ll" method="POST" action="$server_proto://$base_uri/show_lines.cgi" style="display:inline"><input type="hidden" name="client_id" value="$client_id"><input type="submit" value="" class="button" style=\"float: right; cursor:pointer;\"><input type=\"text\" size=\"15\" name=\"match\" style=\"float: right;\"></form>
#
#        <form name="search_line_detail" method="POST" action="$server_proto://$base_uri/ip_search_ll_form.cgi" style="display:inline"><input type="hidden" name="client_id" value="$client_id"><input type="submit" class=\"input_link_w_right\" value="$lang_vars{advanced_message}" name="B1"></form>
#
#<br><p>
#
#EOF
#    } else {
    print "<br>\n";
#    }

if ( $host_created ) {
    print "<b><i>$lang_vars{host_created_message}</i></b><p>\n";
}

if ( ! keys %{$values_lines} ) {
    print "<p class=\"NotifyText\">$lang_vars{no_resultado_message}</p><br>\n";
    return;
}

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $j=0;
my $anz=@{$ll_values};
$anz--;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{ll_client_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{tipo_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{service_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{description_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{phone_number_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{ad_number_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{loc_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{room_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{connected_device_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{comentario_message} </font></b>";


my @column_order;
my $k=0;
foreach ( @line_columns ) {
    my $column_id=$line_columns[$k]->[0];
    my $column_name=$line_columns[$k]->[1];

    print "<td><font size=\"2\"><b>$column_name</b></font></td>";

    push @column_order,"$column_id";
    $k++;
}

print "</td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

my $sort_by = "type";
my $sort_order_ref = sub {
    my ($X, $Y, $X1, $Y1);
    if ( $sort_by eq "type" ) {
        $X = $values_lines->{$a}->[9];
        $Y = $values_lines->{$b}->[9];
        $X1 = $values_lines->{$a}->[4];
        $Y1 = $values_lines->{$b}->[4];
    }
    $X cmp $Y || $X1 cmp $Y1;
};

my %vl = %{$values_lines};
# "$phone_number","$description","$comment","$client_id","$cclient_name","$cid","$ctype","$loc_id","$loc","$type","$service","$device","$room","$ad_number";
foreach my $id ( sort $sort_order_ref keys %{$values_lines} ) {
    
    next if ! $id;

    my $phone_number = $values_lines->{$id}->[0] || "";
    $phone_number = "" if $phone_number eq "0";

    my $description = $values_lines->{$id}->[1] || "";
    my $comment = $values_lines->{$id}->[2] || "";
    my $client_id = $values_lines->{$id}->[3] || "";
    my $ll_client = $values_lines->{$id}->[4] || "";
    $ll_client="" if $ll_client eq "_DEFAULT_";
    my $ll_client_id = $values_lines->{$id}->[5] || "";
    my $ll_client_type = $values_lines->{$id}->[6] || "";
    my $loc_id = $values_lines->{$id}->[7] || "";
    my $loc = $values_lines->{$id}->[8] || "";
    $loc = "" if $loc eq "NULL";
    my $type = $values_lines->{$id}->[9] || "";
    my $service = $values_lines->{$id}->[10] || "";
    my $device = $values_lines->{$id}->[11] || "";
    my $room = $values_lines->{$id}->[12] || "";
    my $ad_number = $values_lines->{$id}->[13] || "";


    # check permissions
    my $has_loc_rw_perm = 0;

    if ( $user_management_enabled eq "yes" && $loc_id ne "-1" && $loc_id ne "" ) {
        if ( $locs_rw_perm eq "9999" || $locs_rw_perm =~ /^$loc_id$/ || $locs_rw_perm =~ /^${loc_id}_/ || $locs_rw_perm =~ /_${loc_id}$/ || $locs_rw_perm =~ /_${loc_id}_/ ) {
            # user has rw perm
            $has_loc_rw_perm = 1;
        }

        if ( $locs_ro_perm eq "9999" || $locs_ro_perm =~ /^$loc_id$/ || $locs_ro_perm =~ /^${loc_id}_/ || $locs_ro_perm =~ /_${loc_id}$/ || $locs_ro_perm =~ /_${loc_id}_/ ) {
            # user has ro perm 
        } elsif ( ! $has_loc_rw_perm ) {
            # user has no permission for this site - skip entry
            next;
        }
    } else {
        $has_loc_rw_perm = 1;
    }

    my $disabled_ro_only = "";
    $disabled_ro_only = 1 if $has_loc_rw_perm == 0;


    my $device_form = "<a href=\"$server_proto://$base_uri/ip_show_line_host.cgi?client_id=$client_id&ip=$device\" class=\"LeftMenuListLinkBoldGET\" style=\"display:inline\">$device</a>\n";

    my $onclick_scroll='onclick="saveScrollCoordinates()"';
    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$phone_number\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $changed_id_val = "";
    if ( defined $changed_id->{"$id"} ) {
        $changed_id_val = $changed_id->{"$id"};
    }

    my $bg_color="white";

    my $bg_color_show="#efefef";
    if ( $changed_id_val ) {
        $bg_color_show="#a6e8a6";
    } elsif ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }


    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$ll_client</td><td align=\"center\">$type</td><td>$service</td><td>$description</td><td>$phone_number</td><td>$ad_number</td><td>$loc</td><td>$room</td><td>$device_form</td><td>$comment</td>";

foreach my $column_id ( @column_order ) {
    my $entry=$values_line_cc{"${column_id}_${id}"} || "";
    print "<td>$entry</td>";
}

my $edit_button = "";
my $delete_button = "";

if ( ! $disabled_ro_only ) {
    $edit_button = "<input type='submit' value='' name='modificar' class='edit_host_button' style='cursor:pointer;' title='$lang_vars{modificar_message}' $onclick_scroll>"; 
    $delete_button = "<input type='submit' value='' name='borrar' class='delete_button' title='$lang_vars{borrar_message}' $onclick_confirmation_delete>";
}

print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_ll_form.cgi\"><input name=\"phone_number\" type=\"hidden\" value=\"$phone_number\"><input name=\"ad_number\" type=\"hidden\" value=\"$ad_number\"><input name=\"ll_id\" type=\"hidden\" value=\"$id\"><input name=\"comment\" type=\"hidden\" value=\"$comment\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"ll_client_id\" type=\"hidden\" value=\"$ll_client_id\"><input name=\"loc_id\" type=\"hidden\" value=\"$loc_id\"><input name=\"loc\" type=\"hidden\" value=\"$loc\"><input name=\"type\" type=\"hidden\" value=\"$type\"><input name=\"service\" type=\"hidden\" value=\"$service\"><input name=\"room\" type=\"hidden\" value=\"$room\"><input name=\"device\" type=\"hidden\" value=\"$device\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">$edit_button</form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_ll.cgi\"><input name=\"ll_id\" type=\"hidden\" value=\"$id\"><input name=\"phone_number\" type=\"hidden\" value=\"$phone_number\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">$delete_button</form></td>";
    print "</tr>\n";
    $j++;
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}


### MASS UPDATE

sub mass_update_redes {
my ( $self,$client_id, $mass_update_network_ids, $descr, $loc_id, $cat_id, $comentario, $sinc, $dyn_dns_updates ) = @_;
    my $dbh = $self->_mysql_connection();
my $change_expr="";
my $qdescr="";
my $descr_expr="";
if ( $descr ) {
    if ( $descr eq "NULL" ) {
        $descr_expr="descr=''";
    } else {
        $qdescr = $dbh->quote( $descr );
        $descr_expr="descr=$qdescr";
    }
    $change_expr.=$descr_expr;
}
my $qloc_id;
my $loc_expr="";
if ( $loc_id ) {
    $qloc_id = $dbh->quote( $loc_id );
    $loc_expr="loc=$qloc_id";
    $change_expr.="," if $change_expr;
    $change_expr.=$loc_expr;
}

my $qcat_id;
my $cat_expr="";
if ( $cat_id ) {
    $qcat_id = $dbh->quote( $cat_id );
    $cat_expr="categoria=$qcat_id";
    $change_expr.="," if $change_expr;
    $change_expr.=$cat_expr;
}
my $qsinc;
my $sinc_expr="";
if ( $sinc ) {
    $qsinc = $dbh->quote( $sinc );
    $sinc_expr="vigilada=$qsinc";
    $change_expr.="," if $change_expr;
    $change_expr.=$sinc_expr;
}
my $qcomentario;
my $comentario_expr="";
if ( $comentario ) {
    if ( $comentario eq "NULL" ) {
        $comentario_expr="comentario=''";
    } else {
        $qcomentario = $dbh->quote( $comentario );
        $comentario_expr="comentario=$qcomentario";
    }
    $change_expr.="," if $change_expr;
    $change_expr.=$comentario_expr;
}
my $qdyn_dns_updates;
my $dyn_dns_updates_expr="";
if ( $dyn_dns_updates ) {
    $qdyn_dns_updates = $dbh->quote( $dyn_dns_updates );
    $dyn_dns_updates_expr="dyn_dns_updates=$qdyn_dns_updates";
    $change_expr.="," if $change_expr;
    $change_expr.=$dyn_dns_updates_expr;
}
my $qclient_id = $dbh->quote( $client_id );

my $or_red_expr = $mass_update_network_ids;
if ( $or_red_expr =~ /_/ ) {
    $or_red_expr =~ s/_/' OR red_num = '/g;
    $or_red_expr =~ s/^/red_num = '/;
    $or_red_expr =~ s/$/'/;
} else {
    $or_red_expr="red_num = \"$or_red_expr\"";
}
$or_red_expr= "(" . $or_red_expr . ") AND";

    my $sth = $dbh->prepare("UPDATE net SET $change_expr WHERE $or_red_expr client_id = $qclient_id"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub mass_update_host_loc_id {
    my ( $self,$client_id,$loc_id,$mass_update_network_ids ) = @_;
my $sth;
$loc_id="-1" if ! $loc_id;
    my $dbh = $self->_mysql_connection();
    my $qloc_id = $dbh->quote( $loc_id );
my $qclient_id = $dbh->quote( $client_id );

my $or_red_expr = $mass_update_network_ids;
if ( $or_red_expr =~ /_/ ) {
    $or_red_expr =~ s/_/' OR red_num = '/g;
    $or_red_expr =~ s/^/red_num = '/;
    $or_red_expr =~ s/$/'/;
} else {
    $or_red_expr="red_num = \"$or_red_expr\"";
}
$or_red_expr= "(" . $or_red_expr . ") AND";

$sth = $dbh->prepare("UPDATE host SET loc=$qloc_id WHERE $or_red_expr client_id = $qclient_id
            ") or croak $self->print_error("client_id","update<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
    $dbh->disconnect;
}


sub mass_update_custom_column_value_red {
my ( $self,$client_id, $cc_id, $mass_update_network_ids, $entry ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qcc_id = $dbh->quote( $cc_id );
    my $qentry = $dbh->quote( $entry );
    my $qclient_id = $dbh->quote( $client_id );

    my $or_red_expr = $mass_update_network_ids;
    if ( $or_red_expr =~ /_/ ) {
        $or_red_expr =~ s/_/' OR net_id = '/g;
        $or_red_expr =~ s/^/net_id = '/;
        $or_red_expr =~ s/$/'/;
    } else {
        $or_red_expr="net_id = \"$or_red_expr\"";
    }
    $or_red_expr= "(" . $or_red_expr . ")";

    if ( ! $entry ) {
        debug("DELETE FROM custom_net_column_entries WHERE cc_id=$qcc_id AND $or_red_expr AND ( client_id = $qclient_id OR client_id = '9999' )");
        my $sth = $dbh->prepare("DELETE FROM custom_net_column_entries WHERE cc_id=$qcc_id AND $or_red_expr AND ( client_id = $qclient_id OR client_id = '9999' )");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->finish();
        $dbh->disconnect;

        return;
    }


    debug("UPDATE custom_net_column_entries SET entry=$qentry WHERE cc_id=$qcc_id AND $or_red_expr AND ( client_id = $qclient_id OR client_id = '9999' )");
    my $sth = $dbh->prepare("UPDATE custom_net_column_entries SET entry=$qentry WHERE cc_id=$qcc_id AND $or_red_expr AND ( client_id = $qclient_id OR client_id = '9999' )");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");


    my @values;
    my @net_ids=();
    if ( $mass_update_network_ids =~ /_/ ) {
        @net_ids=split("_",$mass_update_network_ids);
    } else {
        $net_ids[0]=$mass_update_network_ids;
    }

    my $ip_ref;
    debug("SELECT net_id FROM custom_net_column_entries WHERE cc_id=$qcc_id AND $or_red_expr AND ( client_id = $qclient_id OR client_id = '9999' )");
    $sth = $dbh->prepare("SELECT net_id FROM custom_net_column_entries WHERE cc_id=$qcc_id AND $or_red_expr AND ( client_id = $qclient_id OR client_id = '9999' )");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }

    my %seen=();
    my @no_entry_networks=();
    my $item;

    foreach $item (@values) {
        my $item_noref=@$item[0];
        $seen{"$item_noref"} = 1;
    }

    foreach $item (@net_ids) {
        unless ($seen{"$item"}) {
            push(@no_entry_networks, $item);
        }
    }

    my $new_column_values="";
    foreach (@no_entry_networks) {
        if ( $new_column_values ) {
            $new_column_values.=",($qcc_id,\"$_\",$qentry,$qclient_id)";
        } else {
            $new_column_values="($qcc_id,\"$_\",$qentry,$qclient_id)";
        }
    }

    if ( $new_column_values ) {
        debug("INSERT INTO custom_net_column_entries (cc_id, net_id, entry, client_id) VALUES $new_column_values");
        $sth = $dbh->prepare("INSERT INTO custom_net_column_entries (cc_id, net_id, entry, client_id) VALUES $new_column_values");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    }

    $sth->finish();
    $dbh->disconnect;
}



sub get_mass_update_networks {
my ( $self, $client_id, $mass_update_network_ids ) = @_;
my @values;
my @new_values=();
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $or_red_expr = $mass_update_network_ids;
if ( $or_red_expr =~ /_/ ) {
    $or_red_expr =~ s/_/' OR red_num = '/g;
    $or_red_expr =~ s/^/red_num = '/;
    $or_red_expr =~ s/$/'/;
} else {
    $or_red_expr="red_num = \"$or_red_expr\"";
}
$or_red_expr= "(" . $or_red_expr . ")";

    my $sth = $dbh->prepare("SELECT red FROM net WHERE $or_red_expr AND client_id=$qclient_id")
     or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
    $dbh->disconnect;

foreach my $item (@values) {
    my $item_noref=@$item[0];
    push(@new_values,"$item_noref");
}

    return @new_values;
}


sub mass_update_hosts {
my ( $self,$client_id, $mass_update_host_ids, $red_num, $ip_version, $descr, $loc_id, $cat_id, $comentario, $update_type_id, $int_admin,$red_loc_id,$search_index, $dyn_dns_updates ) = @_;
my $dbh = $self->_mysql_connection();
my $change_expr="";
my $hay_values="";

my $CM_show_hosts=$self->{CM_show_hosts} || 0;

my $qdescr="";
my $descr_expr="";
if ( $descr ) {
    if ( $descr eq "NULL" || $descr eq "__NOVAL__" ) {
        $descr_expr="host_descr=''";
    } else {
        $qdescr = $dbh->quote( $descr );
        $descr_expr="host_descr=$qdescr";
    }
    $change_expr.=$descr_expr;
}

my $qloc_id;
if ( $loc_id ) {
    my $loc_expr="";
    $qloc_id = $dbh->quote( $loc_id );
    $loc_expr="loc=$qloc_id";
    $change_expr.="," if $change_expr;
    $change_expr.=$loc_expr;
}

my $qcat_id;
if ( $cat_id ) {
    my $cat_expr="";
    $qcat_id = $dbh->quote( $cat_id );
    $cat_expr="categoria=$qcat_id";
    $change_expr.="," if $change_expr;
    $change_expr.=$cat_expr;
}

my $qupdate_type;
if ( $update_type_id ) {
    my $update_type_expr="";
    $qupdate_type = $dbh->quote( $update_type_id );
    $update_type_expr="update_type=$qupdate_type";
    $change_expr.="," if $change_expr;
    $change_expr.=$update_type_expr;
}

my $qcomentario;
my $comentario_expr="";
if ( $comentario ) {
    if ( $comentario eq "NULL" || $comentario eq "__NOVAL__" ) {
        $comentario_expr="comentario=''";
    } else {
        $qcomentario = $dbh->quote( $comentario );
        $comentario_expr="comentario=$qcomentario";
    }
    $change_expr.="," if $change_expr;
    $change_expr.=$comentario_expr;
}

my $qdyn_dns_updates;
if ( $dyn_dns_updates ) {
    my $dyn_dns_updates_expr="";
    $qdyn_dns_updates = $dbh->quote( $dyn_dns_updates );
    $dyn_dns_updates_expr="dyn_dns_updates=$qdyn_dns_updates";
    $change_expr.="," if $change_expr;
    $change_expr.=$dyn_dns_updates_expr;
}

$hay_values="yes" if $change_expr;

my $qint_admin;
my $int_admin_expr="";
if ( $int_admin ) {
    $qint_admin = $dbh->quote( $int_admin );
    $int_admin_expr="int_admin=$qint_admin";
    $change_expr.="," if $change_expr;
    $change_expr.=$int_admin_expr;
}

my $qmydatetime = $dbh->quote( time() );
$change_expr.="," if $change_expr;
$change_expr.= "last_update=$qmydatetime";


my $qclient_id = $dbh->quote( $client_id );
my $qred_num = $dbh->quote( $red_num );
my $qip_version = $dbh->quote( $ip_version );

my $or_host_expr_v4="";
my $or_host_expr_v6="";
my @mass_update_host_ids=(); 
if ( $mass_update_host_ids =~ /_/ ) {
    @mass_update_host_ids=split("_",$mass_update_host_ids);
} else {
    $mass_update_host_ids[0]=$mass_update_host_ids;
}

my $red_num_expr="";
$red_num_expr="AND red_num=$qred_num" if $red_num || $CM_show_hosts ;

foreach my $id(@mass_update_host_ids) {
    if ( $id =~ /^\d+\.\d+/ ) {
        #v4
        if ( $or_host_expr_v4 =~ /_/ ) {
            if ( $or_host_expr_v4  ) {
                $or_host_expr_v4.=" OR ip = INET_ATON('$id')";
            } else {
                $or_host_expr_v4="ip = INET_ATON('$id')";
            }
        } else {
            if ( $or_host_expr_v4 ) {
                $or_host_expr_v4.=" OR ip = INET_ATON('$id')";
            } else {
                $or_host_expr_v4=" ip = INET_ATON('$id')";
            }
        }
    } else {
        #v6
        my $ip_int=$self->ip_to_int("$client_id","$id","v6");
        if ( $or_host_expr_v6 =~ /_/ ) {
            if ( $or_host_expr_v6 ) {
                $or_host_expr_v6.=" OR ip = '$ip_int'";
            } else {
                $or_host_expr_v6=" ip = '$ip_int'";
            }
        } else {
            if ( $or_host_expr_v6 ) {
                $or_host_expr_v6.=" OR ip = '$ip_int'";
            } else {
                $or_host_expr_v6=" ip = '$ip_int'";
            }
        }
    }
}
$or_host_expr_v4= "(" . $or_host_expr_v4 . ") AND" if $or_host_expr_v4;
$or_host_expr_v6= "(" . $or_host_expr_v6 . ") AND" if $or_host_expr_v6;

my $sth;
if ( $change_expr ) {
    if ( $search_index eq "true" ) {
        if ( $or_host_expr_v4 ) {
            debug("UPDATE host SET $change_expr WHERE $or_host_expr_v4 client_id = $qclient_id AND range_id = '-1'");
            $sth = $dbh->prepare("UPDATE host SET $change_expr WHERE $or_host_expr_v4 client_id = $qclient_id AND range_id = '-1'"
                ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
            $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        }
        if ( $or_host_expr_v6 ) {
            debug("UPDATE host SET $change_expr WHERE $or_host_expr_v6 client_id = $qclient_id AND range_id = '-1'");
            $sth = $dbh->prepare("UPDATE host SET $change_expr WHERE $or_host_expr_v6 client_id = $qclient_id AND range_id = '-1'"
                ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
            $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        }
    } else {
        if ( $or_host_expr_v4 ) {
            debug("UPDATE host SET $change_expr WHERE $or_host_expr_v4 client_id = $qclient_id $red_num_expr AND range_id = '-1'");
            $sth = $dbh->prepare("UPDATE host SET $change_expr WHERE $or_host_expr_v4 client_id = $qclient_id $red_num_expr AND range_id = '-1'"
                ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
            $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        } elsif ( $or_host_expr_v6 ) {
            debug("UPDATE host SET $change_expr WHERE $or_host_expr_v6 client_id = $qclient_id $red_num_expr AND range_id = '-1'");
            $sth = $dbh->prepare("UPDATE host SET $change_expr WHERE $or_host_expr_v6 client_id = $qclient_id $red_num_expr AND range_id = '-1'"
                ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
            $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        }
    }
}


###### Ranges

my @values_range_no_host=();
my @values_range_host=();
my $ip_ref;

## Range entries without hostname

if ( $or_host_expr_v4 ) {
    $sth = $dbh->prepare("SELECT ip FROM host WHERE $or_host_expr_v4 client_id = $qclient_id AND range_id != '-1' AND hostname = ''"); 
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_range_no_host, [ @$ip_ref ];
    }
}
if ( $or_host_expr_v6 ) {
    $sth = $dbh->prepare("SELECT ip FROM host WHERE $or_host_expr_v6 client_id = $qclient_id AND range_id != '-1' AND hostname = ''"); 
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_range_no_host, [ @$ip_ref ];
    }
}

my $item;
my $or_host_expr_range_no_host="";
foreach $item (@values_range_no_host) {
    $or_host_expr_range_no_host.=" OR ip = \"$item->[0]\"";
}
if ( $or_host_expr_range_no_host ) {
    $or_host_expr_range_no_host =~ s/^\sOR//;
    $or_host_expr_range_no_host = "(" . $or_host_expr_range_no_host . ") AND";
}
my $change_expr_hostname_unknown;

if ( $change_expr ) {
    $change_expr_hostname_unknown = "hostname='unknown'," . $change_expr; 
} else {
    $change_expr_hostname_unknown = "hostname='unknown'";
}

if ( $or_host_expr_range_no_host ) {
    if ( $search_index eq "true" ) {
        $sth = $dbh->prepare("UPDATE host SET $change_expr_hostname_unknown WHERE $or_host_expr_range_no_host client_id = $qclient_id AND range_id != '-1'"
            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    } else {
        $sth = $dbh->prepare("UPDATE host SET $change_expr_hostname_unknown WHERE $or_host_expr_range_no_host client_id = $qclient_id $red_num_expr AND range_id != '-1'"
            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    }
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}


## Range entries with hostname

if ( $or_host_expr_v4 ) {
    $sth = $dbh->prepare("SELECT ip FROM host WHERE $or_host_expr_v4 client_id = $qclient_id AND range_id != '-1'"); 
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_range_host, [ @$ip_ref ];
    }
}
if ( $or_host_expr_v6 ) {
    $sth = $dbh->prepare("SELECT ip FROM host WHERE $or_host_expr_v6 client_id = $qclient_id AND range_id != '-1'"); 
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_range_host, [ @$ip_ref ];
    }
}

my $or_host_expr_range_host="";
foreach $item (@values_range_host) {
    $or_host_expr_range_host.=" OR ip = \"$item->[0]\"";
}
if ( $or_host_expr_range_host ) {
    $or_host_expr_range_host =~ s/^\sOR//;
    $or_host_expr_range_host = "(" . $or_host_expr_range_host . ") AND";
}

if ( $or_host_expr_range_host && $hay_values eq "yes" ) {
    if ( $search_index eq "true" ) {
        $sth = $dbh->prepare("UPDATE host SET $change_expr WHERE $or_host_expr_range_host client_id = $qclient_id AND range_id != '-1'"
            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    } else {
        $sth = $dbh->prepare("UPDATE host SET $change_expr WHERE $or_host_expr_range_host client_id = $qclient_id $red_num_expr AND range_id != '-1'"
            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    }
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}


### Insert new entry if no entry exists

my @values=();

if ( $or_host_expr_v4 ) {
    $sth = $dbh->prepare("SELECT INET_NTOA(ip) FROM host WHERE $or_host_expr_v4 client_id = $qclient_id"); 
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
}
if ( $or_host_expr_v6 ) {
    $sth = $dbh->prepare("SELECT ip FROM host WHERE $or_host_expr_v6 client_id = $qclient_id"); 
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
}

my @new_values=();
my @no_entry_hosts=();
my %count = ();
my %count1 = ();
my $k=0;

my @host_ids=split("_",$mass_update_host_ids);
foreach $item (@values) {
    my $id=@$item[0];
    $id=$self->int_to_ip("$client_id","@$item[0]","v6") if $id !~ /^\d+\.\d+/;
    $new_values[$k++]=$id;
}

foreach $item (@host_ids) { $count{$item}++ }
foreach $item (@new_values) { $count1{$item}++ }

while ( my ($key, $value) = each(%count) ) {
    if ( ! defined($count1{$key}) ) {
        push(@no_entry_hosts, $key);
    }
}

if ( scalar(@no_entry_hosts) > 0 ) {
    
    if ( ! $loc_id ) {
        if ( $search_index eq "true") {
            $loc_id = "-1";
        } else {
            $loc_id = $red_loc_id;
        }
        $qloc_id = $dbh->quote( $loc_id );
    }
    if ( ! $cat_id ) {
        $cat_id = "-1";
        $qcat_id = $dbh->quote( $cat_id );
    }
    if ( ! $update_type_id ) {
        $update_type_id = "-1";
        $qupdate_type = $dbh->quote( $update_type_id );
    }

    my $new_host_columns="(ip,hostname,red_num,last_update,ip_version,client_id";
    $new_host_columns.=",host_descr" if $qdescr;
    $new_host_columns.=",categoria" if $qcat_id;
    $new_host_columns.=",loc" if $qloc_id;
    $new_host_columns.=",int_admin" if $qint_admin;
    $new_host_columns.=",comentario" if $qcomentario;
    $new_host_columns.=",update_type" if $qupdate_type;
    $new_host_columns.=",dyn_dns_updates" if $qdyn_dns_updates;
    $new_host_columns.=")";
    my $new_host_values;
    my $last_update=time();
    foreach (@no_entry_hosts) {
        if ( $new_host_values ) {
            $new_host_values.=",";
        }
        if ( $ip_version eq "v4" ) {
            $new_host_values.="(INET_ATON(\'$_\'),'unknown',$qred_num,$last_update,$qip_version,$qclient_id";
        } else {
            my $ip_int=$self->ip_to_int("$client_id","$_","v6");
            $new_host_values.="($ip_int,'unknown',$qred_num,$last_update,$qip_version,$qclient_id";
        }
        $new_host_values.=",$qdescr" if $qdescr;
        $new_host_values.=",$qcat_id" if $qcat_id;
        $new_host_values.=",$qloc_id" if $qloc_id;
        $new_host_values.=",$qint_admin" if $qint_admin;
        $new_host_values.=",$qcomentario" if $qcomentario;
        $new_host_values.=",$qupdate_type" if $qupdate_type;
        $new_host_values.=",$qdyn_dns_updates" if $qdyn_dns_updates;
        $new_host_values.=")";
    }


    # no change_expr => no custom column values
    if ( $change_expr ) {
        $sth = $dbh->prepare("INSERT INTO host $new_host_columns VALUES $new_host_values"
                    ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    }
}

    $sth->finish();
    $dbh->disconnect;
}

sub mass_update_custom_column_value_host {
my ( $self,$client_id, $cc_id,$cc_pcid, $mass_update_host_ids, $entry, $red_num ) = @_;

$red_num="" if ! $red_num;

my $dbh = $self->_mysql_connection();
my $qcc_id = $dbh->quote( $cc_id );
my $qred_num = $dbh->quote( $red_num );
my $qcc_pcid = $dbh->quote( $cc_pcid );
my $qentry = $dbh->quote( $entry );
my $qclient_id = $dbh->quote( $client_id );
my $qmydatetime = $dbh->quote( time() );

my $or_host_expr = $mass_update_host_ids;
if ( $or_host_expr =~ /_/ ) {
    $or_host_expr =~ s/_/') OR host_id = INET_ATON('/g;
    $or_host_expr =~ s/^/host_id = INET_ATON('/;
    $or_host_expr =~ s/$/')/;
    $or_host_expr= "(" . $or_host_expr . ")";
} else {
    $or_host_expr="host_id = INET_ATON('$or_host_expr')";
}
    
my $or_host_expr_v4="";
my $or_host_expr_v6="";
my @mass_update_host_ids=(); 
if ( $mass_update_host_ids =~ /_/ ) {
    @mass_update_host_ids=split("_",$mass_update_host_ids);
} else {
    $mass_update_host_ids[0]=$mass_update_host_ids;
}

foreach my $id(@mass_update_host_ids) {
    if ( $id =~ /^\d+\.\d+/ ) {
        #v4
        if ( $or_host_expr_v4 =~ /_/ ) {
            if ( $or_host_expr_v4  ) {
                $or_host_expr_v4.=" OR ip = INET_ATON('$id')";
            } else {
                $or_host_expr_v4="ip = INET_ATON('$id')";
            }
        } else {
            if ( $or_host_expr_v4 ) {
                $or_host_expr_v4.=" OR ip = INET_ATON('$id')";
            } else {
                $or_host_expr_v4=" ip = INET_ATON('$id')";
            }
        }
    } else {
        #v6
        my $ip_int=$self->ip_to_int("$client_id","$id","v6");
        if ( $or_host_expr_v6 =~ /_/ ) {
            if ( $or_host_expr_v6 ) {
                $or_host_expr_v6.=" OR ip = '$ip_int'";
            } else {
                $or_host_expr_v6=" ip = '$ip_int'";
            }
        } else {
            if ( $or_host_expr_v6 ) {
                $or_host_expr_v6.=" OR ip = '$ip_int'";
            } else {
                $or_host_expr_v6=" ip = '$ip_int'";
            }
        }
    }
}
$or_host_expr_v4= "(" . $or_host_expr_v4 . ") AND" if $or_host_expr_v4;
$or_host_expr_v6= "(" . $or_host_expr_v6 . ") AND" if $or_host_expr_v6;

my $ip_ref;

my @values_ids=();
my $sth;
if ( $red_num ) {
    if ( $or_host_expr_v4 ) {
        $sth = $dbh->prepare("SELECT id FROM host WHERE red_num=$qred_num AND $or_host_expr_v4 client_id = $qclient_id");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        while ( $ip_ref = $sth->fetchrow_arrayref ) {
            push @values_ids, [ @$ip_ref ];
        }
    } elsif ( $or_host_expr_v6 ) {
        $sth = $dbh->prepare("SELECT id FROM host WHERE red_num=$qred_num AND $or_host_expr_v6 client_id = $qclient_id");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        while ( $ip_ref = $sth->fetchrow_arrayref ) {
            push @values_ids, [ @$ip_ref ];
        }
    }
} else {
    if ( $or_host_expr_v4 ) {
        $sth = $dbh->prepare("SELECT id FROM host WHERE $or_host_expr_v4 client_id = $qclient_id");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        while ( $ip_ref = $sth->fetchrow_arrayref ) {
            push @values_ids, [ @$ip_ref ];
        }
    }
    if ( $or_host_expr_v6 ) {
        $sth = $dbh->prepare("SELECT id FROM host WHERE $or_host_expr_v6 client_id = $qclient_id");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        while ( $ip_ref = $sth->fetchrow_arrayref ) {
            push @values_ids, [ @$ip_ref ];
        }
    }
}

my $or_host_expr_id="";
my $item;
foreach $item (@values_ids) {
    my $item_noref=@$item[0];
    if ( $or_host_expr_id ) {
        $or_host_expr_id.="_$item_noref";
    } else {
        $or_host_expr_id=$item_noref;
    }
}

if ( $or_host_expr_id =~ /_/ ) {
    $or_host_expr_id =~ s/_/' OR host_id = '/g;
    $or_host_expr_id =~ s/^/host_id = '/;
    $or_host_expr_id =~ s/$/'/;
    $or_host_expr_id= "(" . $or_host_expr_id . ")";
} else {
    $or_host_expr_id="host_id = '$or_host_expr_id'";
}

if ( $entry eq "__NOVAL__" ) {
    $sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE cc_id=$qcc_id AND $or_host_expr_id AND ( client_id = $qclient_id OR client_id = '9999' )");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} else {
    $sth = $dbh->prepare("UPDATE custom_host_column_entries SET entry=$qentry WHERE cc_id=$qcc_id AND $or_host_expr_id AND ( client_id = $qclient_id OR client_id = '9999' )");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    
    my @values;
    my @host_ids=();
    if ( $mass_update_host_ids =~ /_/ ) {
        @host_ids=split("_",$mass_update_host_ids);
    } else {
        $host_ids[0]=$mass_update_host_ids;
    }

    $sth = $dbh->prepare("SELECT host_id FROM custom_host_column_entries WHERE cc_id=$qcc_id AND $or_host_expr_id AND ( client_id = $qclient_id OR client_id = '9999' )");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }

    my %seen=();
    my @no_entry_hosts=();

    foreach $item (@values) {
        my $item_noref=@$item[0];
        $seen{"$item_noref"} = 1;
    }

    foreach $item (@values_ids) {
        my $item_noref=@$item[0];
        unless ($seen{"$item_noref"}) {
            push(@no_entry_hosts, $item_noref);
        }
    }

    my $new_column_values="";
    foreach (@no_entry_hosts) {
        if ( $new_column_values ) {
            $new_column_values.=",($qcc_id,$qcc_pcid,\"$_\",$qentry,$qclient_id)";
        } else {
            $new_column_values="($qcc_id,$qcc_pcid,\"$_\",$qentry,$qclient_id)";
        }
    }

    if ( $new_column_values ) {
        $sth = $dbh->prepare("INSERT INTO custom_host_column_entries (cc_id, pc_id, host_id, entry, client_id) VALUES $new_column_values");
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    }
}
    
$sth->finish();
$dbh->disconnect;
}


sub get_url_values {
my ( $self,$client_id, $mass_update_host_ids, $red_num, $cc_id, $cc_pcid ) = @_;
my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qcc_id = $dbh->quote( $cc_id );
my $qcc_pcid = $dbh->quote( $cc_pcid );
my $qclient_id = $dbh->quote( $client_id );
my $ip_ref;
    
my $or_host_expr_ip = $mass_update_host_ids;
if ( $or_host_expr_ip =~ /_/ ) {
    $or_host_expr_ip =~ s/_/') OR ip = INET_ATON('/g;
    $or_host_expr_ip =~ s/^/ip = INET_ATON('/;
    $or_host_expr_ip =~ s/$/')/;
    $or_host_expr_ip= "(" . $or_host_expr_ip . ")";
} else {
    $or_host_expr_ip="ip = INET_ATON('$or_host_expr_ip')";
}

my @values_ids=();
my $sth = $dbh->prepare("SELECT id FROM host WHERE red_num=$qred_num AND $or_host_expr_ip AND client_id = $qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values_ids, [ @$ip_ref ];
}

my $or_host_expr_id;
my $item;
foreach $item (@values_ids) {
    my $item_noref=@$item[0];
    if ( $or_host_expr_id ) {
        $or_host_expr_id.="_$item_noref";
    } else {
        $or_host_expr_id=$item_noref;
    }
}

if ( $or_host_expr_id =~ /_/ ) {
    $or_host_expr_id =~ s/_/' OR host_id = '/g;
    $or_host_expr_id =~ s/^/host_id = '/;
    $or_host_expr_id =~ s/$/'/;
    $or_host_expr_id= "(" . $or_host_expr_id . ")";
} else {
    $or_host_expr_id="host_id = '$or_host_expr_id'";
}

my @values=();
$sth = $dbh->prepare("SELECT entry FROM custom_host_column_entries WHERE cc_id=$qcc_id AND pc_id=$qcc_pcid AND $or_host_expr_id AND ( client_id = $qclient_id OR client_id = '9999' )");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}

my @values_url=();
foreach $item (@values) {
    push (@values_url,@$item[0]);
}

    $sth->finish();
    $dbh->disconnect;

    return @values_url;
}

sub convert_to_seconds {
my ( $self,$value ) = @_;

$value =~ s/\s//g;
$value =~ /(\d{1}[a-zA-Z])(\d{1}[a-zA-Z])?(\d{1}[a-zA-Z])?(\d{1}[a-zA-Z])?/;
my %values= (
    1 => "$1",
);
$values{2} = "$2" if $2;
$values{3} = "$3" if $3;
$values{4} = "$4" if $4;

my $old_value=0;
for my $key ( keys %values ) {
    $value = $values{$key};
    last if ! $value;

    if ( $value =~ /s$/i ) {
        $value =~ s/s$//i;
    } elsif ( $value =~ /m$/i ) {
        $value =~ s/m$//i;
        $value = $value*60;
    } elsif ( $value =~ /h$/i ) {
        $value =~ s/h$//i;
        $value = $value*3600;
    } elsif ( $value =~ /d$/i ) {
        $value =~ s/d$//i;
        $value = $value*86400;
    } elsif ( $value =~ /w$/i ) {
        $value =~ s/w$//i;
        $value = $value*604800;
    }
    $value+=$old_value;
    $old_value=$value;
}

return $value;

}

sub delete_linked_ip {
    my ( $self,$client_id,$ip_version,$linked_ip_old,$ip,$host_id_linked ) = @_;

    my $ip_version_ip_old;
    if ( $linked_ip_old =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ ) {
        $ip_version_ip_old="v4";
    } else {
        $ip_version_ip_old="v6";
    }

    #	my $cc_name="linked IP";
    my $cc_name="linkedIP";
    my $cc_id="";
    my $pc_id="";
    $host_id_linked="" if ! $host_id_linked;
    if ( ! $host_id_linked ) {
        my $ip_int_linked=$self->ip_to_int("$client_id","$linked_ip_old","$ip_version_ip_old") || "";
        $host_id_linked=$self->get_host_id_from_ip_int("$client_id","$ip_int_linked") || "";
    }
    return if ! $host_id_linked;
    my %custom_host_column_values=$self->get_custom_host_columns_from_net_id_hash("$client_id","$host_id_linked");
    while ( my ($key, @value) = each(%custom_host_column_values) ) {
        if ( $value[0]->[0] eq $cc_name ) {
            $cc_id=$key;
            $pc_id=$value[0]->[2];
            last;
        }
    }


    my $linked_cc_entry=$self->get_custom_host_column_entry("$client_id","$host_id_linked","$cc_name","$pc_id") || "";
    my $linked_ip_comp=$ip;
    $linked_ip_comp = ip_compress_address ($linked_ip_comp, 6) if $ip_version eq "v6";
    $linked_cc_entry =~ s/\b${linked_ip_comp}\b//;
    $linked_cc_entry =~ s/^,//;
    $linked_cc_entry =~ s/,$//;
    $linked_cc_entry =~ s/,,/,/;
    # delete entry from linked host
    if ( $linked_cc_entry ) {
        $self->update_custom_host_column_value_host_modip("$client_id","$cc_id","$pc_id","$host_id_linked","$linked_cc_entry");
    } else {
        $self->delete_single_custom_host_column_entry("$client_id","$host_id_linked","$linked_ip_comp","$pc_id");
    }
}

sub get_linked_custom_columns_hash {
my ( $self,$client_id,$red_num,$cc_id,$ip_version ) = @_;
my %cc_values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qred_num = $dbh->quote( $red_num );
my $qcc_id = $dbh->quote( $cc_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT ce.cc_id,ce.pc_id,ce.host_id,ce.entry,h.ip,INET_NTOA(h.ip),h.ip_version FROM custom_host_column_entries ce, host h WHERE ce.cc_id=$qcc_id AND ce.host_id=h.id AND ce.host_id IN ( select id from host WHERE red_num=$qred_num ) AND (h.client_id = $qclient_id OR h.client_id = '9999')")
    or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $ip="";
    my $ip_int = $ip_ref->{'ip'};
    # ignore ip_version argument an use ip_version from query
    my $ip_version= $ip_ref->{'ip_version'};
    if ( $ip_version eq "v4" ) {
        $ip = $ip_ref->{'INET_NTOA(h.ip)'};
    } else {
        $ip = $self->int_to_ip("$client_id","$ip_int","$ip_version");
        $ip = ip_compress_address ($ip, 6);
    }
    my $entry = $ip_ref->{entry};
    my $host_id = $ip_ref->{host_id};
    push @{$cc_values{$ip_int}},"$entry","$ip","$host_id";
    }
    $dbh->disconnect;
    return %cc_values;
}


sub get_vendor_array {
my @vendors=("a10","actiontec","accton","adder","aerohive","aficio","arquimedes","ricoh","alvaco","anitech","apple","arbor","aruba","adtran","allied","apc","altiga","alps","arista","asante","astaro","avaya","avocent","axis","barracuda","billion","belair","bluecoat","boostedge","borderware","brother","broadcom","brocade","buffalo","calix","citrix","cyclades","canon","carestream","checkpoint","cisco","cyberoam","d-link","dell","dialogic","dothill","draytek","eaton","eci telecom","edgewater","eeye","emc","emerson","enterasys","epson","ericsson","extreme","extricom","f5","force10","fluke","fortinet","foundry","fujitsu","general electric","h3c","heidelberg","hitachi","hp|hewlett.?packard","huawei","ibm","iboss","imperva","iomega","juniper","kasda","kemp","kodak","konica","kyocera","lacie","lancom","lantronix","lanier","lanner","alcatel|lucent","lenovo","lexmark","lg","liebert","linksys","lifesize","macafee","megaware","meru","multitech","microsemi","microsoft","minolta","mikrotik","mitsubishi","mobileiron","motorola","moxa","netapp","nec","netgear","netsweeper","nimble","nitro","nokia","nortel","novell","oce","okilan","olivetti","olympus","optibase","ovislink","oracle","packetfront","panasonic","passport","palo.?alto","patton","peplink","philips","pica8","polycom","procurve","proxim","purestorage","qnap","radvision","radware","rapid7","raspberry","realtek","redback","reflex","riverbed","riverstone","rsa","ruckus","samsung","savin","seiko","sharp","shinko","siemens","silverpeak","sipix","smc","sonicwall","sophos","sourcefire","stillsecure","storagetek","star","stonesoft","sony","synology","symantec","sun","supermicro","tally-genicom","tandberg","tenda","thomson","tippingpoint","toplayer","tp-link","ubiquiti","toshiba","vegastream","vidyo","vmware","vyatta","watchguard","websense","westbase","western digital","xante","xerox","xiro","zyxel","zebra","3com");

@vendors=sort(@vendors);

return @vendors;
}



########################################################
# CONFIGURATION MANAGEMENT
## Functions required by the configuration backup system
########################################################


sub get_device_user_groups_hash {
my ( $self, $client_id ) = @_;
my %values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id,name,user_name,login_pass,enable_pass,description,rsa_identity_file,client_id FROM device_user_groups WHERE client_id=$qclient_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $name = $ip_ref->{name};
    my $user_name = $ip_ref->{user_name};
    my $login_pass = $ip_ref->{login_pass};
    my $enable_pass = $ip_ref->{enable_pass};
    my $description = $ip_ref->{description};
    my $rsa_identity_file = $ip_ref->{rsa_identity_file} || "";
    my $client_id = $ip_ref->{client_id};
    push @{$values{$id}},"$name","$user_name","$login_pass","$enable_pass","$description","$client_id","$rsa_identity_file";
    }
    $dbh->disconnect;
    return %values;
}


sub insert_device_user_group {
my ( $self,$client_id,$name,$user_name,$login_pass,$enable_pass,$rsa_identity_file,$description) = @_;
    my $dbh = $self->_mysql_connection();
    my $qname = $dbh->quote( $name );
    my $quser_name = $dbh->quote( $user_name );
    my $qlogin_pass = $dbh->quote( $login_pass );
    my $qenable_pass = $dbh->quote( $enable_pass );
    my $qrsa_identity_file = $dbh->quote( $rsa_identity_file );
    my $qdescription = $dbh->quote( $description );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("INSERT INTO device_user_groups (name, user_name, login_pass, enable_pass, description, rsa_identity_file, client_id) VALUES ( $qname,$quser_name,$qlogin_pass,$qenable_pass,$qdescription,$qrsa_identity_file,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub mod_device_user_group {
my ( $self,$client_id,$id,$name,$user_name,$login_pass,$enable_pass,$rsa_identity_file,$description) = @_;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );
    my $qname = $dbh->quote( $name );
    my $quser_name = $dbh->quote( $user_name );
    my $qlogin_pass = $dbh->quote( $login_pass );
    my $qenable_pass = $dbh->quote( $enable_pass );
    my $qrsa_identity_file = $dbh->quote( $rsa_identity_file );
    my $qdescription = $dbh->quote( $description );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("UPDATE device_user_groups set name=$qname,user_name=$quser_name,login_pass=$qlogin_pass,enable_pass=$qenable_pass,description=$qdescription,rsa_identity_file=$qrsa_identity_file WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_device_user_group {
my ( $self,$client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("DELETE FROM device_user_groups WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub get_device_cm_hash {
my ( $self, $client_id,$host_id,$device_user_group_id,$key ) = @_;
my %values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
$host_id="" if ! $host_id;
$key="" if ! $key;
$device_user_group_id="" if ! $device_user_group_id;
my $qhost_id = $dbh->quote( $host_id );
my $qdevice_user_group_id = $dbh->quote( $device_user_group_id );
my $qclient_id = $dbh->quote( $client_id );
my $host_filter="";
$host_filter="AND host_id=$qhost_id" if $host_id;
my $device_user_group_id_filter="";
$device_user_group_id_filter="AND device_user_group_id=$qdevice_user_group_id" if $device_user_group_id;
my $sth = $dbh->prepare("SELECT id,host_id,device_type_group_id,device_user_group_id,user_name,login_pass,enable_pass,description,connection_proto,connection_proto_args,cm_server_id,save_config_changes,last_backup_date,last_backup_status,last_backup_log,client_id FROM device_cm_config WHERE client_id=$qclient_id $host_filter $device_user_group_id_filter"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $host_id = $ip_ref->{host_id};
    my $device_type_group_id = $ip_ref->{device_type_group_id};
    my $device_user_group_id = $ip_ref->{device_user_group_id} || "";
    my $user_name = $ip_ref->{user_name} || "";
    my $login_pass = $ip_ref->{login_pass} || "";
    my $enable_pass = $ip_ref->{enable_pass} || "";
    my $description = $ip_ref->{description} || "";
    my $connection_proto = $ip_ref->{connection_proto} || "";
    my $connection_proto_port = $ip_ref->{connection_proto_args} || "";
    my $cm_server_id = $ip_ref->{cm_server_id} || "";
    my $save_config_changes = $ip_ref->{save_config_changes} || 0;
    my $last_backup_date = $ip_ref->{last_backup_date} || "";
    my $last_backup_status = $ip_ref->{last_backup_status};
    $last_backup_status=-1 if ! defined($last_backup_status);
    my $last_backup_log = $ip_ref->{last_backup_log} || "";
    if ( $key eq "host_id" ) {
        push @{$values{$host_id}},"$host_id","$device_type_group_id","$device_user_group_id","$user_name","$login_pass","$enable_pass","$description","$connection_proto","$cm_server_id","$save_config_changes","$last_backup_date","$last_backup_status","$last_backup_log","$connection_proto_port";
    } else {
        push @{$values{$id}},"$host_id","$device_type_group_id","$device_user_group_id","$user_name","$login_pass","$enable_pass","$description","$connection_proto","$cm_server_id","$save_config_changes","$last_backup_date","$last_backup_status","$last_backup_log","$connection_proto_port";
    }
}

    $dbh->disconnect;
    return %values;
}

sub get_device_cm_hash_mass_update_key_host_ip {
my ( $self, $client_id,$device_user_group_id ) = @_;
my %values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
$device_user_group_id="" if ! $device_user_group_id;
my $qdevice_user_group_id = $dbh->quote( $device_user_group_id );
my $qclient_id = $dbh->quote( $client_id );
my $device_user_group_id_filter="";
$device_user_group_id_filter="AND device_user_group_id=$qdevice_user_group_id" if $device_user_group_id;
    my $sth = $dbh->prepare("SELECT dcc.id,dcc.host_id,dcc.device_type_group_id,h.ip,INET_NTOA(h.ip),h.ip_version FROM device_cm_config dcc, host h WHERE dcc.host_id=h.id AND dcc.client_id=$qclient_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $host_id = $ip_ref->{host_id};
    my $ip_version = $ip_ref->{ip_version};
    my $device_type_group_id = $ip_ref->{device_type_group_id};
    my $ip_int = $ip_ref->{ip};
    my $ip;
    if ( $ip_version eq "v4" ) {
        $ip=$ip_ref->{'INET_NTOA(h.ip)'};
    } else {
        $ip=$self->int_to_ip("$client_id","$ip_int","$ip_version");
    }
    push @{$values{$ip}},"$host_id","$device_type_group_id";
}
    $dbh->disconnect;
    return %values;
}

#sub get_device_cm_hash_complete {
#	my ( $self, $client_id,$host_id ) = @_;
#	my %values;
#	my $ip_ref;
#	my $dbh = $self->_mysql_connection();
#	$host_id="" if ! $host_id;
#	my $qhost_id = $dbh->quote( $host_id );
#	my $qclient_id = $dbh->quote( $client_id );
#	my $host_filter="";
#	$host_filter="AND host_id=$qhost_id" if $host_id;
#        my $sth = $dbh->prepare("SELECT dcc.id,dcc.host_id,dcc.device_type_group_id,dcc.device_user_group_id,dcc.user_name,dcc.login_pass,dcc.enable_pass,dcc.description,dcc.connection_proto,dcc.client_id,dug.id,dug.name,dug.user_name,dug.login_pass,dug.enable_pass,dug.description, dtg.id, dtg.name FROM device_cm_config dcc, device_type_groups dtg, device_user_groups dug WHERE dug.id=dcc.device_user_group_id AND dtg.id=dcc.device_type_group_id AND dcc.client_id=$qclient_id $host_filter"
#		) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        while ( $ip_ref = $sth->fetchrow_hashref ) {
#		my $id = $ip_ref->{id};
#		my $host_id = $ip_ref->{host_id};
#		my $device_type_group_id = $ip_ref->{device_type_group_id};
#		my $device_user_group_id = $ip_ref->{device_user_group_id};
#		my $user_name = $ip_ref->{user_name};
#		my $login_pass = $ip_ref->{login_pass};
#		my $enable_pass = $ip_ref->{enable_pass};
#		my $description = $ip_ref->{description};
#		my $connection_proto = $ip_ref->{connection_proto};
#		my $client_id = $ip_ref->{client_id};
#		push @{$values{$id}},"$host_id","$device_type_group_id","$device_user_group_id","$user_name","$login_pass","$enable_pass","$description","$client_id","$connection_proto";
#        }
#        $dbh->disconnect;
#        return %values;
#}


sub insert_device_cm {
my ( $self,$client_id,$host_id,$device_type_group_id,$device_user_group_id,$user_name,$login_pass,$enable_pass,$description,$connection_proto,$cm_server_id,$save_config_changes,$connection_proto_port) = @_;
    my $dbh = $self->_mysql_connection();
    my $qhost_id = $dbh->quote( $host_id );

$save_config_changes=0 if ! $save_config_changes;
$device_user_group_id="" if ! $device_user_group_id;
$user_name="" if ! $user_name;
$login_pass="" if ! $login_pass;
$enable_pass="" if ! $enable_pass;
$description="" if ! $description;

    my $qdevice_type_group_id = $dbh->quote( $device_type_group_id );
    my $qdevice_user_group_id = $dbh->quote( $device_user_group_id );
    my $quser_name = $dbh->quote( $user_name );
    my $qlogin_pass = $dbh->quote( $login_pass );
    my $qenable_pass = $dbh->quote( $enable_pass );
    my $qdescription = $dbh->quote( $description );
    my $qconnection_proto = $dbh->quote( $connection_proto );
my $qconnection_proto_port = $dbh->quote( $connection_proto_port );
    my $qsave_config_changes = $dbh->quote( $save_config_changes );
    my $qcm_server_id = $dbh->quote( $cm_server_id );
    my $qclient_id = $dbh->quote( $client_id );

my $sth;
if ( $device_user_group_id ) {
    $sth = $dbh->prepare("INSERT INTO device_cm_config (host_id,device_type_group_id,device_user_group_id,user_name,login_pass,enable_pass,description,connection_proto,connection_proto_args,cm_server_id,save_config_changes,client_id) VALUES ( $qhost_id,$qdevice_type_group_id,$qdevice_user_group_id,$quser_name,$qlogin_pass,$qenable_pass,$qdescription,$qconnection_proto,$qconnection_proto_port,$qcm_server_id,$qsave_config_changes,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
} else {
    $sth = $dbh->prepare("INSERT INTO device_cm_config (host_id,device_type_group_id,user_name,login_pass,enable_pass,description,connection_proto,connection_proto_args,cm_server_id,save_config_changes,client_id) VALUES ( $qhost_id,$qdevice_type_group_id,$quser_name,$qlogin_pass,$qenable_pass,$qdescription,$qconnection_proto,$qconnection_proto_port,$qcm_server_id,$qsave_config_changes,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    
}
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub insert_device_cm_mass_update {
my ( $self,$client_id,$mass_update_host_ids,$device_type_group_id,$device_user_group_id,$user_name,$login_pass,$enable_pass,$description,$connection_proto,$cm_server_id,$save_config_changes,$connection_proto_port) = @_;
    my $dbh = $self->_mysql_connection();

$save_config_changes=0 if ! $save_config_changes;
$device_user_group_id="" if ! $device_user_group_id;
$user_name="" if ! $user_name;
$login_pass="" if ! $login_pass;
$enable_pass="" if ! $enable_pass;
$description="" if ! $description;

$device_user_group_id="" if ! $device_user_group_id;
$connection_proto="" if ! $connection_proto;
$connection_proto_port="" if ! $connection_proto;
$cm_server_id="" if ! $cm_server_id;

    my $qdevice_type_group_id = $dbh->quote( $device_type_group_id );
    my $qdevice_user_group_id = $dbh->quote( $device_user_group_id ) if $device_user_group_id;
    my $quser_name = $dbh->quote( $user_name );
    my $qlogin_pass = $dbh->quote( $login_pass );
    my $qenable_pass = $dbh->quote( $enable_pass );
    my $qdescription = $dbh->quote( $description );
    my $qconnection_proto = $dbh->quote( $connection_proto ) if $connection_proto;
my $qconnection_proto_port = $dbh->quote( $connection_proto_port ) if $connection_proto_port;
    my $qsave_config_changes = $dbh->quote( $save_config_changes );
    my $qcm_server_id = $dbh->quote( $cm_server_id ) if $cm_server_id;
    my $qclient_id = $dbh->quote( $client_id );

my @mass_update_host_ids=(); 
if ( $mass_update_host_ids =~ /_/ ) {
    @mass_update_host_ids=split("_",$mass_update_host_ids);
} else {
    $mass_update_host_ids[0]=$mass_update_host_ids;
}

my $rows="host_id,device_type_group_id";
$rows.=",device_user_group_id" if $device_user_group_id;
$rows.=",user_name,login_pass,enable_pass,description";
$rows.=",connection_proto" if $connection_proto;
$rows.=",connection_proto_args" if $connection_proto_port;
$rows.=",cm_server_id" if $cm_server_id;
$rows.=",save_config_changes,client_id";

my $row_vals="$qdevice_type_group_id";
$row_vals.=",$qdevice_user_group_id" if $device_user_group_id;
$row_vals.=",$quser_name,$qlogin_pass,$qenable_pass,$qdescription";
$row_vals.=",$qconnection_proto" if $connection_proto;
$row_vals.=",$qconnection_proto_port" if $connection_proto_port;
$row_vals.=",$qcm_server_id" if $cm_server_id;
$row_vals.=",$qsave_config_changes,$qclient_id";

my $sth;
foreach my $muhid ( @mass_update_host_ids ) {
    $sth = $dbh->prepare("INSERT INTO device_cm_config ($rows) VALUES ( $muhid,$row_vals )"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
if ( $mass_update_host_ids[0] ) {
    $sth->finish();
    $dbh->disconnect;
}
}



sub mod_device_cm {
my ( $self,$client_id,$cm_id,$host_id,$device_type_group_id,$device_user_group_id,$user_name,$login_pass,$enable_pass,$description,$connection_proto,$cm_server_id,$save_config_changes,$connection_proto_port) = @_;
    my $dbh = $self->_mysql_connection();
    my $qcm_id = $dbh->quote( $cm_id );
    my $qhost_id = $dbh->quote( $host_id );

$save_config_changes=0 if ! $save_config_changes;
$device_user_group_id="" if ! $device_user_group_id;
$user_name="" if ! $user_name;
$login_pass="" if ! $login_pass;
$enable_pass="" if ! $enable_pass;
$description="" if ! $description;
$connection_proto_port="" if ! $connection_proto_port;

    my $qdevice_type_group_id = $dbh->quote( $device_type_group_id );
    my $qdevice_user_group_id = $dbh->quote( $device_user_group_id );
    my $quser_name = $dbh->quote( $user_name );
    my $qlogin_pass = $dbh->quote( $login_pass );
    my $qenable_pass = $dbh->quote( $enable_pass );
    my $qdescription = $dbh->quote( $description );
    my $qconnection_proto = $dbh->quote( $connection_proto );
my $qconnection_proto_port = $dbh->quote( $connection_proto_port );
    my $qsave_config_changes = $dbh->quote( $save_config_changes );
    my $qcm_server_id = $dbh->quote( $cm_server_id );
    my $qclient_id = $dbh->quote( $client_id );

my $sth;
if ( $device_user_group_id ) {
    $sth = $dbh->prepare("UPDATE device_cm_config set device_type_group_id=$qdevice_type_group_id,device_user_group_id=$qdevice_user_group_id,user_name=$quser_name,login_pass=$qlogin_pass,enable_pass=$qenable_pass,description=$qdescription,connection_proto=$qconnection_proto,connection_proto_args=$qconnection_proto_port,cm_server_id=$qcm_server_id,save_config_changes=$qsave_config_changes WHERE id=$qcm_id"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
} else {
    $sth = $dbh->prepare("UPDATE device_cm_config set device_type_group_id=$qdevice_type_group_id,device_user_group_id=NULL,user_name=$quser_name,login_pass=$qlogin_pass,enable_pass=$qenable_pass,description=$qdescription,connection_proto=$qconnection_proto,connection_proto_args=$qconnection_proto_port,cm_server_id=$qcm_server_id,save_config_changes=$qsave_config_changes WHERE id=$qcm_id"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
}
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub mod_device_cm_mass_update {
my ( $self,$client_id,$mass_update_host_ids,$device_type_group_id,$device_user_group_id,$user_name,$login_pass,$enable_pass,$description,$connection_proto,$cm_server_id,$save_config_changes,$connection_proto_port) = @_;
    my $dbh = $self->_mysql_connection();

$save_config_changes=0 if ! $save_config_changes;
$user_name="" if ! $user_name;
$login_pass="" if ! $login_pass;
$enable_pass="" if ! $enable_pass;

$device_user_group_id="" if ! $device_user_group_id;
$connection_proto="" if ! $connection_proto;
$connection_proto_port="" if ! $connection_proto_port;
$cm_server_id="" if ! $cm_server_id;


    my $qdevice_type_group_id = $dbh->quote( $device_type_group_id );
    my $qdevice_user_group_id = $dbh->quote( $device_user_group_id ) if $device_type_group_id;
    my $quser_name = $dbh->quote( $user_name );
    my $qlogin_pass = $dbh->quote( $login_pass );
    my $qenable_pass = $dbh->quote( $enable_pass );
    my $qdescription = $dbh->quote( $description );
    my $qconnection_proto = $dbh->quote( $connection_proto ) if $connection_proto;
my $qconnection_proto_port = $dbh->quote( $connection_proto_port ) if $connection_proto_port;
    my $qsave_config_changes = $dbh->quote( $save_config_changes );
    my $qcm_server_id = $dbh->quote( $cm_server_id ) if $cm_server_id;
    my $qclient_id = $dbh->quote( $client_id );

my $device_user_group_id_expr;
if ( $device_user_group_id ) {
    $device_user_group_id_expr="device_user_group_id=" . $qdevice_user_group_id . ",";
} else {
    $device_user_group_id_expr="device_user_group_id=NULL,";
}
my $connection_proto_expr="";
$connection_proto_expr="connection_proto=" . $qconnection_proto . "," if $connection_proto;
my $connection_proto_port_expr="";
$connection_proto_port_expr="connection_proto_args=" . $qconnection_proto_port . "," if $connection_proto_port;
my $cm_server_id_expr="";
$cm_server_id_expr="cm_server_id=" . $qcm_server_id . "," if $cm_server_id;

my @mass_update_host_ids=(); 
if ( $mass_update_host_ids =~ /_/ ) {
    @mass_update_host_ids=split("_",$mass_update_host_ids);
} else {
    $mass_update_host_ids[0]=$mass_update_host_ids;
}


my $sth;
foreach my $muhid ( @mass_update_host_ids ) {
    $sth = $dbh->prepare("UPDATE device_cm_config set device_type_group_id=$qdevice_type_group_id,$device_user_group_id_expr user_name=$quser_name,login_pass=$qlogin_pass,enable_pass=$qenable_pass,description=$qdescription,$connection_proto_expr $connection_proto_port_expr $cm_server_id_expr save_config_changes=$qsave_config_changes WHERE host_id=$muhid"
            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
    $sth->finish();
    $dbh->disconnect;
}

sub delete_device_cm {
my ( $self,$client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("DELETE FROM device_cm_config WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_device_cm_host_id {
    my ( $self,$client_id, $host_id, $red_num ) = @_;

    $host_id = "" if ! $host_id;
    $red_num = "" if ! $red_num;
    my $format=$self->{'format'};
    my $error;
    my $dbh = $self->_mysql_connection();
    my $qhost_id = $dbh->quote( $host_id );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth;
    if ( $red_num ) {
        my $qred_num = $dbh->quote( $red_num );
        $sth = $dbh->prepare("DELETE FROM device_cm_config WHERE host_id IN (select id from host where red_num=$qred_num)") or $error="Can not execute statement:<p>$DBI::errstr";
    } else {
        $sth = $dbh->prepare("DELETE FROM device_cm_config WHERE host_id=$host_id") or $error="Can not execute statement:<p>$DBI::errstr";
    }

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

        $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    $sth->finish();
    $dbh->disconnect;
}

sub delete_device_cm_host_id_all {
my ( $self,$client_id, $mass_update_host_ids ) = @_;

my @mass_update_host_ids=(); 
if ( $mass_update_host_ids =~ /_/ ) {
    @mass_update_host_ids=split("_",$mass_update_host_ids);
} else {
    $mass_update_host_ids[0]=$mass_update_host_ids;
}

    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth;
foreach my $muhid ( @mass_update_host_ids ) {
    my $qmuhid = $dbh->quote( $muhid );
    if ( $muhid =~ /^\d{1,3}\.\d{1,3}/ ) {
        $sth = $dbh->prepare("DELETE FROM device_cm_config WHERE host_id = ( SELECT id FROM host WHERE INET_NTOA(ip)=$qmuhid AND ip_version='v4' )"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    } else {
        $sth = $dbh->prepare("DELETE FROM device_cm_config WHERE host_id = ( SELECT id FROM host WHERE ip=$qmuhid AND ip_version='v6' )"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    }
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}

    $sth->finish();
    $dbh->disconnect;
}

#sub get_device_type_group_ids_from_job_group_id {
#	my ( $self, $client_id,$job_group_id ) = @_;
#	my @values;
#	my $ip_ref;
#        my $dbh = $self->_mysql_connection();
#	my $qjob_group_id = $dbh->quote( $job_group_id );
#	my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT DISTINCT device_type_group_id FROM device_cm_config WHERE host_id IN (SELECT host_id FROM device_jobs WHERE job_group_id=$qjob_group_id and client_id=$qclient_id)")
#		or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        while ( $ip_ref = $sth->fetchrow_arrayref ) {
#        push @values, [ @$ip_ref ];
#        }
#        $dbh->disconnect;
#        return @values;
#}

sub get_device_type_group_ids_job_group_id {
my ( $self, $client_id ) = @_;
my $dbh = $self->_mysql_connection();
my %values;
my $ip_ref;
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT DISTINCT device_jobs.job_group_id, device_cm_config.device_type_group_id FROM device_cm_config JOIN device_jobs ON device_cm_config.host_id=device_jobs.host_id WHERE device_jobs.client_id=$qclient_id
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $job_group_id = $ip_ref->{job_group_id};
    my $device_type_group_id = $ip_ref->{device_type_group_id};
    push @{$values{$job_group_id}},"$device_type_group_id";
    }
    $sth->finish();
    $dbh->disconnect;
    return %values;
}
# select DISTINCT device_jobs.job_group_id, device_cm_config.device_type_group_id FROM device_cm_config join device_jobs on device_cm_config.host_id=device_jobs.host_id ORDER BY device_jobs.job_group_id,device_cm_config.device_type_group_id;

#sub get_cm_host_ids_from_custom_host_column_entrys {
#	my ( $self, $client_id, $cc_id, $pc_id ) = @_;
#	my $dbh = $self->_mysql_connection();
#	my %values;
#	my $ip_ref;
#	my $qcc_id = $dbh->quote( $cc_id );
#	my $qpc_id = $dbh->quote( $pc_id );
#	my $qclient_id = $dbh->quote( $client_id );
#        my $sth = $dbh->prepare("SELECT host_id,entry from custom_host_column_entries WHERE cc_id=$qcc_id AND pc_id=$qpc_id AND client_id = $qclient_id
#                        ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
#        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        while ( $ip_ref = $sth->fetchrow_hashref ) {
#		my $host_id = $ip_ref->{host_id};
#		my $entry = $ip_ref->{entry};
#		push @{$values{$host_id}},"$entry";
#        }
#        $sth->finish();
#        $dbh->disconnect;
#        return %values;
#}



sub insert_cm_server {
my ( $self,$client_id,$name,$ip,$cm_server_type,$server_root,$description,$cm_server_username,$cm_server_password) = @_;
    my $dbh = $self->_mysql_connection();
$description="" if ! $description;
    my $qname = $dbh->quote( $name );
    my $qip = $dbh->quote( $ip );
    my $qcm_server_type = $dbh->quote( $cm_server_type );
    my $qserver_root = $dbh->quote( $server_root );
    my $qdescription = $dbh->quote( $description );
    my $qcm_server_username = $dbh->quote( $cm_server_username );
    my $qcm_server_password = $dbh->quote( $cm_server_password );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("INSERT INTO cm_server (name, ip, cm_server_type, server_root, cm_server_description,cm_server_username,cm_server_password,client_id) VALUES ($qname,$qip,$qcm_server_type,$qserver_root,$qdescription,$qcm_server_username,$qcm_server_password,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub update_cm_server {
my ( $self,$client_id,$cm_server_id,$name,$ip,$cm_server_type,$server_root,$description,$cm_server_username,$cm_server_password) = @_;
    my $dbh = $self->_mysql_connection();
$description="" if ! $description;
$cm_server_username="" if ! $cm_server_username;
$cm_server_password="" if ! $cm_server_password;
    my $qname = $dbh->quote( $name );
    my $qip = $dbh->quote( $ip );
    my $qcm_server_type = $dbh->quote( $cm_server_type );
    my $qserver_root = $dbh->quote( $server_root );
    my $qdescription = $dbh->quote( $description );
    my $qcm_server_username = $dbh->quote( $cm_server_username );
    my $qcm_server_password = $dbh->quote( $cm_server_password );
    my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("UPDATE cm_server set name=$qname,ip=$qip,cm_server_type=$qcm_server_type,server_root=$qserver_root,cm_server_description=$qdescription,cm_server_username=$qcm_server_username,cm_server_password=$qcm_server_password WHERE id=$cm_server_id"
    ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub get_cm_server_hash {
my ( $self, $client_id,$host_id ) = @_;
my %values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qhost_id = $dbh->quote( $host_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id,name,ip,cm_server_type,server_root,cm_server_description,cm_server_username,cm_server_password,client_id FROM cm_server WHERE client_id=$qclient_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $name = $ip_ref->{name};
    my $ip = $ip_ref->{ip};
    my $cm_server_type = $ip_ref->{cm_server_type};
    my $server_root = $ip_ref->{server_root} || "";
    my $description = $ip_ref->{cm_server_description} || "";
    my $client_id = $ip_ref->{client_id};
    my $cm_server_username = $ip_ref->{cm_server_username} || "";
    my $cm_server_password = $ip_ref->{cm_server_password} || "";
    push @{$values{$id}},"$name","$ip","$cm_server_type","$server_root","$description","$client_id","$cm_server_username","$cm_server_password";
    }
    $dbh->disconnect;
    return %values;
}

sub delete_cm_server {
my ( $self,$client_id,$id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("DELETE FROM cm_server WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub insert_job_group {
my ( $self,$client_id,$name,$description) = @_;
    my $dbh = $self->_mysql_connection();
$description="" if ! $description;
    my $qname = $dbh->quote( $name );
    my $qdescription = $dbh->quote( $description );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("INSERT INTO device_job_groups (name, description,client_id) VALUES ($qname,$qdescription,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub update_job_groups {
my ( $self,$client_id,$id,$name,$description) = @_;
    my $dbh = $self->_mysql_connection();
$description="" if ! $description;
    my $qid = $dbh->quote( $id );
    my $qname = $dbh->quote( $name );
    my $qdescription = $dbh->quote( $description );
    my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("UPDATE device_job_groups set name=$qname,description=$qdescription WHERE id=$qid"
    ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub get_job_groups {
my ( $self, $client_id,$host_id ) = @_;
my %values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qhost_id = $dbh->quote( $host_id );
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id,name,description,client_id FROM device_job_groups WHERE client_id=$qclient_id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $name = $ip_ref->{name};
    my $description = $ip_ref->{description} || "";
    my $client_id = $ip_ref->{client_id};
    push @{$values{$id}},"$name","$description","$client_id";
    }
    $dbh->disconnect;
    return %values;
}

sub delete_job_group {
my ( $self,$client_id,$id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("DELETE FROM device_job_groups WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub check_job_group_in_use {
my ( $self, $client_id,$id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT DISTINCT INET_NTOA(h.ip) FROM host h, device_jobs dj WHERE dj.host_id=h.id AND job_group_id=$qid AND h.client_id=$qclient_id ORDER BY h.ip
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    $sth->finish();
    
return \@values;
}

sub PrintJobGroupTab {
my ( $self,$client_id,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my %values_job_groups=$self->get_job_groups("$client_id");

$self->PrintJavaScriptPrint("$lang_vars{delete_job_group_confirm_message}");

print <<EOF;
<script language="JavaScript" type="text/javascript" charset="utf-8">
<!--
function submit_form(DTGID)
{
document.getElementById('job_group').value=DTGID;
document.getElementById('ip_list_device_by_job').submit();
}
-->
</script>
EOF

print "<p>";

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $anz=keys( %values_job_groups );

if ( $anz == 0 ) {
    print "<p><br><i>$lang_vars{no_job_groups_found_message}</i>\n";
    return;
}

print <<EOF;
<form name="ip_list_device_by_job" id="ip_list_device_by_job" method="post" action="$server_proto://$base_uri/res/cm/ip_list_device_by_job.cgi">
<input type="hidden" name="job_group" id="job_group" value="">
</form>
EOF


print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{id_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{description_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{devices_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

my $sort_order_ref = sub {
        my $A=$values_job_groups{$a}[0];
        my $B=$values_job_groups{$b}[0];
        ${A} cmp ${B};
};

foreach my $key ( sort $sort_order_ref keys %values_job_groups ) {
    my $id=$key;
    my $name=$values_job_groups{$key}[0];
    my $description=$values_job_groups{$key}[1] || "";

    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    my $hidden_form_vals="<input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">";

    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$id</td><td>$name</td><td>$description</td><td><span onClick=\"submit_form('$id')\" class=\"input_link_search_w\" title=\"$lang_vars{show_devices_message}\" style=\"cursor:pointer\">$lang_vars{show_message}</span></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/cm/ip_mod_job_group_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/cm/ip_delete_job_group.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}

sub get_file_list {
my ( $self,$client_id,$dir,$job_id ) = @_;

$job_id="" if ! $job_id;
if ( $job_id =~ /,/ ) {
    $job_id=~s/,/|/g;	
}
my @files=();
opendir (DIR, $dir) or croak $self->print_error("$client_id","Can not open log file directory \"$dir\": $!");
my $j=0;
while (my $file = readdir(DIR)) {
    next if $file eq "." || $file eq "..";
    next if $file !~ /^(\d{12})_(\d{2,3})_(\d+)_(\d+)\./;
    if ( $job_id ) {
#			next if $file !~ /($job_id)\.(conf|txt)$/;
        next if $file !~ /($job_id)\.(conf|txt)/;
    }
    push (@files,"$file");
}

@files = reverse sort @files;

return \@files;
}

sub get_log_file_list {
my ( $self,$client_id,$dir ) = @_;

my @files=();
opendir (DIR, $dir) or croak $self->print_error("$client_id","Can not open log file directory \"$dir\": $!");
my $j=0;
while (my $file = readdir(DIR)) {
    next if $file eq "." || $file eq "..";
    next if $file !~ /^(\d{14})_(\d{1,3})_fetch_config.log$/;
    push (@files,"$file");
}

@files = reverse sort @files;

return \@files;
}

sub get_configs_host {
    my ($self,$client_id,$cm_backup_dir,$host_id,$job_id ) = @_;
    my @configs=();
    my $dir=$cm_backup_dir . "/" .  $host_id;
    opendir (DIR, $dir) or croak $self->print_error("$client_id","Can not open configuration backup file directory \"$dir\": $!");
    my $j=0;
    while (my $file = readdir(DIR)) {
            next if $file eq "." || $file eq "..";
            push (@configs,"$file") if $file =~ /^(\d{12})_(\d{2,3})_(\d+)_${job_id}\./;
    }

    @configs = reverse sort @configs;

    return \@configs;
}


sub get_file_serial {
    # create serial number
    my ($self,$client_id,$date_file,$cm_backup_dir,$host_id,$job_id ) = @_;
    my $configs=$self->get_configs_host("$client_id","$cm_backup_dir","$host_id","$job_id") || ();
    my $last_serial="";
    my @old_serials=();
    my $backup_file_serial="0";
    if ( scalar @$configs > 0 ) {
            foreach my $config_name (@$configs) {
                    $config_name =~ /^(\d{12})_(\d{2})_(\d+)[._]./;
                    my $date=$1 || "";
                    my $serial=$2 || "";
                    $date =~ /^(\d{8})/;
                    $date=$1;
                    $date_file =~ /^(\d{8})/;
                    my $date_file_check = $1;
                    next if $date != $date_file_check;
                    push(@old_serials,$serial);
            }

    my $index=0;
            foreach (@old_serials) {
                    $_ =~ s/^0//;
                    $backup_file_serial=$_ if $_ > $backup_file_serial;
        $index++;
            }
    }

    $backup_file_serial++;
    $backup_file_serial="0" . $backup_file_serial if $backup_file_serial !~ /^\d\d$/;

    return $backup_file_serial;
}


sub get_config_name_values {
my ($self,$config_name) = @_;

$config_name =~ /^(\d{12})_(\d{2})_(\d+)_(\d+)\.(.+)(\..+)*$/;
my $date=$1;
my $serial=$2;
my $host_id_config_file=$3;
my $job_id=$4;
$date =~ /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})$/;
my $year=$1;
my $month=$2;
my $day=$3;
my $hour=$4;
my $minute=$5;
my $date_form=$day . "/" . $month . "/" . $year . " - " . $hour . ":" . $minute;

return ($date_form,$serial,$host_id_config_file,$job_id);
}



sub PrintJavaScriptPrint {
my ( $self,$delete_confirm_message) = @_;

print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('net_scrollx');
var y = readCookie('net_scrolly');
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('net_scrollx', x, 0);
createCookie('net_scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}
// -->
</SCRIPT>

<script type="text/javascript">
<!--
function confirmation(NET,TYPE) {

    if (TYPE == 'delete'){
            answer = confirm(NET + ": $delete_confirm_message")
    }

    if (answer){
            return true;
    }
    else{
            return false;
    }
}
//-->
</script>


EOF
}

sub PrintCMServerTab {
my ( $self,$client_id,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my %values_cm_server=$self->get_cm_server_hash("$client_id");

$self->PrintJavaScriptPrint("$lang_vars{delete_cm_server_confirm_message}");

#	print "<form name=\"ip_insert_cm_server_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/cm/ip_insert_cm_server_form.cgi\" style=\"display:inline;\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"input_link_w_right\" value=\"$lang_vars{new_cm_server_message}\" name=\"B1\"></form><p><br>\n";

print "<p>";

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $anz=keys( %values_cm_server );

if ( $anz == 0 ) {
    print "<p><br><i>$lang_vars{no_cm_server_found_message}</i>\n";
    return;
}

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{ip_address_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{tipo_message} </b></font><td><font size=\"2\"><b>$lang_vars{tftp_root_short_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{username_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{description_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

my $sort_order_ref = sub {
    my $A=$values_cm_server{$a}->[0];
    my $B=$values_cm_server{$b}->[0];
    ${A} cmp ${B};
};

foreach my $key ( sort $sort_order_ref keys %{values_cm_server} ) {
    my @value=$values_cm_server{$key};

    my $id=$key;
    my $name=$value[0]->[0];
    my $ip=$value[0]->[1];
    my $type=$value[0]->[2];
    my $tftp_root=$value[0]->[3] || "";
    my $description=$value[0]->[4] || "";
    my $cm_server_user=$value[0]->[6] || "";

    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name - $ip\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    my $hidden_form_vals="<input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"tfpt_root\" type=\"hidden\" value=\"$tftp_root\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">";

    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td></td><td>$ip</td><td>$type</td><td>$tftp_root</td><td>$cm_server_user</td><td>$description</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/cm/ip_mod_cm_server_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/cm/ip_delete_cm_server.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}

sub PrintDeviceUserGroupTab {
my ( $self,$client_id,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my %values_device_user_groups=$self->get_device_user_groups_hash("$client_id");

$self->PrintJavaScriptPrint("$lang_vars{delete_device_user_group_confirme_message}");

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $anz=keys( %values_device_user_groups ) ;

if ( $anz == 0 ) {
    print "<p><br><i>$lang_vars{no_device_user_group_message}</i>\n";
    return;
}

print "<p>\n";
print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{device_user_group_name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{device_user_name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{login_pass_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{priv_pass_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{rsa_identity_file_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{description_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

my $sort_order_ref = sub {
    my $A=$values_device_user_groups{$a}->[0];
    my $B=$values_device_user_groups{$b}->[0];
    ${A} cmp ${B};
};

foreach my $key ( sort $sort_order_ref keys %{values_device_user_groups} ) {
    my @value=$values_device_user_groups{$key};
    
    my $entry_client_id=$value[0]->[5];
    if ( $entry_client_id != $client_id ) {
        next;
    }
    my $id=$key;
    my $device_user_group_name=$value[0]->[0];
    my $device_user_name=$value[0]->[1];
    my $login_pass=$value[0]->[2] || "";
    $login_pass="****" if $login_pass;
    my $priv_pass=$value[0]->[3] || "";
    $priv_pass="****" if $priv_pass;
    my $description=$value[0]->[4] || "";
    my $rsa_identity_file=$value[0]->[6] || "";

    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$device_user_group_name\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    my $hidden_form_vals="<input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"device_user_group_name\" type=\"hidden\" value=\"$device_user_group_name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">";

    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$device_user_group_name</td></td><td>$device_user_name</td><td>$login_pass</td><td>$priv_pass</td><td>$rsa_identity_file</td><td>$description</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/cm/ip_mod_user_group_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/cm/ip_delete_user_group.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
#		$j++;
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}

sub change_cm_enabled_config {
# for compatibility  with version <3.5
my ( $self,$client_id, $cm_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qcm_enabled = $dbh->quote( $cm_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set configuration_management_enabled=$qcm_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_cm_backup_dir_config {
my ( $self,$client_id, $cm_backup_dir ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qcm_backup_dir = $dbh->quote( $cm_backup_dir );
    my $sth = $dbh->prepare("UPDATE global_config set cm_backup_dir=$qcm_backup_dir"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_cm_log_dir_config {
my ( $self,$client_id, $cm_log_dir ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qcm_log_dir = $dbh->quote( $cm_log_dir );
    my $sth = $dbh->prepare("UPDATE global_config set cm_log_dir=$qcm_log_dir"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_cm_xml_dir_config {
my ( $self,$client_id, $cm_xml_dir ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qcm_xml_dir = $dbh->quote( $cm_xml_dir );
    my $sth = $dbh->prepare("UPDATE global_config set cm_xml_dir=$qcm_xml_dir"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_freerange_ignore_non_root_config {
my ( $self,$client_id, $freerange_ignore_non_root ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qfreerange_ignore_non_root = $dbh->quote( $freerange_ignore_non_root );
    my $sth = $dbh->prepare("UPDATE global_config set freerange_ignore_non_root=$qfreerange_ignore_non_root"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_arin_enabled_config {
my ( $self,$client_id, $arin_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qarin_enabled = $dbh->quote( $arin_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set arin_enabled=$qarin_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_local_filter_enabled_config {
my ( $self,$client_id, $local_filter_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qlocal_filter_enabled = $dbh->quote( $local_filter_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set local_filter_enabled=$qlocal_filter_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_site_management_enabled_config {
my ( $self,$client_id, $site_management_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qsite_management_enabled = $dbh->quote( $site_management_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set site_management_enabled=$qsite_management_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_site_search_main_menu_config {
my ( $self,$client_id, $site_search_main_menu ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qsite_search_main_menu = $dbh->quote( $site_search_main_menu );
    my $sth = $dbh->prepare("UPDATE global_config set site_search_main_menu=$qsite_search_main_menu"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_line_search_main_menu_config {
my ( $self,$client_id, $line_search_main_menu ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qline_search_main_menu = $dbh->quote( $line_search_main_menu );
    my $sth = $dbh->prepare("UPDATE global_config set line_search_main_menu=$qline_search_main_menu"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_password_management_enabled_config {
my ( $self,$client_id, $password_management_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qpassword_management_enabled = $dbh->quote( $password_management_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set password_management_enabled=$qpassword_management_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_dyn_dns_updates_enabled_config {
my ( $self,$client_id, $dyn_dns_updates_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qdyn_dns_updates_enabled = $dbh->quote( $dyn_dns_updates_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set dyn_dns_updates_enabled=$qdyn_dns_updates_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_acl_management_enabled_config {
my ( $self,$client_id, $acl_management_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qacl_management_enabled = $dbh->quote( $acl_management_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set acl_management_enabled=$qacl_management_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_mac_management_enabled_config {
my ( $self,$client_id, $mac_management_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qmac_management_enabled = $dbh->quote( $mac_management_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set mac_management_enabled=$qmac_management_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_limit_cc_output_enabled_config {
my ( $self,$client_id, $value ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qvalue = $dbh->quote( $value );
    my $sth = $dbh->prepare("UPDATE global_config set limit_cc_output_enabled=$qvalue"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub change_prtg_group_view_enabled_config {
my ( $self,$client_id, $prtg_group_view_enabled ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qprtg_group_view_enabled = $dbh->quote( $prtg_group_view_enabled );
    my $sth = $dbh->prepare("UPDATE global_config set prtg_group_view_enabled=$qprtg_group_view_enabled"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub check_device_user_group_in_use {
my ( $self, $client_id,$device_user_group_id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qdevice_user_group_id = $dbh->quote( $device_user_group_id );
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT DISTINCT INET_NTOA(h.ip) FROM host h, device_cm_config dc WHERE dc.host_id=h.id AND device_user_group_id=$qdevice_user_group_id AND h.client_id=$qclient_id ORDER BY h.ip
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    $sth->finish();
    
return \@values;
}

sub check_cm_server_in_use {
my ( $self, $client_id,$id ) = @_;
my @values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT DISTINCT INET_NTOA(h.ip) FROM host h, device_cm_config dc WHERE dc.host_id=h.id AND cm_server_id=$qid AND h.client_id=$qclient_id ORDER BY h.ip
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    $sth->finish();
    
return \@values;
}

sub get_cm_licence_server_name {
my ( $self, $client_id, $vars_file ) = @_;

    my %lang_vars = $self->_get_vars("$vars_file");

    $ENV{PATH} = "/bin";
    my $hostname_command_pre="/bin/hostname";
    $hostname_command_pre =~ /^(.*)$/;
    my $hostname_command = $1;

    my $server_name=`$hostname_command` or croak $self->print_error("$client_id","$lang_vars{no_server_name_message}");
    $server_name =~ s/^\s+//;
    $server_name =~ s/\s+$//;

return $server_name;
}

sub check_cm_licence {
my ( $self, $client_id,$vars_file,$licence_key,$server_name ) = @_;

my $return_code;
my $return_string;

$server_name=$self->get_cm_licence_server_name("$client_id","$vars_file") if ! $server_name;

use Digest::MD5 qw(md5_hex);
my %lang_vars = $self->_get_vars("$vars_file");

if ( ! $licence_key ) {
    $return_code=4;
    $return_string="$lang_vars{no_licence_found_message}";
    return ($return_code, $return_string);
}

$licence_key =~ /^(\w+)_([0-9.]+)$/;
my $licence_digest=$1 || "";
my $licence_expire_seconds=$2 || "";

if ( ! $licence_digest || ! $licence_expire_seconds ) {
    $return_code=1;
    $return_string=$lang_vars{invalid_cm_licence_key_message};
    return ($return_code, $return_string);
}

my $licence_valid=0;
my @device_counts=("50","100","250","500","1000","2500","5000","99999");
my $device_count=0;

foreach my $count ( @device_counts ) {
    my $md5_check_string=$server_name . "x" . $licence_expire_seconds . $count;
    my $md5_check=md5_hex($md5_check_string);
    if ( $licence_digest ne $md5_check ) {
        next;
    } else {
        $licence_valid=1;
        $device_count=$count;
        last;
    }
}


if ( $licence_valid ne 1 ) {
    $return_code=1;
    $return_string=$lang_vars{invalid_cm_licence_key_message};
    return ($return_code, $return_string);
}

$licence_expire_seconds=$licence_expire_seconds * 17.4;
my $seconds_two_month=2678400;
my $licence_expire_warn_seconds=$licence_expire_seconds - $seconds_two_month;

my $datetime=time();

my $licence_expire_date = strftime "%d/%m/%Y", localtime($licence_expire_seconds);
if ( $datetime > $licence_expire_warn_seconds && $datetime <= $licence_expire_seconds ) {
    $return_code=2;
    $return_string=$lang_vars{cm_licence_valid_message} . " (" . $lang_vars{expires_on_message} . " " . $licence_expire_date . ")";
} elsif ( $datetime > $licence_expire_seconds ) {
    $return_code=3;
    $return_string=$lang_vars{cm_licence_expired_message} . " " . $licence_expire_date;
} else {
    $return_code=0;
    $return_string=$lang_vars{cm_licence_valid_message} . " (" . $lang_vars{expires_on_message} . " " . $licence_expire_date . ")";
}

return ($return_code,$return_string,$device_count);
}

sub get_cm_host_count {
my ( $self,$client_id ) = @_;
    my $count;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT count(*) FROM custom_host_column_entries WHERE entry='enabled' AND pc_id IN ( SELECT column_type_id FROM custom_host_columns WHERE name='CM') AND client_id=$qclient_id")
     or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $count = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $count;
}


sub get_cm_host_count_hosts {
my ( $self,$client_id,$host_hash_ref ) = @_;
my @host_ids;
my $host_ids;
foreach ( keys %{$host_hash_ref} ) {
#		push @host_ids,"$_";
    push @host_ids,$host_hash_ref->{$_}[12];
}
$host_ids=join('","',@host_ids);
$host_ids='"' . $host_ids . '"';
    my $count;
    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT count(*) FROM custom_host_column_entries WHERE entry='enabled' AND pc_id IN ( SELECT column_type_id FROM custom_host_columns WHERE name='CM') AND host_id IN ( $host_ids )")
     or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $count = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $count;
}
sub change_cm_licence_key_config {
my ( $self,$client_id, $cm_licence_key ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qcm_licence_key = $dbh->quote( $cm_licence_key );
    my $sth = $dbh->prepare("UPDATE global_config set cm_licence_key=$qcm_licence_key"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}



sub get_client_hash_all {
my ( $self, $client_id ) = @_;
my %values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT c.id,c.client,ce.phone,ce.fax,ce.address,ce.comment,ce.contact_name_1,ce.contact_phone_1,ce.contact_cell_1,ce.contact_email_1,ce.contact_comment_1,ce.contact_name_2,ce.contact_phone_2,ce.contact_cell_2,ce.contact_email_2,ce.contact_comment_2,ce.contact_name_3,ce.contact_phone_3,ce.contact_cell_3,ce.contact_email_3,ce.contact_comment_3,ce.default_resolver,ce.dns_server_1,ce.dns_server_2,ce.dns_server_3 FROM clients c, client_entries ce WHERE c.id = ce.client_id"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'};
    my $client = $ip_ref->{'client'};
    my $phone = $ip_ref->{'phone'} || "";
    my $fax = $ip_ref->{'fax'} || "";
    my $address = $ip_ref->{'address'} || "";
    my $comment = $ip_ref->{'comment'} || "";
    my $contact_name_1 = $ip_ref->{'contact_name_1'} || "";
    my $contact_phone_1 = $ip_ref->{'contact_phone_1'} || "";
    my $contact_cell_1 = $ip_ref->{'contact_cell_1'} || "";
    my $contact_email_1 = $ip_ref->{'contact_email_1'} || "";
    my $contact_comment_1 = $ip_ref->{'contact_comment_1'} || "";
    my $contact_name_2 = $ip_ref->{'contact_name_2'} || "";
    my $contact_phone_2 = $ip_ref->{'contact_phone_2'} || "";
    my $contact_cell_2 = $ip_ref->{'contact_cell_2'} || "";
    my $contact_email_2 = $ip_ref->{'contact_email_2'} || "";
    my $contact_comment_2 = $ip_ref->{'contact_comment_2'} || "";
    my $contact_name_3 = $ip_ref->{'contact_name_3'} || "";
    my $contact_phone_3 = $ip_ref->{'contact_phone_3'} || "";
    my $contact_cell_3 = $ip_ref->{'contact_cell_3'} || "";
    my $contact_email_3 = $ip_ref->{'contact_email_3'} || "";
    my $contact_comment_3 = $ip_ref->{'contact_comment_3'} || "";
    my $default_resolver = $ip_ref->{'default_resolver'} || "";
    my $dns_server_1 = $ip_ref->{'dns_server_1'} || "";
    my $dns_server_2 = $ip_ref->{'dns_server_2'} || "";
    my $dns_server_3 = $ip_ref->{'dns_server_3'} || "";
    
    push @{$values{$id}},"$client","$phone","$fax","$address","$comment","$contact_name_1","$contact_phone_1","$contact_cell_1","$contact_email_1","$contact_comment_1","$contact_name_2","$contact_phone_2","$contact_cell_2","$contact_email_2","$contact_comment_2","$contact_name_3","$contact_phone_3","$contact_cell_3","$contact_email_3","$contact_comment_3","$default_resolver","$dns_server_1","$dns_server_2","$dns_server_3";

}
    $dbh->disconnect;

    return %values;
}


sub PrintClientTab {
my ( $self,$client_id,$vars_file,$changed_client_id ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my %values_clients=$self->get_client_hash_all("$client_id");
my $anz=keys( %values_clients );

$changed_client_id=0 if ! $changed_client_id;

$self->PrintJavaScriptPrint("$lang_vars{delete_client_confirme_message}");

my $onclick_confirmation_delete = "";
my $color_helper=0;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{number_networks_hosts_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{phone_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{fax_message} </b></font><td><font size=\"2\"><b>$lang_vars{address_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{comentario_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{contact_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{contact_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{contact_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

for my $key ( sort { $values_clients{$a}[0] cmp $values_clients{$b}[0] } keys %values_clients ) {
    my $id=$key;
    my @value=$values_clients{$id};
    my $client = $value[0]->[0];
    my $phone = $value[0]->[1] || "";
    my $fax = $value[0]->[2] || "";
    my $address = $value[0]->[3] || "";
    my $comment = $value[0]->[4] || "";
    my $contact_name_1 = $value[0]->[5] || "";
    my $contact_phone_1 = $value[0]->[6] || "";
    my $contact_cell_1 = $value[0]->[7] || "";
    my $contact_email_1 = $value[0]->[8] || "";
    my $contact_comment_1 = $value[0]->[9] || "";
    my $contact_name_2 = $value[0]->[10] || "";
    my $contact_phone_2 = $value[0]->[11] || "";
    my $contact_cell_2 = $value[0]->[12] || "";
    my $contact_email_2 = $value[0]->[13] || "";
    my $contact_comment_2 = $value[0]->[14] || "";
    my $contact_name_3 = $value[0]->[15] || "";
    my $contact_phone_3 = $value[0]->[16] || "";
    my $contact_cell_3 = $value[0]->[17] || "";
    my $contact_email_3 = $value[0]->[18] || "";
    my $contact_comment_3 = $value[0]->[19] || "";
    my $default_resolver = $value[0]->[20] || "";
    my $dns_server_1 = $value[0]->[21] || "";
    my $dns_server_2 = $value[0]->[22] || "";
    my $dns_server_3 = $value[0]->[23] || "";

    $address =~ s//<br>/g;
    $address =~ s/\n/<br>/g;
    $address =~ s/\r/<br>/g;
    $address =~ s/<br><br>/<br>/g;

    my $contact_1=$contact_name_1;
    $contact_1.='<br>' . $contact_phone_1 if $contact_phone_1;
    $contact_1.='<br>' . $contact_cell_1 if $contact_cell_1;
    $contact_1.='<br>' . $contact_email_1 if $contact_email_1;
    my $contact_2=$contact_name_2;
    $contact_2.='<br>' . $contact_phone_2 if $contact_phone_2;
    $contact_2.='<br>' . $contact_cell_2 if $contact_cell_2;
    $contact_2.='<br>' . $contact_email_2 if $contact_email_2;
    my $contact_3=$contact_name_3;
    $contact_3.='<br>' . $contact_phone_3 if $contact_phone_3;
    $contact_3.='<br>' . $contact_cell_3 if $contact_cell_3;
    $contact_3.='<br>' . $contact_email_3 if $contact_email_3;

    my $anz_red_client=$self->count_red_entries_client("$id") || "0";
    my $anz_host_client=$self->count_host_entries_client("$id") || "0";

    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$client\',\'delete_client\',\'\\n\\n $lang_vars{redes_dispo_message}: $anz_red_client \\n $lang_vars{hosts_message}: $anz_host_client\\n\\n$lang_vars{delete_client_confirme_message}?\')\"";

    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $id == $changed_client_id ) {
        $bg_color_show="#a6e8a6";
    } elsif ( $color_helper eq "0" ) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" ) {
        $bg_color_show="white";
        $color_helper="0";
    }


    my $hidden_form_vals="<input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"id\" type=\"hidden\" value=\"$id\">";

    my $delete_button;
    if ( $id == 1 ) {
        $delete_button="<img src=\"$server_proto://$base_uri/imagenes/delete_gray_dis.png\" alt=\"disabled\" title=\"$lang_vars{standard_client_not_delete_message}\" style=\"float:left\">";
    } else {
        $delete_button="<form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_client.cgi\">$hidden_form_vals<input name=\"client_name\" type=\"hidden\" value=\"$client\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form>";
    }

    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$client</td><td>$anz_red_client/$anz_host_client</td><td>$phone</td><td>$fax</td><td>$address</td><td>$comment</td><td>$contact_1</td><td>$contact_name_2</td><td>$contact_name_3</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_client_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td>$delete_button</td>";
    print "</tr>\n";
}

print "</table><p>\n";
print "<p><br><p>\n";


print <<EOF;

<script type="text/javascript">
<!--
function confirmation(CLIENT,TYPE,MESSAGE) {
if (TYPE == 'delete_client'){
    answer = confirm(CLIENT + MESSAGE)
}

    if (answer){
            return true;
    } else {
            return false;
    }
}
//-->
</script>



<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}


sub get_device_type_values {
    my ($self,$client_id,$xml_dir) = @_;

use XML::Parser;
use XML::Simple;
use Data::Dumper;

my $valid_global_parameters='passwordExpr|models|enableCommand|enablePrompt|pagerDisableCmd|deviceGroupName|jobs|usernameExpr|deviceGroupID|logoutCommand|pagerExpr|loginPrompt|unsavedChangesMessage|loginConfirmationExpr';
my $required_global_parameters='enablePrompt|deviceGroupName|deviceGroupID|logoutCommand';
my $valid_job_parameter='comment|command|return|backupProtocol|configName|diffConfigIgnore|commandTimeout|jobType';
my $valid_job_types='copy_file|fetch_command_output|task|copy_local';
my %device_type_group_ids;

my @xmlfiles=$self->read_xml_files("$client_id","$xml_dir");
my %values;

foreach my $xmlfile_name ( @xmlfiles) {

    my $xmlfile=$xml_dir . "/" . $xmlfile_name;

    # initialize parser object and parse the string
    my $parser = XML::Parser->new( ErrorContext => 2 );
    eval { $parser->parsefile( "$xmlfile" ); };

    # report any error that stopped parsing, or announce success
    if( $@ ) {
        $@ =~ s/at \/.*?$//s;               # remove module line number
        next;
    } else {
    }

    # create object
    my $xml = new XML::Simple;

    # read XML file
    my $data = $xml->XMLin("$xmlfile");

    my $device_type_group_name = $data->{deviceGroupName};
    $device_type_group_name = "" if ref $device_type_group_name eq "HASH";
    my $device_type_group_id = $data->{deviceGroupID};
    $device_type_group_id = "" if ref $device_type_group_id eq "HASH";

    unless ( $device_type_group_name ) {
        # No deviceGroupName defined
        next;
    }
    unless ( $device_type_group_id ) {
        # No deviceGroupID defined
        next;
    }

    $xmlfile_name =~ /^(\d+)_/;
    my $xmlfile_serial=$1 || "";
    if ( ! $xmlfile_serial ) {
        # Can not determine XML file's serial
        next;
    }
    if ( $xmlfile_serial ne $device_type_group_id ) {
        # Device Group ID and XML file's serial number are not identical
        next;
    }

    if ( exists($device_type_group_ids{$device_type_group_id}) ) {
        # Dupicated Device Group ID
        next;
    }


    my $xml_invalid=0;

    my @valid_global_parameters=split('\|',$valid_global_parameters);


    foreach my $param(@valid_global_parameters) {
        my $param_value=$data->{$param} || "";
        if ( $param =~ /^${required_global_parameters}$/ ) {
            if (ref $param eq 'HASH' || ! $param_value ) {
                # Global parameter missing
                $xml_invalid=1;
                last;
            }
        }
    }

    next if $xml_invalid == 1;

    $device_type_group_ids{$device_type_group_id}=$xmlfile;



            my %jobs=();

    while ( my ($key, $value) = each( %{ $data->{jobs} }) ) {
        next if $key =~ /^(comment|backupProtocol)$/;

        if ( $data->{jobs}{$key} =~ /^ARRAY/ ) {
            next;
        }

        my $job_comment=$data->{jobs}{$key}{comment} || "";
        my $job_type=$data->{jobs}{$key}{jobType} || "";
                    push @{$jobs{$device_type_group_id}{$key}},"$job_comment","$job_type";
            }

    my $jobs=\%jobs;
    push @{$values{$device_type_group_id}},"$device_type_group_name","",$jobs;

}
return %values;
}



sub read_xml_files {
my ( $self,$client_id,$xml_dir ) = @_;

    my @files=();

    opendir DIR, "$xml_dir" or $self->print_error("$client_id","Can't open XML file directory \"$xml_dir\": $!\n");
    rewinddir DIR;
    while ( my $file = readdir(DIR) ) {
            if ( $file =~ /.xml$/ ) {
                    push @files,"$file";
            }
    }
    closedir DIR;

    @files;
}




sub remove_whitespace {
my ( $self, $value ) = @_;
$value =~ s/\s//g;
return $value;
}

sub remove_whitespace_se {
my ( $self, $value ) = @_;
$value =~ s/^\s*//;
$value =~ s/\s*$//;
return $value;
}


sub remove_whitespace_all {
my ( $self, $value ) = @_;
$value =~ s/^\s*//;
$value =~ s/\s*$//;
$value =~ s/(,)\s*/$1/g;
$value =~ s/\s*(,)/$1/g;
return $value;
}



sub get_cm_jobs {
my ( $self, $client_id, $host_id, $hash_key, $job_group_id, $device_type_group_id ) = @_;

my $format=$self->{'format'};
my $error;

my %values;
my $ip_ref;

$host_id="" if ! $host_id;
$hash_key="" if ! $hash_key;
$job_group_id="" if ! $job_group_id;
$device_type_group_id="" if ! $device_type_group_id;

    my $dbh = $self->_mysql_connection();
my $qhost_id = $dbh->quote( $host_id );
my $qjob_group_id = $dbh->quote( $job_group_id );
my $qdevice_type_group_id = $dbh->quote( $device_type_group_id );
my $qclient_id = $dbh->quote( $client_id );

my $host_id_expr="";
my $job_group_expr="";
my $device_type_group_id_expr="";
$host_id_expr="AND j.host_id = $qhost_id" if $host_id;
$job_group_expr="AND j.job_group_id = $qjob_group_id" if $job_group_id;
$device_type_group_id_expr="AND j.host_id = dc.host_id AND dc.device_type_group_id=$qdevice_type_group_id" if $device_type_group_id;

    my $sth = $dbh->prepare("SELECT j.id,j.job_name,j.job_group_id,j.job_descr,j.last_execution_date,j.last_execution_status,j.last_execution_log,j.enabled FROM device_jobs j, device_cm_config dc WHERE j.client_id=$qclient_id $host_id_expr $job_group_expr $device_type_group_id_expr ORDER BY j.job_name")
     or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $job_id = $ip_ref->{id};
    my $job_name = $ip_ref->{job_name};
    my $job_group_id = $ip_ref->{job_group_id} || "";
    my $job_descr = $ip_ref->{job_descr} || "";
    my $last_execution_date = $ip_ref->{last_execution_date} || "";
    my $last_execution_status = $ip_ref->{last_execution_status} || "";
    my $last_execution_log = $ip_ref->{last_execution_log} || "";
    my $job_enabled = $ip_ref->{enabled} || "";
    if ( $hash_key eq "job_id" ) {
        push @{$values{$host_id}{$job_id}},"$job_name","$job_group_id","$job_descr","$last_execution_date","$last_execution_status","$last_execution_log","$job_enabled";
    } else {
        push @{$values{$host_id}{$job_name}},"$job_group_id","$job_id","$job_descr","$last_execution_date","$last_execution_status","$last_execution_log","$job_enabled";
    }
    }
    $dbh->disconnect;

    return %values;
}

sub get_cm_jobs_cm_hosts {
my ( $self, $client_id ) = @_;

my %values;
my $ip_ref;

    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT j.id,j.host_id,j.job_name,j.job_group_id,j.job_descr,dc.device_type_group_id FROM device_jobs j, device_cm_config dc WHERE j.host_id=dc.host_id AND j.client_id=$qclient_id")
    or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $job_id = $ip_ref->{id};
    my $host_id = $ip_ref->{host_id};
    my $job_name = $ip_ref->{job_name};
    my $job_group_id = $ip_ref->{job_group_id} || "";
    my $job_descr = $ip_ref->{job_descr} || "";
    my $device_type_group_id = $ip_ref->{device_type_group_id} || "";
    push @{$values{$host_id}{$job_id}},"$job_id","$host_id","$job_name","$job_group_id","$job_descr","$device_type_group_id";
}

    return %values;
}

sub get_cm_jobs_all {
my ( $self, $client_id ) = @_;

my %values;
my $ip_ref;

    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT j.id,j.host_id,j.job_name,j.job_group_id,j.job_descr,dc.device_type_group_id FROM device_jobs j, device_cm_config dc WHERE j.client_id=$qclient_id")
    or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $job_id = $ip_ref->{id};
    my $host_id = $ip_ref->{host_id};
    my $job_name = $ip_ref->{job_name};
    my $job_group_id = $ip_ref->{job_group_id} || "";
    my $job_descr = $ip_ref->{job_descr} || "";
    my $device_type_group_id = $ip_ref->{device_type_group_id} || "";
    push @{$values{$job_id}},"$host_id","$job_name","$job_group_id","$job_descr","$device_type_group_id";
}

    return %values;
}

sub insert_other_device_jobs {
my ( $self,$client_id,$host_id,$job_name,$job_group_id,$job_descr,$job_enabled,$mass_update_host_ids) = @_;

$job_group_id="" if ! $job_group_id;
$job_descr="" if ! $job_descr;
$job_enabled=0 if ! $job_enabled;
$mass_update_host_ids = $host_id if ! $mass_update_host_ids;

    my $dbh = $self->_mysql_connection();
    my $qhost_id = $dbh->quote( $host_id );
    my $qjob_name = $dbh->quote( $job_name );
    my $qjob_group_id;
if ( $job_group_id ) {
    $qjob_group_id = $dbh->quote( $job_group_id );
} else {
    $qjob_group_id="NULL";
}
    my $qjob_descr = $dbh->quote( $job_descr );
    my $qjob_enabled = $dbh->quote( $job_enabled );
    my $qclient_id = $dbh->quote( $client_id );

my @mass_update_host_ids=(); 
if ( $mass_update_host_ids =~ /_/ ) {
    @mass_update_host_ids=split("_",$mass_update_host_ids);
} else {
    $mass_update_host_ids[0]=$mass_update_host_ids;
}

my $sth;
foreach my $muhid ( @mass_update_host_ids ) {
    my $select_host_expr;
    my $qmuhid = $dbh->quote( $muhid );
    if ( ! $host_id ) {
        #call from ip_modip_massupdate
        if ( $muhid =~ /^\d{1,3}\./ ) {
            $select_host_expr="SELECT id FROM host WHERE ip_version='v4' AND INET_NTOA(ip)=$qmuhid";
        } else {
            $muhid=$self->ip_to_int("$client_id","$muhid","v6");
            $qmuhid = $dbh->quote( $muhid );
            $select_host_expr="SELECT id FROM host WHERE ip=$qmuhid";
        }
    } else {
        #call from ip_modip
        $select_host_expr=$qmuhid;
    }

    $sth = $dbh->prepare("INSERT INTO device_jobs (host_id,job_name,job_group_id,job_descr,enabled,client_id) VALUES (($select_host_expr),$qjob_name,$qjob_group_id,$qjob_descr,$qjob_enabled,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
    $sth->finish();
    $dbh->disconnect;
}

sub update_other_device_jobs {
my ( $self,$client_id,$host_id,$job_name,$job_group_id,$job_id,$job_descr,$job_enabled) = @_;

$job_group_id="" if ! $job_group_id;
$job_descr="" if ! $job_descr;
$job_enabled=0 if ! $job_enabled;

    my $dbh = $self->_mysql_connection();
    my $qhost_id = $dbh->quote( $host_id );
    my $qjob_name = $dbh->quote( $job_name );
    my $qjob_group_id;
if ( $job_group_id ) {
    $qjob_group_id = $dbh->quote( $job_group_id );
} else {
    $qjob_group_id="NULL";
}
    my $qjob_descr = $dbh->quote( $job_descr );
    my $qjob_enabled = $dbh->quote( $job_enabled );
    my $qclient_id = $dbh->quote( $client_id );

    debug("UPDATE device_jobs SET job_name=$qjob_name,job_group_id=$qjob_group_id,job_descr=$qjob_descr,enabled=$qjob_enabled WHERE id=$job_id");
    my $sth = $dbh->prepare("UPDATE device_jobs SET job_name=$qjob_name,job_group_id=$qjob_group_id,job_descr=$qjob_descr,enabled=$qjob_enabled WHERE id=$job_id"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub delete_other_device_job {
my ( $self,$client_id,$id, $red_num ) = @_;

    $red_num = "" if ! $red_num;

    my $format=$self->{'format'};
    my $error;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth;
    if ( $red_num ) {
        my $qred_num = $dbh->quote( $red_num );
        $sth = $dbh->prepare("DELETE FROM device_jobs WHERE host_id IN (select id from host where red_num=$qred_num)") or $error="Can not execute statement:<p>$DBI::errstr";
    } else {
        $sth = $dbh->prepare("DELETE FROM device_jobs WHERE id = $qid") or $error="Can not execute statement:<p>$DBI::errstr";
    }

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->finish();
    $dbh->disconnect;
}

sub delete_other_device_job_device_all {
my ( $self,$client_id,$mass_update_host_ids ) = @_;

my @mass_update_host_ids=(); 
if ( $mass_update_host_ids =~ /_/ ) {
    @mass_update_host_ids=split("_",$mass_update_host_ids);
} else {
    $mass_update_host_ids[0]=$mass_update_host_ids;
}

    my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth;
foreach my $muhid ( @mass_update_host_ids ) {
    my $qmuhid = $dbh->quote( $muhid );
    $sth = $dbh->prepare("DELETE FROM device_jobs WHERE host_id=$qmuhid"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");



#		if ( $muhid =~ /^\d{1,3}\.\d{1,3}/ ) {
#			$sth = $dbh->prepare("DELETE FROM device_jobs WHERE host_id = ( SELECT id FROM host WHERE INET_NTOA(ip)=$qmuhid AND ip_version='v4' )"
#                                ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
#		} else {
#			$sth = $dbh->prepare("DELETE FROM device_jobs WHERE host_id = ( SELECT id FROM host WHERE ip=$qmuhid AND ip_version='v6')"
#                                ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
#		}
}

    $sth->finish();
    $dbh->disconnect;
}

sub get_job_types {

my %job_types;
$job_types{1}='copy_file';
$job_types{2}='fetch_command_output';
$job_types{3}='task';
$job_types{4}='copy_local';

return %job_types;

}

sub get_job_types_id {

my %job_types;
$job_types{'copy_file'}=1;
$job_types{'fetch_command_output'}=2;
$job_types{'task'}=3;
$job_types{'copy_local'}=4;

return %job_types;

}

sub get_devices_from_job_number {
my ( $self, $client_id,$job_group_id,$host_order_by ) = @_;
my %values;

$host_order_by = "" if ! $host_order_by;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
my $qjob_group_id = $dbh->quote( $job_group_id );
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT d.job_name,h.ip, INET_NTOA(h.ip),h.hostname, h.host_descr, l.loc, c.cat, h.int_admin, h.comentario, ut.type, h.alive, h.last_response, h.range_id, h.id, h.red_num, h.ip_version FROM host h, locations l, categorias c, update_type ut, device_cm_config dcmc, device_jobs d WHERE h.loc = l.id AND h.categoria = c.id AND h.update_type = ut.id AND h.hostname != '' AND h.client_id = $qclient_id AND h.id = dcmc.host_id AND d.host_id=h.id AND d.job_group_id=$qjob_group_id")
     or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
#		my $job_id = $ip_ref->{'d.id'};
    my $job_name = $ip_ref->{job_name};
    my $ip_version = $ip_ref->{ip_version};
    my $id = $ip_ref->{id} || "";
    my $range_id = $ip_ref->{'range_id'} || "";
    my $ip_int = $ip_ref->{'ip'} || "";
    my $ip;
    if ( $ip_version eq "v4" ) {
        $ip = $ip_ref->{'INET_NTOA(h.ip)'};
    } else {
        $ip = $self->int_to_ip("$client_id","$ip_ref->{ip}","$ip_version");
    }
    my $hostname = $ip_ref->{hostname};
    my $host_descr = $ip_ref->{host_descr} || "";
    my $loc = $ip_ref->{'l.loc'} || "";
    my $cat = $ip_ref->{'c.cat'} || "";
    my $int_admin = $ip_ref->{int_admin} || "";
    my $comentario = $ip_ref->{comentario} || "";
    my $update_type = $ip_ref->{'ut.type'} || "";
    my $alive = $ip_ref->{alive} || "";
    my $last_response = $ip_ref->{last_response} || "";
    my $red_num = $ip_ref->{red_num} || "";
    my $red_descr = "";
    if ( $host_order_by =~ /IP/  ) {
        push @{$values{$ip_int}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$job_name";

    } elsif ( $host_order_by =~ /hostname/ ) {
        push @{$values{"${hostname}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$job_name";

    } elsif ( $host_order_by =~ /description/ ) {

        my $host_descr_key = $host_descr || "zzzz";
        $host_descr_key = "zzzz" if $host_descr eq "NULL";
        
        push @{$values{"${host_descr_key}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$job_name";

    } elsif ( $host_order_by =~ /loc/ ) {

        my $loc_key = $loc || "zzzz";
        $loc_key = "zzzz" if $loc eq "NULL";

        push @{$values{"${loc_key}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$job_name";

    } elsif ( $host_order_by =~ /cat/ ) {

        my $cat_key = $cat || "zzzz";
        $cat_key = "zzzz" if $cat eq "NULL";

        push @{$values{"${cat_key}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$job_name";

    } elsif ( $host_order_by =~ /AI/ ) {

        my $int_admin_key = $int_admin || "zzzz";
        $int_admin_key = "zzzz" if $int_admin eq "n";

        push @{$values{"${int_admin_key}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$job_name";

    } elsif ( $host_order_by =~ /comentario/ ) {

        my $comentario_key = $comentario || "zzzz";
        $comentario_key = "zzzz" if $comentario eq "NULL";

        push @{$values{"${comentario_key}-${id}"}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$job_name";
    } else {
        push @{$values{$ip_int}},"$ip","$hostname","$host_descr","$loc","$cat","$int_admin","$comentario","$update_type","$alive","$last_response","$range_id","$ip_int","$id","$red_num","$red_descr","$client_id","$ip_version","$job_name";
    }
    }

    $dbh->disconnect;

    return \%values;
}



#### User management

sub get_user_hash {
my ( $self, $client_id, $user, $perm ) = @_;
my %values;
$user="" if ! $user;
$perm="" if ! $perm;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $quser = $dbh->quote( $user );

my $user_expr="";
$user_expr="AND u.name=$quser" if $user;
my $perm_expr="";
$perm_expr="AND p.${perm}=1";

my $sth;
if ( $perm ) {
    debug("SELECT u.id,u.name,u.group_id,u.phone,u.email,u.comment,g.name AS group_name, u.type FROM gip_users u, gip_user_group_perms p, gip_user_groups g WHERE u.group_id=p.group_id AND u.group_id=g.id $perm_expr");
    $sth = $dbh->prepare("SELECT u.id,u.name,u.group_id,u.phone,u.email,u.comment,g.name AS group_name, u.type FROM gip_users u, gip_user_group_perms p, gip_user_groups g WHERE u.group_id=p.group_id AND u.group_id=g.id $perm_expr"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} else {
    debug("SELECT u.id,u.name,u.group_id,u.phone,u.email,u.comment,g.name AS group_name, u.type FROM gip_users u, gip_user_groups g WHERE u.group_id=g.id $user_expr");
    $sth = $dbh->prepare("SELECT u.id,u.name,u.group_id,u.phone,u.email,u.comment,g.name AS group_name, u.type FROM gip_users u, gip_user_groups g WHERE u.group_id=g.id $user_expr"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $name = $ip_ref->{'name'};
    my $group_name = $ip_ref->{'group_name'} || "";
    my $group_id = $ip_ref->{group_id} || "";
    my $phone = $ip_ref->{phone} || "";
    my $email = $ip_ref->{email} || "";
    my $comment = $ip_ref->{comment} || "";
    my $type = $ip_ref->{type} || "";
    push @{$values{$id}},"$name","$group_id","$phone","$email","$comment","$group_name","$type";
    }
    $dbh->disconnect;
    return %values;
}

sub get_user_id {
my ( $self,$client_id,$name) = @_;
my $value;
my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name  );
    my $sth = $dbh->prepare("SELECT id FROM gip_users where name=$qname
                    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute();
    $value = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $value;
}

#sub get_group_id_from_user_name {
#	my ( $self,$client_id,$name) = @_;
#
#        my $dbh = $self->_mysql_connection();
#        my $qname = $dbh->quote( $name );
#
#        $sth = $dbh->prepare("SELECT group_id FROM gip_users WHERE name=$qname"
#                                ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
#        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#        my $group_id = $sth->fetchrow_array;
#
#        $sth->finish();
#        $dbh->disconnect;
#
#	return $group_id;
#}

sub insert_user {
    my ( $self,$client_id,$vars_file,$name,$group_id,$phone,$email,$comment,$type,$login_pass) = @_;

    $phone="" if ! $phone;
    $email="" if ! $email;
    $comment="" if ! $comment;
    $type="" if ! $type;
    $login_pass="" if ! $login_pass;

	my %lang_vars = $self->_get_vars("$vars_file");

    my $dbh = $self->_mysql_connection();
    my $qname = $dbh->quote( $name );
    my $qgroup_id = $dbh->quote( $group_id );
    my $qphone = $dbh->quote( $phone );
    my $qemail = $dbh->quote( $email );
    my $qcomment = $dbh->quote( $comment );
    my $qtype = $dbh->quote( $type );

    my $new_apache_config = $self->check_new_apache_config() || 0;

	if ( $type eq $lang_vars{local_message} && $login_pass ) {

		my $user_file = "/etc/apache2/users-gestioip";
		my $group_file = "/usr/share/gestioip/etc/apache/apache-groups";
		my $htpasswd = "/usr/bin/htpasswd";
		my $error = "";

		$ENV{PATH} = "";

		my $grep_cmd = "/bin/grep";
		$grep_cmd =~ /^(.*)$/;
		my $grep = $1;

		$name =~ /^(.*)$/;
		$name = $1;

		my $command = $grep . ' \'^' . $name . ':\' ' . $user_file;
        debug("Executing: $command");
		my $output = `$command 2>&1`;
		if ( $output ) {
            debug("OUTPUT: $output");
			return "USER_EXISTS";
		}

		$htpasswd =~ /^(.*)$/;
		$htpasswd = $1;

		$login_pass =~ /^(.*)$/;
		$login_pass = $1;

        # create user
        my @args = ("$htpasswd", "-b",  "$user_file", "$name", "$login_pass");
        my $return = system(@args);
		if ( $return != 0 ) {
			$error = $?;
			return "CREATE_USER: $error";
		}

        # add user to group file
		open my $FH, "<", $group_file or $error = "Unable to open $group_file for read exited $? $!";
		return "READ_USER_GROUP: $error" if $error;
		chomp (my @lines = <$FH>);
		close $FH;

		open $FH, ">", $group_file or $error = "Unable to open $group_file for write exited $? $!";
		return "WRITE_USER_GROUP: $error" if $error;
		for (@lines){
			my $line = $_;
			$line .= " $name\n" if $line =~ /^GestioIPGroup/;
			print {$FH} $line;
		}
		close $FH;
	}

    my $sth = $dbh->prepare("INSERT INTO gip_users (name, group_id, phone, email, comment, type) VALUES ($qname,$qgroup_id,$qphone,$qemail,$qcomment, $qtype)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth = $dbh->prepare("SELECT LAST_INSERT_ID()") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $id = $sth->fetchrow_array;

    $sth->finish();
    $dbh->disconnect;

	return $id;
}


sub update_user_pass {
	my ( $self, $name, $login_pass) = @_;

    my $user_file = "/etc/apache2/users-gestioip";
    my $htpasswd = "/usr/bin/htpasswd";
    my $error = "";

    $ENV{PATH} = "";

    my $grep_cmd = "/bin/grep";
    $grep_cmd =~ /^(.*)$/;
    my $grep = $1;

    $name =~ /^(.*)$/;
    $name = $1;

    my $command = $grep . ' \'^' . $name . ':\' ' . $user_file;
    my $output = `$command 2>&1`;
    debug("output $command: $output");
    if ( ! $output ) {
        return "USER_NOT_FOUND";
    }

    $htpasswd =~ /^(.*)$/;
    $htpasswd = $1;

    $login_pass =~ /^(.*)$/;
    $login_pass = $1;

    # update user password
    my @args = ("$htpasswd", "-b", "$user_file", "$name", "$login_pass");
    my $return = system(@args);
    if ( $return != 0 ) {
        $error = $?;
        return "CHANGE_USER_PASS: $error";
    }
}


sub update_user {
	my ( $self,$client_id,$vars_file,$id,$name,$group_id,$phone,$email,$comment,$type) = @_;

	$phone="" if ! $phone;
	$email="" if ! $email;
	$comment="" if ! $comment;

	my %lang_vars = $self->_get_vars("$vars_file");

    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );
    my $qname = $dbh->quote( $name );
    my $qgroup_id = $dbh->quote( $group_id );
    my $qphone = $dbh->quote( $phone );
    my $qemail = $dbh->quote( $email );
    my $qcomment = $dbh->quote( $comment );

    my $sth = $dbh->prepare("UPDATE gip_users SET name=$qname, group_id=$qgroup_id, phone=$qphone, email=$qemail, comment=$qcomment WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;

	return;
}

sub delete_user {
	my ( $self,$client_id,$vars_file,$id,$type,$name) = @_;

	my %lang_vars = $self->_get_vars("$vars_file");
    my $new_apache_config = $self->check_new_apache_config() || 0;

	if ( $type eq $lang_vars{local_message} && $new_apache_config ) {

        my $user_file = "/etc/apache2/users-gestioip";
        my $group_file = "/usr/share/gestioip/etc/apache/apache-groups";
        my $htpasswd = "/usr/bin/htpasswd";
        my $error = "";

        $ENV{PATH} = "";

        my $grep_cmd = "/bin/grep";
        $grep_cmd =~ /^(.*)$/;
        my $grep = $1;

        $name =~ /^(.*)$/;
        $name = $1;

        my $command = $grep . ' \'^' . $name . ':\' ' . $user_file;
        debug("Executing: $command");
        my $output = `$command 2>&1`;
        debug("OUTPUT: $output");
        if ( ! $output ) {
            return "USER_NOT_FOUND";
        }

        $htpasswd =~ /^(.*)$/;
        $htpasswd = $1;

        # delete user
        my @args = ("$htpasswd", "-D",  "$user_file", "$name");
        my $return = system(@args);
        if ( $return != 0 ) {
            $error = $?;
            return "DELETE_USER: $error";
        }

        # delete user from group file
        open my $FH, "<", $group_file or $error = "Unable to open $group_file for read exited $? $!";
        return "READ_USER_GROUP: $error" if $error;
        chomp (my @lines = <$FH>);
        close $FH;

        open $FH, ">", $group_file or $error = "Unable to open $group_file for write exited $? $!";
        return "WRITE_USER_GROUP: $error" if $error;
        for (@lines){
            my $line = $_;
			if ( $line =~ /^GestioIPGroup/ ) {
				if ( $line =~ /\s${name}\s/ ) {
					$line =~ s/(\s${name}\s)/ /;
				} elsif ( $line =~ /\s${name}$/ ) {
					$line =~ s/(\s${name})$//;
				}
				$line =~ s/\s{2,}//;
				$line =~ s/\s$//;
			}
            print {$FH} $line;
        }
        close $FH;
    }

    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );

    my $sth = $dbh->prepare("DELETE FROM gip_users WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","delete user<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;

	return;
}


sub insert_ldap_user_apache_configuration {
    my ( $self, $client_id, $ldap_user ) = @_;

    my @lines;
    my $error;

    my $ldap_conf = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf";
	my $ldap_conf_bck = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf.bck";
	
	# create backup of old configuration
	use File::Copy;
	copy($ldap_conf, $ldap_conf_bck) or $error = "Can not create configuration backup: $!";
    return "BACKUP_LDAP_CONF: $error" if $error;

    open(LC,"<$ldap_conf") or $error = "Unable to open $ldap_conf for write: $? $!";
    return "READ_LDAP_CONF: $error" if $error;
    while (<LC> ) {
        push @lines, $_;
    }
    close LC;

    push @lines, "Require ldap-user $ldap_user\n";

    # write changes to file
    my $LC;
    open $LC, ">", $ldap_conf or $error = "Unable to open $ldap_conf for write: $? $!";
    return "WRITE_LDAP_CONF: $error" if $error;
    for (@lines){
        print {$LC} $_;
    }
    close $LC;

	# Check new config and reload apache
	my $exit_status = $self->reload_apache("$client_id", "ldap_user");
	if ( $exit_status !~ /^\d$/ ) {
		return "RELOAD_APACHE $exit_status" if $exit_status;
	}
	if ( $exit_status != 0 ) {
		my $ldap_conf_fail = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf_failed";
		copy($ldap_conf, $ldap_conf_fail) or $error = "Can not save bad configuration backup: $!";
        return "CREATE_FAIL_CONFIG_BACKUP: $error" if $error;
	}
	$self->{exit_status_apache} = $exit_status;

    return;
}

sub delete_ldap_user_apache_configuration {
    my ( $self, $client_id, $ldap_user ) = @_;

    my @lines;
    my $error;

    my $ldap_conf = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf";
	my $ldap_conf_bck = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf.bck";

	# create backup of old configuration
	use File::Copy;
	copy($ldap_conf, $ldap_conf_bck) or $error = "Can not create configuration backup: $!";
    return "BACKUP_LDAP_CONF: $error" if $error;

    open(LC,"<$ldap_conf") or $error = "Unable to open $ldap_conf for write: $? $!";
    return "READ_LDAP_CONF: $error" if $error;
    while (<LC> ) {
        if ( $_ =~ / ${ldap_user}$/ ) {
            next;
        }
        push @lines, $_;
    }
    close LC;

    # write changes to file
    my $LC;
    open $LC, ">", $ldap_conf or $error = "Unable to open $ldap_conf for write: $? $!";
    return "WRITE_LDAP_CONF: $error" if $error;
    for (@lines){
        print {$LC} $_;
    }
    close $LC;


	# Check new config and reload apache
	my $exit_status = $self->reload_apache("$client_id", "ldap_user");
	if ( $exit_status !~ /^\d$/ ) {
		return "RELOAD_APACHE $exit_status" if $exit_status;
	}
	if ( $exit_status != 0 ) {
		my $ldap_conf_fail = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf_failed";
		copy($ldap_conf, $ldap_conf_fail) or $error = "Can not save bad configuration backup: $!";
        return "CREATE_FAIL_CONFIG_BACKUP: $error" if $error;
	}
	$self->{exit_status_apache} = $exit_status;

    return;
}

sub PrintUserTab {
my ( $self,$client_id,$vars_file, $changed_id ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my @global_config = $self->get_global_config("$client_id");
my $user_management_enabled = $global_config[0]->[13] || "no";
my $new_apache_config = $self->check_new_apache_config() || 0;

my $has_manage_user_perm = 0;
my ($locs_ro_perm, $locs_rw_perm, $perm_error);
($locs_ro_perm, $locs_rw_perm, $perm_error, $client_id) = $self->check_perms (
	client_id=>"$client_id",
	vars_file=>"$vars_file",
	required_perms=>"manage_user_perm",
	from_api=>"1",
	return_client_id=>"1",
);
$has_manage_user_perm = 1 if ! $perm_error;
debug("has_manage_user_perm: $has_manage_user_perm");


$changed_id = "" if ! $changed_id;

my %values_users=$self->get_user_hash("$client_id");

$self->PrintJavaScriptPrint("$lang_vars{delete_user_confirm_message}");

print "<p>";

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $anz=keys( %values_users );

if ( $anz == 0 ) {
    print "<p><br><i>$lang_vars{no_user_message}</i>\n";
    return;
}

my $user=$ENV{'REMOTE_USER'};

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message}</b></font></td>";
if ( $new_apache_config ) {
    print "<td><font size=\"2\"><b>$lang_vars{tipo_message}</b></font></td>";
}

if ( $user_management_enabled eq "yes" ) {
	print "<td><font size=\"2\"><b>$lang_vars{group_message} </b></font></td>";
}

print "<td><font size=\"2\"><b>$lang_vars{mail_message} </b></font><td><font size=\"2\"><b>$lang_vars{phone_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{comentario_message} </b></font></td><td width=\"22px\"></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

my $sort_order_ref = sub {
    my $A=$values_users{$a}->[0];
    my $B=$values_users{$b}->[0];
    ${A} cmp ${B};
};

foreach my $key ( sort $sort_order_ref keys %{values_users} ) {
    my @value=$values_users{$key};
    
    my $id=$key;
    my $name=$value[0]->[0];
    my $group_id=$value[0]->[1];
    my $phone=$value[0]->[2] || "";
    my $email=$value[0]->[3] || "";
    my $comment=$value[0]->[4] || "";
    my $group_name=$value[0]->[5];
    my $type=$value[0]->[6];

    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $id eq $changed_id ) {
        $bg_color_show="#a6e8a6";
    } elsif ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    $bg_color_show="#efd39c" if $name eq $user;

    my $hidden_form_vals="<input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"comment\" type=\"hidden\" value=\"$comment\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">";

	my $change_password_form = "";
	if ( $has_manage_user_perm || $name eq $user ) {
		$change_password_form = "<form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_user_pass_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\" \" name=\"modificar\" class=\"key_button\" style=\"cursor:pointer;\" title=\"$lang_vars{change_password_message}\"></form>" if $type eq "$lang_vars{local_message}";
	}

    if ( $name eq $user ) {
        print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td>";
        if ( $new_apache_config ) {
            print "<td>$type</td>";
        }
		if ( $user_management_enabled eq "yes" ) {
			print "<td>$group_name</td>";
		}

		print "<td>$email</td><td>$phone</td><td>$comment</td><td>$change_password_form</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_user_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td></td>";
    } else {
        print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td>";
        if ( $new_apache_config ) {
            print "<td>$type</td>";
        }
		if ( $user_management_enabled eq "yes" ) {
			print "<td>$group_name</td>";
		}

		print "<td>$email</td><td>$phone</td><td>$comment</td><td>$change_password_form</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_user_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_user.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    }

    print "</tr>\n";
}

print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}



sub get_user_group_hash {
my ( $self, $client_id, $user ) = @_;

$user="" if ! $user;
my %values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $user_expr="";
if ( $user ) {
    my $quser = $dbh->quote( $user );
    $user_expr="WHERE id IN ( SELECT group_id FROM gip_users WHERE name=$quser )"
}
my $quser = $dbh->quote( $user ) if $user;
    my $sth = $dbh->prepare("SELECT id,name,description FROM gip_user_groups"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $name = $ip_ref->{name};
    my $description = $ip_ref->{description};
    push @{$values{$id}},"$name","$description";
    }
    $dbh->disconnect;
    return %values;
}

sub insert_user_group {
my ( $self,$client_id,$name,$description) = @_;
    my $dbh = $self->_mysql_connection();
$description = "" if ! $description;
    my $qname = $dbh->quote( $name );
    my $qdescription = $dbh->quote( $description );

    my $sth = $dbh->prepare("INSERT INTO gip_user_groups (name, description) VALUES ($qname,$qdescription)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth = $dbh->prepare("SELECT id FROM gip_user_groups WHERE name=$qname"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $id = $sth->fetchrow_array;

    $sth->finish();
    $dbh->disconnect;

return $id;
}

sub update_user_group {
my ( $self,$client_id,$id,$name,$description) = @_;
    my $dbh = $self->_mysql_connection();
$description = "" if ! $description;
    my $qid = $dbh->quote( $id );
    my $qname = $dbh->quote( $name );
    my $qdescription = $dbh->quote( $description );

    my $sth = $dbh->prepare("UPDATE gip_user_groups SET name=$qname, description=$qdescription WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}

sub delete_user_group {
my ( $self,$client_id,$id) = @_;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );

    my $sth = $dbh->prepare("DELETE FROM gip_user_groups WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}

sub check_user_group_in_use {
my ( $self,$client_id,$id) = @_;

my @values;
my $ip_ref;

    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );

my $sth = $dbh->prepare("SELECT name FROM gip_users WHERE group_id=$qid ORDER BY name
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    $sth->finish();
    
return \@values;
}


sub insert_user_group_perms {
my $self = shift;
my %args = @_;

my $client_id=$args{client_id};
my $group_id=$args{group_id};
my $manage_gestioip_perm=$args{manage_gestioip_perm} || 0;
my $manage_user_perm=$args{manage_user_perm} || 0;
my $manage_sites_and_cats_perm=$args{manage_sites_and_cats_perm} || 0;
my $manage_custom_columns_perm=$args{manage_custom_columns_perm} || 0;
my $read_audit_perm=$args{read_audit_perm} || 0;
my $clients_perm=$args{clients_perm} || 0;
my $loc_perm=$args{loc_perm} || 0;
my $cat_perm=$args{cat_perm} || 0;
my $create_net_perm=$args{create_net_perm} || 0;
my $read_net_perm=$args{read_net_perm} || 0;
my $update_net_perm=$args{update_net_perm} || 0;
my $delete_net_perm=$args{delete_net_perm} || 0;
my $create_host_perm=$args{create_host_perm} || 0;
my $read_host_perm=$args{read_host_perm} || 0;
my $update_host_perm=$args{update_host_perm} || 0;
my $delete_host_perm=$args{delete_host_perm} || 0;
my $create_vlan_perm=$args{create_vlan_perm} || 0;
my $read_vlan_perm=$args{read_vlan_perm} || 0;
my $update_vlan_perm=$args{update_vlan_perm} || 0;
my $delete_vlan_perm=$args{delete_vlan_perm} || 0;
my $read_device_config_perm=$args{read_device_config_perm} || 0;
my $write_device_config_perm=$args{write_device_config_perm} || 0;
my $administrate_cm_perm=$args{administrate_cm_perm} || 0;
my $create_as_perm=$args{create_as_perm} || 0;
my $read_as_perm=$args{read_as_perm} || 0;
my $update_as_perm=$args{update_as_perm} || 0;
my $delete_as_perm=$args{delete_as_perm} || 0;
my $create_line_perm=$args{create_line_perm} || 0;
my $read_line_perm=$args{read_line_perm} || 0;
my $update_line_perm=$args{update_line_perm} || 0;
my $delete_line_perm=$args{delete_line_perm} || 0;
my $execute_update_dns_perm=$args{execute_update_dns_perm} || 0;
my $execute_update_snmp_perm=$args{execute_update_snmp_perm} || 0;
my $execute_update_ping_perm=$args{execute_update_ping_perm} || 0;
my $password_management_perm=$args{password_management_perm} || 0;
my $manage_tags_perm=$args{manage_tags_perm} || 0;
my $manage_snmp_group_perm=$args{manage_snmp_group_perm} || 0;
my $manage_dns_server_group_perm=$args{manage_dns_server_group_perm} || 0;
my $manage_dyn_dns_perm=$args{manage_dyn_dns_perm} || 0;
my $manage_macs_perm=$args{manage_macs_perm} || 0;
my $locs_ro_perm=$args{locs_ro_perm} || 9999;
my $locs_rw_perm=$args{locs_rw_perm} || 9999;
my $manage_scheduled_jobs_perm=$args{manage_scheduled_jobs_perm} || 0;

my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qgroup_id = $dbh->quote( $group_id );
my $qmanage_gestioip_perm = $dbh->quote( $manage_gestioip_perm );
my $qmanage_user_perm = $dbh->quote( $manage_user_perm );
my $qmanage_sites_and_cats_perm = $dbh->quote( $manage_sites_and_cats_perm );
my $qmanage_custom_columns_perm = $dbh->quote( $manage_custom_columns_perm );
my $qread_audit_perm = $dbh->quote( $read_audit_perm );
my $qclients_perm = $dbh->quote( $clients_perm );
my $qloc_perm = $dbh->quote( $loc_perm );
my $qcat_perm = $dbh->quote( $cat_perm );
my $qcreate_net_perm = $dbh->quote( $create_net_perm );
my $qread_net_perm = $dbh->quote( $read_net_perm );
my $qupdate_net_perm = $dbh->quote( $update_net_perm );
my $qdelete_net_perm = $dbh->quote( $delete_net_perm );
my $qcreate_host_perm = $dbh->quote( $create_host_perm );
my $qread_host_perm = $dbh->quote( $read_host_perm );
my $qupdate_host_perm = $dbh->quote( $update_host_perm );
my $qdelete_host_perm = $dbh->quote( $delete_host_perm );
my $qcreate_vlan_perm = $dbh->quote( $create_vlan_perm );
my $qread_vlan_perm = $dbh->quote( $read_vlan_perm );
my $qupdate_vlan_perm = $dbh->quote( $update_vlan_perm );
my $qdelete_vlan_perm = $dbh->quote( $delete_vlan_perm );
my $qread_device_config_perm = $dbh->quote( $read_device_config_perm );
my $qwrite_device_config_perm = $dbh->quote( $write_device_config_perm );
my $qadministrate_cm_perm = $dbh->quote( $administrate_cm_perm );
my $qcreate_as_perm = $dbh->quote( $create_as_perm );
my $qread_as_perm = $dbh->quote( $read_as_perm );
my $qupdate_as_perm = $dbh->quote( $update_as_perm );
my $qdelete_as_perm = $dbh->quote( $delete_as_perm );
my $qcreate_line_perm = $dbh->quote( $create_line_perm );
my $qread_line_perm = $dbh->quote( $read_line_perm );
my $qupdate_line_perm = $dbh->quote( $update_line_perm );
my $qdelete_line_perm = $dbh->quote( $delete_line_perm );
my $qexecute_update_dns_perm = $dbh->quote( $execute_update_dns_perm );
my $qexecute_update_snmp_perm = $dbh->quote( $execute_update_snmp_perm );
my $qexecute_update_ping_perm = $dbh->quote( $execute_update_ping_perm );
my $qpassword_management_perm = $dbh->quote( $password_management_perm );
my $qmanage_tags_perm = $dbh->quote( $manage_tags_perm );
my $qmanage_snmp_group_perm = $dbh->quote( $manage_snmp_group_perm );
my $qmanage_dns_server_group_perm = $dbh->quote( $manage_dns_server_group_perm );
my $qmanage_dyn_dns_perm = $dbh->quote( $manage_dyn_dns_perm );
my $qmanage_macs_perm = $dbh->quote( $manage_macs_perm );
my $qlocs_rw_perm = $dbh->quote( $locs_rw_perm );
my $qlocs_ro_perm = $dbh->quote( $locs_ro_perm );
my $qmanage_scheduled_jobs_perm = $dbh->quote( $manage_scheduled_jobs_perm );

my $sth = $dbh->prepare("INSERT INTO gip_user_group_perms (group_id,clients_perm,loc_perm,cat_perm,manage_gestioip_perm, manage_user_perm, manage_sites_and_cats_perm, manage_custom_columns_perm, read_audit_perm, create_net_perm, read_net_perm, update_net_perm, delete_net_perm, create_host_perm, read_host_perm, update_host_perm, delete_host_perm, create_vlan_perm, read_vlan_perm, update_vlan_perm, delete_vlan_perm, read_device_config_perm, write_device_config_perm, administrate_cm_perm, create_as_perm, read_as_perm, update_as_perm, delete_as_perm, create_line_perm, read_line_perm, update_line_perm, delete_line_perm, execute_update_dns_perm, execute_update_snmp_perm, execute_update_ping_perm, password_management_perm,manage_tags_perm, manage_snmp_group_perm, manage_dns_server_group_perm, manage_dyn_dns_perm, manage_macs_perm, locs_ro_perm, locs_rw_perm, manage_scheduled_jobs_perm) VALUES ($qgroup_id,$qclients_perm,$qloc_perm,$qcat_perm,$qmanage_gestioip_perm, $qmanage_user_perm, $qmanage_sites_and_cats_perm, $qmanage_custom_columns_perm, $qread_audit_perm, $qcreate_net_perm, $qread_net_perm, $qupdate_net_perm, $qdelete_net_perm, $qcreate_host_perm, $qread_host_perm, $qupdate_host_perm, $qdelete_host_perm, $qcreate_vlan_perm, $qread_vlan_perm, $qupdate_vlan_perm, $qdelete_vlan_perm, $qread_device_config_perm, $qwrite_device_config_perm, $qadministrate_cm_perm, $qcreate_as_perm, $qread_as_perm, $qupdate_as_perm, $qdelete_as_perm, $qcreate_line_perm, $qread_line_perm, $qupdate_line_perm, $qdelete_line_perm, $qexecute_update_dns_perm, $qexecute_update_snmp_perm, $qexecute_update_ping_perm, $qpassword_management_perm, $qmanage_tags_perm, $qmanage_snmp_group_perm, $qmanage_dns_server_group_perm, $qmanage_dyn_dns_perm, $qmanage_macs_perm, $qlocs_ro_perm, $qlocs_rw_perm, $qmanage_scheduled_jobs_perm)"
                        ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_user_group_perms {
my $self = shift;
my %args = @_;

my $client_id=$args{client_id};
my $group_id=$args{group_id};
my $manage_gestioip_perm=$args{manage_gestioip_perm} || 0;
my $manage_user_perm=$args{manage_user_perm} || 0;
my $manage_sites_and_cats_perm=$args{manage_sites_and_cats_perm} || 0;
my $manage_custom_columns_perm=$args{manage_custom_columns_perm} || 0;
my $read_audit_perm=$args{read_audit_perm} || 0;
my $clients_perm=$args{clients_perm} || "";
my $loc_perm=$args{loc_perm} || 0;
my $cat_perm=$args{cat_perm} || 0;
my $create_net_perm=$args{create_net_perm} || 0;
my $read_net_perm=$args{read_net_perm} || 0;
my $update_net_perm=$args{update_net_perm} || 0;
my $delete_net_perm=$args{delete_net_perm} || 0;
my $create_host_perm=$args{create_host_perm} || 0;
my $read_host_perm=$args{read_host_perm} || 0;
my $update_host_perm=$args{update_host_perm} || 0;
my $delete_host_perm=$args{delete_host_perm} || 0;
my $create_vlan_perm=$args{create_vlan_perm} || 0;
my $read_vlan_perm=$args{read_vlan_perm} || 0;
my $update_vlan_perm=$args{update_vlan_perm} || 0;
my $delete_vlan_perm=$args{delete_vlan_perm} || 0;
my $read_device_config_perm=$args{read_device_config_perm} || 0;
my $write_device_config_perm=$args{write_device_config_perm} || 0;
my $administrate_cm_perm=$args{administrate_cm_perm} || 0;
my $create_as_perm=$args{create_as_perm} || 0;
my $read_as_perm=$args{read_as_perm} || 0;
my $update_as_perm=$args{update_as_perm} || 0;
my $delete_as_perm=$args{delete_as_perm} || 0;
my $create_line_perm=$args{create_line_perm} || 0;
my $read_line_perm=$args{read_line_perm} || 0;
my $update_line_perm=$args{update_line_perm} || 0;
my $delete_line_perm=$args{delete_line_perm} || 0;
my $execute_update_dns_perm=$args{execute_update_dns_perm} || 0;
my $execute_update_snmp_perm=$args{execute_update_snmp_perm} || 0;
my $execute_update_ping_perm=$args{execute_update_ping_perm} || 0;
my $password_management_perm=$args{password_management_perm} || 0;
my $manage_tags_perm=$args{manage_tags_perm} || 0;
my $manage_snmp_group_perm=$args{manage_snmp_group_perm} || 0;
my $manage_dns_server_group_perm=$args{manage_dns_server_group_perm} || 0;
my $manage_dyn_dns_perm=$args{manage_dyn_dns_perm} || 0;
my $manage_macs_perm=$args{manage_macs_perm} || 0;
my $locs_rw_perm=$args{locs_rw_perm} || 0;
my $locs_ro_perm=$args{locs_ro_perm} || 0;
my $manage_scheduled_jobs_perm=$args{manage_scheduled_jobs_perm} || 0;

my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qgroup_id = $dbh->quote( $group_id );
my $qmanage_gestioip_perm = $dbh->quote( $manage_gestioip_perm );
my $qmanage_user_perm = $dbh->quote( $manage_user_perm );
my $qmanage_sites_and_cats_perm = $dbh->quote( $manage_sites_and_cats_perm );
my $qmanage_custom_columns_perm = $dbh->quote( $manage_custom_columns_perm );
my $qread_audit_perm = $dbh->quote( $read_audit_perm );
my $qclients_perm = $dbh->quote( $clients_perm );
my $qloc_perm = $dbh->quote( $loc_perm );
my $qcat_perm = $dbh->quote( $cat_perm );
my $qcreate_net_perm = $dbh->quote( $create_net_perm );
my $qread_net_perm = $dbh->quote( $read_net_perm );
my $qupdate_net_perm = $dbh->quote( $update_net_perm );
my $qdelete_net_perm = $dbh->quote( $delete_net_perm );
my $qcreate_host_perm = $dbh->quote( $create_host_perm );
my $qread_host_perm = $dbh->quote( $read_host_perm );
my $qupdate_host_perm = $dbh->quote( $update_host_perm );
my $qdelete_host_perm = $dbh->quote( $delete_host_perm );
my $qcreate_vlan_perm = $dbh->quote( $create_vlan_perm );
my $qread_vlan_perm = $dbh->quote( $read_vlan_perm );
my $qupdate_vlan_perm = $dbh->quote( $update_vlan_perm );
my $qdelete_vlan_perm = $dbh->quote( $delete_vlan_perm );
my $qread_device_config_perm = $dbh->quote( $read_device_config_perm );
my $qwrite_device_config_perm = $dbh->quote( $write_device_config_perm );
my $qadministrate_cm_perm = $dbh->quote( $administrate_cm_perm );
my $qcreate_as_perm = $dbh->quote( $create_as_perm );
my $qread_as_perm = $dbh->quote( $read_as_perm );
my $qupdate_as_perm = $dbh->quote( $update_as_perm );
my $qdelete_as_perm = $dbh->quote( $delete_as_perm );
my $qcreate_line_perm = $dbh->quote( $create_line_perm );
my $qread_line_perm = $dbh->quote( $read_line_perm );
my $qupdate_line_perm = $dbh->quote( $update_line_perm );
my $qdelete_line_perm = $dbh->quote( $delete_line_perm );
my $qexecute_update_dns_perm = $dbh->quote( $execute_update_dns_perm );
my $qexecute_update_snmp_perm = $dbh->quote( $execute_update_snmp_perm );
my $qexecute_update_ping_perm = $dbh->quote( $execute_update_ping_perm );
my $qpassword_management_perm = $dbh->quote( $password_management_perm );
my $qmanage_tags_perm = $dbh->quote( $manage_tags_perm );
my $qmanage_snmp_group_perm = $dbh->quote( $manage_snmp_group_perm );
my $qmanage_dns_server_group_perm = $dbh->quote( $manage_dns_server_group_perm );
my $qmanage_dyn_dns_perm = $dbh->quote( $manage_dyn_dns_perm );
my $qmanage_macs_perm = $dbh->quote( $manage_macs_perm );
my $qlocs_rw_perm = $dbh->quote( $locs_rw_perm );
my $qlocs_ro_perm = $dbh->quote( $locs_ro_perm );
my $qmanage_scheduled_jobs_perm = $dbh->quote( $manage_scheduled_jobs_perm );

my $sth = $dbh->prepare("UPDATE gip_user_group_perms SET clients_perm=$qclients_perm,loc_perm=$qloc_perm,cat_perm=$qcat_perm,manage_gestioip_perm=$qmanage_gestioip_perm, manage_user_perm=$qmanage_user_perm, manage_sites_and_cats_perm=$qmanage_sites_and_cats_perm, manage_custom_columns_perm=$qmanage_custom_columns_perm, read_audit_perm=$qread_audit_perm, create_net_perm=$qcreate_net_perm, read_net_perm=$qread_net_perm, update_net_perm=$qupdate_net_perm, delete_net_perm=$qdelete_net_perm, create_host_perm=$qcreate_host_perm, read_host_perm=$qread_host_perm, update_host_perm=$qupdate_host_perm, delete_host_perm=$qdelete_host_perm, create_vlan_perm=$qcreate_vlan_perm, read_vlan_perm=$qread_vlan_perm, update_vlan_perm=$qupdate_vlan_perm, delete_vlan_perm=$qdelete_vlan_perm, read_device_config_perm=$qread_device_config_perm, write_device_config_perm=$qwrite_device_config_perm, administrate_cm_perm=$qadministrate_cm_perm, create_as_perm=$qcreate_as_perm, read_as_perm=$qread_as_perm, update_as_perm=$qupdate_as_perm, delete_as_perm=$qdelete_as_perm, create_line_perm=$qcreate_line_perm, read_line_perm=$qread_line_perm, update_line_perm=$qupdate_line_perm, delete_line_perm=$qdelete_line_perm, execute_update_dns_perm=$qexecute_update_dns_perm, execute_update_snmp_perm=$qexecute_update_snmp_perm, execute_update_ping_perm=$qexecute_update_ping_perm, password_management_perm=$qpassword_management_perm, manage_tags_perm=$qmanage_tags_perm, manage_snmp_group_perm=$qmanage_snmp_group_perm, manage_dns_server_group_perm=$qmanage_dns_server_group_perm, manage_dyn_dns_perm=$qmanage_dyn_dns_perm, manage_macs_perm=$qmanage_macs_perm, locs_rw_perm=$qlocs_rw_perm, locs_ro_perm=$qlocs_ro_perm, manage_scheduled_jobs_perm=$qmanage_scheduled_jobs_perm WHERE group_id=$qgroup_id"
                        ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub delete_user_group_perms {
my ( $self,$client_id,$id) = @_;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );

    my $sth = $dbh->prepare("DELETE FROM gip_user_group_perms WHERE group_id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}

sub check_perms {
my $self = shift;
my %args = @_;

my $client_id=$args{client_id};
my $vars_file=$args{vars_file};
my $daten=$args{daten};
my $message1=$args{message1};
my $loc_id_rw=$args{loc_id_rw};
my $no_header=$args{no_header};
my $no_footer=$args{no_footer};
my $from_api=$args{from_api};
my $return_client_id=$args{return_client_id};

my %lang_vars = $self->_get_vars("$vars_file");
#	my %values_users=$self->get_user_hash("$client_id","","manage_user_perm");

if ( $client_id !~ /^\d{1,3}$/ || $vars_file !~ /^[\.\/a-z_]{3,18}$/ ) {
    if ( $from_api ) {
        return ("","","$lang_vars{formato_malo_message} (10)","$client_id");
    } else {
        $self->CheckInput("$client_id",$daten,"$lang_vars{mal_signo_error_message}","$lang_vars{access_denied_message}","$vars_file") if ! $no_header;
        print "<p><br><b>$lang_vars{formato_malo_message} (10) </b><p>\n";
        $self->print_end("$client_id","$vars_file","go_to_top") if ! $no_footer;
    }
}
my $required_perms=$args{required_perms};
my @required_perms=split(",",$required_perms);

my $user=$ENV{'REMOTE_USER'};

if ( ! $user ) {
    if ( $from_api ) {
        return ("","","$lang_vars{can_not_determine_user_message}","$client_id");
    } else {    
        $self->CheckInput("$client_id",$daten,"$lang_vars{mal_signo_error_message}","$lang_vars{access_denied_message}","$vars_file") if ! $no_header;
        print "<p><br><b>$lang_vars{can_not_determine_user_message}</b><p>\n";
        print "<p><br><b>$lang_vars{contact_admin_message}</b><p><br>\n" if ! $no_footer;
        $self->print_perm_error("$client_id");
        print "<p><br><p><FORM><INPUT TYPE=\"BUTTON\" VALUE=\"back\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM>\n" if ! $no_footer;
        $self->print_end("$client_id","$vars_file","go_to_top") if ! $no_footer;
    }
}

my %values_user_group_perms=$self->get_user_group_perms_hash("$vars_file","","$user");

if ( ! %values_user_group_perms ) {
	my $ldap_auth = 0;
    foreach my $env ( keys %ENV ) {
        # check if LDAP auth
		if ( $env =~ /^AUTHENTICATE_/ ) {
			$ldap_auth = 1;
			next;
		}
	}

#    my $session_cookie = $ENV{'HTTP_COOKIE'} || "";
#	my $session;
#	if ( $session_cookie =~ /.*session=(.+);/ ) {
#		$session_cookie =~ /.*session=(.+)?;/;
#		$session = $1;
#	} else {
#		$session_cookie =~ /.*session=(.+)/;
#		$session = $1;
#	}
#

    my $http_cookie = $ENV{HTTP_COOKIE};
    my $from_login = 1;
    if ( $http_cookie =~ /session=/ ) {
        # no session cookie when call comes from login-form
        $from_login = 0;
    }

	my %ldap_values_user_group_perm_all;
	if ( $ldap_auth == 1 ) {
        # auth via ldap group

        debug("FROM LDAP");
        debug("FROM LOGIN: $from_login");

		my @ldap_user_groups;
		if ( ! $from_login ) {
            # known session
			@ldap_user_groups = $self->get_ldap_user_groups("$client_id","$user","");
            my $last_change = $ldap_user_groups[0]->[3] || 0;
            debug("SESSION EXISTS: $ldap_user_groups[0]->[1] - $ldap_user_groups[0]->[2] - $ldap_user_groups[0]->[3]");
            my $now = time();
            my $dif = $now - $last_change;
            if ( $dif >= 86400 ) {
                @ldap_user_groups = ();
            }
		}

        my $ldap_user_groups_ids = "";
        if ( @ldap_user_groups ) {
            debug("USER GROUP EXISTS - $ldap_user_groups[0]");
            $ldap_user_groups_ids = $ldap_user_groups[0]->[2];
            my @ldap_user_groups_ids_found;
            if ( $ldap_user_groups_ids =~ /,/ ) {
                @ldap_user_groups_ids_found = split(",", $ldap_user_groups_ids);

                # merge permissions
				%ldap_values_user_group_perm_all = $self->merge_ldap_group_permissions("$vars_file", \@ldap_user_groups_ids_found);
            } else {
                %ldap_values_user_group_perm_all=$self->get_user_group_perms_hash("$vars_file","$ldap_user_groups_ids","");
            }
        } else {
			# call is considered as comming from login.cgi - new session
            # User doesn't exists in GestioIP/No groups for actual session in ldap_user_groups found -> fetch user groups from ldap
            debug("USER GROUP NOT EXISTS");
			my %values = $self->get_ldap_server_hash("$client_id", "id", "", "enabled");

			my $hash_size = keys (%values);
			foreach my $tk ( keys %values ) {
                debug("LDAP SERVER VALUES: $tk - $values{$tk}[0]");
			}

			if ( $hash_size == 0 ) {
                if ( $from_api ) {
                    return ("","","$lang_vars{no_active_ldap_server_message} (1)","$client_id");
                } else {
                    $self->CheckInput("$client_id",$daten,"$lang_vars{mal_signo_error_message}","$lang_vars{access_denied_message}","$vars_file") if ! $no_header;
                    print "<p><br><b>$lang_vars{no_active_ldap_server_message} (1)</b><p>\n";
                    $self->print_end("$client_id","$vars_file","go_to_top") if ! $no_footer;
                }
			} elsif ( $hash_size > 1 ) {
                if ( $from_api ) {
                    return ("","","$lang_vars{one_active_ldap_server_supported_message} (1)","$client_id");
                } else {
                    $self->CheckInput("$client_id",$daten,"$lang_vars{mal_signo_error_message}","$lang_vars{access_denied_message}","$vars_file") if ! $no_header;
                    print "<p><br><b>$lang_vars{one_active_ldap_server_supported_message} (1)</b><p>\n";
                    $self->print_end("$client_id","$vars_file","go_to_top") if ! $no_footer;
                }
			}

            # only one active ldap server
			my $id = (keys %values)[0];

			my $name = $values{$id}[0] || "";
			my $ldap_server = $values{$id}[1] || "";
			my $type = $values{$id}[2] || "";
			my $protocol = $values{$id}[3] || "";
			my $port = $values{$id}[4] || "";
			my $bind_dn = $values{$id}[5] || "";
			my $password = $values{$id}[6] || "";
			my $base_dn = $values{$id}[7] || "";
			my $user_attribute = $values{$id}[8] || "";

            debug("CREATE LDAP CON: $name - $ldap_server - $type - $protocol - $port - $bind_dn - $password - $base_dn");

			my $ldap = $self->create_ldap_connection(
				client_id => "$client_id",
				ldap_server => "$ldap_server",
				protocol => "$protocol",
				ldap_port => "$port",
				bind_dn => "$bind_dn",
				password => "$password",
				base_dn => "$base_dn",
			) || "";

			my $connect_error = "";
			if ( exists $ldap->{ldap_error} ) {
				$connect_error = $ldap->{ldap_error};
			}
            debug("CREATE LDAP CON END");

			my ( $user_dn, $user_cn, $search, $base, $ldap_result);
			my @attrs;
			my @ldap_entries;
            my %ldap_groups;

            # fetch groups the user belongs to from LDAP
			$search = "(&($user_attribute=$user))";
			@attrs = ('dn');
			$base = $base_dn;

			$ldap_result = $self->LDAPsearch($ldap,$search,\@attrs,$base);

            @ldap_entries = $ldap_result->entries;
			# get user dn
            foreach my $entr ( @ldap_entries ) {
                $user_dn = $entr->dn;
                debug("USER DN: $user_dn");
			}
			
			$user_cn = "uid=" . $user;
			$search = "(|(member=$user_cn)(member=$user_dn)(uniqueMember=$user_cn)(uniqueMember=$user_dn)(memberUid=$user_cn)(memberUid=$user_dn))";

            debug("LDAP FETCH START: @attrs -  $base_dn - $search");

            # fetch groups the user belongs to from LDAP
			$ldap_result = $self->LDAPsearch($ldap,$search,\@attrs,$base);
            @ldap_entries = $ldap_result->entries;
            foreach my $entr ( @ldap_entries ) {
                my $found_dn = $entr->dn;
                $found_dn = uc("$found_dn");
                debug("FOUND DN UC: $found_dn");
                $ldap_groups{$found_dn}++;
			}
            debug("LDAP FETCH END");

            # Get active LDAP groups
            my %ldap_group_hash = $self->get_table_hash("$client_id","ldap_group","id");
            my %active_dn_ids;
            my @active_user_group_ids;

            # get ids of the user groups which are associated with the active ldap groups which are also found for this user in the LDAP
			my $enabled_found = "";
            foreach my $l_id ( keys %ldap_group_hash ) {
                my $enabled = $ldap_group_hash{$l_id}->{enabled} || "0";
                my $dn_db = $ldap_group_hash{$l_id}->{dn} || "";
                debug("GROUP VALUES: $dn_db - $enabled");
                if ( $enabled ) {
					$enabled_found = 1;
                    my $dn_id_db = $ldap_group_hash{$l_id}->{id} || "";
                    my $dn_user_group_id_db = $ldap_group_hash{$l_id}->{user_group_id} || "";
                    debug("GROUP VALUES: $dn_id_db - $dn_user_group_id_db - $dn_db");
                    my $dn_db_check = uc("$dn_db");
                    if ( $ldap_groups{$dn_db_check} ) {
                        push @active_user_group_ids, $dn_user_group_id_db;
                        debug("FOUND ACTIVE DB USER GROUP IN LDAP: $dn_db - $dn_user_group_id_db");
                    }
                }
            }

			if ( ! $enabled_found ) {
                if ( $from_api ) {
					debug("$lang_vars{no_active_ldap_group_message}");
                    return ("","","$lang_vars{no_active_ldap_group_message}","$client_id");
                } else {
                    $self->CheckInput("$client_id",$daten,"$lang_vars{mal_signo_error_message}","$lang_vars{access_denied_message}","$vars_file") if ! $no_header;
                    print "<p><br><b>$lang_vars{no_active_ldap_group_message} (2)</b><p>\n";
					debug("$lang_vars{no_active_ldap_group_message} (2)");
                    $self->print_end("$client_id","$vars_file","go_to_top") if ! $no_footer;
                }
			}

			if ( ! @active_user_group_ids ) {
                if ( $from_api ) {
                    return ("","","$lang_vars{active_group_not_found_ldap_message}","$client_id");
                } else {
                    $self->CheckInput("$client_id",$daten,"$lang_vars{mal_signo_error_message}","$lang_vars{access_denied_message}","$vars_file") if ! $no_header;
                    print "<p><br><b>$lang_vars{active_group_not_found_ldap_message}</b><p>\n";
					debug("$lang_vars{active_group_not_found_ldap_message}");
                    $self->print_end("$client_id","$vars_file","go_to_top") if ! $no_footer;
                }
			}

			%ldap_values_user_group_perm_all = $self->merge_ldap_group_permissions("$vars_file", \@active_user_group_ids);
            
            my $active_user_group_ids_string = join(",", @active_user_group_ids);

            # update or insert ldap_user_groups;
			my @ldap_user_groups_check = $self->get_ldap_user_groups("$client_id","$user","");
			if ( @ldap_user_groups_check && $ldap_user_groups_check[0]->[0] =~ /^\d+$/ ) {
                my $ldap_user_groups_id = $ldap_user_groups_check[0]->[0] || "";
                debug("UPDATE LDAP USER GROUP");
				$ldap = $self->update_ldap_user_groups(
					id => "$ldap_user_groups_id",
					client_id => "$client_id",
					user => "$user",
					user_group_id => "$active_user_group_ids_string",
				);
			} else {
                debug("INSERT LDAP USER GROUP");
				$ldap = $self->insert_ldap_user_groups(
					client_id => "$client_id",
					user => "$user",
					user_group_id => "$active_user_group_ids_string",
				);
			}
        }

        %values_user_group_perms = %ldap_values_user_group_perm_all;

	} else {
        if ( $from_api ) {
            return ("","","$lang_vars{user_not_found_message}","$client_id");
        } else {    
            $self->CheckInput("$client_id",$daten,"$lang_vars{mal_signo_error_message}","$lang_vars{access_denied_message}","$vars_file") if ! $no_header;
            print "<p><br><b>$lang_vars{user_not_found_message}: $user</b><p>\n";
            print "<p><br><b>$lang_vars{contact_admin_message}</b><p><br>\n" if ! $no_footer;
            $self->print_perm_error("$client_id");
            print "<p><br><p><FORM><INPUT TYPE=\"BUTTON\" VALUE=\"back\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM>\n" if ! $no_footer;
            $self->print_end("$client_id","$vars_file","go_to_top") if ! $no_footer;
        }
    }
}

my @found_perms="";
my @missing_perms;

my $clients_perm=$values_user_group_perms{clients_perm};

if ( $return_client_id ) {
	# get a valid client for this user - this replaces the get_allowed_client_perm function
	if ( $clients_perm !~ /^${client_id}$/ && $clients_perm !~ /_${client_id}$/ && $clients_perm !~ /^${client_id}_/ && $clients_perm !~ /_${client_id}_/ && $clients_perm !~ /^9999$/ ) {
		if ( $clients_perm =~ /^(\d+)$/ ) {
			$client_id=$clients_perm;
		} else {
			$clients_perm =~ /^(\d+)_?/;
			$client_id=$1;
		}
	}
}

$clients_perm=~s/_/\|/g;
my $no_client_check_scripts="ip_modcolumns.cgi|ip_manage_gestioip.cgi|insert_user|delete_user|mod_user|show_user|ip_mod_client.cgi|ip_mod_client_form.cgi|ip_insert_client.cgi|ip_insert_client_form.cgi|ip_delete_client.cgi";
if  ( $clients_perm && "9999" !~ /^($clients_perm)$/ && $client_id !~ /^($clients_perm)$/ && $ENV{'SCRIPT_NAME'} !~ /$no_client_check_scripts/ ) {
    if ( $from_api ) {
        return ("","","$lang_vars{no_client_permission_message}","$client_id");
    } else {    
        $self->CheckInput("$client_id",$daten,"$lang_vars{mal_signo_error_message}","$lang_vars{access_denied_message}","$vars_file") if ! $no_header;
        print "<p><br><b>$message1</b><p>\n" if $message1;
        print "<p><br><b>$user: $lang_vars{no_client_permission_message}</b><br><p>\n";

        print "<br><p><b>$lang_vars{contact_gip_admin_message}</b><p><br>\n" if ! $no_footer;
        $self->print_perm_error("$client_id");
        print "<p><br><p><FORM><INPUT TYPE=\"BUTTON\" VALUE=\"back\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM>\n" if ! $no_footer;
        $self->print_end("$client_id","$vars_file","go_to_top") if ! $no_footer;
    }
}

foreach my $perm ( @required_perms ) {
    push @found_perms,"$perm";
    if ( ! $values_user_group_perms{$perm} ) {
        push @missing_perms,"$perm";
    }
}

my $locs_ro_perm=$values_user_group_perms{locs_ro_perm} || "";
my $locs_rw_perm=$values_user_group_perms{locs_rw_perm} || "";

debug("check_perms: LOCS_RO_PERM: $locs_ro_perm - $locs_rw_perm"); 

if ( $loc_id_rw ) {
    # check if object has rw permissions for this Site
    my @loc_arr;
    if ( $loc_id_rw =~ /_/ ) {
        @loc_arr = split("_", $loc_id_rw);
    } else {
        $loc_arr[0] = $loc_id_rw;
    }
    foreach my $loc_check (@loc_arr) {
        my $loc = $self->get_loc_from_id("$client_id","$loc_check");
        if ( $locs_rw_perm ne "9999" && $locs_rw_perm !~ /^$loc_check$/ && $locs_rw_perm !~ /^${loc_check}_/ && $locs_rw_perm !~ /_${loc_check}$/ && $locs_rw_perm !~ /_${loc_check}_/ && $loc ne "NULL" && $loc ne "") {
            push @missing_perms,"$loc - locs_rw_perm";
        }
    }
}

if ( @missing_perms ) {
    
    if ( $from_api ) {
        my $missing_perm = "";
        foreach ( @missing_perms ) {
            $missing_perm .= ", $missing_perm";
        }
        $missing_perm =~ s/, //;
		debug("permission missing: $missing_perm");
        return ("","","$lang_vars{permission_missing_message}: $missing_perm","$client_id");
    } else {    
		debug("permission missing: @missing_perms");
        $self->CheckInput("$client_id",$daten,"$lang_vars{mal_signo_error_message}","$lang_vars{access_denied_message}","$vars_file") if ! $no_header;
        print "<p><br><b>$message1</b><p>\n" if $message1;
        print "<p><br><b>$lang_vars{following_permissions_missing}</b><br><p>\n";

        print "<ul>\n";
        foreach my $missing_perm ( @missing_perms ) {
            print "<li><b><i>$missing_perm</i></b></li>\n";
        }
        print "</ul>\n";

        print "<br><p><br><b>$lang_vars{contact_gip_admin_message}</b>:<p>\n" if ! $no_footer;

        $self->print_perm_error("$client_id");
        print "<p><br><p><FORM><INPUT TYPE=\"BUTTON\" VALUE=\"back\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM>\n" if ! $no_footer;
        $self->print_end("$client_id","$vars_file","go_to_top") if ! $no_footer;
        
        return 1;
    }
}

if ( $return_client_id ) {
	return ($locs_ro_perm, $locs_rw_perm, "", $client_id);
} else {
	return ($locs_ro_perm, $locs_rw_perm);
}
}


sub print_perm_error {
my ( $self, $client_id ) = @_;

my %values_users=$self->get_user_hash("$client_id","","manage_user_perm");

print "<ul>\n";
foreach my $key ( keys %{values_users} ) {
    my @value=$values_users{$key};

    my $id=$key;
    my $name=$value[0]->[0];
    my $phone=$value[0]->[2] || "";
    my $email=$value[0]->[3] || "";
    print "<li>$name";
    print " - $email" if $email;
    print " - $phone" if $phone;
    print "</li>\n";
}
print "</ul><br><p><br><p><br><p><br>\n";
}

sub check_loc_perm_rw {
my ( $self, $client_id, $vars_file, $locs_rw_perm, $loc, $loc_id ) = @_;

my %lang_vars = $self->_get_vars("$vars_file");

if ( $locs_rw_perm ne "9999" && $locs_rw_perm !~ /^$loc_id$/ && $locs_rw_perm !~ /^${loc_id}_/ && $locs_rw_perm !~ /_${loc_id}$/ && $locs_rw_perm !~ /_${loc_id}_/ && $loc ne "NULL" && $loc ne "" && $loc ne "---" && $loc_id ne "-1") {
    print "<p><br><b>$lang_vars{following_permissions_missing}</b><br><p>\n";
    print "<ul>\n";
    print "<li><b><i>$loc - locs_rw_perm</i></b></li>\n";
    print "</ul>\n";
    print "<p><br><b>$lang_vars{contact_admin_message}</b><p><br>\n";

    $self->print_perm_error("$client_id");

    print "<p><br><p><FORM><INPUT TYPE=\"BUTTON\" VALUE=\"back\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM>\n";
    $self->print_end("$client_id","$vars_file","go_to_top")
}
}

sub get_user_group_perms_hash {
my ( $self, $client_id, $group_id, $user ) = @_;

$user="" if ! $user;
$group_id="" if ! $group_id;
my %values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $quser = $dbh->quote( $user );
my $qgroup_id = $dbh->quote( $group_id );

my $group_id_expr = "";
if ( $user ) {
    $group_id_expr="WHERE group_id IN ( SELECT group_id FROM gip_users WHERE name=$quser )";
} elsif ( $group_id ) {
    $group_id_expr="WHERE group_id=$qgroup_id";
}

my $sth = $dbh->prepare("SELECT id,group_id,clients_perm,loc_perm,cat_perm, manage_gestioip_perm, manage_user_perm, manage_sites_and_cats_perm, manage_custom_columns_perm, read_audit_perm, create_net_perm, read_net_perm, update_net_perm, delete_net_perm, create_host_perm, read_host_perm, update_host_perm, delete_host_perm, create_vlan_perm, read_vlan_perm, update_vlan_perm, delete_vlan_perm, read_device_config_perm, write_device_config_perm, administrate_cm_perm, create_as_perm, read_as_perm, update_as_perm, delete_as_perm, create_line_perm, read_line_perm, update_line_perm, delete_line_perm, execute_update_dns_perm, execute_update_snmp_perm, execute_update_ping_perm, password_management_perm, manage_tags_perm, manage_snmp_group_perm, manage_dns_server_group_perm, manage_dyn_dns_perm, manage_macs_perm, locs_ro_perm, locs_rw_perm, manage_scheduled_jobs_perm FROM gip_user_group_perms $group_id_expr"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $group_id=$ip_ref->{group_id};
    my $manage_gestioip_perm=$ip_ref->{manage_gestioip_perm} || 0;
    my $manage_user_perm=$ip_ref->{manage_user_perm} || 0;
    my $manage_sites_and_cats_perm=$ip_ref->{manage_sites_and_cats_perm} || 0;
    my $manage_custom_columns_perm=$ip_ref->{manage_custom_columns_perm} || 0;
    my $read_audit_perm=$ip_ref->{read_audit_perm} || 0;
    my $clients_perm=$ip_ref->{clients_perm} || 0;
    my $loc_perm=$ip_ref->{loc_perm} || 0;
    my $cat_perm=$ip_ref->{cat_perm} || 0;
    my $create_net_perm=$ip_ref->{create_net_perm} || 0;
    my $read_net_perm=$ip_ref->{read_net_perm} || 0;
    my $update_net_perm=$ip_ref->{update_net_perm} || 0;
    my $delete_net_perm=$ip_ref->{delete_net_perm} || 0;
    my $create_host_perm=$ip_ref->{create_host_perm} || 0;
    my $read_host_perm=$ip_ref->{read_host_perm} || 0;
    my $update_host_perm=$ip_ref->{update_host_perm} || 0;
    my $delete_host_perm=$ip_ref->{delete_host_perm} || 0;
    my $create_vlan_perm=$ip_ref->{create_vlan_perm} || 0;
    my $read_vlan_perm=$ip_ref->{read_vlan_perm} || 0;
    my $update_vlan_perm=$ip_ref->{update_vlan_perm} || 0;
    my $delete_vlan_perm=$ip_ref->{delete_vlan_perm} || 0;
    my $read_device_config_perm=$ip_ref->{read_device_config_perm} || 0;
    my $write_device_config_perm=$ip_ref->{write_device_config_perm} || 0;
    my $administrate_cm_perm=$ip_ref->{administrate_cm_perm} || 0;
    my $create_as_perm=$ip_ref->{create_as_perm} || 0;
    my $read_as_perm=$ip_ref->{read_as_perm} || 0;
    my $update_as_perm=$ip_ref->{update_as_perm} || 0;
    my $delete_as_perm=$ip_ref->{delete_as_perm} || 0;
    my $create_line_perm=$ip_ref->{create_line_perm} || 0;
    my $read_line_perm=$ip_ref->{read_line_perm} || 0;
    my $update_line_perm=$ip_ref->{update_line_perm} || 0;
    my $delete_line_perm=$ip_ref->{delete_line_perm} || 0;
    my $execute_update_dns_perm=$ip_ref->{execute_update_dns_perm} || 0;
    my $execute_update_snmp_perm=$ip_ref->{execute_update_snmp_perm} || 0;
    my $execute_update_ping_perm=$ip_ref->{execute_update_ping_perm} || 0;
    my $password_management_perm=$ip_ref->{password_management_perm} || 0;
    my $manage_tags_perm=$ip_ref->{manage_tags_perm} || 0;
    my $manage_snmp_group_perm=$ip_ref->{manage_snmp_group_perm} || 0;
    my $manage_dns_server_group_perm=$ip_ref->{manage_dns_server_group_perm} || 0;
    my $manage_dyn_dns_perm=$ip_ref->{manage_dyn_dns_perm} || 0;
    my $manage_macs_perm=$ip_ref->{manage_macs_perm} || 0;
    my $locs_ro_perm=$ip_ref->{locs_ro_perm} || 0;
    my $locs_rw_perm=$ip_ref->{locs_rw_perm} || 0;
    my $manage_scheduled_jobs_perm=$ip_ref->{manage_scheduled_jobs_perm} || 0;

    $values{id}=$id;
    $values{group_id}=$group_id;
    $values{manage_gestioip_perm}=$manage_gestioip_perm;
    $values{manage_user_perm}=$manage_user_perm;
    $values{manage_sites_and_cats_perm}=$manage_sites_and_cats_perm;
    $values{manage_custom_columns_perm}=$manage_custom_columns_perm;
    $values{read_audit_perm}=$read_audit_perm;
    $values{clients_perm}=$clients_perm;
    $values{loc_perm}=$loc_perm;
    $values{cat_perm}=$cat_perm;
    $values{create_net_perm}=$create_net_perm;
    $values{read_net_perm}=$read_net_perm;
    $values{update_net_perm}=$update_net_perm;
    $values{delete_net_perm}=$delete_net_perm;
    $values{create_host_perm}=$create_host_perm;
    $values{read_host_perm}=$read_host_perm;
    $values{update_host_perm}=$update_host_perm;
    $values{delete_host_perm}=$delete_host_perm;
    $values{create_vlan_perm}=$create_vlan_perm;
    $values{read_vlan_perm}=$read_vlan_perm;
    $values{update_vlan_perm}=$update_vlan_perm;
    $values{delete_vlan_perm}=$delete_vlan_perm;
    $values{read_device_config_perm}=$read_device_config_perm;
    $values{write_device_config_perm}=$write_device_config_perm;
    $values{administrate_cm_perm}=$administrate_cm_perm;
    $values{create_as_perm}=$create_as_perm;
    $values{read_as_perm}=$read_as_perm;
    $values{update_as_perm}=$update_as_perm;
    $values{delete_as_perm}=$delete_as_perm;
    $values{create_line_perm}=$create_line_perm;
    $values{read_line_perm}=$read_line_perm;
    $values{update_line_perm}=$update_line_perm;
    $values{delete_line_perm}=$delete_line_perm;
    $values{execute_update_dns_perm}=$execute_update_dns_perm;
    $values{execute_update_snmp_perm}=$execute_update_snmp_perm;
    $values{execute_update_ping_perm}=$execute_update_ping_perm;
    $values{password_management_perm}=$password_management_perm;
    $values{manage_tags_perm}=$manage_tags_perm;
    $values{manage_snmp_group_perm}=$manage_snmp_group_perm;
    $values{manage_dns_server_group_perm}=$manage_dns_server_group_perm;
    $values{manage_dyn_dns_perm}=$manage_dyn_dns_perm;
    $values{manage_macs_perm}=$manage_macs_perm;
    $values{locs_ro_perm}=$locs_ro_perm;
    $values{locs_rw_perm}=$locs_rw_perm;
    $values{manage_scheduled_jobs_perm}=$manage_scheduled_jobs_perm;
    
    }
    $dbh->disconnect;

    return %values;
}

sub get_user_group_perms_perm_hash {
    my ( $self, $client_id, $perm ) = @_;

    my %values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $qperm = $dbh->quote( $perm );

    my $sth = $dbh->prepare("SELECT id,group_id,${perm} FROM gip_user_group_perms"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $group_id=$ip_ref->{group_id} || 0;
        my $found_perm=$ip_ref->{${perm}} || 0;
        $values{${group_id}}=$found_perm;
    }
    $dbh->disconnect;

    return %values;
}


sub PrintUserGroupTab {
my ( $self,$client_id,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my %values_user_groups=$self->get_user_group_hash("$client_id");

my $user=$ENV{'REMOTE_USER'};
my %values_user=$self->get_user_hash("$client_id","$user");
my $user_group_id;
foreach my $key ( keys %{values_user} ) {
    my @value=$values_user{$key};
    $user_group_id=$value[0]->[1];
}

$self->PrintJavaScriptPrint("$lang_vars{delete_user_group_confirm_message}");

print "<p>";
#	print "<form name=\"ip_insert_user_group_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_insert_user_group_form.cgi\" style=\"display:inline;\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"input_link_w_right\" value=\"$lang_vars{new_user_group_message}\" name=\"B1\"></form><p><br>\n";


my $onclick_confirmation_delete = "";
my $color_helper=0;

my $anz=keys( %values_user_groups );

if ( $anz == 0 ) {
    print "<p><br><i>$lang_vars{no_user_group_message}</i>\n";
    return;
}

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{description_message} </b></font></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

my $sort_order_ref = sub {
    my $A=$values_user_groups{$a}->[0];
    my $B=$values_user_groups{$b}->[0];
    ${A} cmp ${B};
};

foreach my $key ( sort $sort_order_ref keys %{values_user_groups} ) {
    my @value=$values_user_groups{$key};

    my $id=$key;
    my $name=$value[0]->[0];
    my $description=$value[0]->[1] || "";

    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    my $hidden_form_vals="<input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">";

    if ( $id == $user_group_id ) {
        print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td></td><td>$description</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_user_group_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td></td>";
    } else {
        print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td></td><td>$description</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_user_group_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_user_group.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    }
    print "</tr>\n";
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}

### ARIN



sub get_pocs {
my ( $self, $client_id, $key ) = @_;

my %pocs;
$key = "" if ! $key;
my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $sth = $dbh->prepare("SELECT id,name,handle,comment,api_key FROM arin_pocs") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'};
    my $name = $ip_ref->{'name'};
    my $handle = $ip_ref->{'handle'};
    my $comment = $ip_ref->{'comment'};
    my $api_key = $ip_ref->{'api_key'};
    my $hash_key;
    if ( $key eq "id" ) {
        $hash_key=$id;
    } elsif ( $key eq "name" ) {
        $hash_key=$name;
    } elsif ( $key eq "handle" ) {
        $hash_key=$handle;
    } else {
        $hash_key=$id;
    }
    push @{$pocs{$hash_key}},"$id","$name","$handle","$comment","$api_key";
}
    $dbh->disconnect;
    return \%pocs;
}


sub insert_poc {
    my $self = shift;
    my %args = @_;

    my $client_id=$args{client_id};
    my $name=$args{name};
    my $handle=$args{handle} || 0;
    my $comment=$args{comment} || 0;
    my $api_key=$args{api_key} || 0;

    my $dbh = $self->_mysql_connection();

    my $qname = $dbh->quote( $name );
    my $qhandle = $dbh->quote( $handle );
    my $qcomment = $dbh->quote( $comment );
    my $qapi_key = $dbh->quote( $api_key );

    my $sth = $dbh->prepare("INSERT INTO arin_pocs (name,handle,comment,api_key) VALUES ($qname,$qhandle,$qcomment,$qapi_key)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}


sub update_poc {
    my $self = shift;
    my %args = @_;

    my $client_id=$args{client_id};
    my $id=$args{id};
    my $name=$args{name};
    my $handle=$args{handle} || 0;
    my $comment=$args{comment} || 0;
    my $api_key=$args{api_key} || 0;

    my $dbh = $self->_mysql_connection();

    my $qid = $dbh->quote( $id );
    my $qname = $dbh->quote( $name );
    my $qhandle = $dbh->quote( $handle );
    my $qcomment = $dbh->quote( $comment );
    my $qapi_key = $dbh->quote( $api_key );

    my $sth = $dbh->prepare("UPDATE arin_pocs SET name=$qname, handle=$qhandle, comment=$qcomment, api_key=$qapi_key WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}


sub delete_poc {
my ( $self,$client_id,$id) = @_;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );

    my $sth = $dbh->prepare("DELETE FROM arin_pocs WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}




sub PrintPocTab {
my ( $self,$client_id,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my $poc_values=$self->get_pocs("$client_id") || ();


print "<form name='insert_poc' method='POST' action='$server_proto://$base_uri/res/ip_arin_insert_poc_form.cgi' style='display:inline;'><input type='hidden' name='mode' value='show'><input type='hidden' name='client_id' value='$client_id'><input type='submit' class='input_link_w_right' value='$lang_vars{add_poc_message}' name='B1'></form><p><br>\n";

print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('net_scrollx');
var y = readCookie('net_scrolly');
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('net_scrollx', x, 0);
createCookie('net_scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}
// -->
</SCRIPT>


<script type="text/javascript">
<!--
function confirmation(NET,TYPE) {

    if (TYPE == 'delete'){
            answer = confirm(NET + ": $lang_vars{delete_ll_confirme_message}")
    }

    if (answer){
            return true;
    }
    else{
            return false;
    }
}
//-->
</script>


EOF

my $onclick_confirmation_delete = "";
my $color_helper=0;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{handle_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{api_key_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{comentario_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

foreach my $key( keys %{$poc_values}) {
    my $id = $poc_values->{$key}->[0];
    my $name = $poc_values->{$key}->[1];
    my $handle = $poc_values->{$key}->[2];
    my $comment = $poc_values->{$key}->[3];
    $comment = "" if $comment eq 0;
    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name ($handle)\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }


    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td><td align=\"center\">$handle</td><td>********</td><td>$comment</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_arin_mod_poc_form.cgi\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"handle\" type=\"hidden\" value=\"$handle\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"comment\" type=\"hidden\" value=\"$comment\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_arin_delete_poc.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"handle\" type=\"hidden\" value=\"$handle\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}



sub create_net_payload_table {
    my $self = shift;
    my %args = @_;
my $xml = $args{xml} || "";
my $vars_file =$args{vars_file};
my $interaction =$args{interaction};
my $ip =$args{ip} || "";
my $object =$args{object} || "";
my $database =$args{database} || "";
my $client_id =$args{client_id};

my %xml = %{$xml};
my %lang_vars = $self->_get_vars("$vars_file");

my $table_string="";
my $error="";

my $version =$xml{version} || "",
my $registrationDate =$xml{registrationDate} || "",
my $updateDate =$xml{updateDate} || "",
my $orgHandle =$xml{orgHandle} || "",
my $orgRef =$xml{orgRef} || "",
my $handle =$xml{handle} || "",
my $customerHandle =$xml{customerHandle} || "",
my $parentHandle =$xml{parentHandle} || "",
my $parentNetRef =$xml{parentNetRef} || "",
my $netName =$xml{netName} || "",
my $name =$xml{name} || "",
my $comment =$xml{comment} || "",
my $netBlocks =$xml{netBlocks} || "",
my $originASes =$xml{originASes} || "",
my $pocLinks =$xml{pocLinks} || "",


my $netType="";

if ( $interaction eq "Delete" ) {
    $table_string='
<script type="text/javascript">
<!--    
function confirmation(NET,TYPE) {

    if (TYPE == "delete"){
            answer = confirm(NET + ": $lang_vars{delete_network_confirme_message}")
    }

    if (answer){
            return true;
    }
    else{
            return false;
    }
}
//-->
</script>';

}


$table_string.="<p><table>\n";

foreach my $netBlock( @$netBlocks) {
    while ( my ($key, $val) = each( %$netBlock ) ) {
        my $anz_netBlocks=scalar @{$val};
        foreach my $netBlockVals( @$val) {
            $table_string.="<tr><td>Net Range</td><td>$netBlockVals->{startAddress}->[0] - $netBlockVals->{endAddress}->[0]</td><tr>\n";
            $table_string.="<tr><td>CIDR</td><td>$netBlockVals->{startAddress}->[0]/$netBlockVals->{cidrLength}->[0]</td><tr>\n";
#				$netBlockVals->{description}->[0]
            $netType=$netBlockVals->{type}->[0];
            if ( $interaction =~ /Delete/ && ( $netBlockVals->{type}->[0] ne "A" || $netBlockVals->{type}->[0] ne "S") ) {
                $error.="$netBlockVals->{startAddress}->[0]: $lang_vars{delete_not_applicable_message}<p><br>\n";
            }

        }
    }
}

if ( $netName ) {
    $table_string.="<tr><td>Name</td><td>$netName</td></tr>\n";
} elsif ( $name ) {
    $table_string.="<tr><td>Name</td><td>$name</td></tr>\n";
} else {
    $table_string.="<tr><td>Name</td><td></td></tr>\n";
}

$table_string.="<tr><td>Handle</td><td>$handle</td></tr>\n";

if ( $parentHandle ) {
    $table_string.="<tr><td>Parent</td><td>$parentHandle</td></tr>\n";
} elsif ( $parentNetRef ) {
    while ( my ($key, $val) = each( %$parentNetRef ) ) {
        $table_string.="<tr><td>parentNetHandle</td><td>$val</td></tr>\n" if $key eq "handle";
    }
} else {
    $table_string.="<tr><td>Parent</td><td></td></tr>\n";
}

$table_string.="<tr><td>Net Type</td><td>$netType</td></tr>\n";

#	my $anz_originASes=scalar @{$originASes};
if ( $originASes =~ /ARRAY/ ) {
    foreach my $oAS( @$originASes) {
        $table_string.="<tr><td>Origin AS</td><td>$oAS</td></tr>\n";
    }
} else {
    $table_string.="<tr><td>Origin AS</td><td></td></tr>\n";
}

if ( $orgHandle ) {
    $table_string.="<tr><td>Organization</td><td>$orgHandle</td></tr>\n";
} elsif ( $orgRef ) {
    while ( my ($key, $val) = each( %$orgRef ) ) {
        $table_string.="<tr><td>Org Handle</td><td>$val</td></tr>\n" if $key eq "handle";
    }
}
$table_string.="<tr><td>Registration Date</td><td>$registrationDate</td></tr>\n";
$table_string.="<tr><td>Last Updated</td><td>$updateDate</td></tr>\n";

if ( ref($comment) eq "ARRAY" ) {
    foreach my $lcomment( @$comment) {
        $table_string.="<tr><td>Comments</td><td>$lcomment->{content}</td></tr>\n";
    }
} else {
    $table_string.="<tr><td>Comments</td><td></td></tr>\n";
}


my $anz_pocLinks=0;
$anz_pocLinks=scalar @{$pocLinks} if $pocLinks;
if ( $anz_pocLinks >= 1 ) {
    $table_string.="<tr><td>POCs</td></tr>\n";
    foreach my $pL( @$pocLinks) {
        my $pocLinkDescr=$pL->{description};
        my $pocLinkHandle=$pL->{handle};
        my $pocLinkContent=$pL->{content};
        my $pocLinkFunction=$pL->{function};

        $table_string.="<tr><td>&nbsp;&nbsp;Handle</td><td>$pocLinkHandle</td></tr>\n";
        $table_string.="<tr><td>&nbsp;&nbsp;Description</td><td>$pocLinkDescr</td></tr>\n";
        $table_string.="<tr><td>&nbsp;&nbsp;Function</td><td>$pocLinkFunction</td></tr>\n";
        $table_string.="<tr><td>&nbsp;&nbsp;Content</td><td>$pocLinkContent</td></tr>\n";
    }
} else {
    $table_string.="<tr><td>Poc Handle</td><td></td></tr>\n";
}

$table_string.="</table>\n";
$table_string.="<p>\n";

if ( $error ) {
    print "<p><br><b>$lang_vars{error_message}</b><p>\n";
    print $error if $error;
}


$table_string="<p><br><b>$lang_vars{delete_net_block_message}</b><br>\n" . $table_string if $interaction eq "Delete" && ! $error;
print $table_string;

if ( $interaction eq "Delete" ) {

    if ( @$netBlocks == 1 && $netBlocks->[0]->{netBlock}->[0]->{startAddress}->[0] ne $ip ) { 
        print "<b>$ip</b>: $lang_vars{arin_networks_do_not_correspond_message}";
        return;
    }

    if ( ! $error ) {
        print "<form name=\"interact_db\" method=\"POST\" action=\"./ip_arin_submit.cgi\">\n";
        print "<input type=\"hidden\" name=\"handle\" value=\"$handle\"><input type=\"hidden\" name=\"object\" value=\"$object\"><input type=\"hidden\" name=\"interaction\" value=\"$interaction\"><input type=\"hidden\" name=\"database\" value=\"$database\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\">\n";
        print "<input type=\"submit\" value=\"$lang_vars{borrar_message}\" name=\"B2\" class=\"input_link_w\" onclick=\"return confirmation(\'$handle\',\'delete\');\"></form>\n";
    } else {
        print "<p><br><FORM><INPUT TYPE=\"BUTTON\" VALUE=\"back\" ONCLICK=\"history.go(-1)\" class=\"error_back_link\"></FORM>";
        $self->print_end("$client_id");
    }
}
}






# ADVANCED SITE MANAGEMENT

sub get_site_columns {
my ( $self, $client_id ) = @_;
my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth;
$sth = $dbh->prepare("SELECT id, name, mandatory FROM custom_site_columns")
    or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
return @values;
}

sub get_site_column_name {
my ( $self, $client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
    my $sth = $dbh->prepare("SELECT name FROM custom_site_columns WHERE id=$qid
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $name = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $name;
}

sub get_site_id_from_name {
my ( $self, $client_id, $name ) = @_;

my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );
my $sth = $dbh->prepare("SELECT id FROM custom_site_columns WHERE name=$qname
                ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

my $id = $sth->fetchrow_array;

$sth->finish();
$dbh->disconnect;

return $id;
}

sub get_site_column_values_hash {
my ( $self, $client_id ) = @_;

my %values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $sth = $dbh->prepare("SELECT id,column_id,site_id,entry FROM custom_site_column_entries")
 or croak $self->print_error("$client_id","select<p>$DBI::errstr");

$sth->execute() or croak $self->print_error("$client_id","select<p>$DBI::errstr");

while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $column_id = $ip_ref->{column_id};
    my $site_id = $ip_ref->{site_id};
    my $entry = $ip_ref->{entry};
    $values{"${column_id}_${site_id}"}="$entry";
}

$sth->finish();
$dbh->disconnect;

return %values;
}


sub get_custom_site_columns {
my ( $self, $client_id ) = @_;

my $format=$self->{'format'};
my $error="";

my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT cc.name,cc.id,cc.mandatory FROM custom_site_columns cc ORDER BY cc.id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;

return @values;
}

sub insert_site_column {
my ( $self,$client_id, $column, $vars_file, $select_type, $select_items, $mandatory ) = @_;

my %lang_vars;
%lang_vars = $self->_get_vars("$vars_file") if $vars_file;

my $dbh = $self->_mysql_connection();
my $qcolumn = $dbh->quote( $column );
my $qmandatory = $dbh->quote( $mandatory );
my $sth = $dbh->prepare("INSERT INTO custom_site_columns (name, mandatory) VALUES ($qcolumn, $qmandatory)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth = $dbh->prepare("SELECT MAX(id) FROM custom_site_columns") or croak $self->print_error("$client_id","$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
my $id = $sth->fetchrow_array;

if ( $select_type eq "$lang_vars{select_message}" || $select_type eq "$lang_vars{multiple_select_message}" ) {
    my $type = "s";
    $type = "m" if $select_type eq "$lang_vars{multiple_select_message}";
    my $qtype = $dbh->quote( $type );
    my $qselect_items = $dbh->quote( $select_items );
    my $qid = $dbh->quote( $id );
    $select_items=$self->remove_whitespace_se("$select_items");
    $sth = $dbh->prepare("INSERT INTO custom_site_column_select (type,items,cc_id) VALUES ($qtype,$qselect_items,$qid)");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}

$sth->finish();
$dbh->disconnect;
}

sub insert_site_column_entry {
my ( $self,$client_id,$column_id,$site_id,$entry ) = @_;
my $dbh = $self->_mysql_connection();
my $qcolumn_id = $dbh->quote( $column_id );
my $qsite_id = $dbh->quote( $site_id );
my $qentry = $dbh->quote( $entry );
my $sth = $dbh->prepare("INSERT INTO custom_site_column_entries (column_id,site_id,entry) VALUES ($qcolumn_id,$qsite_id,$qentry)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_site_column_entry {
my ( $self,$client_id,$column_id,$site_id,$entry ) = @_;
my $dbh = $self->_mysql_connection();
my $qcolumn_id = $dbh->quote( $column_id );
my $qsite_id = $dbh->quote( $site_id );
my $qentry = $dbh->quote( $entry );
my $sth = $dbh->prepare("UPDATE custom_site_column_entries SET entry=$qentry WHERE site_id=$qsite_id AND column_id=$qcolumn_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_column_select_entries {
my ( $self,$client_id,$vars_file,$cc_name,$entry,$old_entry,$object ) = @_;

my %lang_vars = $self->_get_vars("$vars_file") if $vars_file;

my $dbh = $self->_mysql_connection();
my $qcc_name = $dbh->quote( $cc_name );
my $qentry = $dbh->quote( $entry );
my $qold_entry = $dbh->quote( $old_entry );
my $table;
my $table1;
my $column_id;
if ( $object eq "network" ) {
    $table = "custom_net_column_entries";
    $table1 = "custom_net_columns";
    $column_id = "cc_id";
} elsif ( $object eq "host" ) {
    $table = "custom_host_column_entries";
    $table1 = "custom_host_columns";
    $column_id = "cc_id";
} elsif ( $object eq "site" ) {
    $table = "custom_site_column_entries";
    $table1 = "custom_site_columns";
    $column_id = "column_id";
} elsif ( $object eq "line" ) {
    $table = "custom_line_column_entries";
    $table1 = "custom_line_columns";
    $column_id = "column_id";
} else {
    return;
}

my $sth;
if ( $object eq "line" && ( $cc_name eq $lang_vars{tipo_message} || $cc_name eq $lang_vars{service_message} )) {
    my $col_name = "type";
    $col_name = "service" if $cc_name eq $lang_vars{service_message};
    $sth = $dbh->prepare("UPDATE llines SET $col_name=$qentry WHERE $col_name=$qold_entry");
} else {
    $sth = $dbh->prepare("UPDATE $table SET entry=$qentry WHERE $column_id=( SELECT id from $table1 WHERE name=$qcc_name ) AND entry=$qold_entry");
}

$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub delete_column_select_entries {
my ( $self,$client_id,$cc_name,$entry,$object,$vars_file ) = @_;

my %lang_vars = $self->_get_vars("$vars_file");

my $dbh = $self->_mysql_connection();
my $qcc_name = $dbh->quote( $cc_name );
my $qentry = $dbh->quote( $entry );
my $table;
my $table1;
my $column_id;
if ( $object eq "network" ) {
    $table = "custom_net_column_entries";
    $table1 = "custom_net_columns";
    $column_id = "cc_id";
} elsif ( $object eq "host" ) {
    $table = "custom_host_column_entries";
    $table1 = "custom_host_columns";
    $column_id = "cc_id";
} elsif ( $object eq "site" ) {
    $table = "custom_site_column_entries";
    $table1 = "custom_site_columns";
    $column_id = "column_id";
} elsif ( $object eq "line" ) {
    $table = "custom_line_column_entries";
    $table1 = "custom_line_columns";
    $column_id = "column_id";
} else {
    return;
}

my $sth;
if ( $object eq "line" && ( $cc_name eq $lang_vars{tipo_message} || $cc_name eq $lang_vars{service_message} )) {
    my $col_name = "type";
    $col_name = "service" if $cc_name eq $lang_vars{service_message};
    $sth = $dbh->prepare("UPDATE llines SET $col_name='' WHERE $col_name=$qentry");
} else {
    $sth = $dbh->prepare("DELETE FROM $table WHERE entry=$qentry AND $column_id=( SELECT id from $table1 WHERE name=$qcc_name )");
}

$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub delete_site_column {
my ( $self,$client_id, $column_id ) = @_;

my $dbh = $self->_mysql_connection();
my $qcolumn_id = $dbh->quote( $column_id );

my $sth = $dbh->prepare("DELETE FROM custom_site_columns WHERE id = $qcolumn_id"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth = $dbh->prepare("DELETE FROM custom_site_column_entries WHERE column_id = $qcolumn_id"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth = $dbh->prepare("DELETE FROM custom_site_column_select WHERE cc_id = $qcolumn_id"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub delete_site_column_entry {
my ( $self,$client_id, $column_id, $site_id ) = @_;

my $error;
my $format=$self->{'format'};
    my $dbh = $self->_mysql_connection();
my $qcolumn_id = $dbh->quote( $column_id );
my $qsite_id = $dbh->quote( $site_id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("DELETE FROM custom_site_column_entries WHERE column_id = $qcolumn_id AND site_id=$qsite_id")
     or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

    $sth->finish();
    $dbh->disconnect;
}

sub get_sites_match {
my ( $self,$client_id,$match ) = @_;

my (%values,$ip_ref);
my $dbh = $self->_mysql_connection();

my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("SELECT DISTINCT id, loc FROM locations WHERE ( client_id=$qclient_id || client_id='9999' ) AND id IN ( select site_id from custom_site_column_entries where entry LIKE '%$match%' ) || loc LIKE '%$match%'")
    or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth->execute() or croak $self->print_error("$client_id","select<p>$DBI::errstr");

while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'};
    my $loc = $ip_ref->{'loc'};
    $values{"$loc"}="$id";
}

$sth->finish();
$dbh->disconnect;

return \%values;
}


sub search_db_hash_sites {
my ( $self,$client_id, $vars_file, $daten ) = @_;

my %lang_vars = $self->_get_vars("$vars_file") if $vars_file;

no strict 'refs';
my $client_independent=${$daten}{client_independent} || "n";
my @search;
my %values;

foreach my $loc (keys %{$daten}) {
    my $dat = ${$daten}{$loc};
    if ( ! $dat ) { next; }
    if ( $loc =~ /gip_query/ || $loc =~ /_id$/ || $loc =~ /custom_/ || $loc eq "client_independent" || $loc eq "B2" || $loc eq "B1" || $loc eq "entries_per_page_hosts" || $loc eq "ip_version" || $loc =~ /_pcid$/ ) { next; }

    if ( $dat !~ /../ && $loc ne "int_admin" && $loc ne "red_num" && $loc ne "host_id" && $loc ne "anz_values_hosts" && $loc ne "save_config_changes" && $loc ne "dyn_dns_updates" ) {
        $self->print_error("$client_id","$lang_vars{dos_signos_message} $loc - $dat");
        $self->print_end("$client_id");
        exit 1;
    }
    if ( $dat =~ /$lang_vars{buscar_message}/ || $loc =~ /search_index/  ) {
        next;
    }
    $loc =~ s/advanced_search_//;
    $dat = "$loc:X-X:$dat";
    push @search, $dat;
}

my $dbh = $self->_mysql_connection();

my $search = "SELECT l.id, l.loc FROM locations l WHERE ";

my $loc = "";
my $loc_expr = "";
my $qloc ="''";
if ( ${$daten}{'loc'} ) {
    $loc=${$daten}{'loc'};
    $qloc = $dbh->quote( $loc );
    $loc_expr = "l.loc=$qloc ";
    $search .= $loc_expr;
}

my $qclient_id = $dbh->quote( $client_id );
my %values_ip = ();
my @helper_array;
my ($ele, $ip_ref);
my $ele_num = @search;
$ele_num=$ele_num - 1;
my $ignore_search = "";

my $client_search = "";
my $client_cce_search = "";
if ( $client_independent ne "yes" ) {
   $client_search="AND l.client_id = $qclient_id";
   $client_cce_search="AND (l.client_id = $qclient_id)";
}


my $cc_found = 0;
for (my $i = 0; $i <= $ele_num; $i++) {
   my ($name,$val) = split(":X-X:",$search[$i]);
   if ( $name =~ /^cc_id_/ ) {
       $name =~ /^cc_id_(\d+)$/;
       my $cc_id_search = $1;
       $val = "%" . $val . "%";
       my $qval = $dbh->quote( $val );
        $search .= "AND " if $loc_expr && $cc_found == 0;
       $search .= "AND " if $cc_found == 1;

       $search .= " l.id IN ( SELECT cce.site_id FROM custom_site_column_entries cce WHERE cce.entry LIKE $qval AND cce.column_id = \"$cc_id_search\")";
       $cc_found = 1;
    }
}

$search .= " $client_cce_search";

my $sth = $dbh->prepare("$search") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'};
    my $loc = $ip_ref->{'loc'};
    $values{"$loc"}="$id";
}

$dbh->disconnect;

return (\%values);
}


sub PrintSiteTab {
my ( $self, $client_id, $vars_file, $match, $daten, $changed_id ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my @global_config = $self->get_global_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my $site_search_main_menu = $global_config[0]->[22] || 0;

my $values_sites;
my $count = 0;
my $replace_count = "";
if ( $daten ) {
    $values_sites=$self->search_db_hash_sites("$client_id","$vars_file",$daten);
    $count = scalar keys %$values_sites;
    $replace_count = "<span>$count $lang_vars{entry_found_message}</span>" if $count == 1;
    $replace_count = "<span>$count $lang_vars{entries_found_message}</span>" if $count > 1;
} elsif ( $match ) {
    $values_sites=$self->get_sites_match("$client_id","$match");
    $count = scalar keys %$values_sites;
    $replace_count = "<span>$count $lang_vars{entry_found_message}</span>" if $count == 1;
    $replace_count = "<span>$count $lang_vars{entries_found_message}</span>" if $count > 1;
} else {
    $values_sites=$self->get_loc_hash("$client_id");
}

my %changed_id=();
$changed_id = \%changed_id if ! $changed_id;

my @site_columns=$self->get_site_columns("$client_id"); # id, name
my %values_sites_cc=$self->get_site_column_values_hash("$client_id"); # $values{"${column_id}_${site_id}"}="$entry";

$self->PrintJavaScriptPrint("$lang_vars{delete_site_confirm_message}");

#	print "$replace_count <form name=\"ip_insert_site_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_insert_site_form.cgi\" style=\"display:inline;\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"input_link_w_right\" value=\"$lang_vars{new_site_message}\" name=\"B1\"></form>\n";
print "$replace_count" if $replace_count;

#    if ( ! $site_search_main_menu ) {
#
#print <<EOF;
#        <form name="search_sites" method="POST" action="$server_proto://$base_uri/res/ip_manage_sites.cgi" style="display:inline"><input type="hidden" name="client_id" value="$client_id"><input type="submit" value="" class="button" style=\"float: right; cursor:pointer;\"><input type=\"text\" size=\"15\" name=\"match\" style=\"float: right;\"></form>
#
#        <form name="search_site_detail" method="POST" action="$server_proto://$base_uri/ip_search_site_form.cgi" style="display:inline"><input type="hidden" name="client_id" value="$client_id"><input type="submit" class=\"input_link_w_right\" value="$lang_vars{advanced_message}" name="B1"></form><br><p>
#EOF
#    } else {
    print "<br>\n";
#    }

if ( ! keys %{$values_sites} ) {
    print "<p class=\"NotifyText\">$lang_vars{no_resultado_message}</p><br>\n";
    return;
}

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $anz=keys( %$values_sites );
my @site_column_order;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";

print "<tr align=\"center\">";
print "<td><font size=\"2\"><b>$lang_vars{loc_message}</b></font></td>";

my $j=0;
foreach ( @site_columns ) {
    my $column_id=$site_columns[$j]->[0];
    my $column_name=$site_columns[$j]->[1];

    print "<td><font size=\"2\"><b>$column_name</b></font></td>";

    push @site_column_order,"$column_id";
    $j++;
}
#	print "<td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";
print "<td width=\"40px\"><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";



#	my $sort_order_ref = sub {
#		my $A=$values_users{$a}->[0];
#		my $B=$values_users{$b}->[0];
#		${A} cmp ${B};
#	};

foreach my $site ( sort keys %{$values_sites} ) {
    
    next if $site eq "NULL";

    my $id=$values_sites->{$site};

    my $onclick_scroll='onclick="saveScrollCoordinates();"';
    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$site\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $changed_id_val = "";
    if ( $id ) {
        if ( defined $changed_id->{"$id"} ) {
            $changed_id_val = $changed_id->{"$id"};
        }
    }

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $id && $changed_id_val ) {
        $bg_color_show="#a6e8a6";
    } elsif ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    my $hidden_form_vals="<input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">";

    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$site</td>";

    foreach my $column_id ( @site_column_order ) {
        my $entry=$values_sites_cc{"${column_id}_${id}"} || "";
        print "<td>$entry</td>";
    }

    if ( $daten || $match ) {
        print "<td>\n";
        # list associated networks
        print "<form method=\"POST\" action=\"$server_proto://$base_uri/ip_searchred.cgi\" style=\"display:inline;\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"loc\" type=\"hidden\" value=\"$site\"><input type=\"submit\" value=\"N\" name=\"B2\" class=\"LeftMenuListLinkBoldGET\" style=\"cursor:pointer;\" title=\"$lang_vars{busqueda_red_message}\"></form>";
        # list associated hosts
        print " <form method=\"POST\" action=\"$server_proto://$base_uri/ip_searchip.cgi\" style=\"display:inline;\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"loc\" type=\"hidden\" value=\"$site\"><input type=\"submit\" value=\"H\" name=\"B2\" class=\"LeftMenuListLinkBoldGET\" style=\"cursor:pointer;\" title=\"$lang_vars{busqueda_host_message}\"></form>";
        # list associated lines
        print " <form method=\"POST\" action=\"$server_proto://$base_uri/ip_search_ll.cgi\" style=\"display:inline;\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"loc_id\" type=\"hidden\" value=\"$id\"><input name=\"search_index\" type=\"hidden\" value=\"true\"><input type=\"submit\" value=\"L\" name=\"B2\" class=\"LeftMenuListLinkBoldGET\" style=\"cursor:pointer;\" title=\"$lang_vars{LL_message}\"></form>";
        print "</td>\n";
    }


    print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_site_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\" $onclick_scroll></form></td>";

    print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_site.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"site\" type=\"hidden\" value=\"$site\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{delete_site_message}\" $onclick_confirmation_delete></form></td>";

}
print "</table><p>\n";

print "<form name=\"ip_insert_site_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_export_sites.cgi\" style=\"display:inline;\"><input type=\"hidden\" name=\"match\" value=\"$match\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"input_link_w_right\" value=\"$lang_vars{export_message}\" name=\"B1\"></form><p><br>\n";

print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}




#### PASSWORD MANAGEMENT

sub encryptString {
my ( $self,$master_key,$user_password ) = @_;

use Crypt::CBC;
use MIME::Base64;

my $cipher = Crypt::CBC->new(
    -key        => $user_password,
    -cipher     => 'Blowfish',
    -padding  => 'space',
    -add_header => 1
);

my $enc = $cipher->encrypt($master_key);
my $enc_mime = encode_base64($enc);
return $enc_mime; 
}


sub decryptString {
my ( $self,$master_key_enc_mime,$user_password ) = @_;

use Crypt::CBC;
use MIME::Base64;

my $master_key_enc = decode_base64($master_key_enc_mime);
my $cipher = Crypt::CBC->new(
    -key        => $user_password,
    -cipher     => 'Blowfish',
    -padding  => 'space',
    -add_header => 1
);

my $dec = $cipher->decrypt($master_key_enc);
# untaint $dec
$dec =~ /^(.*)$/;
$dec=$1;

return $dec; 
}

sub insert_master_key {
    my $self = shift;
    my %args = @_;

    my $client_id=$args{client_id};
    my $master_key=$args{master_key};
    my $user_id=$args{user_id};
    my $user_password=$args{user_password};

my $master_key_enc_mime=$self->encryptString("$master_key","$user_password");

    my $dbh = $self->_mysql_connection();

    my $qmaster_key_enc_mime = $dbh->quote( $master_key_enc_mime );
    my $quser_id = $dbh->quote( $user_id );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("INSERT INTO master_keys (user_id,master_key,client_id) VALUES ($quser_id,$qmaster_key_enc_mime,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}

sub get_master_key {
my ( $self,$client_id,$user_id ) = @_;
my $value;
    my $dbh = $self->_mysql_connection();
my $quser_id = $dbh->quote( $user_id );
    my $sth = $dbh->prepare("SELECT master_key FROM master_keys WHERE user_id=$quser_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $value = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;
    return $value;
}

sub delete_master_key {
my ( $self,$client_id,$user_id ) = @_;
my $value;
    my $dbh = $self->_mysql_connection();
my $quser_id = $dbh->quote( $user_id );
    my $sth = $dbh->prepare("DELETE FROM master_keys WHERE user_id=$quser_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
    return $value;
}

sub update_master_key_changed {
my ( $self,$client_id,$changed ) = @_;
    my $dbh = $self->_mysql_connection();
my $qchanged = $dbh->quote( $changed );
    my $sth = $dbh->prepare("UPDATE master_keys SET changed=$qchanged");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub insert_user_key {
    my $self = shift;
    my %args = @_;

    my $client_id=$args{client_id};
    my $user_id=$args{user_id};
    my $user_password=$args{user_password};

    my $user_password_enc_mime=$self->encryptString("$user_password","$user_password");

    my $dbh = $self->_mysql_connection();

    my $quser_password_enc_mime = $dbh->quote( $user_password_enc_mime );
    my $quser_id = $dbh->quote( $user_id );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("INSERT INTO user_passwords (user_id,password,client_id) VALUES ($quser_id,$quser_password_enc_mime,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}


sub check_user_key {
my ( $self,$client_id,$user_id,$user_password ) = @_;

my $user_password_db;
$user_password="" if ! $user_password;
my $match="";
my $changed;

    my $dbh = $self->_mysql_connection();

my $quser_id = $dbh->quote( $user_id );

my $sth;

if ( $user_password ) {
    $sth = $dbh->prepare("SELECT password FROM user_passwords WHERE user_id=$quser_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $user_password_db = $sth->fetchrow_array;

    $user_password_db=$self->decryptString("$user_password_db","$user_password");

    if ( $user_password eq $user_password_db ) {
        $match=1;
    }
}

    $sth = $dbh->prepare("SELECT changed FROM master_keys WHERE user_id=$quser_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $changed = $sth->fetchrow_array;
$changed = 0 if ! $changed;

    $sth->finish();
    $dbh->disconnect;

    return ("$match","$changed");
}


sub delete_user_key {
my ( $self,$client_id,$user_id ) = @_;
my $value;
    my $dbh = $self->_mysql_connection();
my $quser_id = $dbh->quote( $user_id );
    my $sth = $dbh->prepare("DELETE FROM user_passwords WHERE user_id=$quser_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
    return $value;
}


sub insert_device_key {
    my $self = shift;
    my %args = @_;

    my $client_id=$args{client_id};
    my $name=$args{name};
    my $comment=$args{comment};
    my $user_password=$args{user_password};
    my $device_password=$args{device_password};
    my $user_id=$args{user_id};
    my $host_id=$args{host_id};

my $master_key_enc_mime=$self->get_master_key("$client_id","$user_id");
my $master_key=$self->decryptString("$master_key_enc_mime","$user_password");
my $device_password_enc_mime=$self->encryptString("$device_password","$master_key");

    my $dbh = $self->_mysql_connection();

    my $qname = $dbh->quote( $name );
    my $qcomment = $dbh->quote( $comment );
    my $qhost_id = $dbh->quote( $host_id );
    my $qdevice_password_enc_mime = $dbh->quote( $device_password_enc_mime );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("INSERT INTO device_keys (name,comment,password,host_id,client_id) VALUES ($qname,$qcomment,$qdevice_password_enc_mime,$qhost_id,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    my $new_id=$sth->{mysql_insertid} || 0; 

    $sth->finish();
    $dbh->disconnect;

return $new_id;
}

sub update_device_key {
    my $self = shift;
    my %args = @_;

    my $client_id=$args{client_id};
    my $name=$args{name};
    my $comment=$args{comment};
    my $user_password=$args{user_password};
    my $device_password=$args{device_password};
    my $id=$args{id};
    my $user_id=$args{user_id};

my $master_key_enc_mime=$self->get_master_key("$client_id","$user_id");
my $master_key=$self->decryptString("$master_key_enc_mime","$user_password");

my $device_password_enc_mime=$self->encryptString("$device_password","$master_key");

    my $dbh = $self->_mysql_connection();

    my $qname = $dbh->quote( $name );
    my $qcomment = $dbh->quote( $comment );
    my $qid = $dbh->quote( $id );
    my $qdevice_password_enc_mime = $dbh->quote( $device_password_enc_mime );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("UPDATE device_keys SET name=$qname,comment=$qcomment,password=$qdevice_password_enc_mime WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}

sub get_device_key {
my ( $self,$client_id,$id,$user_id,$user_password ) = @_;
my $value;

my $master_key_enc_mime=$self->get_master_key("$client_id","$user_id");
my $master_key=$self->decryptString("$master_key_enc_mime","$user_password");

    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
    my $sth = $dbh->prepare("SELECT password FROM device_keys WHERE id=$qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $value = $sth->fetchrow_array;
    $sth->finish();
    $dbh->disconnect;

my $device_password=$self->decryptString("$value","$master_key");

    return $device_password;
}


sub get_device_key_hash {
my ( $self, $client_id, $vars_file, $host_id,$user_id,$user_password ) = @_;

my %lang_vars = $self->_get_vars("$vars_file");

my %values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();

my $master_key = "";
if ( $user_password ) {
    my $master_key_enc_mime=$self->get_master_key("$client_id","$user_id");
    $master_key=$self->decryptString("$master_key_enc_mime","$user_password");
}

my $host_id_expr="";
if ( $host_id ) {
    my $qhost_id = $dbh->quote( $host_id );
    $host_id_expr="AND host_id=$qhost_id";
}

    my $sth = $dbh->prepare("SELECT dk.id,dk.name,dk.comment,dk.password,dk.host_id,INET_NTOA(h.ip),h.ip FROM device_keys dk, host h WHERE h.id=dk.host_id $host_id_expr")
     or croak $self->print_error("$client_id","select<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","select<p>$DBI::errstr");

    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $name = $ip_ref->{name};
    my $comment = $ip_ref->{comment};
    my $password = $ip_ref->{password};
    my $host_id = $ip_ref->{host_id};
    my $device_password="";
    $device_password=$self->decryptString("$password","$master_key") if $user_password;
    my $ip = $ip_ref->{'INET_NTOA(h.ip)'};
    my $ip_int = $ip_ref->{ip};
    push @{$values{$id}},"$name","$comment","$password","$device_password","$host_id","$ip","$ip_int";
    }

    $sth->finish();
    $dbh->disconnect;

    return %values;
}

sub get_device_key_exists_hash {
my ( $self, $client_id ) = @_;

my %values;
my $ip_ref;
    my $dbh = $self->_mysql_connection();

    my $sth = $dbh->prepare("SELECT host_id FROM device_keys")
     or croak $self->print_error("$client_id","select<p>$DBI::errstr");

    $sth->execute() or croak $self->print_error("$client_id","select<p>$DBI::errstr");

    while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $host_id = $ip_ref->{host_id};
    $values{$host_id}++;
    }

    $sth->finish();
    $dbh->disconnect;

    return %values;
}

sub delete_device_key {
my ( $self,$client_id,$id ) = @_;
my $value;
    my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
    my $sth = $dbh->prepare("DELETE FROM device_keys WHERE id=$qid");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub PrintPasswordTab {
my ( $self,$client_id,$vars_file,$match,$host_id,$ip,$ip_version,$user_id,$user_password,$device_password_id,$all,$red_num,$show_ip,$mass_update_host_ips ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my %values_passwords;
$all="" if ! $all;
$show_ip="" if ! $show_ip;
$host_id="" if ! $host_id;
$user_password="" if ! $user_password;
$device_password_id="" if ! $device_password_id;
if ( $user_id && $user_password ) {
    %values_passwords=$self->get_device_key_hash("$client_id","$vars_file","$host_id","$user_id","$user_password");
} else {
    %values_passwords=$self->get_device_key_hash("$client_id","$vars_file","$host_id","$user_id");
}

my $user=$ENV{'REMOTE_USER'};
$user_id=$self->get_user_id("$client_id","$user");

$self->PrintJavaScriptPrint("$lang_vars{delete_password_confirm_message}");
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function get_pass(IN) {
PASS=document.getElementById("password").value;
document.getElementById("show_user_password_" + IN).value=PASS;
}
function get_pass_mod(IN) {
PASS=document.getElementById("password").value;
document.getElementById("mod_password_" + IN).value=PASS;
}
function get_pass_delete(IN) {
PASS=document.getElementById("password").value;
document.getElementById("delete_password_" + IN).value=PASS;
}
//-->
</SCRIPT>
EOF

my $hidden_vals_host_ips="";
my $anz_hosts=0;
my $j=0;
if ( $mass_update_host_ips ) {
    foreach my $key ( keys %$mass_update_host_ips ) {
        $hidden_vals_host_ips.="<input type=\"hidden\" name=\"mass_update_host_submit_${j}\" value=\"$key\">";
        $anz_hosts++;
        $j++;
    }
    $hidden_vals_host_ips.="<input type=\"hidden\" name=\"anz_hosts\" value=\"$anz_hosts\"><input type=\"hidden\" name=\"all_passwords\" value=\"$show_ip\">";
}

my $form_disabled = "";
$form_disabled = "onsubmit=\"this.disable;\"" if ! $show_ip;

if ( $show_ip ) {
    print "<span style=\"text-align: right;\">$lang_vars{user_password_message}: <input name=\"user_password\" value=\"$user_password\" type=\"password\" size=\"15\" maxlength=\"50\" id=\"password\" onclick=\"this.value = ''\"></span><p><br>\n";
} else {
    print "<span style=\"text-align: right;\"><form name=\"ip_password_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_insert_device_password_form.cgi\" style=\"display:inline;\" $form_disabled><input type=\"hidden\" name=\"client_id\" value=\"$client_id\">$lang_vars{user_password_message}: <input name=\"user_password\" value=\"$user_password\" type=\"password\" size=\"15\" maxlength=\"50\" id=\"password\" onclick=\"this.value = ''\"><input name=\"host_id\" value=\"$host_id\" type=\"hidden\"><input name=\"match\" value=\"$match\" type=\"hidden\"><input name=\"ip\" value=\"$ip\" type=\"hidden\"><input name=\"ip_version\" value=\"$ip_version\" type=\"hidden\"><input name=\"red_num\" value=\"$red_num\" type=\"hidden\">$hidden_vals_host_ips";
    print "<input type=\"submit\" class=\"input_link_w_right\" value=\"$lang_vars{insert_password_message}\" name=\"B1\"></form></span><p><br>\n";
}

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $anz=keys( %values_passwords );

if ( $anz == 0 ) {
    print "<p><br><i>$lang_vars{no_password_message}</i>\n";
    return;
}

my $show_password_fill_head="";
$show_password_fill_head="<td width=\"25%\"><font size=\"2\"><b>$lang_vars{password_message} </b></font></td>" if $user_id && $user_password;
my $show_ip_fill_head="";
$show_ip_fill_head="<td><font size=\"2\"><b>$lang_vars{spread_hosts_message}</b></font>" if $show_ip;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\">$show_ip_fill_head<td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{comentario_message} </b></font></td> $show_password_fill_head<td width=\"22px\"></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

my $sort_order_ref = sub {
    if ( $show_ip ) {
        my $A=$values_passwords{$a}->[6];
        my $B=$values_passwords{$b}->[6];
        my $C=$values_passwords{$a}->[0];
        my $D=$values_passwords{$b}->[0];
        ${A} <=> ${B} || ${C} cmp ${D};
    } else {
        my $A=$values_passwords{$a}->[0];
        my $B=$values_passwords{$b}->[0];
        ${A} cmp ${B};
    }
};

my $i=0;
foreach my $key ( sort $sort_order_ref keys %{values_passwords} ) {
    my @value=$values_passwords{$key};
    
    my $id=$key;
    my $name=$value[0]->[0];
    my $comment=$value[0]->[1] || "";
    my $password=$value[0]->[3] || "";
    my $ip_ip=$value[0]->[5] || "";
    if ( $show_ip && ! $mass_update_host_ips->{$ip_ip} ) {
        next;
    }

    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates(); get_pass_delete('$i'); return confirmation(\'$name\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    my $hidden_form_vals="<input name=\"host_id\" value=\"$host_id\" type=\"hidden\"><input name=\"ip\" value=\"$ip\" type=\"hidden\"><input name=\"ip_version\" value=\"$ip_version\" type=\"hidden\"><input name=\"user_id\" type=\"hidden\" value=\"$user_id\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"comment\" type=\"hidden\" value=\"$comment\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">$hidden_vals_host_ips";

    my $show_password_fill="";
    $show_password_fill="<td></td>" if $user_id && $user_password;
    $show_password_fill="<td>$password</td>" if $user_id && $user_password && ( $id eq $device_password_id || $all eq "all" );

    my $show_ip_fill="";
    $show_ip_fill="<td>$ip_ip</td>" if $show_ip;

    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"> $show_ip_fill <td>$name</td><td>$comment</td> $show_password_fill <td><form name=\"ip_show_password_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_show_device_password.cgi\">$hidden_form_vals <input name=\"user_password\" type=\"hidden\" value=\"\" id=\"show_user_password_${i}\"><input type=\"submit\" value=\"\" name=\"show\" class=\"eye_button\" style=\"cursor:pointer;\" title=\"$lang_vars{show_password_message}\" onclick=\"get_pass('$i');\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_device_password_form.cgi\"><input name=\"user_password\" type=\"hidden\" value=\"\" id=\"mod_password_${i}\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\" onclick=\"get_pass_mod('$i');\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_device_password.cgi\">$hidden_form_vals <input name=\"user_password\" type=\"hidden\" value=\"\" id=\"delete_password_${i}\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";

    $i++;
}
print "</table><p>\n";
print "<p><form name=\"ip_show_password_all_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_show_device_password.cgi\"><input name=\"host_id\" value=\"$host_id\" type=\"hidden\"><input name=\"ip\" value=\"$ip\" type=\"hidden\"><input name=\"ip_version\" value=\"$ip_version\" type=\"hidden\"><input name=\"user_id\" type=\"hidden\" value=\"$user_id\"><input name=\"id\" type=\"hidden\" value=\"999999\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"> <input name=\"user_password\" type=\"hidden\" value=\"\" id=\"show_user_password_${i}\"> $hidden_vals_host_ips <input type=\"submit\" name=\"show\" class=\"input_link_w_right\" style=\"cursor:pointer;\" title=\"$lang_vars{show_password_message}\" value=\"$lang_vars{show_all_passwords_message}\" onclick=\"get_pass('$i');\"></form>\n";
print "<p><br><p><br>\n";

print "<form method=\"POST\" name=\"list_host\" action=\"$server_proto://$base_uri/ip_show.cgi\"><input name=\"ip_version\" type=\"hidden\" value=\"$ip_version\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"red_num\" type=\"hidden\" value=\"$red_num\"><input type=\"submit\" name=\"show\" class=\"input_link_w\" style=\"cursor:pointer;\" title=\"$lang_vars{show_password_message}\" value=\"$lang_vars{return_to_network_message}\"></form>\n";


print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
<script type="text/javascript">
document.ip_password_form.user_password.focus();
</script>
EOF

}

# PRTG GROUP VIEW


sub get_prtg_groups {
my ( $self,$client_id ) = @_;
my (@values,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id, host_id, parent_group, device, snmp_contact, snmp_location FROM prtg_parent_group WHERE client_id=$qclient_id order by (parent_group)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values;
}


sub PrintPRTGGroupTab {
my ( $self,$client_id,$values,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $j=0;
my $anz=@{$values};
$anz--;

print "<table id=\"prtg_group_table\" data-page-length='50' class=\"stripe hover\", width=\"100%\">\n";
print "<thead>\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{parent_group_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{device_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{loci_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{contact_message} </font></b></td></tr>\n";
print "</thead>\n";
print "<tbody>\n";

#    id, host_id, parent_group, device, snmp_contact, snmp_location
foreach my $refs(@{$values}) {
    my $parent_group = @{$values}[$j]->[2];
    my $device = @{$values}[$j]->[3] || "";
    my $k=$j+1;
    my $l=$j-1;
    my $location = @{$values}[$j]->[5];
    my $contact = @{$values}[$j]->[4] || "";
    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'Parent Group Device\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }


    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$parent_group</td><td align=\"center\">$device</td><td>$location</td><td>$contact</td>";
    print "</tr>\n";
    $j++;
}
print "</tbody>\n";
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
//scrollToCoordinates();
//-->
</SCRIPT>
EOF

}

# DNS SCAN ZONE MANAGEMENT


sub get_network_scan_zones {
    my ( $self, $client_id, $id, $type ) = @_;

    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );
    my $qtype = $dbh->quote( $type );
    my $qclient_id = $dbh->quote( $client_id );
    debug("SELECT t.id, t.name, t.description, t.type, t.client_id FROM dns_zone t WHERE t.type=$qtype AND t.id IN ( SELECT te.zone_id from scan_zone_entries_network te WHERE te.net_id=$qid ) AND ( t.client_id=$qclient_id OR t.client_id='9999' ) ORDER BY id");
    my $sth = $dbh->prepare("SELECT t.id, t.name, t.description, t.type, t.client_id FROM dns_zone t WHERE t.type=$qtype AND t.id IN ( SELECT te.zone_id from scan_zone_entries_network te WHERE te.net_id=$qid ) AND ( t.client_id=$qclient_id OR t.client_id='9999' ) ORDER BY id"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;

    return @values;
}

sub get_dns_zone_hash_object {
	my ( $self, $client_id, $type ) = @_;

	my $dbh = $self->_mysql_connection();
	my $ip_ref;
	my %values;

	my $type_expr = "";
	if ( $type ) {
        if ( $type eq "AAA" or $type eq "AAAA" ) {
            my $qtype1 = $dbh->quote( "AAA" );
            my $qtype2 = $dbh->quote( "AAAA" );
            $type_expr = "AND ( z.type=$qtype1 OR z.type=$qtype2 )";
        } else {
            my $qtype = $dbh->quote( $type );
            $type_expr = "AND z.type=$qtype";
        }
	}

	debug("SELECT s.net_id, s.zone_id FROM scan_zone_entries_network s, dns_zone z WHERE z.id=s.zone_id $type_expr");
	my $sth = $dbh->prepare("SELECT s.net_id, s.zone_id FROM scan_zone_entries_network s, dns_zone z WHERE z.id=s.zone_id $type_expr
					") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
	$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	while ( $ip_ref = $sth->fetchrow_hashref ) {
		my $obj_id = $ip_ref->{net_id};
		my $zone_id = $ip_ref->{zone_id};
		push @{$values{$obj_id}},"$zone_id";
	}
	$sth->finish();
	$dbh->disconnect;

	return %values;
}


sub delete_scan_zone_from_net {
my ( $self, $client_id, $zone_id, $red_num ) = @_;

	my @values;
	my $ip_ref;
	my $dbh = $self->_mysql_connection();
	my $qzone_id = $dbh->quote( $zone_id );
	my $qred_num = $dbh->quote( $red_num );
	debug("DELETE FROM scan_zone_entries_network WHERE net_id=$qred_num AND zone_id=$qzone_id");
	my $sth = $dbh->prepare("DELETE FROM scan_zone_entries_network WHERE net_id=$qred_num AND zone_id=$qzone_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->finish();
	$dbh->disconnect;
}




sub print_network_scan_zones {
    my ( $self, $client_id, $id, $type, $name, $select_id, $values, $selected_value_arg) = @_;

    $id = "" if ! $id;
    $selected_value_arg = "" if ! $selected_value_arg;

    my $selected_value = "";
    my @values;
    if ( ! $values ) {
        @values = $self->get_dns_zones("$client_id","","","$type");
        $values = \@values;
    } else {
        @values = @$values;
    }

    my @object_tags = $self->get_network_scan_zones("$client_id", "$id","$type");
    my %object_tags;

    my $n=0;
    foreach (@object_tags) {
        my $id = $object_tags[$n]->[0];
        my $name = $object_tags[$n]->[1];
        $object_tags{$name}=$id;
        $n++;
    }

    my ($form_elements, @item_order, %items, $opt_name, $opt_value);

    my $j = 0;
    push @item_order, "";
    foreach my $opt(@values) {
        $opt_name = $values[$j]->[1] || "";
        my $id_opt = $values[$j]->[0] || "";
        push @item_order, $opt_name;
        $items{$opt_name} = $id_opt;
        if ( $object_tags{$opt_name} && ! $selected_value_arg) {
            $selected_value .= "|$id_opt";
        }
        $j++;
    }
    if ( $selected_value_arg ) {
        $selected_value = $selected_value_arg;
    } else {
        $selected_value =~ s/^\|//;
    }
    $form_elements .= GipTemplate::create_form_element_select(
        name => $name,
        item_order => \@item_order,
        items => \%items,
        selected_value => $selected_value,
        id => "$select_id",
        width => "10em",
        size => 3,
        multiple => "multiple",
    );

    return $form_elements;
}


sub insert_scan_zone_for_object {
    my ( $self, $client_id, $zone_id, $object_id) = @_;

    my ($table, $col_name);
    $table = "scan_zone_entries_network";
    $col_name = "net_id";

    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qzone_id = $dbh->quote( $zone_id );
    my $qobject_id = $dbh->quote( $object_id );
    my $qcol_name = $dbh->quote( $col_name );

    debug("INSERT INTO $table (zone_id, $col_name) VALUES ($qzone_id, $qobject_id)");
    my $sth = $dbh->prepare("INSERT INTO $table (zone_id, $col_name) VALUES ($qzone_id, $qobject_id)") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub insert_scan_zone_for_network_object_mass_update {
my ( $self, $client_id, $id, $mass_update_ids ) = @_;

	my @values_ids = split("_", $mass_update_ids);

	my $ip_ref;
	my $dbh = $self->_mysql_connection();

	my $qid = $dbh->quote( $id );

	my $sth;
	foreach my $net_id (@values_ids) {
		my $qnet_id = $dbh->quote( $net_id );
		debug("INSERT INTO scan_zone_entries_network (zone_id, net_id) VALUES ($qid, $qnet_id)");
		$sth = $dbh->prepare("INSERT INTO scan_zone_entries_network (zone_id, net_id) VALUES ($qid, $qnet_id)"
			) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
		$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	}
	$sth->finish();
	$dbh->disconnect;
}

sub delete_scan_zone_from_object {
	my ( $self, $client_id, $tag_id, $object_id ) = @_;

	my @values;
	my $ip_ref;
	my $dbh = $self->_mysql_connection();
	my $qtag_id = $dbh->quote( $tag_id );
	my $qobject_id = $dbh->quote( $object_id );
	debug("DELETE FROM scan_zone_entries_network WHERE net_id=$qobject_id AND zone_id=$qtag_id)");
	my $sth = $dbh->prepare("DELETE FROM scan_zone_entries_network WHERE net_id=$qobject_id AND zone_id=$qtag_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->finish();
	$dbh->disconnect;
}


sub delete_scan_zone_from_network_object_mass_update {
	my ( $self, $client_id, $mass_update_ids, $type ) = @_;

	my $or_red_expr = $mass_update_ids;
	if ( $or_red_expr =~ /_/ ) {
		$or_red_expr =~ s/_/' OR net_id = '/g;
		$or_red_expr =~ s/^/net_id = '/;
		$or_red_expr =~ s/$/'/;
	} else {
		$or_red_expr="net_id = \"$or_red_expr\"";
	}

	my @values;
	my $ip_ref;
	my $dbh = $self->_mysql_connection();
	my $qtype = $dbh->quote( $type );
	debug("DELETE FROM scan_zone_entries_network WHERE ($or_red_expr) AND zone_id in (SELECT id from dns_zone WHERE type=$qtype)");
	my $sth = $dbh->prepare("DELETE FROM scan_zone_entries_network WHERE ($or_red_expr) AND zone_id in (SELECT id from dns_zone WHERE type=$qtype)"
		) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->finish();
	$dbh->disconnect;
}


# DNS ZONE MANAGEMENT

sub get_dns_user {
my ( $self,$client_id, $id ) = @_;
my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qid = $dbh->quote( $id ) if $id;;

my $filter = "";
$filter = " AND id=$qid" if $id;

my $sth = $dbh->prepare("SELECT id, name, password, realm, description, client_id FROM dns_user WHERE (client_id = $qclient_id || client_id='9999') $filter") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
    $dbh->disconnect;
    return @values;
}

sub insert_dns_user {
my ( $self,$client_id, $name, $password, $realm, $description) = @_;
my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );
my $qdescription = $dbh->quote( $description );
my $qpassword = $dbh->quote( $password );
my $qrealm = $dbh->quote( $realm );
my $qclient_id = $dbh->quote( $client_id );
debug("INSERT INTO dns_user (name, description, password, realm, client_id) VALUES ( $qname,$qdescription,$qpassword,$qrealm,$qclient_id");
my $sth = $dbh->prepare("INSERT INTO dns_user (name, description, password, realm, client_id) VALUES ( $qname,$qdescription,$qpassword,$qrealm,$qclient_id)"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_dns_user {
my ( $self, $client_id, $id, $name, $password, $realm, $description ) = @_;
my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );
my $qdescription = $dbh->quote( $description ) || "";
my $qpassword = $dbh->quote( $password );
my $qrealm = $dbh->quote( $realm );
my $qclient_id = $dbh->quote( $client_id );
my $qid = $dbh->quote( $id );

debug("UPDATE dns_user SET name=$qname,description=$qdescription,password=$qpassword,realm=$qrealm WHERE id=$qid");
my $sth = $dbh->prepare("UPDATE dns_user SET name=$qname,description=$qdescription,password=$qpassword,realm=$qrealm WHERE id=$qid"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub delete_dns_user {
my ( $self,$client_id, $id ) = @_;
my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("DELETE FROM dns_user WHERE id=$qid"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub check_dns_user_in_use {
my ( $self, $client_id, $dns_user_id ) = @_;
my (@values,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qdns_user_id = $dbh->quote( $dns_user_id );

my $sth = $dbh->prepare("SELECT name FROM dns_zone WHERE dns_user_id=$dns_user_id AND client_id = $qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values;
}


sub check_dns_zone_name_exists {
my ( $self,$client_id, $name ) = @_;
my $value;
my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id FROM dns_zone WHERE name=$qname AND (client_id = $qclient_id || client_id='9999')
                ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$value = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $value;
}

sub get_dns_zone_name_from_id {
my ( $self,$client_id, $id ) = @_;
my $value;
my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $sth = $dbh->prepare("SELECT name FROM dns_zone WHERE id=$qid
                ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$value = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;
return $value;
}

sub get_dns_zones {
    my ( $self, $client_id, $id, $name, $type ) = @_;

    my (@values,$ip_ref);
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $qid = $dbh->quote( $id ) if $id;
    my $qname = $dbh->quote( $name ) if $name;

    my $type_expr = "";
    if ( $type ) {
        if ( $type eq "AAA" or $type eq "AAAA" ) {
            my $qtype1 = $dbh->quote( "AAA" );
            my $qtype2 = $dbh->quote( "AAAA" );
            $type_expr = "AND ( z.type=$qtype1 OR z.type=$qtype2 )";
        } else {
            my $qtype = $dbh->quote( $type );
            $type_expr = "AND z.type=$qtype";
        }
    }

    my $filter = "";
    $filter = " AND z.id=$qid" if $id;
    $filter = " AND z.name=$qname" if $name && ! $id;
    $filter .= " $type_expr" if $type;

    my $sth;
    debug("SELECT DISTINCT z.id, z.name, z.description, z.type, z.dns_user_id, z.ttl, u.name, z.dyn_dns_server, z.server_type FROM dns_zone z, dns_user u, clients c WHERE z.dns_user_id=u.id AND z.client_id=$qclient_id AND z.server_type='GSS-TSIG' $filter");
    $sth = $dbh->prepare("SELECT DISTINCT z.id, z.name, z.description, z.type, z.dns_user_id, z.ttl, u.name, z.dyn_dns_server, z.server_type FROM dns_zone z, dns_user u, clients c WHERE z.dns_user_id=u.id AND z.client_id=$qclient_id AND z.server_type='GSS-TSIG' $filter");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }

    debug("SELECT z.id, z.name, z.description, z.type, z.dns_user_id, z.ttl, d.tsig_key, z.dyn_dns_server, z.server_type FROM dns_zone z, dns_keys d WHERE z.dns_user_id=d.id AND z.client_id=$qclient_id AND z.server_type='TSIG' $filter");
    $sth = $dbh->prepare("SELECT z.id, z.name, z.description, z.type, z.dns_user_id, z.ttl, d.tsig_key, z.dyn_dns_server, z.server_type FROM dns_zone z, dns_keys d WHERE z.dns_user_id=d.id AND z.client_id=$qclient_id AND z.server_type='TSIG' $filter");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }

    debug("SELECT z.id, z.name, z.description, z.type, z.dns_user_id, z.ttl, z.ttl, z.dyn_dns_server, z.server_type FROM dns_zone z WHERE z.client_id=$qclient_id AND  z.server_type!='GSS-TSIG' AND z.server_type!='TSIG' $filter");
    $sth = $dbh->prepare("SELECT z.id, z.name, z.description, z.type, z.dns_user_id, z.ttl, z.ttl, z.dyn_dns_server, z.server_type FROM dns_zone z WHERE z.client_id=$qclient_id AND  z.server_type!='GSS-TSIG' AND z.server_type!='TSIG' $filter");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }

    my @values_sorted = sort {$a->[1] cmp $b->[1]} @values;

    $dbh->disconnect;
    $sth->finish(  );
    return @values_sorted;
}

sub get_dns_zone_hash {
    my ( $self, $client_id, $key ) = @_;

    $key = "" if ! $key;
    my (%values, $ip_ref);

    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("SELECT id, name FROM dns_zone WHERE client_id=$qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{id};
        my $name = $ip_ref->{name};
        if ( $key eq "name" ) {
            $values{$name} = "$id";
        } else {
            $values{$id} = "$name";
        }
    }

    $dbh->disconnect;
    $sth->finish(  );

    return %values;
}

sub insert_dns_zone {
my ( $self,$client_id, $name, $description, $type, $dns_user_id, $ttl, $dyn_dns_server, $server_type) = @_;
my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );
my $qdescription = $dbh->quote( $description );
my $qtype = $dbh->quote( $type );
my $qdns_user_id = $dbh->quote( $dns_user_id );
my $qttl = $dbh->quote( $ttl );
my $qdyn_dns_server = $dbh->quote( $dyn_dns_server );
my $qserver_type = $dbh->quote( $server_type );
my $qclient_id = $dbh->quote( $client_id );

my $sth;
if ( $dns_user_id ) {
    debug("INSERT INTO dns_zone (name, description, type, dns_user_id, ttl, dyn_dns_server, client_id, server_type) VALUES ( $qname,$qdescription,$qtype,$qdns_user_id,$qttl,$qdyn_dns_server,$qclient_id, $qserver_type");
    $sth = $dbh->prepare("INSERT INTO dns_zone (name, description, type, dns_user_id, ttl, dyn_dns_server, client_id, server_type) VALUES ( $qname,$qdescription,$qtype,$qdns_user_id,$qttl,$qdyn_dns_server,$qclient_id, $qserver_type)"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} else {
    debug("INSERT INTO dns_zone (name, description, type, ttl, dyn_dns_server, client_id, server_type) VALUES ( $qname,$qdescription,$qtype,$qttl,$qdyn_dns_server,$qclient_id, $qserver_type");
    $sth = $dbh->prepare("INSERT INTO dns_zone (name, description, type, ttl, dyn_dns_server, client_id, server_type) VALUES ( $qname,$qdescription,$qtype,$qttl,$qdyn_dns_server,$qclient_id, $qserver_type)"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_dns_zone {
my ( $self,$client_id, $id, $name, $description, $type, $dns_user_id, $ttl, $dyn_dns_server, $server_type ) = @_;

$dns_user_id = "" if ! $dns_user_id;

my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );
my $qdescription = $dbh->quote( $description ) || "";
my $qtype = $dbh->quote( $type );
my $qdns_user_id = $dbh->quote( $dns_user_id );
my $qttl = $dbh->quote( $ttl );
my $qdyn_dns_server = $dbh->quote( $dyn_dns_server );
my $qid = $dbh->quote( $id );
my $qserver_type = $dbh->quote( $server_type );
my $qclient_id = $dbh->quote( $client_id );

my $sth;
if ( $dns_user_id ) {
    $sth = $dbh->prepare("UPDATE dns_zone SET name=$qname,description=$qdescription,type=$qtype,ttl=$qttl,dns_user_id=$dns_user_id,dyn_dns_server=$qdyn_dns_server, server_type=$qserver_type WHERE id=$qid"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} else {
    $sth = $dbh->prepare("UPDATE dns_zone SET name=$qname,description=$qdescription,type=$qtype,ttl=$qttl,dns_user_id=NULL,dyn_dns_server=$qdyn_dns_server, server_type=$qserver_type WHERE id=$qid"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub delete_dns_zone {
    my ( $self,$client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );
    my $qclient_id = $dbh->quote( $client_id );

    debug("DELETE FROM custom_net_column_entries WHERE cc_id = (SELECT id from custom_net_columns WHERE name='DNSZone') AND entry = ( SELECT name FROM dns_zone WHERE id=$qid )");
    my $sth = $dbh->prepare("DELETE FROM custom_net_column_entries WHERE cc_id = (SELECT id from custom_net_columns WHERE name='DNSZone') AND entry = ( SELECT name FROM dns_zone WHERE id=$qid )"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    debug("DELETE FROM scan_zone_entries_network WHERE zone_id=$qid");
    $sth = $dbh->prepare("DELETE FROM scan_zone_entries_network WHERE zone_id=$qid"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    debug("DELETE FROM dns_zone WHERE id=$qid");
    $sth = $dbh->prepare("DELETE FROM dns_zone WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}


sub dyn_update_dns {
my ($self, $ip_version, $dyn_dns_update, $dns_user_name, $dns_user_password, $realm, $dyn_dns_zone_name, $dyn_dns_ptr_zone_name, $server, $hostname, $ip, $ttl, $old_hostname, $BM, $server_type, $tsig_key, $tsig_key_name) = @_;

    debug("DYN UPDATE - $ip_version, $dyn_dns_update, $dns_user_name, $dns_user_password, $realm, $dyn_dns_zone_name, $dyn_dns_ptr_zone_name, $server, $hostname, $ip, $ttl, $old_hostname, $BM, $server_type, $tsig_key, $tsig_key_name");

if ( ! $server ) {
    return 500;
}

my $arpa_ip = "none";
my $dyn_dns_zone_name_arpa = "none";
$tsig_key = "" if ! $tsig_key;
$tsig_key_name = "" if ! $tsig_key_name;

$dns_user_name = "NO_USERNAME_DUMMY" if ! $dns_user_name;
$dns_user_password = "NO_USERNAME_PASS_DUMMY" if ! $dns_user_password;
$realm = "NO_REALM_DUMMY" if ! $realm;
$old_hostname = "NO_OLD_HOST_DUMMY" if ! $old_hostname;
$tsig_key = "NO_TSIG_KEY_DUMMY" if ! $tsig_key;
$tsig_key_name = "NO_TSIG_KEY_NAME_DUMMY" if ! $tsig_key_name;
$ttl = "NO_TTL_ERROR" if ! $ttl;


# Write exclude file to avoid ping-pong updates
my $type = "A";
$type = "AAAA" if $ip_version eq "v6";
my $exclude_file = "/usr/share/gestioip/var/data/exclude_records_check.txt";

open(EX_FI,">>$exclude_file") or croak "Can not open DNS exclude file $exclude_file: $!\n";

print EX_FI "$hostname $type $ip\n";

close EX_FI;

#	($arpa_ip, $dyn_dns_zone_name_arpa) = $self->create_ptr_address("$ip","$ip_version","$BM");
$arpa_ip = $self->create_ptr_address("$ip","$ip_version","$BM");

my $command="/usr/share/gestioip/bin/gip_make_dyn_dns_update.sh";

my $command_options = "$dyn_dns_update $dns_user_name $dns_user_password $realm $dyn_dns_zone_name $server $hostname $ip $arpa_ip $dyn_dns_ptr_zone_name $ttl $old_hostname $ip_version $tsig_key $tsig_key_name $DEBUG";

$command .= " " . $command_options;

my $devnull = "/dev/null";
$command .= " 2>&1";

$command =~ /^(.*)$/;
$command = $1;

debug("Executing: $command");
my $exit_status = system("$command") >> 8;

return $exit_status;
}


sub create_ptr_address {
my ($self, $ip, $ip_version, $BM) = @_;
$ip_version = "v4" if ! $ip_version;
my $arpa_addr;
my $dyn_dns_zone_name_arpa;
if ( $ip_version eq "v4" ) {
    $ip =~ /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
    my $oc1 = $1;
    my $oc2 = $2;
    my $oc3 = $3;
    my $oc4 = $4;
    $arpa_addr = $oc4 . "." . $oc3 . "." . $oc2 . "." . $oc1 . ".in-addr.arpa.";
    $dyn_dns_zone_name_arpa = $arpa_addr;
    $dyn_dns_zone_name_arpa =~ s/^\d{1,3}\.//;
} else {
    my $ip = ip_expand_address ($ip, 6);

    my $nibbles_pre=$ip;
    $nibbles_pre =~ s/://g;
    my @nibbles=split(//,$nibbles_pre);
    my @nibbles_reverse=reverse @nibbles;
    my $nibbles="";

    my $rest=128-$BM;
    my $red_part_helper = ($rest-1)/4;
    my $bc="1";
    if ( $red_part_helper =~ /\./ ) {
        $red_part_helper =~ /\d\.(\d)/;
        $bc=$1;
    }

    $red_part_helper =~ s/\.\d*//;
    $red_part_helper++ if $bc > 5;

    my $i = 0;
    foreach my $num (@nibbles_reverse ) {
        if ( $i < $red_part_helper ) {
            $i++;
            next;
        }
        $nibbles.="." . $num;
        $i++;
    }
    $dyn_dns_zone_name_arpa .= $nibbles . ".ip6.arpa";
    $dyn_dns_zone_name_arpa =~ s/^\.//;

    $nibbles = "";
    foreach my $num (@nibbles_reverse ) {
        $nibbles.="." . $num;
    }
    $arpa_addr .= $nibbles . ".ip6.arpa";
    $arpa_addr =~ s/^\.//;
}

#    return $arpa_addr, $dyn_dns_zone_name_arpa;
return $arpa_addr;
}

sub PrintDNSZoneTab {
my ( $self,$client_id,$ll_values,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my %dns_key_hash = $self->get_dns_key_id_name_hash("$client_id");
my @global_config = $self->get_global_config("$client_id");
my $dyn_dns_updates_enabled = $global_config[0]->[19] || "no";


print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('net_scrollx');
var y = readCookie('net_scrolly');
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('net_scrollx', x, 0);
createCookie('net_scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}
// -->
</SCRIPT>


<script type="text/javascript">
<!--
function confirmation(NET,TYPE) {

    if (TYPE == 'delete'){
            answer = confirm(NET + ": $lang_vars{delete_ll_confirme_message}")
    }

    if (answer){
            return true;
    }
    else{
            return false;
    }
}
//-->
</script>


EOF

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $j=0;
my $anz=@{$ll_values};
$anz--;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
if ( $dyn_dns_updates_enabled eq "yes" ) {
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{description_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{tipo_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{ttl_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{dns_server_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{server_type_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{user_key_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";
} else {
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{description_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{tipo_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";
}
#	my $sth = $dbh->prepare("SELECT z.id, z.name, z.type, z.dns_user_id, z.ttl, u.name FROM dns_zone z, dns_user u, clients c WHERE z.dns_user_id=u.id AND z.client_id=$qclient_id order by (z.name)");

foreach my $refs(@{$ll_values}) {
    my $id = @{$ll_values}[$j]->[0];
    my $name = @{$ll_values}[$j]->[1] || "";
    my $k=$j+1;
    my $l=$j-1;
    my $description = @{$ll_values}[$j]->[2];
    my $type = @{$ll_values}[$j]->[3];
    $type = "AAAA" if $type eq "AAA";
    my $dns_user_id = @{$ll_values}[$j]->[4] || "";
    my $ttl = @{$ll_values}[$j]->[5] || "";
    my $dns_user_name = @{$ll_values}[$j]->[6] || "";
    $dns_user_name = "" if $dns_user_name eq $ttl;
    my $dyn_dns_server = @{$ll_values}[$j]->[7];
    my $server_type = @{$ll_values}[$j]->[8];
    if ( $server_type eq "TSIG" ) {
        $dns_user_name = $dns_key_hash{"$dns_user_id"};
    }

    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    if ( $dyn_dns_updates_enabled eq "yes" ) {
        print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td><td align=\"center\">$description</td><td>$type</td><td>$ttl</td><td>$dyn_dns_server</td><td>$server_type</td><td>$dns_user_name</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_dns_zone_form.cgi\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"type\" type=\"hidden\" value=\"$type\"><input name=\"dyn_dns_server\" type=\"hidden\" value=\"$dyn_dns_server\"><input name=\"dns_user_id\" type=\"hidden\" value=\"$dns_user_id\"><input name=\"ttl\" type=\"hidden\" value=\"$ttl\"><input name=\"server_type\" type=\"hidden\" value=\"$server_type\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_dns_zone.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    } else {
        print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td><td align=\"center\">$description</td><td>$type</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_dns_zone_form.cgi\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"type\" type=\"hidden\" value=\"$type\"><input name=\"dyn_dns_server\" type=\"hidden\" value=\"$dyn_dns_server\"><input name=\"dns_user_id\" type=\"hidden\" value=\"$dns_user_id\"><input name=\"ttl\" type=\"hidden\" value=\"$ttl\"><input name=\"server_type\" type=\"hidden\" value=\"$server_type\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_dns_zone.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    }

    print "</tr>\n";
    $j++;
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF
}


sub PrintDNSUserTab {
my ( $self,$client_id,$ll_values,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";

print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('net_scrollx');
var y = readCookie('net_scrolly');
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('net_scrollx', x, 0);
createCookie('net_scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}
// -->
</SCRIPT>


<script type="text/javascript">
<!--
function confirmation(NET,TYPE) {

    if (TYPE == 'delete'){
            answer = confirm(NET + ": $lang_vars{delete_ll_confirme_message}")
    }

    if (answer){
            return true;
    }
    else{
            return false;
    }
}
//-->
</script>


EOF

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $j=0;
my $anz=@{$ll_values};
$anz--;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{realm_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{description_message} </b></font></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

# SELECT id, name, password, realm, description, client_id FROM dns_user WHERE (client_id = $qclient_id || client_id='9999'

foreach my $refs(@{$ll_values}) {
    my $id = @{$ll_values}[$j]->[0];
    my $name = @{$ll_values}[$j]->[1] || "";
    my $password = @{$ll_values}[$j]->[2] || "";
    my $realm = @{$ll_values}[$j]->[3];
    my $description = @{$ll_values}[$j]->[4];
    my $k=$j+1;
    my $l=$j-1;

    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td><td align=\"center\">$realm</td><td align=\"center\">$description</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_dns_user_form.cgi\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"realm\" type=\"hidden\" value=\"$realm\"><input name=\"password\" type=\"hidden\" value=\"$password\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_dns_user.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
    $j++;
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF
}



#### Network usage column

sub get_red_usage {
my ( $self, $client_id, $ip_version, $red_num, $BM) = @_;

if ( ! $BM || ! $ip_version ) {
    my @values_redes=$self->get_red("$client_id","$red_num");
    $BM = "$values_redes[0]->[1]" || "";
    $ip_version = "$values_redes[0]->[7]" || "";
}

my %anz_hosts = $self->get_anz_hosts_bm_hash("$client_id","$ip_version");
my $ip_total=$anz_hosts{$BM};
$ip_total =~ s/,//g;

if ( $ip_version eq "v4" ) {
       $ip_total = $ip_total - 2;
       $ip_total = 2 if $BM == 31;
       $ip_total = 1 if $BM == 32;
}

my $ip_ocu=$self->count_host_entries("$client_id","$red_num");
my $free=$ip_total-$ip_ocu;
my ($free_calc,$percent_free,$ip_total_calc,$percent_ocu,$ocu_color);

if ( $free == 0 ) { 
    $percent_free = '0%';
} elsif ( $free == $ip_total ) {
    $percent_free = '100%';
} else {
    $free_calc = $free . ".0"; 
    $ip_total_calc = $ip_total . ".0";
    $percent_free=100*$free_calc/$ip_total_calc;
    $percent_free =~ /^(\d+\.?\d?).*/;
    $percent_free = $1 . '%';
}
if ( $ip_ocu == 0 ) {
    $percent_ocu = '0%';
} elsif ( $ip_ocu == $ip_total ) {
    $percent_ocu = '100%';
} else {
    $ip_total_calc = $ip_total . ".0";
    $percent_ocu=100*$ip_ocu/$ip_total_calc;
    if ( $percent_ocu =~ /e/ ) {
        $percent_ocu="0.1"
    } else {
        $percent_ocu =~ /^(\d+\.?\d?).*/;
        $percent_ocu = $1;
    }
    $percent_ocu = $percent_ocu . '%';
}

return ($ip_total, $ip_ocu, $free);
}


sub update_net_usage_cc_column {
my ($self, $client_id, $ip_version, $red_num, $BM, $no_rootnet) = @_;

# Check if usage column is enabled
my @cc_usage = $self->get_custom_column_ids_from_name("$client_id","usage");
my $cc_usage_enabled = 0;
$cc_usage_enabled = 1 if $cc_usage[0];
return if $cc_usage_enabled != 1;

my $rootnet = "";
if ( ! $BM || ! $ip_version || ! $no_rootnet ) {
    my @values_redes=$self->get_red("$client_id","$red_num");
    $BM = "$values_redes[0]->[1]" || "";
    $ip_version = "$values_redes[0]->[7]" || "";
    $rootnet = "$values_redes[0]->[9]" || "";
}

# no usage value for rootnetworks
return if $rootnet eq 1;

my ($ip_total, $ip_ocu, $free) = $self->get_red_usage("$client_id", "$ip_version", "$red_num", "$BM");
my $cc_id_usage = $self->get_custom_column_id_from_name("$client_id", "usage") || "";
my $cc_usage_entry = "$ip_total,$ip_ocu,$free" || "";
$self->update_or_insert_custom_column_value_red("$client_id", "$cc_id_usage", "$red_num", "$cc_usage_entry") if $cc_id_usage && $cc_usage_entry;
}

# ACLs



sub insert_acl {
my ( $self, $client_id, $action, $protocol, $src, $src_wmask, $src_port, $src_operator, $dst, $dst_wmask, $dst_port, $dst_operator, $icmp_type) = @_;

my $dbh = $self->_mysql_connection();

my $qaction = $dbh->quote( $action ) || "";
my $qprotocol = $dbh->quote( $protocol ) || "";
my $qsrc = $dbh->quote( $src ) || "";
my $qsrc_wmask = $dbh->quote( $src_wmask ) || "";
my $qsrc_port = $dbh->quote( $src_port ) || "";
my $qsrc_operator = $dbh->quote( $src_operator ) || "";
my $qdst = $dbh->quote( $dst ) || "";
my $qdst_wmask = $dbh->quote( $dst_wmask ) || "";
my $qdst_port = $dbh->quote( $dst_port ) || "";
my $qdst_operator = $dbh->quote( $dst_operator ) || "";
my $qicmp_type = $dbh->quote( $icmp_type ) || "";
my $qclient_id = $dbh->quote( $client_id ) || "";

my $proto_expr = "proto_id=(SELECT protocol_nr FROM protocols WHERE protocol_name=$qprotocol)";
if ( $protocol =~ /^\d$/ ) {
    $proto_expr = "proto_id=$qprotocol";
}

my $check_value = "";
my $sth = $dbh->prepare("SELECT src FROM acl_list WHERE src=$qsrc AND src_wmask=$qsrc_wmask AND src_port=$qsrc_port AND src_operator=$qsrc_operator AND dst=$qdst AND dst_wmask=$qdst_wmask AND dst_port=$qdst_port AND dst_operator=$qdst_operator AND $proto_expr AND action=$qaction AND icmp_type=$qicmp_type AND client_id=$qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$check_value = $sth->fetchrow_array || "";

if ( ! $check_value ) {
    $sth = $dbh->prepare("INSERT INTO acl_list (src, src_wmask, src_port, src_operator, dst, dst_wmask, dst_port, dst_operator, proto_id, action, icmp_type, client_id) VALUES ($qsrc, $qsrc_wmask, $qsrc_port, $qsrc_operator, $qdst, $qdst_wmask, $qdst_port, $qdst_operator, (SELECT protocol_nr FROM protocols WHERE protocol_name=$qprotocol), $qaction, $qicmp_type, $qclient_id)"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
$sth->finish();
$dbh->disconnect;

return $check_value;
}

sub get_acls {
my ( $self, $client_id, $id ) = @_;
my (@values,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qid = $dbh->quote( $id ) if $id;

my $filter = "";
$filter = " AND z.id=$qid" if $id;

my $sth = $dbh->prepare("SELECT a.id, a.src, a.src_wmask, a.src_port, a.src_operator, a.dst, a.dst_wmask, a.dst_port, a.dst_operator, a.proto_id, p.protocol_name, a.action, a.icmp_type, a.client_id, a.con_exists FROM acl_list a, protocols p WHERE a.client_id=$qclient_id AND a.proto_id=p.protocol_nr $filter ORDER BY id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values;
}


sub search_acl {
my ( $self,$client_id, $match ) = @_;
my @values;
my $ip_ref;

my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $order_by_expr = "";

#my $sth = $dbh->prepare("SELECT a.id, a.src, a.src_wmask, a.src_port, a.src_operator, a.dst, a.dst_wmask, a.dst_port, a.dst_operator, a.proto_id, p.protocol_name, a.action, a.icmp_type, a.client_id FROM acl_list a, protocols p WHERE a.proto_id=p.protocol_nr AND (a.src LIKE \"%$match%\" OR a.src_wmask LIKE \"%$match%\" OR a.src_port LIKE \"%$match%\" OR a.src_operator LIKE \"%$match%\" OR a.dst LIKE \"%$match%\" OR a.dst_wmask LIKE \"%$match%\" OR a.dst_port LIKE \"%$match%\" OR a.dst_operator LIKE \"%$match%\" OR a.dst LIKE \"%$match%\" OR a.dst_wmask LIKE \"%$match%\" OR a.dst_port LIKE \"%$match%\" OR a.dst_operator LIKE \"%$match%\" OR a.action LIKE \"%$match%\" OR p.protocol_name=(SELECT p.protocol_name FROM protocols WHERE p.protocol_nr LIKE \"%$match%\")) AND a.client_id=$qclient_id $order_by_expr
my $sth = $dbh->prepare("SELECT a.id, a.src, a.src_wmask, a.src_port, a.src_operator, a.dst, a.dst_wmask, a.dst_port, a.dst_operator, a.proto_id, p.protocol_name, a.action, a.icmp_type, a.client_id FROM acl_list a, protocols p WHERE a.proto_id=p.protocol_nr AND (a.proto_id LIKE \"%$match%\" OR a.proto_id IN (SELECT p.protocol_nr WHERE p.protocol_name LIKE \"%$match%\" ) OR a.src LIKE \"%$match%\" OR a.src_wmask LIKE \"%$match%\" OR a.src_port LIKE \"%$match%\" OR a.src_operator LIKE \"%$match%\" OR a.dst LIKE \"%$match%\" OR a.dst_wmask LIKE \"%$match%\" OR a.dst_port LIKE \"%$match%\" OR a.dst_operator LIKE \"%$match%\" OR a.dst LIKE \"%$match%\" OR a.dst_wmask LIKE \"%$match%\" OR a.dst_port LIKE \"%$match%\" OR a.dst_operator LIKE \"%$match%\" OR a.action LIKE \"%$match%\" OR p.protocol_name=(SELECT p.protocol_name FROM protocols WHERE p.protocol_nr LIKE \"%$match%\")) AND a.client_id=$qclient_id $order_by_expr
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish();

return @values;
}

sub delete_acls {
my ( $self,$client_id, $id_list ) = @_;

my $id_expr = "";
if ( $id_list ) {
	$id_expr = " WHERE id IN ( $id_list )";
}
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $sth = $dbh->prepare("DELETE FROM acl_list $id_expr"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}




sub PrintACLTab {
my ( $self,$client_id,$values,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";

print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('net_scrollx');
var y = readCookie('net_scrolly');
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('net_scrollx', x, 0);
createCookie('net_scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function MassOnSubmitForm(ANZ,OBJ){
	console.log("MassOnSubmitForm: " + ANZ);
	var i=0;
	var ELEMENT_CHECK = false;
	for (i=0;i<=ANZ;i++)
	{
	 var element = document.getElementById("mass_update_acl_" + i);
	 if (typeof(element) != 'undefined' && element != null)
	  CHECKVAL=document.getElementById("mass_update_acl_" + i).checked;
	  if ( CHECKVAL == true ) {
		ELEMENT_CHECK = true;
		console.log("mass_update_acl_" + i + " - " + CHECKVAL);
		document.getElementById("mass_update_acl_submit_" + i).value = document.getElementById("mass_update_acl_" + i).value;
	  }
	}
    var answer = false;
	if ( ELEMENT_CHECK == false ) {
	  alert("Select at least one ACL");
      return false;
	} else {
      // return true;
      answer = confirm(OBJ + ": $lang_vars{delete_acl_confirme_message}")
        if (answer){
                return true;
        }
        else{
                return false;
        }
	}
}
//-->
</SCRIPT>


<script type="text/javascript">
<!--
function confirmation(NET,TYPE) {

        if (TYPE == 'delete'){
                answer = confirm(NET + ": $lang_vars{delete_acl_confirme_message}")
        }

        if (answer){
                return true;
        }
        else{
                return false;
        }
}
//-->
</script>

EOF


my $onclick_confirmation_delete = "";
my $onclick_confirmation_delete_all = "";
my $color_helper=0;

my $j=0;
my $anz=@{$values};
#$anz--;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
#	print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{src_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_wmask_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_operator_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_port_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_wmask_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_operator_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_port_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{icmp_type_message} </b></font></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";
#print "<tr align=\"center\"><td width=\"20px\"></td><td><font size=\"2\"><b>$lang_vars{id_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{action_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{protocol_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_wmask_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_operator_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_port_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_wmask_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_operator_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_port_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{icmp_type_message} </b></font></td>\n";
print "<tr align=\"center\"><td width=\"20px\"></td><td><font size=\"2\"><b>$lang_vars{id_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{action_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{protocol_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_wmask_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_operator_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_port_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_wmask_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_operator_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_port_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{icmp_type_message} </b></font></td><td><font size=\"2\"><b>CON </b></font></td>\n";

# a.id, a.src, a.src_wmask, a.src_port, a.src_operator, a.dst, a.dst_wmask, a.dst_port, a.dst_operator, a.proto_id, p.protocol_name, a.action, a.icmp_type, a.client_id 

foreach my $refs(@{$values}) {
    my $id = @{$values}[$j]->[0];
    my $src = @{$values}[$j]->[1] || "";
    my $src_wmask = @{$values}[$j]->[2] || "";
    my $src_port = @{$values}[$j]->[3];
    my $src_operator = @{$values}[$j]->[4];
    my $dst = @{$values}[$j]->[5] || "";
    my $dst_wmask = @{$values}[$j]->[6] || "";
    my $dst_port = @{$values}[$j]->[7];
    my $dst_operator = @{$values}[$j]->[8];
    my $protocol = @{$values}[$j]->[10];
    my $action = @{$values}[$j]->[11];
    my $icmp_type = @{$values}[$j]->[12];
    my $con_exists = @{$values}[$j]->[14] || "";
    $con_exists = "x" if $con_exists;
    my $k=$j+1;
    my $l=$j-1;

	if ( $confirmation eq "yes" ) {
		$onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$id\',\'delete\');\"";
		$onclick_confirmation_delete_all = "onclick=\"saveScrollCoordinates();return confirmation(\'ALL ACLs\',\'delete\');\"";
	}

	my $mass_update_checkbox = "<input type='checkbox' name='mass_update_acl_${j}' id='mass_update_acl_${j}' value='$id'>";

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$mass_update_checkbox</td><td align=\"center\">$id</td><td align=\"center\">$action</td><td align=\"center\">$protocol</td><td align=\"center\">$src</td><td align=\"center\">$src_wmask</td><td align=\"center\">$src_operator</td><td align=\"center\">$src_port</td><td align=\"center\">$dst</td><td align=\"center\">$dst_wmask</td><td align=\"center\">$dst_operator</td><td align=\"center\">$dst_port</td><td align=\"center\">$icmp_type</td><td align=\"center\">$con_exists</td>";
    print "</tr>\n";
    $j++;
}
print "</table><p>\n";
print "<p><br><p>\n";

print "<p><form name=\"mass_update\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_acl_list.cgi\">\n";

my $k;
for ($k=0;$k<=$anz;$k++) {
	print "<input type=\"hidden\" name=\"mass_update_acl_submit_${k}\" id=\"mass_update_acl_submit_${k}\" value=\"\">\n";
}
print "<input type=\"hidden\" name=\"anz_entries\" id=\"anz_entries\" value=\"$anz\">\n";

print <<EOF;
<input type="hidden" name="client_id" value="$client_id">
<input type="submit" name="mass_submit" class="btn" value="$lang_vars{delete_selected_message}" style="cursor:pointer;" onClick="return MassOnSubmitForm($anz, \'Selected ACLs\',\'delete\');" VALUE="mass_update">
</form>
EOF

print "<form name=\"delete_acls\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_acl_list.cgi\" style=\"display:inline\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"btn\" value=\"$lang_vars{delete_acls_message}\" name=\"B2\" $onclick_confirmation_delete_all></form><br>\n";
#print "<span style=\"float: right\"><form name=\"delete_acls\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_acl_list.cgi\" style=\"display:inline\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"btn\" value=\"$lang_vars{delete_acls_message}\" name=\"B2\" $onclick_confirmation_delete></form><br>\n";


print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF
}


## ACL Connections

sub insert_connection {
my ( $self, $client_id, $acl_nr, $purpose, $status, $src_vlan, $source, $src, $application_protocol, $proto_id, $src_port, $bidirectional, $dst_vlan, $destination, $dst, $encrypted_base_proto, $remark, $report) = @_;

my $dbh = $self->_mysql_connection();

my $qacl_nr = $dbh->quote( $acl_nr ) || "";
my $qpurpose = $dbh->quote( $purpose ) || "";
my $qstatus = $dbh->quote( $status ) || "";
my $qsrc_vlan = $dbh->quote( $src_vlan ) || "";
my $qsource = $dbh->quote( $source ) || "";
my $qsrc = $dbh->quote( $src ) || "";
my $qapplication_protocol = $dbh->quote( $application_protocol ) || "";
my $qproto_id = $dbh->quote( $proto_id ) || "";
my $qsrc_port = $dbh->quote( $src_port ) || "";
my $qbidirectional = $dbh->quote( $bidirectional ) || "";
my $qdst_vlan = $dbh->quote( $dst_vlan ) || "";
my $qdestination = $dbh->quote( $destination ) || "";
my $qdst = $dbh->quote( $dst ) || "";
my $qencrypted_base_proto = $dbh->quote( $encrypted_base_proto ) || "";
my $qremark = $dbh->quote( $remark ) || "";
my $qclient_id = $dbh->quote( $client_id ) || "";


my %values;
my $ip_ref;
my $sth = $dbh->prepare("SELECT id, acl_nr FROM acl_connection_list"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $acl_nr = $ip_ref->{acl_nr};
	$values{$acl_nr} = "$id";
}

my $check_value = "";
debug("SELECT acl_nr FROM acl_connection_list WHERE purpose=$qpurpose AND status=$qstatus AND src_vlan=$qsrc_vlan AND source=$qsource AND src=$qsrc AND application_protocol=$qapplication_protocol AND proto_id=$qproto_id AND src_port=$qsrc_port AND bidirectional=$qbidirectional AND dst_vlan=$qdst_vlan AND destination=$qdestination AND dst=$qdst AND client_id=$qclient_id");
$sth = $dbh->prepare("SELECT acl_nr FROM acl_connection_list WHERE purpose=$qpurpose AND status=$qstatus AND src_vlan=$qsrc_vlan AND source=$qsource AND src=$qsrc AND application_protocol=$qapplication_protocol AND proto_id=$qproto_id AND src_port=$qsrc_port AND bidirectional=$qbidirectional AND dst_vlan=$qdst_vlan AND destination=$qdestination AND dst=$qdst AND client_id=$qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$check_value = $sth->fetchrow_array;

my $val_a = $values{$acl_nr} || "";
debug("$check_value - $val_a - $report");

if ( ! $check_value && ! $values{$acl_nr} ) {

    if ( $report eq "update" ) {
        debug("INSERT INTO acl_connection_list (acl_nr, purpose, status, src_vlan, source, src, application_protocol, proto_id, src_port, bidirectional, dst_vlan, destination, dst, encrypted_base_proto, remark, client_id) values ($qacl_nr, $qpurpose, $qstatus, $qsrc_vlan, $qsource, $qsrc, $qapplication_protocol, $qproto_id, $qsrc_port, $qbidirectional, $qdst_vlan, $qdestination, $qdst, $qencrypted_base_proto, $qremark, $qclient_id)");
        $sth = $dbh->prepare("INSERT INTO acl_connection_list (acl_nr, purpose, status, src_vlan, source, src, application_protocol, proto_id, src_port, bidirectional, dst_vlan, destination, dst, encrypted_base_proto, remark, client_id) values ($qacl_nr, $qpurpose, $qstatus, $qsrc_vlan, $qsource, $qsrc, $qapplication_protocol, $qproto_id, $qsrc_port, $qbidirectional, $qdst_vlan, $qdestination, $qdst, $qencrypted_base_proto, $qremark, $qclient_id)"
            ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->finish();
        $dbh->disconnect;

        return ("INSERT", $acl_nr);
    } else {
        return ("NEW_CONNECTION", $acl_nr);
    }
} else {
	if ( $check_value ) {
		# found an ACL with values are the same - report 
        debug("SAME_FOUND: $acl_nr");
		return ("SAME_FOUND", $check_value);
	} elsif ( $values{$acl_nr} ) {
        debug("ACL HAS CHANGED: $acl_nr");
		# acl_nr exists but at least one value has changed
		if ( $report eq "update" ) {
			# update + report
			my $sth = $dbh->prepare("UPDATE acl_connection_list SET purpose=$qpurpose, status=$qstatus, src_vlan=$qsrc_vlan, source=$qsource, src=$qsrc, application_protocol=$qapplication_protocol, proto_id=$qproto_id, src_port=$qsrc_port, bidirectional=$qbidirectional, dst_vlan=$qdst_vlan, destination=$qdestination, dst=$qdst, encrypted_base_proto=$qencrypted_base_proto, remark=$qremark WHERE acl_nr=$qacl_nr");
			$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

			return ("UPDATE", $check_value);

		} else {
			# report only
			return ("REPORT_CHANGE", $check_value);
		}
	}
}
}

sub get_acl_connections {
my ( $self, $client_id, $id_list ) = @_;
my (@values,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $id_expr = "";
if ( $id_list ) {
    $id_expr = " AND id IN ( $id_list )";
}

debug("SELECT id, acl_nr, purpose, status, src_vlan, source, src, application_protocol, proto_id, src_port, bidirectional, dst_vlan, destination, dst, encrypted_base_proto, remark, client_id, no_acl FROM acl_connection_list WHERE client_id=$qclient_id $id_expr ORDER BY acl_nr");
my $sth = $dbh->prepare("SELECT id, acl_nr, purpose, status, src_vlan, source, src, application_protocol, proto_id, src_port, bidirectional, dst_vlan, destination, dst, encrypted_base_proto, remark, client_id, no_acl FROM acl_connection_list WHERE client_id=$qclient_id $id_expr ORDER BY acl_nr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values;
}

sub mod_connection {
my ( $self, $client_id, $id, $acl_nr, $purpose, $status, $src_vlan, $source, $src, $application_protocol, $proto_id, $src_port, $bidirectional, $dst_vlan, $destination, $dst, $encrypted_base_proto, $remark) = @_;

my $dbh = $self->_mysql_connection();

my $qid = $dbh->quote( $id ) || "";
my $qacl_nr = $dbh->quote( $acl_nr ) || "";
my $qpurpose = $dbh->quote( $purpose ) || "";
my $qstatus = $dbh->quote( $status ) || "";
my $qsrc_vlan = $dbh->quote( $src_vlan ) || "";
my $qsource = $dbh->quote( $source ) || "";
my $qsrc = $dbh->quote( $src ) || "";
my $qapplication_protocol = $dbh->quote( $application_protocol ) || "";
my $qproto_id = $dbh->quote( $proto_id ) || "";
my $qsrc_port = $dbh->quote( $src_port ) || "";
my $qbidirectional = $dbh->quote( $bidirectional ) || "";
my $qdst_vlan = $dbh->quote( $dst_vlan ) || "";
my $qdestination = $dbh->quote( $destination ) || "";
my $qdst = $dbh->quote( $dst ) || "";
my $qencrypted_base_proto = $dbh->quote( $encrypted_base_proto ) || "";
my $qremark = $dbh->quote( $remark ) || "";
my $qclient_id = $dbh->quote( $client_id ) || "";

my $sth = $dbh->prepare("UPDATE acl_connection_list SET acl_nr=$qacl_nr, purpose=$qpurpose, status=$qstatus, src_vlan=$qsrc_vlan, source=$qsource, src=$qsrc, application_protocol=$qapplication_protocol, proto_id=$qproto_id, src_port=$qsrc_port, bidirectional=$qbidirectional, dst_vlan=$qdst_vlan, destination=$qdestination, dst=$qdst, encrypted_base_proto=$qencrypted_base_proto, remark=$qremark WHERE id=$qid");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth->finish();
$dbh->disconnect;
}


sub mod_connection_mass_update {
my ( $self, $client_id, $ids, $purpose, $status, $src_vlan, $source, $src, $application_protocol, $proto_id, $src_port, $bidirectional, $dst_vlan, $destination, $dst, $encrypted_base_proto, $remark) = @_;

my $dbh = $self->_mysql_connection();

my $expr = "";
if ( $purpose ) {
	$purpose = "" if $purpose eq "NO__VALUE";
    my $qpurpose = $dbh->quote( $purpose ) || "";
    $expr .= ", purpose=$qpurpose";
}
if ( $status ) {
	$status = "" if $status eq "NO__VALUE";
    my $qstatus = $dbh->quote( $status ) || "";
    $expr .= ", status=$qstatus";
}
if ( $src_vlan ) {
	$src_vlan = "" if $src_vlan eq "NO__VALUE";
    my $qsrc_vlan = $dbh->quote( $src_vlan ) || "";
    $expr .= ", src_vlan=$qsrc_vlan";
}
if ( $source ) {
	$source = "" if $source eq "NO__VALUE";
    my $qsource = $dbh->quote( $source ) || "";
    $expr .= ", source=$qsource";
}
if ( $src ) {
	$src = "" if $src eq "NO__VALUE";
    my $qsrc = $dbh->quote( $src ) || "";
    $expr .= ", src=$qsrc";
}
if ( $application_protocol ) {
	$application_protocol = "" if $application_protocol eq "NO__VALUE";
    my $qapplication_protocol = $dbh->quote( $application_protocol ) || "";
    $expr .= ", application_protocol=$qapplication_protocol";
}
if ( $proto_id ) {
	$proto_id = "" if $proto_id eq "NO__VALUE";
    my $qproto_id = $dbh->quote( $proto_id ) || "";
    $expr .= ", proto_id=$qproto_id";
}
if ( $src_port ) {
	$src_port = "" if $src_port eq "NO__VALUE";
    my $qsrc_port = $dbh->quote( $src_port ) || "";
    $expr .= ", src_port=$qsrc_port";
}
if ( $bidirectional ) {
	$bidirectional = "" if $bidirectional eq "NO__VALUE";
    my $qbidirectional = $dbh->quote( $bidirectional ) || "";
    $expr .= ", bidirectional=$qbidirectional";
}
if ( $dst_vlan ) {
	$dst_vlan = "" if $dst_vlan eq "NO__VALUE";
    my $qdst_vlan = $dbh->quote( $dst_vlan ) || "";
    $expr .= ", dst_vlan=$qdst_vlan";
}
if ( $destination ) {
	$destination = "" if $destination eq "NO__VALUE";
    my $qdestination = $dbh->quote( $destination ) || "";
    $expr .= ", destination=$qdestination";
}
if ( $dst ) {
	$dst = "" if $dst eq "NO__VALUE";
    my $qdst = $dbh->quote( $dst ) || "";
    $expr .= ", dst=$qdst";
}
if ( $encrypted_base_proto ) {
	$encrypted_base_proto = "" if $encrypted_base_proto eq "NO__VALUE";
    my $qencrypted_base_proto = $dbh->quote( $encrypted_base_proto ) || "";
    $expr .= ", encrypted_base_proto=$qencrypted_base_proto";
}
if ( $remark ) {
	$remark = "" if $remark eq "NO__VALUE";
    my $qremark = $dbh->quote( $remark ) || "";
    $expr .= ", remark=$qremark";
}
$expr =~ s/^,//;

my $qclient_id = $dbh->quote( $client_id ) || "";

debug("UPDATE acl_connection_list SET $expr WHERE id IN ($ids)");
my $sth = $dbh->prepare("UPDATE acl_connection_list SET $expr WHERE id IN ($ids)");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth->finish();
$dbh->disconnect;
}

sub delete_acl_connection {
my ( $self,$client_id, $id_list ) = @_;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $id_expr = "";
if ( $id_list ) {
	$id_expr = " WHERE id IN ( $id_list )";
}

my $sth = $dbh->prepare("DELETE FROM acl_connection_list $id_expr"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub get_first_free_connection_acl_nr {
my ($self,$client_id) = @_;
my $acl_nr;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT acl_nr FROM acl_connection_list ORDER BY (acl_nr+0) DESC LIMIT 1
        ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$acl_nr = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;

$acl_nr++;

return $acl_nr;
}



sub get_acl_connection_numbers {
    my ($self,$client_id) = @_;

    my (@values,$ip_ref);
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    debug("SELECT acl_nr FROM acl_connection_list ORDER BY (acl_nr+0)");
    my $sth = $dbh->prepare("SELECT acl_nr FROM acl_connection_list ORDER BY (acl_nr+0)
            ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;

    return @values;
}


sub get_protocols {
my ( $self, $client_id, $id ) = @_;

my (@values,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id ) if $id;

my $filter = "";
$filter = " AND id=$qid" if $id;

my $sth = $dbh->prepare("SELECT id, protocol_nr, protocol_name FROM protocols $filter");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values;
}

sub get_protocol_hash {
my ( $self, $client_id ) = @_;

my %values;
my $ip_ref;
my $dbh = $self->_mysql_connection();

my $sth = $dbh->prepare("SELECT protocol_nr, protocol_name FROM protocols")
 or croak $self->print_error("$client_id","select<p>$DBI::errstr");

$sth->execute() or croak $self->print_error("$client_id","select<p>$DBI::errstr");

while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $number = $ip_ref->{protocol_nr};
    my $name = $ip_ref->{protocol_name};
    $values{$number} = "$name";
}

$sth->finish();
$dbh->disconnect;

return %values;
}

sub get_protocol_name_hash {
my ( $self, $client_id ) = @_;

my %values;
my $ip_ref;
my $dbh = $self->_mysql_connection();

my $sth = $dbh->prepare("SELECT protocol_nr, protocol_name FROM protocols")
 or croak $self->print_error("$client_id","select<p>$DBI::errstr");

$sth->execute() or croak $self->print_error("$client_id","select<p>$DBI::errstr");

while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $number = $ip_ref->{protocol_nr};
    my $name = $ip_ref->{protocol_name};
    $values{$name} = "$number";
}

$sth->finish();
$dbh->disconnect;

return %values;
}


sub get_port_number {
my ($self, $client_id, $port_name) = @_;

my $dbh = $self->_mysql_connection();

my $qport_name = $dbh->quote( $port_name ) || "";

my $port_number = "";
my $sth = $dbh->prepare("SELECT port_nr FROM ports WHERE port_name=$qport_name");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$port_number = $sth->fetchrow_array;

$sth->finish();
$dbh->disconnect;

return $port_number;
}


sub get_port_name {
my ($self, $client_id, $port_number) = @_;

my $dbh = $self->_mysql_connection();

my $qport_number = $dbh->quote( $port_number ) || "";

my $port_name = "";
my $sth = $dbh->prepare("SELECT port_name FROM ports WHERE port_nr=$qport_number");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$port_number = $sth->fetchrow_array;

$sth->finish();
$dbh->disconnect;

return $port_number;
}


sub search_acl_connection {
my ( $self,$client_id, $match ) = @_;
my @values;
my $ip_ref;

my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $order_by_expr = "";

debug("SELECT a.id, a.acl_nr, a.purpose, a.status, a.src_vlan, a.source, a.src, a.application_protocol, a.proto_id, a.src_port, a.bidirectional, a.dst_vlan, a.destination, a.dst, a.encrypted_base_proto, a.remark, a.client_id, a.no_acl FROM acl_connection_list a, protocols p WHERE a.proto_id=p.protocol_nr AND (a.acl_nr LIKE \"%$match%\" OR purpose LIKE \"%$match%\" OR a.status LIKE \"%$match%\" OR a.src_vlan LIKE \"%$match%\" OR a.source LIKE \"%$match%\" OR a.src LIKE \"%$match%\" OR a.application_protocol LIKE \"%$match%\" OR a.proto_id LIKE \"%$match%\" OR a.src_port LIKE \"%$match%\" OR a.bidirectional LIKE \"%$match%\" OR a.dst_vlan LIKE \"%$match%\" OR a.destination LIKE \"%$match%\" OR a.dst LIKE \"%$match%\" OR a.encrypted_base_proto LIKE \"%$match%\" OR a.remark like \"%$match%\" OR p.protocol_name=(SELECT p.protocol_name FROM protocols WHERE p.protocol_nr LIKE \"%$match%\")) and a.client_id=$qclient_id $order_by_expr");
my $sth = $dbh->prepare("SELECT a.id, a.acl_nr, a.purpose, a.status, a.src_vlan, a.source, a.src, a.application_protocol, a.proto_id, a.src_port, a.bidirectional, a.dst_vlan, a.destination, a.dst, a.encrypted_base_proto, a.remark, a.client_id, a.no_acl FROM acl_connection_list a, protocols p WHERE a.proto_id=p.protocol_nr AND (a.acl_nr LIKE \"%$match%\" OR purpose LIKE \"%$match%\" OR a.status LIKE \"%$match%\" OR a.src_vlan LIKE \"%$match%\" OR a.source LIKE \"%$match%\" OR a.src LIKE \"%$match%\" OR a.application_protocol LIKE \"%$match%\" OR a.proto_id LIKE \"%$match%\" OR a.src_port LIKE \"%$match%\" OR a.bidirectional LIKE \"%$match%\" OR a.dst_vlan LIKE \"%$match%\" OR a.destination LIKE \"%$match%\" OR a.dst LIKE \"%$match%\" OR a.encrypted_base_proto LIKE \"%$match%\" OR a.remark like \"%$match%\" OR p.protocol_name=(SELECT p.protocol_name FROM protocols WHERE p.protocol_nr LIKE \"%$match%\")) and a.client_id=$qclient_id $order_by_expr
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish();

return @values;
}


sub search_acl_connection_advanced {
    my $self = shift;
    my %args = @_;

    my $client_id=$args{client_id};
    my $acl_nr=$args{acl_nr};
    my $purpose=$args{purpose};
    my $status=$args{status};
    my $src_vlan=$args{src_vlan};
    my $source=$args{source};
    my $src=$args{src};
    my $application_protocol=$args{application_protocol};
    my $proto_id=$args{proto_id};
    my $src_port=$args{src_port};
    my $bidirectional=$args{bidirectional};
    my $dst_vlan=$args{dst_vlan};
    my $destination=$args{destination};
    my $dst=$args{dst};
    my $encrypted_base_proto=$args{encrypted_base_proto};
    my $remark=$args{remark};
    my $exact_match=$args{exact_match};
    my $no_acl=$args{no_acl};

    my (@values, $ip_ref);
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );

    my $expr;
    if ( $acl_nr ) {
        my $qacl_nr = $dbh->quote( $acl_nr );
        $expr .= "AND acl_nr LIKE \"%$acl_nr%\"";
        $expr .= "AND acl_nr=$qacl_nr" if $exact_match;
    }
    if ( $purpose ) {
        my $qpurpose = $dbh->quote( $purpose );
        $expr .= "AND purpose LIKE \"%$purpose%\"";
        $expr .= "AND purpose=$qpurpose" if $exact_match;
    }
    if ( $status ) {
        my $qstatus = $dbh->quote( $status );
        $expr .= "AND status LIKE \"%$status%\"";
        $expr .= "AND status=$qstatus" if $exact_match;
    }
    if ( $src_vlan ) {
        my $qsrc_vlan = $dbh->quote( $src_vlan );
        $expr .= "AND src_vlan LIKE \"%$src_vlan%\"";
        $expr .= "AND src_vlan=$qsrc_vlan" if $exact_match;
    }
    if ( $source ) {
        my $qsource = $dbh->quote( $source );
        $expr .= "AND source LIKE \"%$source%\"";
        $expr .= "AND source=$qsource" if $exact_match;
    }
    if ( $src ) {
        my $qsrc = $dbh->quote( $src );
        $expr .= "AND src LIKE \"%$src%\"";
        $expr .= "AND src=$qsrc" if $exact_match;
    }
    if ( $application_protocol ) {
        my $qapplication_protocol = $dbh->quote( $application_protocol );
        $expr .= "AND application_protocol LIKE \"%$application_protocol%\"";
        $expr .= "AND application_protocol=$qapplication_protocol" if $exact_match;
    }
    if ( $proto_id ) {
        my $qproto_id = $dbh->quote( $proto_id );
        $expr .= "AND proto_id LIKE \"%$proto_id%\"";
        $expr .= "AND proto_id=$qproto_id" if $exact_match;
    }
    if ( $src_port ) {
        my $qsrc_port = $dbh->quote( $src_port );
        $expr .= "AND src_port LIKE \"%$src_port%\"";
        $expr .= "AND src_port=$qsrc_port" if $exact_match;
    }
    if ( $bidirectional ) {
        my $qbidirectional = $dbh->quote( $bidirectional );
        $expr .= "AND bidirectional LIKE \"%$bidirectional%\"";
        $expr .= "AND bidirectional=$qbidirectional" if $exact_match;
    }
    if ( $dst_vlan ) {
        my $qdst_vlan = $dbh->quote( $dst_vlan );
        $expr .= "AND dst_vlan LIKE \"%$dst_vlan%\"";
        $expr .= "AND dst_vlan=$qdst_vlan" if $exact_match;
    }
    if ( $destination ) {
        my $qdestination = $dbh->quote( $destination );
        $expr .= "AND destination LIKE \"%$destination%\"";
        $expr .= "AND destination=$qdestination" if $exact_match;
    }
    if ( $dst ) {
        my $qdst = $dbh->quote( $dst );
        $expr .= "AND dst LIKE \"%$dst%\"";
        $expr .= "AND dst=$qdst";
    }
    if ( $encrypted_base_proto ) {
        my $qencrypted_base_proto = $dbh->quote( $encrypted_base_proto );
        $expr .= "AND encrypted_base_proto LIKE \"%$encrypted_base_proto%\"";
        $expr .= "AND encrypted_base_proto=$qencrypted_base_proto" if $exact_match;
    }
    if ( $remark ) {
        my $qremark = $dbh->quote( $remark );
        $expr .= "AND remark LIKE \"%$remark%\"";
        $expr .= "AND remark=$qremark" if $exact_match;
    }
    if ( $no_acl ) {
        my $qno_acl = $dbh->quote( $no_acl );
        if ( $no_acl eq "with_acl" ) {
            $expr .= "AND no_acl=1";
        } elsif ( $no_acl eq "without_acl" ) {
            $expr .= "AND no_acl=0";
        }
    }

    $expr =~ s/^AND //;
    $expr = "$expr AND";

    debug("SELECT id, acl_nr, purpose, status, src_vlan, source, src, application_protocol, proto_id, src_port, bidirectional, dst_vlan, destination, dst, encrypted_base_proto, remark, client_id, no_acl FROM acl_connection_list WHERE $expr client_id=$qclient_id ORDER BY acl_nr");
    my $sth = $dbh->prepare("SELECT id, acl_nr, purpose, status, src_vlan, source, src, application_protocol, proto_id, src_port, bidirectional, dst_vlan, destination, dst, encrypted_base_proto, remark, client_id, no_acl FROM acl_connection_list WHERE $expr client_id=$qclient_id ORDER BY acl_nr")
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    $sth->finish();

    return @values;
}



sub search_acl_connection_starts_with {
my ( $self,$client_id, $match ) = @_;
my @values;
my $ip_ref;

my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $order_by_expr = "";

debug("SELECT a.id, a.acl_nr, a.purpose, a.status, a.src_vlan, a.source, a.src, a.application_protocol, a.proto_id, a.src_port, a.bidirectional, a.dst_vlan, a.destination, a.dst, a.encrypted_base_proto, a.remark, a.client_id, a.no_acl FROM acl_connection_list a, protocols p WHERE a.proto_id=p.protocol_nr AND a.acl_nr LIKE (\"$match%\") AND a.client_id=$qclient_id");
my $sth = $dbh->prepare("SELECT a.id, a.acl_nr, a.purpose, a.status, a.src_vlan, a.source, a.src, a.application_protocol, a.proto_id, a.src_port, a.bidirectional, a.dst_vlan, a.destination, a.dst, a.encrypted_base_proto, a.remark, a.client_id, a.no_acl FROM acl_connection_list a, protocols p WHERE a.proto_id=p.protocol_nr AND a.acl_nr LIKE (\"$match%\") AND a.client_id=$qclient_id
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish();

return @values;
}


sub PrintACLConnectionTab {
my ( $self,$client_id,$values,$vars_file,$match, $starts_with ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
my %protocols = $self->get_protocol_hash("$client_id");
$match = "" if ! $match;
$starts_with = "" if ! $starts_with;
#my $first_free_acl_nr = $self->get_first_free_connection_acl_nr("$client_id");
#my $last_acl_nr = $first_free_acl_nr - 1;

my $anz=@{$values};
my $coun = $anz;
$anz--;

my $file="/usr/share/gestioip/etc/vlan_colors.txt";
my %colors;
open(FILE, "<$file") or debug("Can not open file: $!\n");
while (<FILE>) {
    $_ =~ s/\s+//g;
    $_ =~ /^(.+):(.*)/;
    my $color = $1;
    my $vlans = $2;
    my @vlans = split(",", $vlans);
    foreach ( @vlans ) {
        if ( $_ =~ /^\d+$/ ) {
            $colors{$_} = $color; 
        } elsif ( $_ =~ /-/ ) {
            $_ =~ /^(\d+)-(\d+)$/;
            my $start = $1;
            my $end = $2;
            if ( $end > $start ) {
                for ( my $i = $start; $i <= $end; $i++) {
                    $colors{$i} = $color;
                }
            }
        }
    }
}
close FILE;

print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('net_scrollx');
var y = readCookie('net_scrolly');
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('net_scrollx', x, 0);
createCookie('net_scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function MassOnSubmitForm(ANZ,BORRAR,SHOW_ACL,DELETE_CONFIRM,SHOW_ACL_CONFIRM){
    console.log("MassOnSubmitForm: " + ANZ);
    var i=0;
    var ELEMENT_CHECK = false;
    for (i=0;i<=ANZ;i++)
    {
     var element = document.getElementById("mass_update_acl_" + i);
     if (typeof(element) != 'undefined' && element != null)
      var CHECKVAL=document.getElementById("mass_update_acl_" + i).checked;
		var val_test = document.getElementById("mass_update_acl_" + i).value;
      if ( CHECKVAL == true ) {
        ELEMENT_CHECK = true;
        console.log("mass_update_acl_" + i + " - " + CHECKVAL);
        document.getElementById("mass_update_acl_submit_" + i).value = document.getElementById("mass_update_acl_" + i).value;
        document.getElementById("mass_update_acl_submit_" + i).disabled = false;
      } else {
        document.getElementById("mass_update_acl_submit_" + i).disabled = true;
        console.log("mass_update_acl_" + i + " DISABLE " + CHECKVAL);
      }
    }
    if ( ELEMENT_CHECK == false ) {
      alert("Select at least one ACL Connection");
      return false;
    } else {
      var MESSAGE;
      for (var i=0; i<document.mass_update.mass_action_type.options.length; i++) {
          if (document.mass_update.mass_action_type.options[i].selected == true ) {
              MESSAGE=document.mass_update.mass_action_type.options[i].value;
          }
      }

    console.log("message: " + MESSAGE);

   if (MESSAGE == "$lang_vars{borrar_message}") {
    answer = confirm(DELETE_CONFIRM)
   } else if (MESSAGE == "$lang_vars{show_acls_message}") {
    answer = true;
   } else if (MESSAGE == "$lang_vars{modificar_message}") {
    answer = true;
   }

    console.log("answer: " + answer);


   if (answer){
     return true;
   } else {
     return false;
   }


    }
}
//-->
</SCRIPT>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function change_form_action(obj){
	console.log("VAL: " + obj.value);
	if (obj.value == "$lang_vars{borrar_message}") {
      document.mass_update.mass_update_type.disabled=true;
      document.getElementById('mass_update_type').style.color="gray";
	  document.mass_update.action ="$server_proto://$base_uri/res/ip_delete_acl_connection_list.cgi";
	  for (var i=0; i<document.mass_update.mass_update_type.options.length; i++) {
		  document.mass_update.mass_update_type.options[i].selected = false;
	  }
	  document.getElementById('mass_submit').type="submit";
	  document.getElementById('mass_submit').onclick = function() { return MassOnSubmitForm('$anz','$lang_vars{borrar_message}','$lang_vars{show_acls_message}','$lang_vars{delete_acl_con_confirme_message}','$lang_vars{clear_select_networks_confirmation_message}'); };
	} else if (obj.value == "$lang_vars{show_acls_message}") {
      document.mass_update.mass_update_type.disabled=true;
      document.getElementById('mass_update_type').style.color="gray";
	  document.mass_update.action ="$server_proto://$base_uri/ip_diff_acl_connections.cgi";
	  for (var i=0; i<document.mass_update.mass_update_type.options.length; i++) {
		  document.mass_update.mass_update_type.options[i].selected = false;
	  }
	  document.getElementById('mass_submit').type="submit";
	  document.getElementById('mass_submit').onclick = function() { return MassOnSubmitForm('$anz','$lang_vars{borrar_message}','$lang_vars{show_acls_message}','$lang_vars{delete_acl_con_confirme_message}','$lang_vars{clear_select_networks_confirmation_message}'); };
	} else {
	  document.mass_update.action ="$server_proto://$base_uri/res/ip_mod_acl_connection_mass_update_form.cgi";
	  document.mass_update.mass_update_type.disabled=false;
	  document.getElementById('mass_update_type').style.color="black";
	  document.getElementById('mass_submit').type="submit";
	}
}
//-->
</SCRIPT>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function confirmation_mass_update_acl(BORRAR,SHOW_ACL,DELETE_CONFIRM,SHOW_ACL_CONFIRM) {
    console.log("confirmation_mass_update_acl");
      var MESSAGE;
      for (var i=0; i<document.mass_update.mass_action_type.options.length; i++) {
          if (document.mass_update.mass_action_type.options[i].selected == true ) {
              MESSAGE=document.mass_update.mass_action_type.options[i].value;
          }
      }

    console.log("confirmation_mass_update_acl: " + MESSAGE);

   if (MESSAGE == BORRAR) {
    answer = confirm(DELETE_CONFIRM)
   } else if (MESSAGE == SHOW_ACL) {
//    answer = confirm(SHOW_ACL_CONFIRM)
    answer = true;
   }

   if (answer){
     return true;
   } else {
     return false;
   }
}
//-->
</SCRIPT>


<script type="text/javascript">
<!--
function confirmation(NET,TYPE) {

        if (TYPE == 'delete'){
                answer = confirm(NET + ": $lang_vars{delete_acl_confirme_message}")
        }

        if (answer){
                return true;
        }
        else{
                return false;
        }
}
//-->
</script>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function SelectAll(ANZ){
var i=0;
for (i=0;i<=ANZ;i++)
{
  document.getElementById("mass_update_acl_" + i).checked=true;
}
}
//-->
</SCRIPT>

<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function UnselectAll(ANZ){
var i=0;
for (i=0;i<=ANZ;i++)
{
  document.getElementById("mass_update_acl_" + i).checked=false;
}
}
//-->
</SCRIPT>


EOF


my $starts_with_checked = "";
$starts_with_checked ="checked" if $starts_with eq "y";

#print "$lang_vars{last_con_nr_message}: $last_acl_nr" if $ENV{SCRIPT_NAME} !~ /p_search_acl_connection/;

print <<EOF;
<form name="search_acl_connection" method="POST" action="$server_proto://$base_uri/ip_search_acl_connection.cgi" style="display:inline">
<input type="hidden" name="client_id" value="$client_id"><input type="submit" value="" class="button" style=\"float: right; cursor:pointer;\"><input type=\"text\" size=\"15\" name=\"match\" value=\"$match\" style=\"float: right; margin-left: 1em;\"><input type=\"checkbox\" name=\"starts_with\" value=\"y\" style=\"float: right;\" $starts_with_checked><span style=\"float: right; margin-right: 0.5em;\">ID starts with</span> 
</form>
<br><p><br><p>
EOF


print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"3\" width=\"100%\">\n";
print "<tr align=\"center\"><td width=\"20px\"></td><td><font size=\"2\"><b>$lang_vars{con_nr_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{purpose_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{status_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_vlan_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{source_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{src_ip_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{application_protocol_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{protocol_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{port_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{bidirectional_head_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_vlan_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{destination_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{dst_ip_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{base_proto_encrypt_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{remark_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{acl_message} </b></font></td>\n";

# id, acl_nr, purpose, status, src_vlan, source, src, application_protocol, protocol, src_port, bidirectional, dst_vlan, destination, dst, encrypted_base_proto, remark, client_id

my $onclick_confirmation_delete = "";
my $color_helper=0;
my $mass_update_checkbox = "";

my $j=0;

my @vals = @$values;

foreach my $refs(sort { $a->[1] <=> $b->[1] } @{$values}) {
    my $id = $refs->[0];
    my $acl_nr = $refs->[1];
    my $purpose = $refs->[2];
    my $status = $refs->[3];
    my $src_vlan = $refs->[4];
    my $source = $refs->[5];
    my $src = $refs->[6];
    my $application_protocol = $refs->[7];
    my $proto_id = $refs->[8];
    my $protocol = "";
    $protocol = $protocols{$proto_id} || "" if $proto_id;
    my $src_port = $refs->[9];
    my $bidirectional = $refs->[10];
    my $dst_vlan = $refs->[11];
    my $destination = $refs->[12];
    my $dst = $refs->[13];
    my $encrypted_base_proto = $refs->[14];
    my $remark = $refs->[15] || "";
    my $no_acl = $refs->[17] || "";
    my $k=$j+1;
    my $l=$j-1;

	if ( $confirmation eq "yes" ) {
		$onclick_confirmation_delete = "onclick=\"saveScrollCoordinates(); return confirmation(\'$acl_nr\',\'delete\');\"";
	}

	$mass_update_checkbox = "<input type='checkbox' name='mass_update_acl_${j}' id='mass_update_acl_${j}' value='$id'>";

    my $stylename_disabled="show_detail_disabled";
    my $no_acl_show = "";
    $no_acl_show = "x" if $no_acl;

    my $acl_nr_show = $acl_nr;
    my $acl_nr_class = "";
    my $acl_nr_style = "";
    if ( ! $status ) {
#        $acl_nr_class = "bg-success";
        $acl_nr_class = "table-border-green";
    } elsif ( $status =~ /deleted/i ) {
#        $acl_nr_class = "bg-danger";
        $acl_nr_class = "table-border-red";
    } elsif ( $status =~ /requested/i ) {
#        $acl_nr_class = "bg-warning";
        $acl_nr_class = "table-border-orange";
    }

	my $src_vlan_style = "";
	if ( $colors{$src_vlan} ) {
		$src_vlan_style = "style='background-color:" . $colors{$src_vlan} . "'";;
	}

	my $dst_vlan_style = "";
	if ( $colors{$dst_vlan} ) {
		$dst_vlan_style = "style='background-color:" . $colors{$dst_vlan} . "'";;
	}

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$mass_update_checkbox</td><td align=\"center\" $acl_nr_style class=\"$acl_nr_class\" font-weight-bold\">$acl_nr_show</td><td align=\"center\">$purpose</td><td align=\"center\">$status</td><td align=\"center\" $src_vlan_style>$src_vlan</td><td align=\"center\">$source</td><td align=\"center\">$src</td><td align=\"center\">$application_protocol</td><td align=\"center\">$protocol</td><td align=\"center\">$src_port</td><td align=\"center\">$bidirectional</td><td align=\"center\" $dst_vlan_style>$dst_vlan</td><td align=\"center\">$destination</td><td align=\"center\">$dst</td><td align=\"center\">$encrypted_base_proto</td><td align=\"center\">$remark</td><td align=\"center\">$no_acl_show</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_acl_connection_form.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_acl_connection.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"acl_nr\" type=\"hidden\" value=\"$acl_nr\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
    $j++;
}
print "</table><p>\n";


print "<input type=\"submit\" class=\"btn btn-sm\" value=\"$lang_vars{select_all_message}\" style=\"cursor:pointer;\" onClick=\"SelectAll($anz)\">\n";
print "<input type=\"submit\" class=\"btn btn-sm\" value=\"$lang_vars{unselect_all_message}\" style=\"cursor:pointer;\" onClick=\"UnselectAll($anz)\">\n";
print "<p><br><p>\n";

# mass update form
my ($form, $form_elements, @item_order, %items, $opt_name, $opt_value, $onclick);

$form_elements = "";
my $k;
for ($k=0;$k<=$anz;$k++) {
	$form_elements .= GipTemplate::create_form_element_hidden(
		value => "",
		name => "mass_update_acl_submit_${k}",
	);
}

$form_elements .= GipTemplate::create_form_element_hidden(
	value => $client_id,
	name => "client_id",
);

$form_elements .= GipTemplate::create_form_element_hidden(
	value => 1,
	name => "show_mass_acls",
);

$form_elements .= GipTemplate::create_form_element_hidden(
	value => 1,
	name => "show_connection_acl",
);

$form_elements .= GipTemplate::create_form_element_hidden(
	value => $coun,
	name => "anz_entries",
);

@item_order = ();
push @item_order, $lang_vars{'show_acls_message'};
push @item_order, $lang_vars{'modificar_message'};
push @item_order, $lang_vars{'borrar_message'};

$onclick = 'onchange="change_form_action(this);"';
$form_elements .= GipTemplate::create_form_element_select(
	item_order => \@item_order,
	selected_value => $lang_vars{'show_acls_message'},
	id => "mass_action_type",
	width => "10em",
	size => 2,
	multiple => "multiple",
	no_label => "no_label",
	onclick => $onclick,
	pm => "mr-2",
);


@item_order=("$lang_vars{purpose_message}","$lang_vars{status_message}","$lang_vars{src_vlan_message}","$lang_vars{source_message}","$lang_vars{src_ip_message}","$lang_vars{application_protocol_message}","$lang_vars{protocol_message}","$lang_vars{port_message}","$lang_vars{bidirectional_head_message}","$lang_vars{dst_vlan_message}","$lang_vars{destination_message}","$lang_vars{dst_ip_message}","$lang_vars{base_proto_encrypt_message}","$lang_vars{remark_message}");

undef %items;
$items{$lang_vars{'purpose_message'}} = "purpose";
$items{$lang_vars{'status_message'}} = "status";
$items{$lang_vars{'src_vlan_message'}} = "src_vlan";
$items{$lang_vars{'source_message'}} = "source";
$items{$lang_vars{'src_ip_message'}} = "src_ip";
$items{$lang_vars{'application_protocol_message'}} = "application_protocol";
$items{$lang_vars{'protocol_message'}} = "protocol";
$items{$lang_vars{'port_message'}} = "port";
$items{$lang_vars{'bidirectional_head_message'}} = "bidirectional";
$items{$lang_vars{'dst_vlan_message'}} = "dst_vlan";
$items{$lang_vars{'destination_message'}} = "destination";
$items{$lang_vars{'dst_ip_message'}} = "dst_ip";
$items{$lang_vars{'base_proto_encrypt_message'}} = "encrypted_base_proto";
$items{$lang_vars{'remark_message'}} = "remark";

$form_elements .= GipTemplate::create_form_element_select(
#   name => $lang_vars{mass_update_type},
item_order => \@item_order,
#items => \%items,
id => "mass_update_type",
width => "10em",
size => 4,
multiple => "multiple",
no_label => "no_label",
pm => "mr-2",
disabled => 1,
);


$onclick = 'onClick="return MassOnSubmitForm(\'' . $anz . '\',\'' . $lang_vars{borrar_message} . '\',\'' . $lang_vars{show_acls_message} . '\',\'' . $lang_vars{delete_acl_con_confirme_message} . '\',\'' . $lang_vars{clear_select_networks_confirmation_message} . '\');"';

$form_elements .= GipTemplate::create_form_element_button(
	value => $lang_vars{submit_message},
	id => "mass_submit",
	onclick => $onclick,
	class_args => "btn nowrap",
);

$form = GipTemplate::create_form(
	form_elements => $form_elements,
	form_id => "mass_update",
	link => "$server_proto://$base_uri/ip_diff_acl_connections.cgi",
	class => "form-inline",
	method => "POST",
	autocomplete => "off",
);

print $form;


print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF
}


sub get_wmask_from_bm {
my ( $self, $bm ) = @_;

my %bm = $self->get_bm_to_netmask();
my $mask = $bm{$bm};

my $mask_wild_packed = pack 'C4', split /\./, $mask;
my $mask_packed = ~$mask_wild_packed;
my $wmask = join '.', unpack 'C4', $mask_packed;

return $wmask;
}


sub compare_array {
my ($self, $A, $B) = @_;

# build lookup table
my %seen = map { $_ => 1 } @$B;

# find those in A that aren't in B
my @aonly;
foreach my $item (@$A) {
  push @aonly,$item unless ($seen{$item});
}

return \@aonly;
}  


sub compare_hash {
my ($self, $A, $B) = @_;

my @aonly = ();
my @bfound = ();

foreach my $key_a (keys %$A) {
    next if ! $key_a;
    my $value_a = $A->{$key_a};
    if ( $key_a =~ /%%/ ) {
        $key_a =~ /^(.+)%%(.+)$/;
        my $acl1 = $1;
        my $acl2 = $2;
        if ( ! exists $B->{$acl1} && ! exists $B->{$acl2} && ! exists $B->{$key_a} ) {
            push (@aonly, $key_a);
        } else {
            push (@bfound, $value_a);
        }
    } else {
        if ( ! exists $B->{$key_a} ) {
            push (@aonly, $key_a);
        }
    }
}

return \@aonly;
}

sub compare_hash_array {
my ($self, $A, $B) = @_;

my @aonly = ();
my @bfound = ();

foreach my $key_a (keys %$A) {
    next if ! $key_a;
    my $value_a = $A->{$key_a};
    foreach my $con ( @$value_a ) {
        if ( $key_a =~ /%%/ ) {
            $key_a =~ /^(.+)%%(.+)$/;
            my $acl1 = $1;
            my $acl2 = $2;
            if ( ! exists $B->{$acl1} && ! exists $B->{$acl2} && ! exists $B->{$key_a} ) {
                push (@aonly, $key_a);
            } else {
                push (@bfound, $value_a);
            }
        } else {
            if ( ! exists $B->{$key_a} ) {
                push (@aonly, $key_a);
            }
        }
    }
}

return \@aonly;
}


### MAC

sub insert_mac {
my ( $self, $client_id, $mac, $duid, $account, $host, $comment) = @_;

my $dbh = $self->_mysql_connection();

my $qmac = $dbh->quote( $mac ) || "";
my $qduid = $dbh->quote( $duid ) || "";
my $qaccount = $dbh->quote( $account ) || "";
my $qhost = $dbh->quote( $host ) || "";
my $qcomment = $dbh->quote( $comment ) || "";
my $qclient_id = $dbh->quote( $client_id ) || "";

my $check_value = "";
#	my $sth = $dbh->prepare("SELECT mac FROM allowed_macs WHERE (mac=$qmac OR duid=$qduid) AND client_id=$qclient_id");
my $sth = $dbh->prepare("SELECT mac FROM allowed_macs WHERE mac=$qmac AND client_id=$qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$check_value = $sth->fetchrow_array;

if ( ! $check_value ) {
    $sth = $dbh->prepare("INSERT INTO allowed_macs (mac, duid, account, host, comment, client_id) VALUES ($qmac, $qduid, $qaccount, $qhost, $qcomment, $qclient_id)"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
    return 0;
} else {
    $sth->finish();
    $dbh->disconnect;
    return 1;
}
}

sub get_macs {
my ( $self, $client_id, $id ) = @_;
my (@values,$ip_ref);
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $qid = $dbh->quote( $id ) if $id;

my $filter = "";
$filter = " AND id=$qid" if $id;

my $sth = $dbh->prepare("SELECT id, mac, duid, account, host, comment FROM allowed_macs WHERE client_id=$qclient_id $filter ORDER BY id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish(  );
return @values;
}


sub search_macs {
my ( $self,$client_id, $match ) = @_;
my @values;
my $ip_ref;

my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );

my $order_by_expr = "ORDER BY id";

my $sth = $dbh->prepare("SELECT id, mac, duid, account, host, comment FROM allowed_macs WHERE (mac LIKE \"%$match%\" OR duid LIKE \"%$match%\" OR account LIKE \"%$match%\" OR comment LIKE \"%$match%\" OR host LIKE \"%$match%\") AND client_id=$qclient_id $order_by_expr
    ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$dbh->disconnect;
$sth->finish();

return @values;
}

sub delete_macs {
my ( $self,$client_id,$id ) = @_;

my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );

my $sth = $dbh->prepare("DELETE FROM allowed_macs WHERE id=$qid"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub mod_mac {
my ( $self, $client_id, $id, $mac, $duid, $account, $host, $comment) = @_;

my $dbh = $self->_mysql_connection();

my $qid = $dbh->quote( $id ) || "";
my $qmac = $dbh->quote( $mac ) || "";
my $qduid = $dbh->quote( $duid ) || "";
my $qaccount = $dbh->quote( $account ) || ""; 
my $qhost = $dbh->quote( $host ) || "";
my $qcomment = $dbh->quote( $comment ) || "";
my $qclient_id = $dbh->quote( $client_id ) || "";

my $check_value = "";
#	my $sth = $dbh->prepare("SELECT mac FROM allowed_macs WHERE (mac=$qmac OR duid=$qduid) AND id!=$qid AND client_id=$qclient_id");
my $sth = $dbh->prepare("SELECT mac FROM allowed_macs WHERE mac=$qmac AND id!=$qid AND client_id=$qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$check_value = $sth->fetchrow_array;


if ( ! $check_value ) {
    my $sth = $dbh->prepare("UPDATE allowed_macs SET mac=$qmac, duid=$qduid, account=$qaccount, host=$qhost, comment=$qcomment WHERE id=$qid"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
    return 0;
} else {
    $sth->finish();
    $dbh->disconnect;
    return 1;
}

$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth->finish();
$dbh->disconnect;
}



sub PrintMACTab {
my ( $self,$client_id,$values,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";

print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
function createCookie(name,value,days)
{
if (days)
{
  var date = new Date();
  date.setTime(date.getTime()+(days*24*60*60*1000));
  var expires = "; expires="+date.toGMTString();
}
else var expires = "";
document.cookie = name+"="+value+expires+"; path=/;SameSite=Strict";
}

function readCookie(name)
{
var nameEQ = name + "=";
var ca = document.cookie.split(';');
for(var i=0;i < ca.length;i++)
{
  var c = ca[i];
  while (c.charAt(0)==' ') c = c.substring(1,c.length);
  if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
}
return null;
}

function eraseCookie(name)
{
createCookie(name,"",-1);
}
// -->
</SCRIPT>


<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--

function scrollToCoordinates() {
var x = readCookie('net_scrollx');
var y = readCookie('net_scrolly');
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}

function saveScrollCoordinates() {
var x = (document.all)?document.body.scrollLeft:window.pageXOffset;
var y = (document.all)?document.body.scrollTop:window.pageYOffset;
createCookie('net_scrollx', x, 0);
createCookie('net_scrolly', y, 0);
return;
}

function scrollToTop() {
var x = '0';
var y = '0';
window.scrollTo(x, y);
eraseCookie('net_scrollx')
eraseCookie('net_scrolly')
}
// -->
</SCRIPT>

EOF

#<script type="text/javascript">
#<!--
#function confirmation(NET,TYPE) {
#
#        if (TYPE == 'delete'){
#                answer = confirm(NET + ": $lang_vars{delete_ll_confirme_message}")
#        }
#
#        if (answer){
#                return true;
#        }
#        else{
#                return false;
#        }
#}
#//-->
#</script>



my $onclick_confirmation_delete = "";
my $color_helper=0;

my $j=0;
my $anz=@{$values};
$anz--;

print "<p>\n";
print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{mac_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{duid_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{account_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{host_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{comentario_message} </b></font></td><td width=\"15px\"></td><td width=\"15px\"></td></tr>\n";

# a.id, a.src, a.src_wmask, a.src_port, a.src_operator, a.dst, a.dst_wmask, a.dst_port, a.dst_operator, a.proto_id, p.protocol_name, a.action, a.icmp_type, a.client_id 

foreach my $refs(@{$values}) {
    my $id = @{$values}[$j]->[0];
    my $mac = @{$values}[$j]->[1];
    my $duid = @{$values}[$j]->[2] || "";
    my $account = @{$values}[$j]->[3] || "";
    my $host = @{$values}[$j]->[4] || "";
    my $comment = @{$values}[$j]->[5];
    my $k=$j+1;
    my $l=$j-1;

    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$mac\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td align=\"center\">$mac</td><td align=\"center\">$duid</td><td align=\"center\">$account</td><td align=\"center\">$host</td><td align=\"center\">$comment</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_mac_form.cgi\"><input name=\"mac\" type=\"hidden\" value=\"$mac\"><input name=\"duid\" type=\"hidden\" value=\"$duid\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"comment\" type=\"hidden\" value=\"$comment\"><input name=\"account\" type=\"hidden\" value=\"$account\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_mac.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"mac\" type=\"hidden\" value=\"$mac\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
    $j++;
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF
}

sub update_mac_extern {
my ( $self,$client_id, $mac, $action ) = @_;

my $action_opt;

my $command="/usr/share/gestioip/bin/gip_process_mac.pl";

if ( $action eq "delete"  ) {
    $action_opt = "-d";
} elsif ( $action eq "insert" ) {
    $action_opt = "-i";
}
my $command_options = "-m $mac $action_opt";

$command .= " " . $command_options;

my $devnull = "/dev/null";
$command .= " 2>&1";

debug("Executing: $command");
my $exit_status = system("$command") >> 8;

my $error = "";
if ( $exit_status == 0 ) {
    # OK
} elsif ( $exit_status == 1 ) {
    $error = "Unknown error";
} elsif ( $exit_status == 2 ) {
    $error = "MAC not found in the external database";
} else {
    $error = "Unknown error";
}

return ($exit_status, $error);
}



### SNMP groups

sub prepare_snmp_version_form {
my ( $self,$client_id,$vars_file,$snmp_group_name_db,$snmp_groups,$red,$BM,$red_num, $ip_version,$ip, $snmp_group_name_host, $no_print_group_form) = @_;
my %lang_vars = $self->_get_vars("$vars_file");

$red = "" if ! $red;
$BM = "" if ! $BM;
$snmp_group_name_host = "" if ! $snmp_group_name_host;
$snmp_group_name_db = $snmp_group_name_host if $snmp_group_name_host;
$ip = "" if ! $ip;

my $version_table = "<p><table border='0' cellpadding='7'><tr><span id='Hide20'><td >$lang_vars{snmp_version_message}</td></span><td colspan='3' 1><select class='custom-select custom-select-sm' name='snmp_version' id='snmp_version' onchange='changeText1(this.value);'> <option value='1' selected>v1</option> <option value='2'>v2c</option> <option value='3'>v3</option> </select> </td></tr> <tr><td > <span id='Hide1' 1>$lang_vars{snmp_community_message}</span></td><td colspan='3' 1><input type='password' class='form-control form-control-sm' size='10' id='community_string' name='community_string' value='public' maxlength='55'> <span id='Hide12' 1>$lang_vars{snmp_default_public_message}</span></td></tr><tr><td ><span id='Hide2'></span></td><td colspan='3' 1><span id='Hide3'></span></select></td></tr><tr><td ></td><td 1><span id='Hide4'></span></td><td 1><span id='Hide5'></span></td><td></td></tr><tr><td ></td><td 1><span id='Hide6'></span></select></td><td 1><span id='Hide7'></span></td><td></tr><tr><td ></td><td 1><span id='Hide8'></span></td><td 1><span id='Hide9'></span></td><td></td></tr><tr><td ></td><td 1><span id='Hide10'></span></td><td 1><span id='Hide11'></span></td><td></tr><tr><td >$lang_vars{port_message}</td><td><input type='text' class='form-control form-control-sm' size='5' name='snmp_port' value='161' maxlength='5' value='161'></td></tr><tr><td ><br></td><td></td></tr>";
$version_table .= "<tr><td>$lang_vars{ignore_arp_cache_message}</td><td><input type='checkbox' name='ignore_arp_cache' value='on' checked></td></tr>";
$version_table .= "<tr><td colespan='4'></td></tr>";
$version_table .= "<tr><td><br><input type='hidden' name='snmp_node' value='$ip'><input type='hidden' name='red_num' value='$red_num'><input type='hidden' name='ip_version' value='$ip_version'><input type='hidden' name='client_id' value='$client_id'><input type='submit' value='$lang_vars{query_message}' name='B1' class='input_link_w'></td></tr>";
$version_table .= "</table>";

my @snmp_groups = @$snmp_groups;
my $table;
my $table_js = "";

my $j=0;
if ( ! $no_print_group_form ) {
    print "<tr><td><br></td><td></td></tr>\n";
    if ( ! $snmp_groups[0] ) {
        $table_js .= "<p><table border='0' cellpadding='7'>";
        $table_js .= "<tr><td><br><b>$lang_vars{'snmp_group_message'}</b></td><td><br><i>$lang_vars{no_snmp_groups_message}</i>";
        $table_js .= "</td></tr></table>";
        $table = $version_table;
    } else {
        $table = "<p><table border='0' cellpadding='7'>";
        $table .= "<td>$lang_vars{'snmp_group_message'}</td><td><select name='snmp_group_name' class='custom-select custom-select-sm' size='1'>";
        $table .= "<option></option>";
        foreach ( @snmp_groups ) {
            my $snmp_group_name = $snmp_groups[$j]->[1]; 
            if ( $snmp_group_name_db eq $snmp_group_name ) {
                $table .= "<option selected>$snmp_group_name</option>";
            } else {
                $table .= "<option>$snmp_group_name</option>";
            }
            $j++;
        }
        $table .= "</select>";
        $table .= "</td></tr><tr><td>$lang_vars{ignore_arp_cache_message}</td><td><input type='checkbox' name='ignore_arp_cache' value='on' checked></td></tr><tr><td colespan='4'></td></tr><tr><td><br><input type='hidden' name='snmp_node' value='$ip'><input type='hidden' name='red_num' value='$red_num'><input type='hidden' name='ip_version' value='$ip_version'><input type='hidden' name='client_id' value='$client_id'><input type='submit' value='$lang_vars{query_message}' name='B1' class='input_link_w'></td></tr></table>";
        $table_js = $table;
    }

    print '<span id="HideA">';
    print "$table\n";
    print '</span>';
    print "</form>\n";
}


my $hide1_v6=$lang_vars{snmp_username_message};
my $hide2_v6=$lang_vars{security_level_message};
my $hide3_v6="<select name=\\\"sec_level\\\" class=\\\"custom-select custom-select-sm m-2\\\" id=\\\"sec_level\\\"> <option value=\\\"noAuthNoPriv\\\">noAuthNoPriv</option> <option value=\\\"authNoPriv\\\" selected>authNoPriv</option> <option value=\\\"authPriv\\\">authPriv</option>";
my $hide4_v6=$lang_vars{auth_proto_message};
my $hide5_v6=$lang_vars{auth_pass_message};
my $hide6_v6="<select name=\\\"auth_proto\\\" class=\\\"custom-select custom-select-sm m-2\\\" id=\\\"auth_proto\\\"><option value=\\\"\\\" selected>---</option> <option value=\\\"MD5\\\">MD5</option> <option value=\\\"SHA\\\">SHA</option></select>";
my $hide7_v6="<input type=\\\"password\\\" size=\\\"15\\\" name=\\\"auth_pass\\\" class=\\\"custom-select custom-select-sm m-2\\\" id=\\\"auth_pass\\\" maxlength=\\\"100\\\">";
my $hide8_v6=$lang_vars{priv_proto_message};
my $hide9_v6=$lang_vars{priv_pass_message};
my $hide10_v6="<select name=\\\"priv_proto\\\" class=\\\"custom-select custom-select-sm m-2\\\" id=\\\"priv_proto\\\"> <option value=\\\"\\\" selected>---</option> <option value=\\\"DES\\\" >DES</option> <option value=\\\"3DES\\\">3DES</option> <option value=\\\"AES\\\">AES</option></select>";
my $hide11_v6="<input type=\\\"password\\\" size=\\\"15\\\" name=\\\"priv_pass\\\" class=\\\"custom-select custom-select-sm m-2\\\" id=\\\"priv_pass\\\" maxlength=\\\"100\\\">";
my $hide12="$lang_vars{snmp_default_public_message}";
my $hide13="<select name=\\\"snmp_version\\\" class=\\\"custom-select custom-select-sm m-2\\\" id=\\\"snmp_version\\\" onchange=\\\"changeText1(this.value)\\\"><option value=\\\"1\\\" selected>v1</option><option value=\\\"2\\\">v2c</option><option value=\\\"3\\\">v3</option></select>";
my $hide14="<input type=\\\"password\\\" class=\\\"form-control form-control-sm m-2\\\" size=\\\"10\\\" name=\\\"community_string\\\" id=\\\"community_string\\\" value=\\\"public\\\" maxlength=\\\"55\\\">";
my $hide15="$lang_vars{port_message}";
my $hide16="<input type=\\\"text\\\" class=\\\"form-control form-control-sm m-2\\\" size=\\\"5\\\" name=\\\"snmp_port\\\" value=\\\"161\\\" maxlength=\\\"5\\\" value=\\\"161\\\">";
my $hide17="$lang_vars{snmp_version_message}";
my $hide18="<span id=\\\"Hide12\\\"></span>";
my $hide20="";

my ($hideA, $hideB, $hideC, $hideD);
$hideA=$hideB=$hideC=$hideD="";
if ( @snmp_groups ) {
    my $j = 0;
    my $options;
    foreach ( @snmp_groups ) {
        my $snmp_group_name = $snmp_groups[$j]->[1];
        if ( $snmp_group_name_db eq $snmp_group_name ) {
            $options .= "<option selected>$snmp_group_name</option>";
        } else {
            $options .= "<option>$snmp_group_name</option>";
        }
        $j++;
    }

    $hideA="<select name=\\\"snmp_group_name\\\" size=\\\"5\\\"><option></option>${options}</select></span>";
} else {
    $hideA="<b>$lang_vars{'snmp_group_message'}</b>";
    $hideB="<i>$lang_vars{no_snmp_groups_message}</i>";
    $hideC="<b>$lang_vars{'snmp_group_message'}</b>";
}

print <<EOF;

<script type="text/javascript">
<!--
function changeText1(version){
if(version == 1 | version == 2 ) {
document.getElementById('Hide1').innerHTML = "$lang_vars{snmp_community_message}";
document.getElementById('Hide2').innerHTML = "";
document.getElementById('Hide3').innerHTML = "";
document.getElementById('Hide4').innerHTML = "";
document.getElementById('Hide5').innerHTML = "";
document.getElementById('Hide6').innerHTML = "";
document.getElementById('Hide7').innerHTML = "";
document.getElementById('Hide8').innerHTML = "";
document.getElementById('Hide9').innerHTML = "";
document.getElementById('Hide10').innerHTML = "";
document.getElementById('Hide11').innerHTML = "";
document.getElementById('community_string').type = "password";
document.getElementById('community_string').value = "public";
}else{
document.getElementById('Hide1').innerHTML = "$hide1_v6";
document.getElementById('Hide2').innerHTML = "$hide2_v6";
document.getElementById('Hide3').innerHTML = "$hide3_v6";
document.getElementById('Hide4').innerHTML = "$hide4_v6";
document.getElementById('Hide5').innerHTML = "$hide5_v6";
document.getElementById('Hide6').innerHTML = "$hide6_v6";
document.getElementById('Hide7').innerHTML = "$hide7_v6";
document.getElementById('Hide8').innerHTML = "$hide8_v6";
document.getElementById('Hide9').innerHTML = "$hide9_v6";
document.getElementById('Hide10').innerHTML = "$hide10_v6";
document.getElementById('Hide11').innerHTML = "$hide11_v6";
document.getElementById('Hide12').innerHTML = "$hide12";
document.getElementById('community_string').value = "";
document.getElementById('community_string').type = "text";
}
}
-->
</script>


<script type="text/javascript">
<!--
function changeText2(type){
if(type == "useSNMPGroup" ) {
document.getElementById("noUseSNMPGroup").checked = false;
document.getElementById('HideA').innerHTML = "$table_js";
}else{
document.getElementById("useSNMPGroup").checked = false;
document.getElementById('HideA').innerHTML = "$version_table";
}
}
-->
</script>

<script type="text/javascript">
<!--
function checkRefresh() {
document.forms.snmp_form.snmp_version.selectedIndex="0";
}
-->
</script>

<script type="text/javascript">
<!--
function confirmation() {

    answer = confirm("$lang_vars{snmp_discovery_in_execution_message}")

    if (answer){
            return true;
    }
    else{
            return false;
    }

}
//-->
</script>

EOF

}


sub insert_snmp_group {
my $self = shift;
my %args = @_;

my $client_id=$args{client_id};
my $name=$args{name};
my $comment=$args{comment};
my $port=$args{port};
my $snmp_version=$args{snmp_version};
my $community=$args{community};
my $user_name=$args{user_name};
my $sec_level=$args{sec_level};
my $auth_algorithm=$args{auth_algorithm};
my $auth_password=$args{auth_password};
my $priv_algorithm=$args{priv_algorithm};
my $priv_password=$args{priv_password};

my $dbh = $self->_mysql_connection();

my $qname = $dbh->quote( $name ) || "";
my $qcomment = $dbh->quote( $comment ) || "";
my $qport = $dbh->quote( $port ) || "";
my $qsnmp_version = $dbh->quote( $snmp_version ) || "";
my $qcommunity = $dbh->quote( $community ) || "";
my $quser_name = $dbh->quote( $user_name ) || "";
my $qsec_level = $dbh->quote( $sec_level ) || "";
my $qauth_algorithm = $dbh->quote( $auth_algorithm ) || "";
my $qauth_password = $dbh->quote( $auth_password ) || "";
my $qpriv_algorithm = $dbh->quote( $priv_algorithm ) || "";
my $qpriv_password = $dbh->quote( $priv_password ) || "";
my $qclient_id = $dbh->quote( $client_id ) || "";

my $check_value = "";
my $sth = $dbh->prepare("SELECT name FROM snmp_group WHERE name=$qname AND client_id=$qclient_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$check_value = $sth->fetchrow_array;

if ( ! $check_value ) {
    $sth = $dbh->prepare("INSERT INTO snmp_group (name, snmp_version, port, community, user_name, sec_level, auth_algorithm, auth_password, priv_algorithm, priv_password, comment, client_id) VALUES ($qname, $qsnmp_version, $qport, $qcommunity, $quser_name, $qsec_level, $qauth_algorithm, $qauth_password, $qpriv_algorithm, $qpriv_password, $qcomment, $qclient_id)"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
    return 0;
} else {
    $sth->finish();
    $dbh->disconnect;
    return 1;
}
}

sub get_snmp_groups {
my ( $self, $client_id, $id ) = @_;
    my (@values,$ip_ref);
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $qid = $dbh->quote( $id ) if $id;

    my $filter = "";
    $filter = " AND id=$qid" if $id;

    my $sth = $dbh->prepare("SELECT id, name, snmp_version, port, community, user_name, sec_level, auth_algorithm, auth_password, priv_algorithm, priv_password, comment, client_id FROM snmp_group WHERE client_id=$qclient_id $filter ORDER BY name");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
    $sth->finish(  );
    return @values;
}


sub get_snmp_group_id_from_name {
my ( $self, $client_id, $name ) = @_;

my $value;
my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );

my $sth = $dbh->prepare("SELECT id FROM snmp_group WHERE name=$qname
                ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$value = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;

return $value;
}

#sub search_snmp_groups {
#    my ( $self,$client_id, $match ) = @_;
#	my @values;
#    my $ip_ref;
#
#    my $dbh = $self->_mysql_connection();
#    my $qclient_id = $dbh->quote( $client_id );
#
#	my $order_by_expr = "ORDER BY id";
#
#    my $sth = $dbh->prepare("SELECT id, mac, duid, account, host, comment FROM allowed_macs WHERE (mac LIKE \"%$match%\" OR duid LIKE \"%$match%\" OR account LIKE \"%$match%\" OR comment LIKE \"%$match%\" OR host LIKE \"%$match%\") AND client_id=$qclient_id $order_by_expr
#        ") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#    while ( $ip_ref = $sth->fetchrow_arrayref ) {
#        push @values, [ @$ip_ref ];
#    }
#    $dbh->disconnect;
#	$sth->finish();
#
#	return @values;
#}

sub delete_snmp_group {
my ( $self,$client_id,$id ) = @_;

my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );

my $sth = $dbh->prepare("DELETE FROM snmp_group WHERE id=$qid"
                        ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

my $cc_id = $self->get_custom_column_id_from_name("$client_id", "SNMPGroup") || "";
$self->delete_custom_net_column_entry_cc_id("$client_id", "$id", "$cc_id");

my $cc_id_host = $self->get_custom_host_column_id_from_name_client("$client_id", "SNMPGroup") || "";
$self->delete_custom_host_column_entry_cc_id("$client_id", "$id", "$cc_id_host");

$sth->finish();
$dbh->disconnect;
}

sub mod_snmp_group {
    my $self = shift;
    my %args = @_;

    my $client_id=$args{client_id};
    my $id=$args{id};
    my $name=$args{name};
    my $comment=$args{comment};
    my $port=$args{port};
    my $snmp_version=$args{snmp_version};
    my $community=$args{community};
    my $user_name=$args{user_name};
    my $sec_level=$args{sec_level};
    my $auth_algorithm=$args{auth_algorithm};
    my $auth_password=$args{auth_password};
    my $priv_algorithm=$args{priv_algorithm};
    my $priv_password=$args{priv_password};

    my $dbh = $self->_mysql_connection();

    my $qid = $dbh->quote( $id ) || "";
    my $qname = $dbh->quote( $name ) || "";
    my $qcomment = $dbh->quote( $comment ) || "";
    my $qport = $dbh->quote( $port ) || "";
    my $qsnmp_version = $dbh->quote( $snmp_version ) || "";
    my $qcommunity = $dbh->quote( $community ) || "";
    my $quser_name = $dbh->quote( $user_name ) || "";
    my $qsec_level = $dbh->quote( $sec_level ) || "";
    my $qauth_algorithm = $dbh->quote( $auth_algorithm ) || "";
    my $qauth_password = $dbh->quote( $auth_password ) || "";
    my $qpriv_algorithm = $dbh->quote( $priv_algorithm ) || "";
    my $qpriv_password = $dbh->quote( $priv_password ) || "";
    my $qclient_id = $dbh->quote( $client_id ) || "";

    my $sth = $dbh->prepare("UPDATE snmp_group SET name=$qname, snmp_version=$qsnmp_version, port=$qport, community=$qcommunity, user_name=$quser_name, sec_level=$qsec_level, auth_algorithm=$qauth_algorithm, auth_password=$qauth_password, priv_algorithm=$qpriv_algorithm, priv_password=$qpriv_password, comment=$qcomment, client_id=$qclient_id WHERE id=$qid"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;

    return 0;
}


sub check_snmp_group_in_use {
my ( $self, $client_id, $name, $cc_id, $object ) = @_;

my $value;
my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );
my $qcc_id = $dbh->quote( $cc_id );
my $table = "";
if ( $object eq "network" ) {
    $table = "custom_net_column_entries";
} elsif ( $object eq "host" ) {
    $table = "custom_host_column_entries";
} else {
    return;
}

my $sth = $dbh->prepare("SELECT entry FROM $table WHERE entry=$qname AND cc_id=$qcc_id
                ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$value = $sth->fetchrow_array;
$sth->finish();
$dbh->disconnect;

return $value;
}



sub PrintSNMPGroupTab {
my ( $self,$client_id,$values,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";

$self->PrintJavaScriptPrint("$lang_vars{delete_snmp_group_confirm_message}");

if ( ! @$values ) {
    print "<p class=\"NotifyText\">$lang_vars{no_resultado_message}</p><br>\n";
    return;
}

my $onclick_confirmation_delete = "";
my $color_helper=0;

my $j=0;
my $anz=@{$values};
$anz--;

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{snmp_version_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{port_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{username_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{comentario_message} </b></font></td>\n";

print "</td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

# id, name, snmp_version, port, community, user_name, sec_level, auth_algorithm, auth_password, priv_algorithm, priv_password, comment, client_id 

foreach my $refs(@{$values}) {
    my $id = @{$values}[$j]->[0];
    my $name = @{$values}[$j]->[1];
    my $snmp_version = @{$values}[$j]->[2] || "";
    $snmp_version = "2c" if $snmp_version eq "2";
    my $port = @{$values}[$j]->[3] || "";
    my $user_name = @{$values}[$j]->[5] || "";
    my $community = $user_name;
    my $comment = @{$values}[$j]->[11];

    if ( $snmp_version ne "3" ) {
        $user_name = "";
    }


    my $k=$j+1;
    my $l=$j-1;

    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }

    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td align=\"center\">$name</td><td align=\"center\">$snmp_version</td><td align=\"center\">$port</td><td align=\"center\">$user_name</td><td align=\"center\">$comment</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_snmp_group_form.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_snmp_group.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
    $j++;
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}


## CUSTOM COLUMNS SELECT

sub get_custom_columns_select_hash {
my ( $self, $client_id, $object ) = @_;

my $format=$self->{'format'};
my $error="";

my %values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my ($sth, $table);

if ( $object eq "network" ) {
    $table = "custom_column_select";
} elsif ( $object eq "host" ) {
    $table = "custom_host_column_select";
} elsif ( $object eq "site" ) {
    $table = "custom_site_column_select";
} elsif ( $object eq "line" ) {
    $table = "custom_line_column_select";
} else {
    return;
}

debug("SELECT id, type, items, cc_id FROM $table ORDER BY id");
$sth = $dbh->prepare("SELECT id, type, items, cc_id FROM $table ORDER BY id") or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

$sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

if ( $format eq 'html' && $error ) {
    croak $self->print_error("$client_id","$error");
}

while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{'id'};
    my $type = $ip_ref->{'type'};
    my $items = $ip_ref->{'items'};
    my @items = split(",", $items);
    my $cc_id = $ip_ref->{'cc_id'};
    push @{$values{$cc_id}},"$id","$type",\@items;
}
$dbh->disconnect;
return %values;
}


sub update_custom_column_select {
my ( $self,$client_id, $cc_name, $values, $object, $vars_file ) = @_;

my %lang_vars = $self->_get_vars("$vars_file");

my $dbh = $self->_mysql_connection();
my $qcc_name = $dbh->quote( $cc_name );
my $qvalues = $dbh->quote( $values );
my $qclient_id = $dbh->quote( $client_id );

my $table;
my $table1;
if ( $object eq "network" ) {
    $table = "custom_column_select";
    $table1 = "custom_net_columns";
} elsif ( $object eq "host" ) {
    $table = "custom_host_column_select";
    $table1 = "custom_host_columns";
} elsif ( $object eq "site" ) {
    $table = "custom_site_column_select";
    $table1 = "custom_site_columns";
} elsif ( $object eq "line" ) {
    $table = "custom_line_column_select";
    $table1 = "custom_line_columns";
} else {
    return;
}

my $sth;
if ( $cc_name eq "$lang_vars{tipo_message}" ) {
    if ( ! $values ) {
        $sth = $dbh->prepare("DELETE FROM $table WHERE WHERE cc_id = 9998");
    } else {
        $sth = $dbh->prepare("UPDATE $table SET items=$qvalues WHERE cc_id = 9998");
    }
} elsif ( $cc_name eq "$lang_vars{service_message}" ) {
    if ( ! $values ) {
        $sth = $dbh->prepare("DELETE FROM $table WHERE WHERE cc_id = 9999");
    } else {
        $sth = $dbh->prepare("UPDATE $table SET items=$qvalues WHERE cc_id = 9999");
    }
} else {
    if ( ! $values ) {
        $sth = $dbh->prepare("DELETE FROM $table WHERE WHERE cc_id = ( SELECT id from $table1 WHERE name=$qcc_name )");
    } else {
        $sth = $dbh->prepare("UPDATE $table SET items=$qvalues WHERE cc_id = ( SELECT id from $table1 WHERE name=$qcc_name )");
    }
}

$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}


sub get_predef_column_hash {
my ( $self, $client_id, $object ) = @_;

my $dbh = $self->_mysql_connection();
my $ip_ref;
my %values;


my $table;
if ( $object eq "network" ) {
    $table = "predef_net_columns";
} elsif ( $object eq "host" ) {
    $table = "predef_host_columns";
}


my $sth = $dbh->prepare("SELECT id,name FROM $table WHERE id != '-1'
                ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $name = $ip_ref->{name};
    push @{$values{$name}},"$id";
}
$sth->finish();
$dbh->disconnect;

return %values;
}


sub update_custom_column {
my ( $self, $client_id, $cc_id, $name, $mandatory, $object ) = @_;

if ( ! $mandatory || $mandatory ne "yes" ) {
    $mandatory = 0;
} else {
    $mandatory = 1;
}
my $dbh = $self->_mysql_connection();

my $qcc_id = $dbh->quote( $cc_id );
my $qname = $dbh->quote( $name );
my $qmandatory = $dbh->quote( $mandatory );
my $qclient_id = $dbh->quote( $client_id );

my $table1;
my $table_entries;
if ( $object eq "network" ) {
    $table1 = "custom_net_columns";
} elsif ( $object eq "host" ) {
    $table1 = "custom_host_columns";
} elsif ( $object eq "site" ) {
    $table1 = "custom_site_columns";
} elsif ( $object eq "line" ) {
    $table1 = "custom_line_columns";
} else {
    return;
}

my $sth;
if ( $name ) {
    $sth = $dbh->prepare("UPDATE $table1 SET name=$qname WHERE id = $qcc_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
$sth = $dbh->prepare("UPDATE $table1 SET mandatory=$qmandatory WHERE id = $qcc_id");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

$sth->finish();
$dbh->disconnect;
}

sub update_custom_column_entries_all {
	my ( $self, $client_id, $cc_id, $old_entry, $new_entry, $object ) = @_;

	my $dbh = $self->_mysql_connection();

	my $qcc_id = $dbh->quote( $cc_id );
	my $qold_entry = $dbh->quote( $old_entry );
	my $qnew_entry = $dbh->quote( $new_entry );
	my $qclient_id = $dbh->quote( $client_id );

	my $table1;
	if ( $object eq "network" ) {
		$table1 = "custom_net_column_entries";
	} elsif ( $object eq "host" ) {
		$table1 = "custom_host_column_entries";
	} else {
		return;
	}

	my $sth;
	debug("UPDATE $table1 SET entry=$qnew_entry WHERE cc_id=$qcc_id AND entry=$qold_entry");
	$sth = $dbh->prepare("UPDATE $table1 SET entry=$qnew_entry WHERE cc_id=$qcc_id AND entry=$qold_entry") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

	$sth->finish();
	$dbh->disconnect;
}


## TAGs

sub get_tag {
    my ( $self, $client_id ) = @_;
    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id, name, description, color, client_id FROM tag WHERE ( client_id = $qclient_id OR client_id = '9999' ) ORDER BY name") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;

    return @values;
}

sub get_tag_from_id {
my ( $self, $client_id, $id ) = @_;
my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT name, description, color, client_id FROM tag WHERE id=$qid ORDER BY name") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$sth->finish();
$dbh->disconnect;
return @values;
}

#sub get_tag_hosts {
#    my ( $self, $client_id, $tag ) = @_;
#
#    my @values;
#    my $ip_ref;
#
#    my $tag_expr = "";
#    if ( $tag ) {
#        my %tags = $self->get_tag_hash("$client_id", "name");
#        $tag_expr = " AND id IN ( SELECT host_id from tag_entries_host WHERE (";
#        foreach my $item ( @${tag} ) {
#            if ( ! defined $tags{$item}->[0] ) {
#				return;
#            }
#            $tag_expr .= " tag_id=\"$tags{$item}->[0]\" OR";
#        }
#        $tag_expr =~ s/OR$//;
#        $tag_expr .= " ))";
#    }
#
#    my $dbh = $self->_mysql_connection();
#    my $qclient_id = $dbh->quote( $client_id );
#    my $sth = $dbh->prepare("SELECT id, inet_ntoa(ip), ip, ip_version FROM host WHERE ( client_id = $qclient_id OR client_id = '9999' ) $tag_expr") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
#
#    while ( $ip_ref = $sth->fetchrow_hashref ) {
#        my $id = $ip_ref->{'id'};
#        my $ip_version = $ip_ref->{'ip_version'};
#        my ($ip, $ip_int);
#        if ( $ip_version eq "v4" ) {
#            $ip=$ip_ref->{'inet_ntoa(ip)'};
#        } else {
#            $ip_int = $ip_ref->{'ip'};
#            # macht die sache langsam ....
#            $ip = int_to_ip($ip_int,"$ip_version");
#        }
#        push @values, $ip;
#    }
#    $sth->finish();
#    $dbh->disconnect;
#
#    return @values;
#}


sub get_tag_hash {
my ( $self, $client_id, $key ) = @_;
my %values;
my $ip_ref;
$key = "id" if ! $key;
my $dbh = $self->_mysql_connection();
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT id, name, description, color, client_id FROM tag WHERE ( client_id = $qclient_id OR client_id = '9999' ) ORDER BY name"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $id = $ip_ref->{id};
    my $name = $ip_ref->{name};
    my $description = $ip_ref->{description};
    my $color = $ip_ref->{color};
    my $client_id = $ip_ref->{client_id};
    if ( $key eq "id" ) {
        push @{$values{$id}},"$name","$description","$color","$client_id";
    } elsif ( $key eq "name" ) {
        push @{$values{$name}},"$id","$description","$color","$client_id";
    }
}
$sth->finish();
$dbh->disconnect;

return %values;
}

sub get_tags_hash_object {
my ( $self, $client_id, $object ) = @_;

my $dbh = $self->_mysql_connection();
my $ip_ref;
my %values;

my ($table, $col_name);
if ( $object eq "network" ) {
    $table = "tag_entries_network";
    $col_name = "net_id";
} elsif ( $object eq "host" ) {
    $table = "tag_entries_host";
    $col_name = "host_id";
}

debug("SELECT $col_name, tag_id FROM $table");
my $sth = $dbh->prepare("SELECT $col_name, tag_id FROM $table
                ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_hashref ) {
    my $obj_id = $ip_ref->{$col_name};
    my $tag_id = $ip_ref->{tag_id};
    push @{$values{$obj_id}},"$tag_id";
}
$sth->finish();
$dbh->disconnect;

return %values;
}


sub tag_add {
my ( $self,$client_id, $name, $description, $color ) = @_;
my $dbh = $self->_mysql_connection();
my $qname = $dbh->quote( $name );
my $qdescription = $dbh->quote( $description );
my $qcolor = $dbh->quote( $color );
my $qclient_id = $dbh->quote( $client_id );
debug("INSERT INTO tag (name, description, color, client_id) VALUES ($qname,$qdescription,$qcolor,$qclient_id");
my $sth = $dbh->prepare("INSERT INTO tag (name, description, color, client_id) VALUES ($qname,$qdescription,$qcolor,$qclient_id)"
                        ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub update_tag {
my ( $self,$client_id, $id, $name, $description, $color ) = @_;
my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qname = $dbh->quote( $name );
my $qdescription = $dbh->quote( $description );
my $qcolor = $dbh->quote( $color );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("UPDATE tag SET name=$qname, description=$qdescription, color=$qcolor, client_id=$qclient_id WHERE id=$qid"
                        ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub delete_tag {
my ( $self, $client_id, $id ) = @_;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("DELETE FROM tag WHERE id=$qid"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub delete_tag_entry_object {
my ( $self, $client_id, $tag_id, $object ) = @_;

my $dbh = $self->_mysql_connection();
my $ip_ref;
my $qtag_id = $dbh->quote( $tag_id );

my ($table, $col_name);
if ( $object eq "network" ) {
    $table = "tag_entries_network";
    $col_name = "net_id";
} elsif ( $object eq "host" ) {
    $table = "tag_entries_host";
    $col_name = "host_id";
}

my $sth = $dbh->prepare("DELETE FROM $table WHERE tag_id=$qtag_id
                ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub delete_tag_entry_object_obj_id {
my ( $self, $client_id, $obj_id, $object ) = @_;

my $dbh = $self->_mysql_connection();
my $ip_ref;
my $qobj_id = $dbh->quote( $obj_id );

my ($table, $col_name);
if ( $object eq "network" ) {
    $table = "tag_entries_network";
    $col_name = "net_id";
} elsif ( $object eq "host" ) {
    $table = "tag_entries_host";
    $col_name = "host_id";
}

debug("DELETE FROM $table WHERE $col_name=$qobj_id");
my $sth = $dbh->prepare("DELETE FROM $table WHERE $col_name=$qobj_id
                ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub PrintTagTab {
my ( $self,$client_id,$vars_file ) = @_;
my %lang_vars = $self->_get_vars("$vars_file");
my $base_uri = $self->get_base_uri();
my $server_proto=$self->get_server_proto();
my @config = $self->get_config("$client_id");
my $confirmation = $self->get_config_confirmation("$client_id") || "yes";

my $onclick_confirmation_delete = "";
my $color_helper=0;

my @values = $self->get_tag("$client_id","$vars_file");
my $values = \@values;

my $j=0;
my $anz=@values;
$anz--;

#	$self->print_js_scroll("Tag","$vars_file");
$self->PrintJavaScriptPrint("$lang_vars{delete_tag_confirm_message}");

#	print "<form name=\"ip_insert_tag_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_insert_tag_form.cgi\" style=\"display:inline;\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"input_link_w_right\" value=\"$lang_vars{add_tag_message}\" name=\"B1\"></form>\n";

if ( ! @{$values} ) {
    print "<p class=\"NotifyText\">$lang_vars{no_resultado_message}</p><br>\n";
    return;
}

print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{description_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{color_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

foreach my $refs(@{$values}) {
    my $id = @{$values}[$j]->[0];
    my $name = @{$values}[$j]->[1];
    my $k=$j+1;
    my $l=$j-1;
    my $description = @{$values}[$j]->[2];
    my $color = @{$values}[$j]->[3] || "";
    my $client_id = @{$values}[$j]->[4] || "";
    if ( $confirmation eq "yes" ) {
        $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
    }

    my $stylename_disabled="show_detail_disabled";

    my $bg_color="white";
    my $bg_color_show="#efefef";

    if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="#efefef";
        $color_helper="1";
    } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
        $bg_color_show="white";
        $color_helper="0";
    }


    print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td><td align=\"center\">$description</td></td><td align=\"center\"><div class=\"oval\" style=\"background: #${color}\"></div></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_tag_form.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"color\" type=\"hidden\" value=\"$color\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_tag.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
    print "</tr>\n";
    $j++;
}
print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}

sub get_object_tags {
my ( $self, $client_id, $id, $object ) = @_;

my ($table, $col_name);
if ( $object eq "network" ) {
    $table = "tag_entries_network";
    $col_name = "net_id";
} elsif ( $object eq "host" ) {
    $table = "tag_entries_host";
    $col_name = "host_id";
}

my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qid = $dbh->quote( $id );
my $qclient_id = $dbh->quote( $client_id );
my $sth = $dbh->prepare("SELECT t.id, t.name, t.description, t.color, t.client_id FROM tag t WHERE t.id IN ( SELECT te.tag_id from $table te WHERE te.${col_name}=$qid ) AND ( t.client_id=$qclient_id OR t.client_id='9999' ) ORDER BY id"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr"); 
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
while ( $ip_ref = $sth->fetchrow_arrayref ) {
    push @values, [ @$ip_ref ];
}
$sth->finish();
$dbh->disconnect;

return @values;
}

sub insert_tag_for_object {
    my ( $self, $client_id, $tag_id, $object_id, $object ) = @_;

    my ($table, $col_name);
    if ( $object eq "network" ) {
        $table = "tag_entries_network";
        $col_name = "net_id";
    } elsif ( $object eq "host" ) {
        $table = "tag_entries_host";
        $col_name = "host_id";
    }

    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qtag_id = $dbh->quote( $tag_id );
    my $qobject_id = $dbh->quote( $object_id );
    my $qcol_name = $dbh->quote( $col_name );
    debug("INSERT INTO $table (tag_id, $col_name) VALUES ($qtag_id, $qobject_id)");
    my $sth = $dbh->prepare("INSERT INTO $table (tag_id, $col_name) VALUES ($qtag_id, $qobject_id)") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr"); 
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub insert_tag_for_network_object_mass_update {
my ( $self, $client_id, $tag_id, $mass_update_ids ) = @_;

my @values_ids = split("_", $mass_update_ids);

my $ip_ref;
my $dbh = $self->_mysql_connection();

my $qtag_id = $dbh->quote( $tag_id );

my $sth;
foreach my $net_id (@values_ids) {
    my $qnet_id = $dbh->quote( $net_id );
    $sth = $dbh->prepare("INSERT INTO tag_entries_network (tag_id, net_id) VALUES ($qtag_id, $qnet_id)"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
$sth->finish();
$dbh->disconnect;
}

sub insert_tag_for_host_object_mass_update {
my ( $self, $client_id, $tag_id, $mass_update_host_ids ) = @_;

my ($or_host_expr_v4, $or_host_expr_v6) = $self->create_or_host_expr("$client_id", "$mass_update_host_ids");
$or_host_expr_v4= "(" . $or_host_expr_v4 . ") AND" if $or_host_expr_v4;
$or_host_expr_v6= "(" . $or_host_expr_v6 . ") AND" if $or_host_expr_v6;

my $ip_ref;
my $dbh = $self->_mysql_connection();
my $sth;

my $qtag_id = $dbh->quote( $tag_id );
my $qclient_id = $dbh->quote( $client_id );

my @values_ids;
if ( $or_host_expr_v4 ) {
    $sth = $dbh->prepare("SELECT id FROM host WHERE $or_host_expr_v4 client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_ids, [ @$ip_ref ];
    }
}
if ( $or_host_expr_v6 ) {
    $sth = $dbh->prepare("SELECT id FROM host WHERE $or_host_expr_v6 client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values_ids, [ @$ip_ref ];
    }
}

foreach my $item (@values_ids) {
    my $host_id=@$item[0];
    my $qhost_id = $dbh->quote( $host_id );
    my $sth = $dbh->prepare("INSERT INTO tag_entries_host (tag_id, host_id) VALUES ($qtag_id, $qhost_id)"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr"); 
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}
}

sub delete_tag_from_object {
my ( $self, $client_id, $tag_id, $object_id, $object ) = @_;

my ($table, $col_name);
if ( $object eq "network" ) {
    $table = "tag_entries_network";
    $col_name = "net_id";
} elsif ( $object eq "host" ) {
    $table = "tag_entries_host";
    $col_name = "host_id";
}

my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $qtag_id = $dbh->quote( $tag_id );
my $qobject_id = $dbh->quote( $object_id );
my $sth = $dbh->prepare("DELETE FROM $table WHERE $col_name=$qobject_id AND tag_id=$qtag_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr"); 
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}

sub create_or_host_expr {
my ( $self, $client_id, $mass_update_host_ids ) = @_;

#    my $or_host_expr = $mass_update_host_ids;
#    if ( $or_host_expr =~ /_/ ) {
#        $or_host_expr =~ s/_/') OR host_id = INET_ATON('/g;
#        $or_host_expr =~ s/^/host_id = INET_ATON('/;
#        $or_host_expr =~ s/$/')/;
#        $or_host_expr= "(" . $or_host_expr . ")";
#    } else {
#        $or_host_expr="host_id = INET_ATON('$or_host_expr')";
#    }

my $or_host_expr_v4="";
my $or_host_expr_v6="";
my @mass_update_host_ids=();
if ( $mass_update_host_ids =~ /_/ ) {
    @mass_update_host_ids=split("_",$mass_update_host_ids);
} else {
    $mass_update_host_ids[0]=$mass_update_host_ids;
}

foreach my $id(@mass_update_host_ids) {
    if ( $id =~ /^\d+\.\d+/ ) {
        #v4
        if ( $or_host_expr_v4 =~ /_/ ) {
            if ( $or_host_expr_v4  ) {
                $or_host_expr_v4.=" OR ip = INET_ATON('$id')";
            } else {
                $or_host_expr_v4="ip = INET_ATON('$id')";
            }
        } else {
            if ( $or_host_expr_v4 ) {
                $or_host_expr_v4.=" OR ip = INET_ATON('$id')";
            } else {
                $or_host_expr_v4=" ip = INET_ATON('$id')";
            }
        }
    } else {
        #v6
        my $ip_int=$self->ip_to_int("$client_id","$id","v6");
        if ( $or_host_expr_v6 =~ /_/ ) {
            if ( $or_host_expr_v6 ) {
                $or_host_expr_v6.=" OR ip = '$ip_int'";
            } else {
                $or_host_expr_v6=" ip = '$ip_int'";
            }
        } else {
            if ( $or_host_expr_v6 ) {
                $or_host_expr_v6.=" OR ip = '$ip_int'";
            } else {
                $or_host_expr_v6=" ip = '$ip_int'";
            }
        }
    }
}

return ($or_host_expr_v4, $or_host_expr_v6);
}

sub delete_tag_from_network_object_mass_update {
my ( $self, $client_id, $mass_update_ids ) = @_;

my $or_red_expr = $mass_update_ids;
if ( $or_red_expr =~ /_/ ) {
    $or_red_expr =~ s/_/' OR net_id = '/g;
    $or_red_expr =~ s/^/net_id = '/;
    $or_red_expr =~ s/$/'/;
} else {
    $or_red_expr="net_id = \"$or_red_expr\"";
}

my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $sth = $dbh->prepare("DELETE FROM tag_entries_network WHERE $or_red_expr"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}


sub delete_tag_from_host_object_mass_update {
my ( $self, $client_id, $mass_update_host_ids ) = @_;

my ($or_host_expr_v4, $or_host_expr_v6) = $self->create_or_host_expr("$client_id", "$mass_update_host_ids");

my @values;
my $ip_ref;
my $dbh = $self->_mysql_connection();
my $sth;
if ( $or_host_expr_v4 ) {
    $sth = $dbh->prepare("DELETE FROM tag_entries_host WHERE host_id IN (SELECT id from host WHERE $or_host_expr_v4)"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
} else {
    $sth = $dbh->prepare("DELETE FROM tag_entries_host WHERE host_id IN (SELECT id from host WHERE $or_host_expr_v6)"
    ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
}
$sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
$sth->finish();
$dbh->disconnect;
}



sub print_tag_form {
my ( $self, $client_id, $vars_file, $id, $object, $hint_text, $before_text, $disabled, $margin_top, $margin_bottom, $selected_value_arg, $select_id, $name ) = @_;

$id = "" if ! $id;
$select_id = "tag" if ! $select_id;
$disabled = "" if ! $disabled;
$before_text = "" if ! $before_text;
$hint_text = "" if ! $hint_text;
$margin_top = "" if ! $margin_top;
$margin_bottom = "" if ! $margin_bottom;
$selected_value_arg = "" if ! $selected_value_arg;
my %lang_vars = $self->_get_vars("$vars_file");
$name = $lang_vars{tags_message} if ! $name;

my $selected_value = "";

my @values = $self->get_tag("$client_id","$vars_file");
my $values = \@values;

my @object_tags = $self->get_object_tags("$client_id", "$id", "$object");
my %object_tags;

	my $n=0;
	foreach (@object_tags) {
		my $id = $object_tags[$n]->[0];
		my $name = $object_tags[$n]->[1];
		$object_tags{$name}=$id;
		$n++;
	}

    my ($form_elements, @item_order, %items, $opt_name, $opt_value);

    my $j = 0;
    push @item_order, "";
    foreach my $opt(@values) {
        $opt_name = $values[$j]->[1] || "";
        my $id_opt = $values[$j]->[0] || "";
        push @item_order, $opt_name;
        $items{$opt_name} = $id_opt;
        if ( $object_tags{$opt_name} && ! $selected_value_arg) {
            $selected_value .= "|$id_opt";
        }
        $j++;
    }
	if ( $selected_value_arg ) {
		$selected_value = $selected_value_arg;
	} else {
		$selected_value =~ s/^\|//;
	}

    $form_elements .= GipTemplate::create_form_element_select(
        name => $name,
        item_order => \@item_order,
        items => \%items,
        selected_value => $selected_value,
        before_text => "$before_text",
        hint_text => "$hint_text",
        id => "$select_id",
        width => "10em",
        size => 3,
        multiple => "multiple",
        disabled => "$disabled",
        margin_top => "$margin_top",
        margin_bottom => "$margin_bottom",
    );

    return $form_elements;
}


### DNS Keys

sub get_dns_keys {
    my ( $self, $client_id, $id ) = @_;
    my @values;
    my $ip_ref;
	my $id_expr = "";
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $qid = $dbh->quote( $id );
	if ( $id ) {
		$id_expr = "AND id=$qid";
	}
    my $sth = $dbh->prepare("SELECT id, tsig_key, name, description, client_id FROM dns_keys WHERE ( client_id = $qclient_id OR client_id = '9999' ) $id_expr")
		or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;
    return @values;
}

sub get_dns_key_id_name_hash {
    my ( $self, $client_id ) = @_;

    my $dbh = $self->_mysql_connection();
    my $ip_ref;
    my %values;

    my $sth = $dbh->prepare("SELECT id, name FROM dns_keys
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{id};
        my $name = $ip_ref->{name};
        $values{$id} = "$name";
    }
    $sth->finish();
    $dbh->disconnect;

    return %values;
}

sub check_dns_key {
    my ( $self, $client_id, $tsig_key ) = @_;

    my $value;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qtsig_key = $dbh->quote( $tsig_key );

    my $sth = $dbh->prepare("SELECT tsig_key FROM dns_keys WHERE tsig_key=$qtsig_key"
		) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

	$value = $sth->fetchrow_array;
	$sth->finish();
	$dbh->disconnect;

	return $value;
}

sub get_dns_key_id {
    my ( $self, $client_id, $id ) = @_;

    my $value;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );

    my $sth = $dbh->prepare("SELECT tsig_key FROM dns_keys WHERE id=$qid"
		) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

	$value = $sth->fetchrow_array;
	$sth->finish();
	$dbh->disconnect;

	return $value;
}

sub insert_dns_key {
	my ( $self, $client_id, $tsig_key, $name, $description ) = @_;
	
	my $ip_ref;
    my $dbh = $self->_mysql_connection();
	my $qtsig_key = $dbh->quote( $tsig_key );
	my $qname = $dbh->quote( $name );
	my $qdescription = $dbh->quote( $description );
	my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("INSERT INTO dns_keys (tsig_key, name, description, client_id) VALUES ($qtsig_key, $qname, $qdescription, $qclient_id)") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr"); 
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub update_dns_key {
    my ( $self, $client_id, $id, $tsig_key, $name, $description ) = @_;

    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );
    my $qtsig_key = $dbh->quote( $tsig_key );
    my $qname = $dbh->quote( $name );
    my $qdescription = $dbh->quote( $description ) || "";

    my $sth = $dbh->prepare("UPDATE dns_keys SET tsig_key=$qtsig_key,description=$qdescription,name=$qname WHERE id=$qid"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_dns_key {
	my ( $self,$client_id, $id ) = @_;
    my $dbh = $self->_mysql_connection();
	my $qid = $dbh->quote( $id );
	my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM dns_keys WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub check_dns_key_in_use {
	my ( $self, $client_id, $dns_key_id ) = @_;
	my (@values,$ip_ref);
	my $dbh = $self->_mysql_connection();
	my $qclient_id = $dbh->quote( $client_id );
	my $qdns_key_id = $dbh->quote( $dns_key_id );

    my $sth = $dbh->prepare("SELECT name FROM dns_zone WHERE dns_user_id=$dns_key_id AND client_id = $qclient_id");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

	while ( $ip_ref = $sth->fetchrow_arrayref ) {
		push @values, [ @$ip_ref ];
	}
	$dbh->disconnect;
	$sth->finish(  );
	return @values;
}

sub PrintDNSKeyTab {
    my ( $self,$client_id,$vars_file ) = @_;
    my %lang_vars = $self->_get_vars("$vars_file");
    my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
    my @config = $self->get_config("$client_id");
    my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
#	my %zones = $self->get_dns_zone_hash("$client_id");

    my $onclick_confirmation_delete = "";
    my $color_helper=0;

    my @values = $self->get_dns_keys("$client_id");
    my $values = \@values;


    my $j=0;
    my $anz=@values;
    $anz--;

    $self->PrintJavaScriptPrint("$lang_vars{delete_dns_key_confirm_message}");

    if ( ! @values ) {
        print "<p class=\"NotifyText\">$lang_vars{no_resultado_message}</p><br>\n";
        return;
    }

    print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
    print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{key_message} </b></font></td><td><b><font size=\"2\"> $lang_vars{name_message} </font></b></td><td><b><font size=\"2\"> $lang_vars{description_message} </font></b></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

    foreach my $refs(@{$values}) {
        my $id = @{$values}[$j]->[0];
        my $key = @{$values}[$j]->[1];
        my $k=$j+1;
        my $l=$j-1;
        my $name = @{$values}[$j]->[2] || "";

        my $description = @{$values}[$j]->[3];
        my $client_id = @{$values}[$j]->[4] || "";
        if ( $confirmation eq "yes" ) {
            $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$key\',\'delete\');\"";
        }

        my $stylename_disabled="show_detail_disabled";

        my $bg_color="white";
        my $bg_color_show="#efefef";

        if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
            $bg_color_show="#efefef";
            $color_helper="1";
        } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
            $bg_color_show="white";
            $color_helper="0";
        }

        print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$key</td><td align=\"center\">$name</td></td><td align=\"center\">${description}</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_dns_key_form.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"tsig_key\" type=\"hidden\" value=\"$key\"><input name=\"description\" type=\"hidden\" value=\"$description\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form></td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_dns_key.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
        print "</tr>\n";
        $j++;
    }
    print "</table><p>\n";
    print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}


#### DNS SERVER GROUPS

sub get_dns_server_group {
	my ( $self, $client_id ) = @_;
	my @values;
	my $ip_ref;
    my $dbh = $self->_mysql_connection();
	my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id, name, description, dns_server1, dns_server2, dns_server3, client_id FROM dns_server_group WHERE ( client_id = $qclient_id OR client_id = '9999' ) ORDER BY name") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;
    return @values;
}

sub get_dns_server_group_hash {
    my ( $self, $client_id, $key ) = @_;
    my %values;
    my $ip_ref;
    $key = "id" if ! $key;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id, name, description, dns_server1, dns_server2, dns_server3, client_id FROM dns_server_group WHERE ( client_id = $qclient_id OR client_id = '9999' ) ORDER BY name"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{id};
        my $name = $ip_ref->{name};
        my $description = $ip_ref->{description};
        my $dns_server1 = $ip_ref->{dns_server1};
        my $dns_server2 = $ip_ref->{dns_server2};
        my $dns_server3 = $ip_ref->{dns_server3};
        my $client_id = $ip_ref->{client_id};
        if ( $key eq "id" ) {
            push @{$values{$id}},"$name","$description","$dns_server1","$dns_server2","$dns_server3","$client_id";
        } elsif ( $key eq "name" ) {
            push @{$values{$name}},"$id","$description","$dns_server1","$dns_server2","$dns_server3","$client_id";
        }
    }
    $sth->finish();
    $dbh->disconnect;

    return %values;
}


sub get_dns_server_group_from_id {
	my ( $self, $client_id, $id ) = @_;
	my @values;
	my $ip_ref;

    my $format=$self->{'format'};
	my $error = "";

    my $dbh = $self->_mysql_connection();
	my $qid = $dbh->quote( $id );
	my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT name, description, dns_server1, dns_server2, dns_server3, client_id FROM dns_server_group WHERE id=$qid ORDER BY name") or $error="Can not execute statement:<p>$DBI::errstr";

	if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    $sth->execute() or $error = "Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }


    $sth->finish();
    $dbh->disconnect;

    return @values;
}

sub insert_dns_server_group {
    my ( $self,$client_id, $name, $description, $dns_server1, $dns_server2, $dns_server3 ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qname = $dbh->quote( $name );
    my $qdescription = $dbh->quote( $description );
    my $qdns_server1 = $dbh->quote( $dns_server1 );
    my $qdns_server2 = $dbh->quote( $dns_server2 );
    my $qdns_server3 = $dbh->quote( $dns_server3 );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("INSERT INTO dns_server_group (name, description, dns_server1, dns_server2, dns_server3, client_id) VALUES ($qname,$qdescription,$qdns_server1,$qdns_server2,$qdns_server3,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth = $dbh->prepare("SELECT LAST_INSERT_ID()") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $id = $sth->fetchrow_array;

    $sth->finish();
    $dbh->disconnect;

	return $id;
}

sub update_dns_server_group {
    my ( $self,$client_id, $id, $name, $description, $dns_server1, $dns_server2, $dns_server3 ) = @_;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );
    my $qname = $dbh->quote( $name );
    my $qdescription = $dbh->quote( $description );
    my $qdns_server1 = $dbh->quote( $dns_server1 );
    my $qdns_server2 = $dbh->quote( $dns_server2 );
    my $qdns_server3 = $dbh->quote( $dns_server3 );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("UPDATE dns_server_group SET name=$qname, description=$qdescription, dns_server1=$qdns_server1, dns_server2=$qdns_server2, dns_server3=$qdns_server3, client_id=$qclient_id WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_dns_server_group {
    my ( $self, $client_id, $id ) = @_;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM dns_server_group WHERE id=$qid"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    my $cc_id = $self->get_custom_column_id_from_name("$client_id", "DNSSG") || "";
    $self->delete_custom_net_column_entry_cc_id("$client_id", "$id", "$cc_id");

    $sth->finish();
    $dbh->disconnect;
}



sub delete_custom_net_column_entry_cc_id {
    my ( $self,$client_id, $entry, $cc_id ) = @_;

    my $error;
    my $format=$self->{'format'};
    my $dbh = $self->_mysql_connection();
    my $qentry = $dbh->quote( $entry );
    my $qcc_id = $dbh->quote( $cc_id );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM custom_net_column_entries WHERE entry = $qentry AND cc_id=$qcc_id AND ( client_id = $qclient_id OR client_id = '9999')") or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    $sth->finish();
    $dbh->disconnect;
}

sub delete_custom_host_column_entry_cc_id {
    my ( $self,$client_id, $entry, $cc_id ) = @_;

    my $error;
    my $format=$self->{'format'};
    my $dbh = $self->_mysql_connection();
    my $qentry = $dbh->quote( $entry );
    my $qcc_id = $dbh->quote( $cc_id );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM custom_host_column_entries WHERE entry = $qentry AND cc_id=$qcc_id AND ( client_id = $qclient_id OR client_id = '9999')") or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    $sth->finish();
    $dbh->disconnect;
}





sub PrintDNSServerGroupTab {
	my ( $self, $client_id, $vars_file, $changed_id ) = @_;
	my %lang_vars = $self->_get_vars("$vars_file");
	my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
	my @config = $self->get_config("$client_id");
	my @global_config = $self->get_global_config("$client_id");
	my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
    my $site_search_main_menu = $global_config[0]->[22] || 0;

    my $count = 0;
	my %values = $self->get_dns_server_group_hash("$client_id","id");
	my $values =\%values;

	my %changed_id=();
    $changed_id = \%changed_id if ! $changed_id;

	$self->PrintJavaScriptPrint("$lang_vars{delete_dns_server_group_confirm_message}");

	if ( ! keys %{$values} ) {
		print "<p class=\"NotifyText\">$lang_vars{no_resultado_message}</p><br>\n";
		return;
	}

	my $onclick_confirmation_delete = "";
	my $color_helper=0;

	my $anz=keys( %$values );

	print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";

	print "<tr align=\"center\">";
	print "<td><font size=\"2\"><b>$lang_vars{name_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{description_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{server_1_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{server_2_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{server_3_message}</b></font></td>";

	print "<td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";


	my $sort_order_ref = sub {
		my $A=$values->{$a}->[0];
		my $B=$values->{$b}->[0];
		${A} cmp ${B};
	};

	foreach my $id ( sort $sort_order_ref keys %{$values} ) {

        next if ! $id;

        my $name = $values->{$id}->[0] || "";
        my $description = $values->{$id}->[1] || "";
        my $dns_server1 = $values->{$id}->[2] || "";
        my $dns_server2 = $values->{$id}->[3] || "";
        my $dns_server3 = $values->{$id}->[4] || "";
		
		my $onclick_scroll='onclick="saveScrollCoordinates();"';
		if ( $confirmation eq "yes" ) {
			$onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
		}

		my $stylename_disabled="show_detail_disabled";

        my $changed_id_val = "";
        if ( $id ) {
            if ( defined $changed_id->{"$id"} ) {
                $changed_id_val = $changed_id->{"$id"};
            }
        }

		my $bg_color="white";
		my $bg_color_show="#efefef";

        if ( $id && $changed_id_val ) {
            $bg_color_show="#a6e8a6";
		} elsif ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
			$bg_color_show="#efefef";
			$color_helper="1";
		} elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
			$bg_color_show="white";
			$color_helper="0";
		}

		my $hidden_form_vals="<input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">";

		print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td><td>$description</td><td>$dns_server1</td><td>$dns_server2</td><td>$dns_server3</td>";

		print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_dns_server_group_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\" $onclick_scroll></form></td>";

		print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_dns_server_group.cgi\">$hidden_form_vals<input name=\"name\" type=\"hidden\" value=\"$name\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{delete_dns_server_group_message}\" $onclick_confirmation_delete></form></td>";


		print "</tr>\n";
	}

	print "</table><p>\n";

#	print "<form name=\"ip_export_dns_server_group_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_export_dns_server_group.cgi\" style=\"display:inline;\"><input type=\"hidden\" name=\"match\" value=\"$match\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"input_link_w_right\" value=\"$lang_vars{export_message}\" name=\"B1\"></form><p><br>\n";

print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}


sub create_csrf_token {
    my ($self, $client_id, $user, $generate) = @_;

	$generate = "" if ! $generate;
	$client_id = $self->get_first_client_id if ! $client_id;

	my $session = $ENV{'HTTP_SESSION'} || "";
	my $referer = $ENV{'HTTP_REFERER'} || "";
	my $cookie = $ENV{'HTTP_COOKIE'} || "";

    my $csrf_token;
    my $csrf_secret;
    my $sth; 
    my $dbh = $self->_mysql_connection();

    my $quser = $dbh->quote( $user );
    $sth = $dbh->prepare("SELECT token_secret FROM user_session WHERE username=$quser") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $csrf_secret = $sth->fetchrow_array;

    $sth->finish();
    $dbh->disconnect;


#Check if token EXPIRED > create new token

    if ( ! $csrf_secret || $generate ) {
        my @chars = ("A".."Z", "a".."z", 0..9,'$','%','&','?','(',')','-','.','-');
        my $new_csrf_secret;
        $new_csrf_secret .= $chars[rand @chars] for 1..12;

        $csrf_token = generate_csrf_token($user, "$new_csrf_secret");

        my $qnew_csrf_secret = $dbh->quote( $new_csrf_secret );
		if ( ! $csrf_secret ) {
			$sth = $dbh->prepare("INSERT INTO user_session (username, token_secret) VALUES ($quser, $qnew_csrf_secret)") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr"); 
		} else {
			$sth = $dbh->prepare("UPDATE user_session set token_secret=$qnew_csrf_secret WHERE username=$quser") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr"); 
		}
        $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
        $sth->finish();
        $dbh->disconnect;
    }

    $self->{csrf_token} = $csrf_token;
    $self->{csrf_token_hidden_element} = "<input type=\"hidden\" name=\"CSRFToken\" value=\"$csrf_token\">";

    return $csrf_token
}


sub delete_user_csrf_token {
    my ( $self, $client_id, $user ) = @_;

    my $error;
    my $format=$self->{'format'};
    my $dbh = $self->_mysql_connection();

    my $quser = $dbh->quote( $user );

    my $sth = $dbh->prepare("DELETE FROM user_session WHERE username = $quser") or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    $sth->execute() or $error="Can not execute statement:<p>$DBI::errstr";

    if ( $format eq 'html' && $error ) {
        croak $self->print_error("$client_id","$error");
    }

    $sth->finish();
    $dbh->disconnect;
}

sub check_csrf_token_gip {
    my ( $self, $client_id, $csrf_token, $user ) = @_;

	my $csrf_secret;

	if ( ! $user ) {
		$user=$ENV{'REMOTE_USER'};
	}
    my $dbh = $self->_mysql_connection();
    my $quser = $dbh->quote( $user );

    my $sth = $dbh->prepare("SELECT token_secret FROM user_session WHERE username=$quser
                    ") or croak $self->print_error("$client_id","select<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $csrf_secret = $sth->fetchrow_array;

    $sth->finish();
    $dbh->disconnect;

	my $status = check_csrf_token($user, $csrf_secret, $csrf_token) || "";

	if ( $status eq "CSRF_OK" ) {
		return 0;
	} elsif ( $status eq "CSRF_EXPIRED" ) {
#		$self->print_error_with_head(title=>"$lang_vars{gestioip_message}",headline=>"$$lang_vars{csrf_token_expired_message}",notification=>"$error_message",vars_file=>"$vars_file",client_id=>"$client_id")
	} else {
		return 1;
	}
}

sub get_parent_network {
    my ( $self, $red, $BM, $client_id, $ip_version ) = @_;

    my $rednum_overlap = "";
    my $overlap = 0;
	my $error = "";
    my $ip = new Net::IP ("$red/$BM") or $error = "$red/$BM INVALID network/bitmask - IGNORED";
    return if ! $ip;

	my $overlap_redes = $self->get_redes_hash("$client_id","$ip_version","","client_only");

    my $sort_order_ref = sub {
		# bigger BM first
        my ($X, $Y);
        $X = $overlap_redes->{$a}[1];
        $Y = $overlap_redes->{$b}[1];
        $Y <=> $X;
    };

    foreach my $red_num2 ( sort  $sort_order_ref keys %{$overlap_redes}) {
		$error = "";
        my $rootnet2 = $overlap_redes->{$red_num2}[9] || 0;
        if ( $rootnet2 != 1 ) {
            next;
        }

        my $red2 = $overlap_redes->{$red_num2}[0];
        my $BM2 = $overlap_redes->{$red_num2}[1];
        my $ip2 = new Net::IP ("$red2/$BM2") or $error = "$red2/$BM2 INVALID network/bitmask - IGNORED";
        if ( ! $ip2 ) {
            next;
        }
        if ($ip->overlaps($ip2)==$IP_A_IN_B_OVERLAP || $ip->overlaps($ip2)==$IP_IDENTICAL) {
                $overlap = "1";
                $rednum_overlap = $red_num2;
                last;
        }
    }

    return ($overlap,$rednum_overlap);
}


sub get_child_networks {
    my ( $self, $red, $BM, $red_num, $client_id, $ip_version ) = @_;

	my %values;
	my %values_change;
	my $error = "";
    my $ip = new Net::IP ("$red/$BM") or $error = "$red/$BM INVALID network/bitmask - IGNORED";
    return if ! $ip;

    my $overlap_redes = $self->get_redes_hash("$client_id","$ip_version","","client_only");

    my $sort_order_ref = sub {
        my ($X, $Y);
        $X = $overlap_redes->{$a}[1];
        $Y = $overlap_redes->{$b}[1];
        $Y <=> $X;
    };

    foreach my $red_num2 ( sort $sort_order_ref keys %{$overlap_redes}) {

		$error = "";
        my $red2 = $overlap_redes->{$red_num2}[0];
        my $BM2 = $overlap_redes->{$red_num2}[1];
        my $parent_network_id2 = $overlap_redes->{$red_num2}[10] || "";
		my $parent_network_BM2 = "";
		$parent_network_BM2 = $overlap_redes->{$parent_network_id2}[1] if $parent_network_id2;
        my $ip2 = new Net::IP ("$red2/$BM2") or $error = "$red2/$BM2 INVALID network/bitmask - IGNORED";
        if ( ! $ip2 ) {
            next;
        }
        if ($ip->overlaps($ip2)==$IP_B_IN_A_OVERLAP) {
			push @{$values{$red_num2}},"$red2","$BM2","$parent_network_id2","$parent_network_BM2";
        }
    }

	foreach my $red_num_child ( sort $sort_order_ref keys %values) {
        my $red_child = $values{$red_num_child}[0];
        my $BM_child = $values{$red_num_child}[1];
        my $BM_child_parent = $values{$red_num_child}[3];
		if ( $BM_child_parent ) {
			if ( $BM_child_parent < $BM ) {
				# childs parent network has a smaller BM than new network > change childs parent_network_id
				push @{$values_change{$red_num_child}},"$red_child","$BM_child","$red_num";
            }
		} else {
			#childs without_parent_network_id
			push @{$values_change{$red_num_child}},"$red_child","$BM_child","$red_num";
		}
	}

    return \%values_change;
}


sub get_child_networks_by_parent_id {
    my ( $self, $client_id, $parent_network_id ) = @_;
    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $qparent_network_id = $dbh->quote( $parent_network_id );
    my $sth = $dbh->prepare("SELECT n.red, n.BM, n.descr, n.red_num, l.loc, n.vigilada, n.comentario, c.cat, n.client_id, n.ip_version, n.rootnet, n.parent_network_id FROM net n, locations l , categorias_net c WHERE l.id = n.loc AND n.categoria = c.id AND n.client_id = $qclient_id and parent_network_id=$qparent_network_id;") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $dbh->disconnect;
	$sth->finish();

    return @values;
}


# SCHEDULED JOBS



sub get_scheduled_job_hash {
    my ( $self, $client_id, $key ) = @_;
    my %values;
    my $ip_ref;
    $key = "id" if ! $key;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id, name, type, start_date, end_date, run_once, status, comment, arguments, cron_time, next_run, repeat_interval, client_id FROM scheduled_jobs WHERE ( client_id = $qclient_id OR client_id = '9999' ) ORDER BY id"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{id};
        my $name = $ip_ref->{name};
        my $type = $ip_ref->{type};
        my $start_date = $ip_ref->{start_date};
        my $end_date = $ip_ref->{end_date};
        my $run_once = $ip_ref->{run_once};
        my $status = $ip_ref->{status};
        my $comment = $ip_ref->{comment};
        my $arguments = $ip_ref->{arguments};
        my $cron_time = $ip_ref->{cron_time};
        my $next_run = $ip_ref->{next_run};
        my $repeat_interval = $ip_ref->{repeat_interval};
        my $client_id = $ip_ref->{client_id};
        if ( $key eq "id" ) {
            push @{$values{$id}},"$name", "$start_date","$end_date", "$run_once", "$status", "$comment", "$arguments", "$cron_time", "$next_run", "$repeat_interval", "$type", "$client_id", "$end_date";
        } elsif ( $key eq "name" ) {
            push @{$values{$name}},"$id", "$start_date","$end_date", "$run_once", "$status", "$comment", "$arguments", "$cron_time", "$next_run", "$repeat_interval", "$type", "$client_id", "$end_date";
        }
    }
    $sth->finish();
    $dbh->disconnect;

    return \%values;
}

sub delete_scheduled_job {
	my ( $self,$client_id,$id ) = @_;

    my $dbh = $self->_mysql_connection();
	my $qid = $dbh->quote( $id );

    my $sth = $dbh->prepare("DELETE FROM scheduled_jobs WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth = $dbh->prepare("DELETE FROM scheduled_job_status WHERE job_id=$qid"
                            ) or croak $self->print_error("$client_id","delete:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}

sub get_scheduled_job_last_status_hash {
    my ( $self, $client_id, $key ) = @_;
    my %values;
    my $ip_ref; 
    $key = "job_id" if ! $key;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id, job_id, status, start_time, end_time, exit_message, log_file FROM scheduled_job_status order by id DESC"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{id};
        my $job_id = $ip_ref->{job_id};
        my $status = $ip_ref->{status};
        my $start_time = $ip_ref->{start_time};
        my $end_time = $ip_ref->{end_time} || "";
        my $exit_message = $ip_ref->{exit_message} || "";
        my $logfile = $ip_ref->{log_file} || "";

        if ( $key eq "job_id" ) {
            push @{$values{$job_id}},"$id","$status","$start_time","$end_time", "$exit_message", "$logfile";
        } else {
            push @{$values{$id}},"$job_id","$status","$start_time","$end_time", "$exit_message", "$logfile";
        }
    }
    $sth->finish();
    $dbh->disconnect;

    return \%values;
}


sub get_cron_entry {
    my ($self, $id) = @_;

    $ENV{PATH} = "";

    # untaint
	my $crontab_cmd = "/usr/bin/crontab";
    $crontab_cmd =~ /^(.*)$/;
    my $crontab = $1;

    my $grep_cmd = "/bin/grep";
    $grep_cmd =~ /^(.*)$/;
    my $grep = $1;

	my $command = $crontab . ' -l | ' . $grep . ' \'#ID: ' . $id . '$\'';
    debug("Executing: $command");
	my $output = `$command 2>&1`;
	if ( $output ) {
		return $output;
	}
}

sub create_cron_entry {
    my ($self, $entry) = @_;

    $ENV{PATH} = "";

    # untaint
	my $crontab_cmd = "/usr/bin/crontab";
    $crontab_cmd =~ /^(.*)$/;
    my $crontab = $1;

    my $echo_cmd = "/bin/echo";
    $echo_cmd =~ /^(.*)$/;
    my $echo = $1;

    $entry =~ /^(.*)$/;
    $entry = $1;

	my $command = $crontab . ' -l';
	my $output = `$command 2>&1`;

	if ( $output =~ /crontab/ ) {
        $command = $echo . ' \'' . $entry . '\' | ' . $crontab . ' -';
    } else {
        $command = '(' . $crontab . ' -l && ' . $echo . ' \'' . $entry . '\') | ' . $crontab . ' -';
    }
    debug("Executing: $command");
	$output = `$command 2>&1`;
	if ( $output ) {
		return $output;
	}
}

sub mod_cron_entry {
    my ($self, $entry, $id) = @_;

    $ENV{PATH} = "";

    # untaint
	my $crontab_cmd = "/usr/bin/crontab";
    $crontab_cmd =~ /^(.*)$/;
    my $crontab = $1;

    my $echo_cmd = "/bin/echo";
    $echo_cmd =~ /^(.*)$/;
    my $echo = $1;

    my $grep_cmd = "/bin/grep";
    $grep_cmd =~ /^(.*)$/;
    my $grep = $1;

    $id =~ /^(.*)$/;
    $id = $1;

    # delete cron entry
	my $command = $crontab . ' -l | ' . $grep . ' -v \'#ID: ' . $id . '$\' | ' . $crontab . ' -';
    debug("Executing: $command");
	my $output = `$command 2>&1`;
	if ( $output ) {
		return $output;
	}

    $entry =~ /^(.*)$/;
    $entry = $1;

    # insert_cron_entry
	$command = '(' . $crontab . ' -l && ' . $echo . ' \'' . $entry . '\') | ' . $crontab . ' -';
    debug("Executing: $command");
	$output = `$command 2>&1`;
	if ( $output ) {
		return $output;
	}
}

sub delete_cron_entry {
    my ($self, $id) = @_;

    $ENV{PATH} = "";

    # untaint
	my $crontab_cmd = "/usr/bin/crontab";
    $crontab_cmd =~ /^(.*)$/;
    my $crontab = $1;

    my $echo_cmd = "/bin/echo";
    $echo_cmd =~ /^(.*)$/;
    my $echo = $1;

    my $grep_cmd = "/bin/grep";
    $grep_cmd =~ /^(.*)$/;
    my $grep = $1;

	my $command = $crontab . ' -l | ' . $grep . ' -v \'#ID: ' . $id . '$\' | ' . $crontab . ' -';
    debug("Executing: $command");
	my $output = `$command 2>&1`;
	if ( $output ) {
		return $output;
	}
}

sub insert_scheduled_job {
	my $self = shift;
	my %args = @_;

	my $client_id=$args{client_id};
	my $name=$args{name};
	my $type=$args{'type'} || "";
	my $start_date=$args{'start_date'} || "";
	my $end_date=$args{'end_date'} || "";
	my $run_once=$args{'run_once'} || "0";
	my $status=$args{'status'} || "";
	my $comment=$args{'comment'} || "";
	my $arguments=$args{'arguments'} || "";
	my $cron_time=$args{'cron_time'} || "";
	my $next_run=$args{'next_run'} || "0";
	my $repeat_interval=$args{'repeat_interval'} || "";

	my $dbh = $self->_mysql_connection();

	my $qname = $dbh->quote( $name ) || "";
	my $qtype = $dbh->quote( $type ) || "";
	my $qstart_date = $dbh->quote( $start_date ) || "";
	my $qend_date = $dbh->quote( $end_date ) || "";
	my $qrun_once = $dbh->quote( $run_once ) || "";
	my $qstatus = $dbh->quote( $status ) || "";
	my $qcomment = $dbh->quote( $comment ) || "";
	my $qarguments = $dbh->quote( $arguments ) || "";
	my $qcron_time = $dbh->quote( $cron_time ) || "";
	my $qnext_run = $dbh->quote( $next_run ) || "";
	my $qrepeat_interval = $dbh->quote( $repeat_interval ) || "";
	my $qclient_id = $dbh->quote( $client_id ) || "";

    my $sth = $dbh->prepare("INSERT INTO scheduled_jobs (name, type, start_date, end_date, run_once, status, comment, arguments, cron_time, next_run, repeat_interval, client_id) VALUES ($qname, $qtype, $qstart_date, $qend_date, $qrun_once, $qstatus, $qcomment, $qarguments, $qcron_time, $qnext_run, $qrepeat_interval, $qclient_id)"
            ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth = $dbh->prepare("SELECT LAST_INSERT_ID()") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $id = $sth->fetchrow_array;

    $sth->finish();
    $dbh->disconnect;

    return $id;
}

sub mod_scheduled_job {
    my $self = shift;
    my %args = @_;

	my $id=$args{id};
	my $name=$args{name};
	my $type=$args{'type'} || "";
	my $start_date=$args{'start_date'} || "";
	my $end_date=$args{'end_date'} || "";
	my $run_once=$args{'run_once'} || "0";
	my $status=$args{'status'} || "";
	my $comment=$args{'comment'} || "";
	my $arguments=$args{'arguments'} || "";
	my $cron_time=$args{'cron_time'} || "";
	my $next_run=$args{'next_run'} || "0";
	my $repeat_interval=$args{'repeat_interval'} || "";
	my $client_id=$args{client_id};

	my $dbh = $self->_mysql_connection();

	my $qid = $dbh->quote( $id ) || "";
	my $qname = $dbh->quote( $name ) || "";
	my $qtype = $dbh->quote( $type ) || "";
	my $qstart_date = $dbh->quote( $start_date ) || "";
	my $qend_date = $dbh->quote( $end_date ) || "";
	my $qrun_once = $dbh->quote( $run_once ) || "";
	my $qstatus = $dbh->quote( $status ) || "";
	my $qcomment = $dbh->quote( $comment ) || "";
	my $qarguments = $dbh->quote( $arguments ) || "";
	my $qcron_time = $dbh->quote( $cron_time ) || "";
	my $qnext_run = $dbh->quote( $next_run ) || "";
	my $qrepeat_interval = $dbh->quote( $repeat_interval ) || "";
	my $qclient_id = $dbh->quote( $client_id ) || "";

    my $sth = $dbh->prepare("UPDATE scheduled_jobs SET name=$qname, type=$qtype, start_date=$qstart_date, end_date=$qend_date, run_once=$qrun_once, status=$qstatus, comment=$qcomment, arguments=$qarguments, cron_time=$qcron_time, next_run=$qnext_run, repeat_interval=$qrepeat_interval, client_id=$qclient_id WHERE id=$qid"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;

    return 0;
}

sub update_scheduled_job_arguments {
    my ( $self, $client_id, $job_id, $arguments) = @_;

    my $dbh = $self->_mysql_connection();

	return if ! $job_id || ! $arguments;

    my $qjob_id = $dbh->quote( $job_id ) || "";
    my $qarguments = $dbh->quote( $arguments ) || "";

    my $sth = $dbh->prepare("UPDATE scheduled_jobs SET arguments=$qarguments WHERE id=$qjob_id") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}

sub get_next_run {
	my ( $self, $entry ) = @_;

    my $now_epoch = time();

	$entry =~ /^(.+?)\s(.+?)\s(.+?)\s(.+?)\s(.+?)$/;
	my $min = $1;
	my $hour = $2;
	my $day_of_month = $3;
	my $month = $4;
	my $day_of_week = $5;

    $day_of_month =~ s/^0//;
    $month =~ s/^0//;
    $month = $month - 1 if $month =~ /\d/;

	my @execution_times = ();
	my @min_all = (1..60);
	my @hour_all = (1..23);
	unshift @hour_all, "0";
	my @dom_all = (1..31);
	my @month_all = (1..11);
	unshift @month_all, "0";
	my @dow_all = (1..6);
	unshift @dow_all, "0";

	my @min;
	if ( $min eq "*" ) {
		@min = @min_all;
	} else {
		@min = split(",", $min);
	}

	my @hour;
	if ( $hour eq "*" ) {
		@hour = @hour_all;
	} else {
		@hour = split(",", $hour);
	}

	my @day_of_month;
	my %day_of_month;
	if ( $day_of_month eq "*" ) {
		@day_of_month = @dom_all;
	} else {
		@day_of_month = split(",", $day_of_month);
	}
	foreach (@day_of_month) {
		$day_of_month{$_}++;
	}

	my @month;
	if ( $month eq "*" ) {
		@month = @month_all;
	} else {
		@month = split(",", $month);
	}

	my @day_of_week;
	my %day_of_week;
	if ( $day_of_week eq "*" ) {
		@day_of_week = @dow_all;
	} else {
		@day_of_week = split(",", $day_of_week);
	}
	foreach (@day_of_week) {
		$day_of_week{$_}++;
	}

	my $sec = 0;
	my $year;
	my ($hsec,$hmin,$hhour,$hday,$hmonth,$hyear,$hnext_exe_wday,$hyday,$hisdst) = localtime();
	$year = $hyear+1900;

	my %week_day_hash = (
		"Sunday" => 0,
		"Monday" => 1,
		"Tuesday" => 2,
		"Wednesday" => 3,
		"Thursday" => 4,
		"Friday" => 5,
		"Saturday" => 6,
	);

    my @years = ($year..2050);

	my @next_exe_wday = qw/Monday Tuesday Wednesday Thursday Friday Saturday Sunday/;
	my $next_exe_wday;
	my $last = 0;
	my $no_min = 0;
	my $next_exe = "";
	my $no_dow = 0;
	my $last_dom = 0;

    foreach my $year ( @years ) {
        foreach my $mo ( @month ) {
            last if $last == 1;
            next if $mo < $hmonth && $year <= $hyear;

            foreach my $dom ( @dom_all ) {
                last if $last == 1;
                if ( $dom < $hday && $mo == $hmonth ) {
                    next;
                }

                if ( ! $day_of_month{$dom} ) {
                    next;
                }

                if ( $day_of_week ne "*" ) {
                    my $next_exe_month_check;
                    eval {
                        $next_exe_month_check = timelocal(0,0,0,$dom,$mo,$year);
                    } or do {
                        next;
                    };
                    $next_exe_wday = (localtime($next_exe_month_check))[6];
                    if ( ! $day_of_week{$next_exe_wday} ) {
                        next;
                    }
                }

                foreach my $h ( @hour ) {
                    last if $last == 1;
                    if ( $h < $hhour && $hday == $dom && $mo == $hmonth) {
                        next;
                    }

                    foreach my $mi ( @min ) {
                        last if $last == 1;
                        if ( $mi < $hmin && $hday == $dom && $mo == $hmonth && $h == $hhour ) {
                            next;
                        }
#                            $next_exe = timelocal($sec,$mi,$h,$dom,$mo,$year);

                        eval {
                            $next_exe = timelocal($sec,$mi,$h,$dom,$mo,$year);
                        } or do {
                            next;
                        };

                        if ( $next_exe >= $now_epoch ) {
                            $last = 1;
                            last;
                        }
                    }
                }
            }
        }
    }

    if ( $next_exe =~ /^\d+$/ ) {
        $next_exe = strftime("%d/%m/%Y %H:%M:%S",localtime($next_exe));
    }

	return $next_exe;
}

sub get_cron_time {
	my $self = shift;
	my %args = @_;

	my $vars_file=$args{vars_file} || "";
	my %lang_vars = $self->_get_vars("$vars_file");

	my $client_id=$args{client_id} || "";
	my $interval=$args{interval} || "";
	my $interval_hours=$args{interval_hours} || 0;
	my $interval_minutes=$args{interval_minutes} || 0;
	my $interval_months=$args{interval_months} || "";
	my $interval_day_of_month=$args{interval_day_of_month} || "";
	my $interval_day_of_week=$args{interval_day_of_week} || "";

    $interval_hours =~ s/_/,/g;
    $self->print_error("$client_id","$lang_vars{formato_malo_message} 3") if $interval_hours && $interval_hours !~ /^(\d|,|$lang_vars{all_message})+/;
    $interval_hours = "*" if $interval_hours =~ /$lang_vars{all_message}/;

    $interval_minutes =~ s/_/,/g;
    $self->print_error("$client_id","$lang_vars{formato_malo_message} 3") if $interval_minutes && $interval_minutes !~ /^(\d|,|$lang_vars{all_message})+/;
    $interval_minutes = "*" if $interval_minutes =~ /$lang_vars{all_message}/;

    $interval_months =~ s/_/,/g;
    my @interval_months = split(",", $interval_months);
    $self->print_error("$client_id","$lang_vars{formato_malo_message} 3") if $interval_months && $interval_minutes !~ /^(\d|,|$lang_vars{all_message})+/;
    $interval_months = "*" if $interval_months =~ /$lang_vars{all_message}/;

    $interval_day_of_month =~ s/_/,/g;
    $self->print_error("$client_id","$lang_vars{formato_malo_message} 4") if $interval_day_of_month && $interval_day_of_month !~ /^(\d|,|$lang_vars{all_message})+/;
    $interval_day_of_month = "*" if $interval_day_of_month =~ /$lang_vars{all_message}/;

    $interval_day_of_week =~ s/7/0/g;
    $interval_day_of_week =~ s/_/,/g;
    $self->print_error("$client_id","$lang_vars{formato_malo_message} 5") if $interval_day_of_week && $interval_day_of_week !~ /^(\d|,|$lang_vars{all_message})+/;
    $interval_day_of_week = "*" if $interval_day_of_week =~ /$lang_vars{all_message}/;
    my @interval_day_of_week = split(",", $interval_day_of_week);

    my %week_day_hash = (
        '*' => $lang_vars{day_message},
        1 => $lang_vars{mo_message},
        2 => $lang_vars{di_message},
        3 => $lang_vars{mi_message},
        4 => $lang_vars{do_message},
        5 => $lang_vars{fr_message},
        6 => $lang_vars{sa_message},
        0 => $lang_vars{so_message},
    );

    my %month_hash = (
        "*" => "$lang_vars{every_message} $lang_vars{month_message}",
        0 => $lang_vars{jan_message},
        1 => $lang_vars{feb_message},
        2 => $lang_vars{mar_message},
        3 => $lang_vars{apr_message},
        4 => $lang_vars{may_message},
        5 => $lang_vars{jun_message},
        6 => $lang_vars{jul_message},
        7 => $lang_vars{aug_message},
        8 => $lang_vars{sep_message},
        9 => $lang_vars{oct_message},
        10 => $lang_vars{nov_message},
        11 => $lang_vars{dec_message},
    );

    my $interval_day_of_week_string = "";
    foreach ( @interval_day_of_week ) {
        $interval_day_of_week_string .= $week_day_hash{$_} . ", ";
    }
    $interval_day_of_week_string =~ s/, $//;

    my $interval_month_string = "";
    foreach ( @interval_months ) {
        if ( $_ ne "all" ) {
            $_--;
        }
        $interval_month_string .= $month_hash{$_} . ", ";
    }
    $interval_month_string =~ s/, $//;


    my $interval_minutes_show = $interval_minutes;
    $interval_minutes_show = $lang_vars{all_message} if $interval_minutes eq "*";

    my $interval_hours_show = $interval_hours;
    $interval_hours_show = $lang_vars{all_message} if $interval_hours eq "*";

    my $interval_day_of_week_show = $interval_day_of_week_string;
    $interval_day_of_week_show = $lang_vars{day_message} if $interval_day_of_week eq "*";

    my $interval_day_of_month_show = $interval_day_of_month;
    $interval_day_of_month_show = $lang_vars{day_message} if $interval_day_of_month eq "*";

    my $interval_month_show = $interval_month_string;
    $interval_month_show = $lang_vars{month_message} if $interval_months eq "*";

    my $cron_time = "";
    my $repeat_interval = "";
    if ( $interval == 1 ) {
        # daily
        $cron_time = "$interval_minutes $interval_hours * * *";
        $repeat_interval = "$lang_vars{daily_message} $lang_vars{at_message} $interval_hours_show $lang_vars{hours_message} $lang_vars{and_message} $interval_minutes_show $lang_vars{minutes_message}";
    } elsif ( $interval == 2 ) {
        # weekly
        $cron_time = "$interval_minutes $interval_hours * * $interval_day_of_week";
        $repeat_interval = "$lang_vars{every_message} $interval_day_of_week_show $lang_vars{at_message} $interval_hours_show $lang_vars{hours_message} $lang_vars{and_message} $interval_minutes_show $lang_vars{minutes_message}";
    } elsif ( $interval == 3 ) {
        # monthly
        $cron_time = "$interval_minutes $interval_hours $interval_day_of_month $interval_months *";
        $repeat_interval = "$lang_vars{every_message} $interval_day_of_month_show $lang_vars{of_message} $interval_month_show $lang_vars{at_message} $interval_hours_show $lang_vars{hours_message} $lang_vars{and_message} $interval_minutes_show $lang_vars{minutes_message}";
    }

    return ($cron_time, $repeat_interval);
}

sub PrintJobTab {
	my ( $self, $client_id, $vars_file, $changed_id, $match ) = @_;

    $changed_id = "" if ! $changed_id;

	my %lang_vars = $self->_get_vars("$vars_file");
	my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
	my @config = $self->get_config("$client_id");
	my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
	my $job_result_hash = $self->get_scheduled_job_last_status_hash();

	my $values;
	if ( $match ) {
#		$values=$self->get_sites_match("$client_id","$match");
#        $count = scalar keys %$values;
	} else {
		$values=$self->get_scheduled_job_hash("$client_id","name");
	}

    $self->PrintJavaScriptPrint("$lang_vars{delete_job_confirm_message}");

    if ( ! %$values ) {
        print "<p class=\"NotifyText\">$lang_vars{no_resultado_message}</p><br>\n";
        return;
    }

	my $onclick_confirmation_delete = "";
	my $color_helper=0;

    print "<p>\n";
	print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";
	print "<tr align=\"center\"><td><font size=\"2\"><b>$lang_vars{id_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{name_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{job_type_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{run_once_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{status_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{comentario_message} </b></font></td><td><font size=\"2\"><b>$lang_vars{repeat_message} </b></font></td></font></td><td><font size=\"2\"><b>$lang_vars{next_run_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{last_run_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{duration_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{last_result_message}</b></font><td><font size=\"2\"><b>$lang_vars{last_log_message}</b></font></td>\n";

	print "<td width=\"22px\"></td><td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";

	my %job_type_hash = (
		1 => $lang_vars{combined_message},
		2 => $lang_vars{networks_message},
		3 => $lang_vars{host_dns_message},
		4 => $lang_vars{host_snmp_message},
		5 => $lang_vars{vlans_message},
		6 => $lang_vars{dhcp_leases_message},
		7 => $lang_vars{db_backup_message},
		8 => $lang_vars{cloud_discovery_aws_message},
		9 => $lang_vars{cloud_discovery_azure_message},
		10 => $lang_vars{cloud_discovery_gcp_message},
		11 => $lang_vars{cmm_job_message},
	);

	my %status_hash = (
		1 => $lang_vars{enabled_message},
		2 => $lang_vars{disabled_message},
		3 => $lang_vars{finished_message},
	);

	my %result_hash = (
		1 => $lang_vars{scheduled_message},
		2 => $lang_vars{running_message},
		3 => "<font color='#006300'>$lang_vars{completed_message}</font>",
		4 => "<font color='#ec0505'>$lang_vars{failed_message}</font>",
		5 => "<font color='#d88d03'>$lang_vars{completed_warning_message}</font>",
		6 => "<font color='#646464'>$lang_vars{skipped_message}</font>",
	);

	my %log_name_hash = (
		"discover_networks" => $lang_vars{combined_message},
		"get_networks" => $lang_vars{networks_message},
		"vlans" => $lang_vars{vlans_message},
		"gestioip_dns" => $lang_vars{host_dns_message},
		"gestioip_snmp" => $lang_vars{host_snmp_message},
		"leases" => $lang_vars{dhcp_leases_message},
		"backup_gip" => $lang_vars{db_backup_message},
		"aws" => $lang_vars{cloud_discovery_aws_message},
		"azure" => $lang_vars{cloud_discovery_azure_message},
		"gcp" => $lang_vars{cloud_discovery_gcp_message},
		"cmm" => $lang_vars{cmm_job_message},
	);

    foreach my $name ( sort keys %{$values} ) {

        next if ! $name;

        my $id=$values->{$name}[0];
        my $start_date=$values->{$name}[1];
        my $run_once=$values->{$name}[3] || "";
        $run_once = "x" if $run_once;
        my $status_id=$values->{$name}[4];
		my $status=$status_hash{$status_id};
        my $comment=$values->{$name}[5];
        my $arguments=$values->{$name}[6];
        my $cron_time=$values->{$name}[7];
        my $next_run=$self->get_next_run("$cron_time");
        my $repeat_interval=$values->{$name}[9];
        my $job_type_id=$values->{$name}[10];
        my $job_type=$job_type_hash{$job_type_id};
		my $last_result_id = $job_result_hash->{$id}[1] || 1;
		my $last_result = $result_hash{$last_result_id};
		my $last_start_time_epoch = $job_result_hash->{$id}[2] || "";
		my $last_end_time_epoch = $job_result_hash->{$id}[3] || "";
		my $last_log = $job_result_hash->{$id}[5] || "";
        my @last_log = split(",",$last_log);
        my $log_link = "";
        foreach ( @last_log ) {
            $_ =~ s/\s//g;
            if ( $_ =~ /discover_network/ ) {
                $log_link .= "<br><a href='$server_proto://$base_uri/log/$_'>$log_name_hash{discover_networks}</a>";
            } elsif ( $_ =~ /networks_snmp/ ) {
                $log_link .= "<br><a href='$server_proto://$base_uri/log/$_'>$log_name_hash{get_networks}</a>";
            } elsif ( $_ =~ /vlans/ ) {
                $log_link .= "<br><a href='$server_proto://$base_uri/log/$_' class='nowrap'>$log_name_hash{vlans}</a>";
            } elsif ( $_ =~ /gestioip_dns/ ) {
                $log_link .= "<br><a href='$server_proto://$base_uri/log/$_' class='nowrap'>$log_name_hash{gestioip_dns}</a>";
            } elsif ( $_ =~ /gestioip_snmp/ ) {
                $log_link .= "<br><a href='$server_proto://$base_uri/log/$_' class='nowrap'>$log_name_hash{gestioip_snmp}</a>";
            } elsif ( $_ =~ /leases/ ) {
                $log_link .= "<br><a href='$server_proto://$base_uri/log/$_' class='nowrap'>$log_name_hash{leases}</a>";
            } elsif ( $_ =~ /backup_gip/ ) {
                $log_link .= "<br><a href='$server_proto://$base_uri/log/$_' class='nowrap'>$log_name_hash{backup_gip}</a>";
            } elsif ( $_ =~ /aws/ ) {
                $log_link .= "<br><a href='$server_proto://$base_uri/log/$_' class='nowrap'>$log_name_hash{aws}</a>";
            } elsif ( $_ =~ /azure/ ) {
                $log_link .= "<br><a href='$server_proto://$base_uri/log/$_' class='nowrap'>$log_name_hash{azure}</a>";
            } elsif ( $_ =~ /gcp/ ) {
                $log_link .= "<br><a href='$server_proto://$base_uri/log/$_' class='nowrap'>$log_name_hash{gcp}</a>";
            } elsif ( $_ =~ /fetch_config/ ) {
                $log_link .= "<br><a href='$server_proto://$base_uri/log/$_' class='nowrap'>$log_name_hash{cmm}</a>";
            }
        }
        $log_link =~ s/^<br>// if $log_link;

		if ( $confirmation eq "yes" ) {
			$onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
		}

		$start_date =~ /^(\d+)\/(\d+)\/(\d+) (\d+):(\d+)/;
		my $exe_day = $1;
		my $exe_month = $2;
		my $exe_year = $3;
		my $exe_hour = $4;
		my $exe_minute = $5;
		my $exe_sec = "00";

		my $now_epoch = time();
		my $now_time = strftime "%d/%m/%Y %H:%M", localtime($now_epoch);
        my $last_start_time = "";
		$last_start_time = strftime "%d/%m/%Y %H:%M", localtime($last_start_time_epoch) if $last_start_time_epoch;
        if ( $run_once && $last_start_time_epoch ) {
            $next_run = "";
            $status=$status_hash{3};
        }

		my $exe_epoch = timelocal($exe_sec,$exe_minute,$exe_hour,$exe_day,$exe_month-1,$exe_year);
		my $edit_form = "<form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_scheduled_job_form.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\"></form>";
		if ( $now_epoch >= $exe_epoch && $run_once ) {
			$edit_form = "<img src=\"$server_proto://$base_uri/imagenes/edit_disabled.png\" title='$lang_vars{disabled_message} - $lang_vars{already_executed_message}'>";
		}

		my $duration_string = "";
        if ( $last_start_time_epoch && $last_end_time_epoch ) {
            my $duration = $last_end_time_epoch - $last_start_time_epoch;
			my @parts = gmtime($duration);
			$duration_string = $parts[2] . "h, " if $parts[2] != "0";
			$duration_string = $duration_string . $parts[1] . "m";
			$duration_string = $duration_string . " and " . $parts[0] . "s";
			$duration_string = "<1s" if $duration_string eq "0m and 0s";
			if ( $duration_string =~ /^0m and/ ) {
				$duration_string =~ s/^0m and //;
			}
        }

		my $stylename_disabled = "show_detail_disabled";

		my $bg_color="white";
		my $bg_color_show="#efefef";

		if ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
			$bg_color_show="#efefef";
			$color_helper="1";
		} elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
			$bg_color_show="white";
			$color_helper="0";
		}

        if ( $id eq $changed_id ) {
            $bg_color_show="#a6e8a6";
        }


		print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td align=\"center\">$id</td><td align=\"center\">$name</td><td align=\"center\">$job_type</td><td align=\"center\">$run_once</td><td align=\"center\">$status</td><td align=\"center\">$comment</td><td align=\"center\">$repeat_interval</td><td align=\"center\">$next_run</td><td align=\"center\">$last_start_time</td><td align=\"center\">$duration_string</td><td align=\"center\">$last_result</td><td align=\"center\">$log_link</td>";

		print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/show_scheduled_job_detail.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"show_info\" class=\"info_button\" style=\"cursor:pointer;\" title=\"$lang_vars{show_job_details_massage}\"></form></td><td>$edit_form</td><td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_scheduled_job.cgi\"><input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"name\" type=\"hidden\" value=\"$name\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";
		print "</tr>\n";
	}
	print "</table><p>\n";
print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}

# CHECKS



#SMTP Server


sub get_smtp_server {
	my ( $self, $client_id ) = @_;
	my @values;
	my $ip_ref;
    my $dbh = $self->_mysql_connection();
	my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id, name, username, password, default_from, security, port, timeout, comment, client_id FROM smtp_server WHERE ( client_id = $qclient_id OR client_id = '9999' ) ORDER BY name") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;
    return @values;
}

sub get_smtp_server_hash {
    my ( $self, $client_id, $key ) = @_;
    my %values;
    my $ip_ref;
    $key = "id" if ! $key;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id, name,  username, password, default_from, security, port, timeout, comment, client_id FROM smtp_server WHERE ( client_id = $qclient_id OR client_id = '9999' ) ORDER BY name"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{id};
        my $name = $ip_ref->{name};
        my $username = $ip_ref->{username};
        my $password = $ip_ref->{password};
        my $default_from = $ip_ref->{default_from};
        my $security = $ip_ref->{security};
        my $port = $ip_ref->{port};
        my $timeout = $ip_ref->{timeout};
        my $comment = $ip_ref->{comment};
        if ( $key eq "id" ) {
            push @{$values{$id}},"$name","$username","$password","$default_from","$security","$port","$timeout","$comment";
        } elsif ( $key eq "name" ) {
            push @{$values{$name}},"$id","$username","$password","$default_from","$security","$port","$timeout","$comment";
        }
    }
    $sth->finish();
    $dbh->disconnect;

    return %values;
}


sub get_smtp_server_from_id {
	my ( $self, $client_id, $id ) = @_;
	my @values;
	my $ip_ref;
    my $dbh = $self->_mysql_connection();
	my $qid = $dbh->quote( $id );
	my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT name, username, password, default_from, security, port, timeout, comment, client_id FROM smtp_server WHERE id=$qid ORDER BY name") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;

    return @values;
}

sub insert_smtp_server {
    my ( $self, $client_id, $name, $username, $password, $default_from, $security, $port, $timeout, $comment ) = @_;

    $username = "" if ! $username;
    $password = "" if ! $password;
    $default_from = "" if ! $default_from;
    $security = "" if ! $security;
    $comment = "" if ! $comment;

    my $dbh = $self->_mysql_connection();

    my $qname = $dbh->quote( $name );
    my $qusername = $dbh->quote( $username );
    my $qpassword = $dbh->quote( $password );
    my $qdefault_from = $dbh->quote( $default_from );
    my $qsecurity = $dbh->quote( $security );
    my $qport = $dbh->quote( $port );
    my $qtimeout = $dbh->quote( $timeout );
    my $qcomment = $dbh->quote( $comment );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("INSERT INTO smtp_server (name, username, password, default_from, security, port, timeout, comment, client_id) VALUES ($qname,$qusername,$qpassword,$qdefault_from,$qsecurity,$qport,$qtimeout,$qcomment,$qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth = $dbh->prepare("SELECT LAST_INSERT_ID()") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
	$sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $id = $sth->fetchrow_array;

    $sth->finish();
    $dbh->disconnect;

	return $id;
}

sub update_smtp_server {
    my ( $self,$client_id, $id, $name, $username, $password, $default_from, $security, $port, $timeout, $comment ) = @_;

    $username = "" if ! $username;
    $password = "" if ! $password;
    $default_from = "" if ! $default_from;
    $security = "" if ! $security;
    $comment = "" if ! $comment;

    my $dbh = $self->_mysql_connection();

    my $qid = $dbh->quote( $id );
    my $qname = $dbh->quote( $name );
    my $qusername = $dbh->quote( $username );
    my $qpassword = $dbh->quote( $password );
    my $qdefault_from = $dbh->quote( $default_from );
    my $qsecurity = $dbh->quote( $security );
    my $qport = $dbh->quote( $port );
    my $qtimeout = $dbh->quote( $timeout );
    my $qcomment = $dbh->quote( $comment );

    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("UPDATE smtp_server SET name=$qname, username=$qusername, password=$qpassword, default_from=$qdefault_from, security=$qsecurity, port=$qport, timeout=$timeout, comment=$qcomment, client_id=$qclient_id WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_smtp_server {
    my ( $self, $client_id, $id ) = @_;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM smtp_server WHERE id=$qid"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}



sub PrintSMTPServerTab {
	my ( $self, $client_id, $vars_file, $changed_id ) = @_;
	my %lang_vars = $self->_get_vars("$vars_file");
	my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
	my @config = $self->get_config("$client_id");
	my @global_config = $self->get_global_config("$client_id");
	my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
    my $site_search_main_menu = $global_config[0]->[22] || 0;

    my $count = 0;
	my %values = $self->get_smtp_server_hash("$client_id","id");
	my $values =\%values;

	my %changed_id=();
    $changed_id = \%changed_id if ! $changed_id;

	$self->PrintJavaScriptPrint("$lang_vars{delete_smtp_server_confirm_message}");

	if ( ! keys %{$values} ) {
		print "<p class=\"NotifyText\">$lang_vars{no_resultado_message}</p><br>\n";
		return;
	}

	my $onclick_confirmation_delete = "";
	my $color_helper=0;

	my $anz=keys( %$values );

    print "<p>\n";
	print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";

	print "<tr align=\"center\">";
	print "<td><font size=\"2\"><b>$lang_vars{name_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{user_name_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{default_from_address_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{ssl_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{port_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{timeout_message}</b></font></td><td><font size=\"2\"><b>$lang_vars{comentario_message}</b></font></td>";

	print "<td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";


	my $sort_order_ref = sub {
		my $A=$values->{$a}->[0];
		my $B=$values->{$b}->[0];
		${A} cmp ${B};
	};

	foreach my $id ( sort $sort_order_ref keys %{$values} ) {

        next if ! $id;

        my $name = $values->{$id}->[0] || "";
        my $username = $values->{$id}->[1] || "";
        my $default_from = $values->{$id}->[3] || "";
        my $security = $values->{$id}->[4] || "";
        my $port = $values->{$id}->[5] || "";
        my $timeout = $values->{$id}->[6] || "";
        my $comment = $values->{$id}->[7] || "";

		my $onclick_scroll='onclick="saveScrollCoordinates();"';
		if ( $confirmation eq "yes" ) {
			$onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
		}

		my $stylename_disabled="show_detail_disabled";

        my $changed_id_val = "";
        if ( $id ) {
            if ( defined $changed_id->{"$id"} ) {
                $changed_id_val = $changed_id->{"$id"};
            }
        }

		my $bg_color="white";
		my $bg_color_show="#efefef";

        if ( $id && $changed_id_val ) {
            $bg_color_show="#a6e8a6";
		} elsif ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
			$bg_color_show="#efefef";
			$color_helper="1";
		} elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
			$bg_color_show="white";
			$color_helper="0";
		}

		my $hidden_form_vals="<input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">";

		print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\"><td>$name</td><td>$username</td><td>$default_from</td><td>$security</td><td>$port</td><td>$timeout</td><td>$comment</td>";

		print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_mod_smtp_server_form.cgi\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\" $onclick_scroll></form></td>";

		print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/ip_delete_smtp_server.cgi\">$hidden_form_vals<input name=\"name\" type=\"hidden\" value=\"$name\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";


		print "</tr>\n";
	}

	print "</table><p>\n";

#	print "<form name=\"ip_export_dns_server_group_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_export_dns_server_group.cgi\" style=\"display:inline;\"><input type=\"hidden\" name=\"match\" value=\"$match\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"input_link_w_right\" value=\"$lang_vars{export_message}\" name=\"B1\"></form><p><br>\n";

print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}

sub check_valid_email {
	my ( $self, $email ) = @_;
    
    if ( $email =~ /^[A-Z,a-z,0-9,!]{1,64}@[A-Z,a-z,0-9,!]{1,255}\.[A-Z,a-z,0-9]{2,4}/ ) {
        return 0;
    } else {
        return 1;
    }

}


## LDAP

sub create_ldap_connection {
	my $self = shift;
	my %args = @_;

    use Net::LDAP;

	my $client_id = $args{client_id} || "";
	my $ldap_server = $args{ldap_server} || "";
	my $protocol = $args{protocol} || "";
	my $ldap_port = $args{ldap_port} || "";
	my $bind_dn = $args{bind_dn} || "";
	my $password = $args{password} || "";

	my $ldap_server_uri = $protocol . "://" . $ldap_server;

	my %error_hash;
	my $error = "";

	# untaint - prevents taint error "Socket.pm line 80" when called from intapi
	$ldap_server_uri =~ /^(.*)$/;
	$ldap_server_uri = $1;
	$ldap_port =~ /^(.*)$/;
	$ldap_port = $1;
	$protocol =~ /^(.*)$/;
	$protocol = $1;

	my $ldap = Net::LDAP->new($ldap_server_uri, port=>$ldap_port, scheme=>$protocol) or $error = "$@";

	if ( $error ) {
		$error_hash{ldap_error} = $error;
		return \%error_hash;
	} elsif ( ! $ldap ) {
		$error_hash{ldap_error} = "Connect error";
		return \%error_hash;
	}
	
	my $message = $ldap->bind($bind_dn, password=>$password);

	if ($message->code != 0) {
		$error = $message->error_desc;
		$error = "Bind error: $error";
		$error_hash{ldap_error} = $error;
		return \%error_hash;
	}

	return $ldap;
}

sub LDAPsearch {
  my ($self,$ldap,$searchString,$attrs,$base) = @_;

    debug("LDAPsearch: $base - $searchString - $attrs");

  my $result = $ldap->search ( base    => "$base",
                               scope   => "sub",
                               filter  => "$searchString",
                               attrs   =>  $attrs,
                               # TEST
                               debug => 1,
                             );

	return $result;
}


sub update_ldap_apache_configuration {
	my $self = shift;
	my %args = @_;

	my $client_id=$args{client_id} || "";
	my $ldap_server=$args{ldap_server} || "";
	my $protocol=$args{protocol} || "";
	my $ldap_port=$args{ldap_port} || "";
	my $bind_dn=$args{bind_dn} || "";
	my $password=$args{password} || "";
	my $base_dn=$args{base_dn} || "";
	my $user_attribute=$args{user_attribute} || "";
	my $filter=$args{filter} || "";

	my $error;

	my @lines;
	my $ldap_conf = "/usr/share/gestioip/etc/apache/apache_ldap.conf";
	my $ldap_conf_bck = "/usr/share/gestioip/etc/apache/apache_ldap.conf.bck";
	
	# create backup of old configuration
	use File::Copy;
	copy($ldap_conf, $ldap_conf_bck) or $error = "Can not create configuration backup: $!";
    return "BACKUP_LDAP_CONF: $error" if $error;

	my $search = "";
	if ( $user_attribute ) {
		$search .= '?' . $user_attribute;
	}
	if ( $filter ) {
		$search .= '?sub?(' . $filter . ')';
	}

	#An RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is
	#ldap://host:port/basedn?attribute?scope?filter
	# scope can be either one or sub

	# ldap://ldap.example.com/dc=example,dc=com?cn?sub?(posixid=*)
	# ldap://ldap.example.com:389/dc=example,dc=com?sAMAccountName?sub?(objectClass=*)
	# ldap://localhost:389/dc=example,dc=com?uid
	my $ldap_auth_url = '"' . $protocol . '://' . $ldap_server . ':' . $ldap_port . '/' . $base_dn . $search . '" NONE';

    open(LC,"<$ldap_conf") or $error = "Unable to open $ldap_conf for write: $? $!";
    return "READ_LDAP_CONF: $error" if $error;
    while (<LC> ) {

		if ( $_ =~ /(AuthFormProvider|AuthLDAPBindDN|AuthLDAPBindPassword|AuthLDAPUrl|AuthLDAPGroupAttribute)/ ) {
			$_ =~ s/#+//;
		}

		if ( $_ =~ /AuthLDAPBindDN/ ) {
			$_ =~ s/(AuthLDAPBindDN).*/$1 $bind_dn/;
		} elsif ( $_ =~ /AuthLDAPBindPassword/ ) {
			$_ =~ s/(AuthLDAPBindPassword).*/$1 $password/;
		} elsif ( $_ =~ /AuthLDAPUrl/ ) {
			$_ =~ s/(AuthLDAPUrl).*/$1 $ldap_auth_url/;
		}
			
        push @lines, $_;
    }
    close LC;

    # write changes to file
	my $LC;
    open $LC, ">", $ldap_conf or $error = "Unable to open $ldap_conf for write: $? $!";
    return "WRITE_LDAP_CONF: $error" if $error;
    for (@lines){
        print {$LC} $_;
    }
    close $LC;

	# Check new config and reload apache
	my $exit_status = $self->reload_apache("$client_id", "ldap_server");
	if ( $exit_status !~ /^\d$/ ) {
		return "RELOAD_APACHE $exit_status" if $exit_status;
	}
	if ( $exit_status != 0 ) {
		my $ldap_conf_fail = "/usr/share/gestioip/etc/apache/apache_ldap.conf_failed";
		copy($ldap_conf, $ldap_conf_fail) or $error = "Can not save bad configuration backup: $!";
        return "CREATE_FAIL_CONFIG_BACKUP: $error" if $error;
	}
	$self->{exit_status_apache} = $exit_status;

	return;
}

sub reset_ldap_apache_configuration {
    my ( $self, $client_id ) = @_;

	my @lines;
	my $error;

	my $ldap_conf = "/usr/share/gestioip/etc/apache/apache_ldap.conf";
	my $ldap_conf_bck = "/usr/share/gestioip/etc/apache/apache_ldap.conf.bck";
	
	# create backup of old configuration
	use File::Copy;
	copy($ldap_conf, $ldap_conf_bck) or $error = "Can not create configuration backup: $!";
    return "BACKUP_LDAP_CONF: $error" if $error;

    open(LC,"<$ldap_conf") or $error = "Unable to open $ldap_conf for write: $? $!";
    return "READ_LDAP_CONF: $error" if $error;
    while (<LC> ) {

		if ( $_ =~ /(AuthFormProvider|AuthLDAPBindDN|AuthLDAPBindPassword|AuthLDAPUrl|AuthLDAPGroupAttribute)/ ) {
			$_ =~ s/^/#/;
		}
        push @lines, $_;
    }
    close LC;

    # write changes to file
	my $LC;
    open $LC, ">", $ldap_conf or $error = "Unable to open $ldap_conf for write: $? $!";
    return "WRITE_LDAP_CONF: $error" if $error;
    for (@lines){
        print {$LC} $_;
    }
    close $LC;

	# Check new config and reload apache
	my $exit_status = $self->reload_apache("$client_id", "ldap_server");
	if ( $exit_status !~ /^\d$/ ) {
		return "RELOAD_APACHE $exit_status" if $exit_status;
	}
	if ( $exit_status != 0 ) {
		my $ldap_conf_fail = "/usr/share/gestioip/etc/apache/apache_ldap.conf_failed";
		copy($ldap_conf, $ldap_conf_fail) or $error = "Can not save bad configuration backup: $!";
        return "CREATE_FAIL_CONFIG_BACKUP: $error" if $error;
	}
	$self->{exit_status_apache} = $exit_status;

	return;
}


sub get_ldap_user_groups {
    my ( $self, $client_id, $user, $session ) = @_;

    my @values;
    my $ip_ref;
	$session = "" if ! $session;

    my $dbh = $self->_mysql_connection();

    my $quser = $dbh->quote( $user );
    my $qsession = "";

 	my $session_expr = "";
	if ( $session ) {
		$qsession = $dbh->quote( $session );
		$session_expr = "AND session=$qsession";
	}

    my $sth = $dbh->prepare("SELECT id, user, user_group_id, last_change FROM ldap_user_groups WHERE user=$quser $session_expr") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;

    return @values;
}

sub insert_ldap_user_groups {
    my $self = shift;
    my %args = @_;

    my $client_id=$args{client_id} || "";
    my $user=$args{user} || "";
    my $user_group_id=$args{user_group_id} || "";


    my $dbh = $self->_mysql_connection();

    my $quser = $dbh->quote( $user );
    my $quser_group_id = $dbh->quote( $user_group_id );
    my $qclient_id = $dbh->quote( $client_id );
    my $qmydatetime = $dbh->quote( time() );

    my $sth = $dbh->prepare("INSERT INTO ldap_user_groups (user, user_group_id, last_change) values ($quser, $quser_group_id, $qmydatetime)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub update_ldap_user_groups {
    my $self = shift;
    my %args = @_;

    my $id=$args{id} || "";
    my $client_id=$args{client_id} || "";
    my $user=$args{user} || "";
    my $user_group_id=$args{user_group_id} || "";

    my $dbh = $self->_mysql_connection();

    my $qid = $dbh->quote( $id );
    my $quser = $dbh->quote( $user );
    my $quser_group_id = $dbh->quote( $user_group_id );
    my $qclient_id = $dbh->quote( $client_id );
    my $qmydatetime = $dbh->quote( time() );

    my $sth = $dbh->prepare("UPDATE ldap_user_groups SET user=$quser, user_group_id=$quser_group_id, last_change=$qmydatetime WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","update db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}



sub get_ldap_server {
    my ( $self, $client_id ) = @_;
    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id, name, server, type, protocol, port, bind_dn, bind_password, base_dn, user_attribute, user_filter, comment, enabled, client_id FROM ldap_server WHERE ( client_id = $qclient_id OR client_id = '9999' ) ORDER BY name") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;
    return @values;
}

sub get_ldap_server_hash {
    my ( $self, $client_id, $key, $id, $enabled ) = @_;

    my %values;
    my $ip_ref;
    $key = "id" if ! $key;

    my $dbh = $self->_mysql_connection();

	my $id_expr = "";
	if ( $id ) {
    	my $qid = $dbh->quote( $id );
		$id_expr = "AND id=$qid";
	}

	my $enabled_expr = "";
	if ( $enabled ) {
    	my $qenabled = $dbh->quote( $enabled );
		$enabled_expr = "AND enabled=1";
	}

    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("SELECT id, name, server, type, protocol, port, bind_dn, bind_password, base_dn, user_attribute, user_filter, comment, enabled, client_id FROM ldap_server WHERE ( client_id = $qclient_id OR client_id = '9999' ) $id_expr $enabled_expr ORDER BY name" 
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {
        my $id = $ip_ref->{id};
        my $name = $ip_ref->{name};
        my $server = $ip_ref->{server};
        my $type = $ip_ref->{type} || "";
        my $protocol = $ip_ref->{protocol} || "";
        my $port = $ip_ref->{port};
        my $bind_dn = $ip_ref->{bind_dn} || "";
        my $bind_password = $ip_ref->{bind_password} || "";
        my $base_dn = $ip_ref->{base_dn} || "";
        my $user_attribute = $ip_ref->{user_attribute} || "";
        my $user_filter = $ip_ref->{user_filter} || "";
        my $comment = $ip_ref->{comment} || "";
        my $enabled = $ip_ref->{enabled} || 0;
        my $client_id = $ip_ref->{client_id};
        if ( $key eq "id" ) {
            push @{$values{$id}},"$name","$server","$type","$protocol","$port","$bind_dn","$bind_password","$base_dn","$user_attribute","$user_filter","$comment","$enabled","$client_id";
        } elsif ( $key eq "name" ) {
            push @{$values{$name}},"$id","$server","$type","$protocol","$port","$bind_dn","$bind_password","$base_dn","$user_attribute","$user_filter","$comment","$enabled","$client_id";
        }
    }
    $sth->finish();
    $dbh->disconnect;

    return %values;
}

sub insert_ldap_server {
	my $self = shift;
	my %args = @_;

	my $client_id=$args{client_id} || "";
	my $name=$args{name} || "";
	my $ldap_server=$args{ldap_server} || "";
	my $enabled=$args{enabled} || "0";
	my $type=$args{type} || "";
	my $protocol=$args{protocol} || "";
	my $ldap_port=$args{ldap_port} || "";
	my $bind_dn=$args{bind_dn} || "";
	my $password=$args{password} || "";
	my $base_dn=$args{base_dn} || "";
	my $user_attribute=$args{user_attribute} || "";
	my $filter=$args{filter} || "";
	my $comment=$args{comment} || "";

    my $dbh = $self->_mysql_connection();

    my $qname = $dbh->quote( $name );
    my $qldap_server = $dbh->quote( $ldap_server );
    my $qenabled = $dbh->quote( $enabled );
    my $qtype = $dbh->quote( $type );
    my $qprotocol = $dbh->quote( $protocol );
    my $qldap_port = $dbh->quote( $ldap_port );
    my $qbind_dn = $dbh->quote( $bind_dn );
    my $qpassword = $dbh->quote( $password );
    my $qbase_dn = $dbh->quote( $base_dn );
    my $quser_attribute = $dbh->quote( $user_attribute );
    my $qfilter = $dbh->quote( $filter );
    my $qcomment = $dbh->quote( $comment );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("INSERT INTO ldap_server (name, server, type, protocol, port, bind_dn, bind_password, base_dn, user_attribute, user_filter, comment, enabled, client_id ) VALUES ($qname, $qldap_server, $qtype, $qprotocol, $qldap_port, $qbind_dn, $qpassword, $qbase_dn, $quser_attribute, $qfilter, $qcomment, $qenabled, $qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth = $dbh->prepare("SELECT LAST_INSERT_ID()") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $id = $sth->fetchrow_array;

    $sth->finish();
    $dbh->disconnect;

    return $id;
}


sub update_ldap_server {
	my $self = shift;
	my %args = @_;

	my $id=$args{id} || "";
	my $client_id=$args{client_id} || "";
	my $name=$args{name} || "";
	my $ldap_server=$args{ldap_server} || "";
	my $enabled=$args{enabled} || "0";
	my $enabled_db=$args{enabled_db} || "";
	my $type=$args{type} || "";
	my $protocol=$args{protocol} || "";
	my $ldap_port=$args{ldap_port} || "";
	my $bind_dn=$args{bind_dn} || "";
	my $password=$args{password} || "";
	my $base_dn=$args{base_dn} || "";
	my $user_attribute=$args{user_attribute} || "";
	my $filter=$args{filter} || "";
	my $comment=$args{comment} || "";

    my $dbh = $self->_mysql_connection();

    my $qid = $dbh->quote( $id );
    my $qname = $dbh->quote( $name );
    my $qldap_server = $dbh->quote( $ldap_server );
    my $qenabled = $dbh->quote( $enabled );
    my $qtype = $dbh->quote( $type );
    my $qprotocol = $dbh->quote( $protocol );
    my $qldap_port = $dbh->quote( $ldap_port );
    my $qbind_dn = $dbh->quote( $bind_dn );
    my $qpassword = $dbh->quote( $password );
    my $qbase_dn = $dbh->quote( $base_dn );
    my $quser_attribute = $dbh->quote( $user_attribute );
    my $qfilter = $dbh->quote( $filter );
    my $qcomment = $dbh->quote( $comment );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("UPDATE ldap_server SET name=$qname, server=$qldap_server, type=$qtype, protocol=$qprotocol, port=$qldap_port, bind_dn=$qbind_dn, bind_password=$qpassword, base_dn=$qbase_dn, user_attribute=$quser_attribute, user_filter=$qfilter, enabled=$qenabled, comment=$qcomment WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}

sub delete_ldap_server {
    my ( $self, $client_id, $id ) = @_;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM ldap_server WHERE id=$qid"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}

sub reload_apache {
    my ($self, $client_id, $object) = @_;

    # apachectl script is missing path for id and runcon
    $ENV{PATH} = "/usr/bin";

    my $vars_file = $self->{vars_file};
    my %lang_vars = $self->_get_vars("$vars_file");

	my $exit_status;
	my $command;
	my $error;

    # untaint
	my $apachectl_cmd = "/usr/sbin/apachectl configtest";
    $apachectl_cmd =~ /^(.*)$/;
    my $apachectl = $1;


	$command = "$apachectl 1>&2";
	$exit_status = system("$command");

	if ( $exit_status != 0 ) {
		my $output =`$apachectl 2>&1`;

		#reset Apache LDAP config
		my @output = split("\n", $output);
		my $output_string = "";
		foreach (@output) {
			$output_string .= "<br>" . $_ if $_ !~ /apachectl/;
		}
		$error = "Apache config test returned:<p>$output_string";

		use File::Copy;
		if ( $object eq "ldap_server" ) {
			my $ldap_conf = "/usr/share/gestioip/etc/apache/apache_ldap.conf";
			my $ldap_conf_bck = "/usr/share/gestioip/etc/apache/apache_ldap.conf.bck";
			copy($ldap_conf_bck, $ldap_conf) or $error = "Can not restore configuration backup: $! <p>Apache config test returned:<p>$output_string<br>";
            return "CREATE_FAIL_CONFIG_BACKUP: $error" if $error;
		} elsif ( $object eq "ldap_require" || $object eq "ldap_user" ) {
            my $error1 = "";
			my $ldap_require_conf = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf";
			my $ldap_require_conf_bck = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf.bck";
			copy($ldap_require_conf_bck, $ldap_require_conf) or $error1 = "Can not restore configuration backup: $! <p>Apache config test returned:<p>$output_string<br>";
            return "CREATE_FAIL_CONFIG_BACKUP: $error1" if $error1;
		}

        $self->print_error("$client_id","$error");
	}

	my $sudo_cmd = "/usr/bin/sudo";
    $sudo_cmd =~ /^(.*)$/;
    my $sudo = $1;

	my $apache_cmd = "/etc/init.d/apache2 reload";
    $apache_cmd =~ /^(.*)$/;
    my $apache = $1;


	$command = $sudo . ' ' . $apache . " 1>&2";
    debug("Executing: $command");
	$exit_status = system("$command");

	return $exit_status;
}

sub check_new_apache_config {
    my $val = 0;
    if ( -e "/usr/share/gestioip/etc/apache/apache-groups" ) {
        $val = 1;
    }

    return $val;
}


sub PrintGenericTab {
    my ( $self, $client_id, $vars_file, $changed_id, $column_names, $column_positions, $mod_form, $delete_form, $data_func ) = @_;
    my %lang_vars = $self->_get_vars("$vars_file");
    my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
    my @config = $self->get_config("$client_id");
    my @global_config = $self->get_global_config("$client_id");
    my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
    my $site_search_main_menu = $global_config[0]->[22] || 0;

    my $count = 0;
    my %values = $self->get_ldap_server_hash("$client_id","id");
#    my %values = &$data_func;
    my $values =\%values;

    my %changed_id=();
    $changed_id = \%changed_id if ! $changed_id;

    $self->PrintJavaScriptPrint("$lang_vars{delete_smtp_server_confirm_message}");

    if ( ! keys %{$values} ) {
        print "<p class=\"NotifyText\">$lang_vars{no_resultado_message}</p><br>\n";
        return;
    }

    my $onclick_confirmation_delete = "";
    my $color_helper=0;

    my $anz=keys( %$values );

    print "<p>\n";
    print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";

    print "<tr align=\"center\">";

    foreach my $cn ( @$column_names ) {
        print "<td><font size=\"2\"><b>$cn</b></font></td>";
    }    
    
    print "<td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";


    my $sort_order_ref = sub {
        my $A=$values->{$a}->[0];
        my $B=$values->{$b}->[0];
        ${A} cmp ${B};
    };

    foreach my $id ( sort $sort_order_ref keys %{$values} ) {

        next if ! $id;

		my $name = $values->{$id}->[0] || 0;
		my $values_show = "";
		foreach my $cn ( @$column_names ) {
			my $pos = $column_positions->{$cn};
			my $val = $values->{$id}->[$pos] || "";
			if ( $cn eq $lang_vars{enabled_message} ) {
				$val = "X" if $val;
			}
			$values_show .= "<td>" . $val . "</td>";
		}

        my $onclick_scroll='onclick="saveScrollCoordinates();"';
        if ( $confirmation eq "yes" ) {
            $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
        }

        my $stylename_disabled="show_detail_disabled";

        my $changed_id_val = "";
        if ( $id ) {
            if ( defined $changed_id->{"$id"} ) {
                $changed_id_val = $changed_id->{"$id"};
            }
        }

        my $bg_color="white";
        my $bg_color_show="#efefef";

        if ( $id && $changed_id_val ) {
            $bg_color_show="#a6e8a6";
        } elsif ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
            $bg_color_show="#efefef";
            $color_helper="1";
        } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
            $bg_color_show="white";
            $color_helper="0";
        }

        my $hidden_form_vals="<input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">";

        print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\">";

		print "$values_show";

        print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/$mod_form\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\" $onclick_scroll></form></td>";

        print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/$delete_form\">$hidden_form_vals<input name=\"name\" type=\"hidden\" value=\"$name\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";


        print "</tr>\n";
    }

    print "</table><p>\n";

#   print "<form name=\"ip_export_dns_server_group_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_export_dns_server_group.cgi\" style=\"display:inline;\"><input type=\"hidden\" name=\"match\" value=\"$match\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"input_link_w_right\" value=\"$lang_vars{export_message}\" name=\"B1\"></form><p><br>\n";

print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}




#### LDAP Groups

sub get_table_column_names {
    my ( $self, $client_id, $table_name ) = @_;

    my @columns;
    my $ip_ref;

    my $dbh = $self->_mysql_connection();

    return if ! $table_name;

    my $sth = $dbh->prepare("desc $table_name")
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute()
        or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @columns, [ @$ip_ref ];
    }

    return @columns;
}

sub get_table_array {
    my ( $self, $client_id, $table_name, $id ) = @_;

	my $ip_ref;
	my @values;

    my @columns = $self->get_table_column_names("$client_id", "$table_name");
    my $columns;

    foreach my $col ( @columns ) {
       $columns .= ", " . $col->[0];
    }
    $columns =~ s/^, //;

    my $dbh = $self->_mysql_connection();

	my $id_expr = "";
	if ( $id ) {
		my $qid = $dbh->quote( $id );
		$id_expr = " AND id=$qid";
	}

    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("SELECT $columns FROM $table_name WHERE ( client_id = $qclient_id OR client_id = '9999' ) $id_expr ORDER BY id"
       ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;

    return @values;
}


sub get_table_hash {
    my ( $self, $client_id, $table_name, $key, $id ) = @_;

	return if ! $table_name;

    my %all_values;
    my $ip_ref;

    $key = "id" if ! $key;

    my @columns = $self->get_table_column_names("$client_id", "$table_name");
    my $columns;

    foreach my $col ( @columns ) {
       $columns .= ", " . $col->[0];
    }
    $columns =~ s/^, //;

    my $dbh = $self->_mysql_connection();

    my $id_expr = "";
    if ( $id ) {
        my $qid = $dbh->quote( $id );
        $id_expr = "AND id=$qid";
    }

    my $qclient_id = $dbh->quote( $client_id );

    debug("SELECT $columns FROM $table_name WHERE ( client_id = $qclient_id OR client_id = '9999' ) $id_expr ORDER BY id");
    my $sth = $dbh->prepare("SELECT $columns FROM $table_name WHERE ( client_id = $qclient_id OR client_id = '9999' ) $id_expr ORDER BY id" 
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_hashref ) {

        my $id_found = $ip_ref->{id} || "";
        my $name = $ip_ref->{name} || "";
        my %values = ();
		foreach my $col ( @columns ) {
            my $col_name = $col->[0];
			$values{$col_name} = $ip_ref->{$col_name};
		}

        if ( $key eq "id" ) {
            $all_values{$id_found} = \%values;
        } elsif ( $key eq "name" ) {
            $all_values{$name} = \%values;
        }
    }
    $sth->finish();
    $dbh->disconnect;

    return %all_values;
}



sub delete_object {
    my ( $self, $client_id, $table_name, $id ) = @_;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();
    my $qid = $dbh->quote( $id );
    my $qclient_id = $dbh->quote( $client_id );
    my $sth = $dbh->prepare("DELETE FROM $table_name WHERE id=$qid"
        ) or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth->finish();
    $dbh->disconnect;
}



sub insert_LDAP_group {
	my $self = shift;
	my %args = @_;

	my $client_id=$args{client_id} || "";
	my $name=$args{name} || "";
	my $ldap_server_id=$args{ldap_server_id} || "";
	my $dn=$args{dn} || "";
	my $user_group_id=$args{user_group_id} || "";
	my $group_attrib_is_dn=$args{group_attrib_is_dn} || "";
	my $comment=$args{comment} || "";
	my $enabled=$args{enabled} || "0";

    my $dbh = $self->_mysql_connection();

    my $qname = $dbh->quote( $name );
    my $qldap_server_id = $dbh->quote( $ldap_server_id );
    my $qdn = $dbh->quote( $dn );
    my $quser_group_id = $dbh->quote( $user_group_id );
    my $qgroup_attrib_is_dn = $dbh->quote( $group_attrib_is_dn );
    my $qcomment = $dbh->quote( $comment );
    my $qenabled = $dbh->quote( $enabled );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("INSERT INTO ldap_group (name, dn, user_group_id, ldap_server_id, group_attrib_is_dn, comment, enabled, client_id ) VALUES ($qname, $qdn, $quser_group_id, $qldap_server_id, $qgroup_attrib_is_dn, $qcomment, $qenabled, $qclient_id)"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");

    $sth = $dbh->prepare("SELECT LAST_INSERT_ID()") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak  $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    my $id = $sth->fetchrow_array;

    $sth->finish();
    $dbh->disconnect;

    return $id;
}


sub update_ldap_group {
	my $self = shift;
	my %args = @_;

	my $id=$args{id} || "";
	my $client_id=$args{client_id} || "";
	my $name=$args{name} || "";
	my $ldap_server_id=$args{ldap_server_id} || "";
	my $dn=$args{dn} || "";
	my $user_group_id=$args{user_group_id} || "";
	my $group_attrib_is_dn=$args{group_attrib_is_dn} || "";
	my $comment=$args{comment} || "";
	my $enabled=$args{enabled} || "0";

    my $dbh = $self->_mysql_connection();

    my $qid = $dbh->quote( $id );
    my $qname = $dbh->quote( $name );
    my $qldap_server_id = $dbh->quote( $ldap_server_id );
    my $qdn = $dbh->quote( $dn );
    my $quser_group_id = $dbh->quote( $user_group_id );
    my $qgroup_attrib_is_dn = $dbh->quote( $group_attrib_is_dn );
    my $qcomment = $dbh->quote( $comment );
    my $qenabled = $dbh->quote( $enabled );
    my $qclient_id = $dbh->quote( $client_id );

    my $sth = $dbh->prepare("UPDATE ldap_group SET name=$qname, dn=$qdn, user_group_id=$quser_group_id, ldap_server_id=$qldap_server_id, group_attrib_is_dn=$qgroup_attrib_is_dn, comment=$qcomment, enabled=$qenabled WHERE id=$qid"
                            ) or croak $self->print_error("$client_id","insert db<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->finish();
    $dbh->disconnect;
}


sub check_ldap_group_assigned {
	# check if a group is assigned to a server
    my ( $self, $client_id, $ldap_server_id ) = @_;

    my @values;
    my $ip_ref;
    my $dbh = $self->_mysql_connection();

    my $qclient_id = $dbh->quote( $client_id );
    my $qldap_server_id = $dbh->quote( $ldap_server_id );

    my $sth = $dbh->prepare("SELECT id, name FROM ldap_group WHERE ldap_server_id=$qldap_server_id AND enabled=1 ORDER BY name") or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    $sth->execute() or croak $self->print_error("$client_id","Can not execute statement:<p>$DBI::errstr");
    while ( $ip_ref = $sth->fetchrow_arrayref ) {
        push @values, [ @$ip_ref ];
    }
    $sth->finish();
    $dbh->disconnect;

    return @values;
}

sub merge_ldap_group_permissions {
    my ($self, $vars_file, $ldap_user_groups_found) = @_;

    my @ldap_user_groups_found = @$ldap_user_groups_found;

    my %ldap_values_user_group_perm_all;

	foreach my $ldap_group_id ( @ldap_user_groups_found ) {
		my %ldap_values_user_group_perms = $self->get_user_group_perms_hash("$vars_file","$ldap_group_id","");
		for my $klv ( keys %ldap_values_user_group_perms ) {
			if ( ! exists $ldap_values_user_group_perm_all{$klv} ) {
				$ldap_values_user_group_perm_all{$klv} = $ldap_values_user_group_perms{$klv};
            } elsif ( $klv eq "locs_ro_perm" || $klv eq "locs_rw_perm" ) {
                if ( $ldap_values_user_group_perms{$klv} ne $ldap_values_user_group_perm_all{$klv} ) {
                    my @arr1 = split("_", $ldap_values_user_group_perms{$klv});
                    my @arr2 = split("_", $ldap_values_user_group_perm_all{$klv});
                    push(@arr1, @arr2);
                    my %hash = map { $_ => 1 } @arr1;
                    my @arr_merge = keys %hash;
                    $ldap_values_user_group_perm_all{$klv} = join("_", @arr_merge);
                    if ( $ldap_values_user_group_perm_all{$klv} =~ /9999/ ) {
                        $ldap_values_user_group_perm_all{$klv} = 9999;
                    }
                } else {
                    $ldap_values_user_group_perm_all{$klv} = $ldap_values_user_group_perms{$klv};
                }
			} elsif ( $ldap_values_user_group_perms{$klv} > $ldap_values_user_group_perm_all{$klv} ) {
				$ldap_values_user_group_perm_all{$klv} = $ldap_values_user_group_perms{$klv};
			}
		}
	}

    return %ldap_values_user_group_perm_all;
}


sub insert_ldap_group_apache_configuration {
    my ( $self, $client_id, $ldap_group ) = @_;

    my $error;
    my @lines;
    my $ldap_conf = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf";
    my $ldap_conf_bck = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf.bck";
	use File::Copy;
	copy($ldap_conf, $ldap_conf_bck) or $error = "Can not create configuration backup: $!";
    return "CREATE_CONFIG_BACKUP: $error" if $error;

    open(LC,"<$ldap_conf") or $error = "Unable to open $ldap_conf for write: $? $!";
    return "READ_LDAP_CONF: $error" if $error;
    while (<LC> ) {
        push @lines, $_;
    }
    close LC;

	push @lines, "Require ldap-group $ldap_group\n";

    # write changes to file
    my $LC;
    open $LC, ">", $ldap_conf or $error = "Unable to open $ldap_conf for write: $? $!";
    return "WRITE_LDAP_CONF: $error" if $error;
    for (@lines){
        print {$LC} $_;
    }
    close $LC;

	# Check new config and reload apache
	my $exit_status = $self->reload_apache("$client_id", "ldap_require") || 0;
	if ( $exit_status !~ /^\d$/ ) {
		return "RELOAD_APACHE $exit_status" if $exit_status;
	}
	if ( $exit_status != 0 ) {
		my $ldap_conf_fail = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf_failed";
		copy($ldap_conf, $ldap_conf_fail) or $error = "Can save bad configuration backup: $!";
        return "CREATE_FAIL_CONFIG_BACKUP: $error" if $error;
	}
	$self->{exit_status_apache} = $exit_status;

    return;
}

sub update_ldap_group_apache_configuration {
    my ( $self, $client_id, $ldap_group_old, $ldap_group_new ) = @_;

    my $error;
    my @lines;
    my $ldap_conf = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf";
    my $ldap_conf_bck = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf.bck";
	use File::Copy;
	copy($ldap_conf, $ldap_conf_bck) or $error = "Can not create configuration backup: $!";
    return "CREATE_CONFIG_BACKUP: $error" if $error;

    open(LC,"<$ldap_conf") or $error = "Unable to open $ldap_conf for write: $? $!";
    return "READ_LDAP_CONF: $error" if $error;
    while (<LC> ) {
		if ( $_ =~ /ldap-group ${ldap_group_old}$/ ) {
			next;
		}
        push @lines, $_;
    }
    close LC;

    push @lines, "Require ldap-group $ldap_group_new\n";

    # write changes to file
    my $LC;
    open $LC, ">", $ldap_conf or $error = "Unable to open $ldap_conf for write: $? $!";
    return "WRITE_LDAP_CONF: $error" if $error;
    for (@lines){
        print {$LC} $_;
    }
    close $LC;

	# Check new config and reload apache
	my $exit_status = $self->reload_apache("$client_id", "ldap_require") || 0;
	if ( $exit_status !~ /^\d$/ ) {
		return "RELOAD_APACHE $exit_status" if $exit_status;
	}
	if ( $exit_status != 0 ) {
		# restore last configuration if config check fails
		my $ldap_conf_fail = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf_failed";
		copy($ldap_conf, $ldap_conf_fail) or $error = "Can save bad configuration backup: $!";
	}
	$self->{exit_status_apache} = $exit_status;

    return;
}


sub delete_ldap_group_apache_configuration {
    my ( $self, $client_id, $ldap_group ) = @_;

    my @lines;
    my $error;

    my $ldap_conf = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf";
    my $ldap_conf_bck = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf.bck";
	use File::Copy;
	copy($ldap_conf, $ldap_conf_bck) or $error = "Can not create configuration backup: $!";
    return "CREATE_CONFIG_BACKUP: $error" if $error;

    open(LC,"<$ldap_conf") or $error = "Unable to open $ldap_conf for write: $? $!";
    return "READ_LDAP_CONF: $error" if $error;
    while (<LC> ) {
        if ( $_ =~ / ${ldap_group}$/ ) {
			next;
        }
        push @lines, $_;
    }
    close LC;

    # write changes to file
    my $LC;
    open $LC, ">", $ldap_conf or $error = "Unable to open $ldap_conf for write: $? $!";
    return "WRITE_LDAP_CONF: $error" if $error;
    for (@lines){
        print {$LC} $_;
    }
    close $LC;

	# Check new config and reload apache
	my $exit_status = $self->reload_apache("$client_id", "ldap_require") || 0;
	if ( $exit_status !~ /^\d$/ ) {
		return "RELOAD_APACHE $exit_status" if $exit_status;
	}
	if ( $exit_status != 0 ) {
		my $ldap_conf_fail = "/usr/share/gestioip/etc/apache/apache_ldap_require.conf_failed";
		copy($ldap_conf, $ldap_conf_fail) or $error = "Can save bad configuration backup: $!";
	}
	$self->{exit_status_apache} = $exit_status;

    return;
}

sub PrintGenericTab1 {
    my ( $self, $client_id, $vars_file, $changed_id, $column_names, $column_names_db, $mod_form, $delete_form, $confirm_message, $id_columns, $data_func, $symbol_columns ) = @_;
    my %lang_vars = $self->_get_vars("$vars_file");
    my $base_uri = $self->get_base_uri();
    my $server_proto=$self->get_server_proto();
    my @config = $self->get_config("$client_id");
    my @global_config = $self->get_global_config("$client_id");
    my $confirmation = $self->get_config_confirmation("$client_id") || "yes";
    my $site_search_main_menu = $global_config[0]->[22] || 0;

	my $user_management_enabled = $global_config[0]->[13] || "no";

    my $count = 0;
    my %values = &$data_func;
    my $values =\%values;

    my %changed_id=();
    $changed_id = \%changed_id if ! $changed_id;

    $self->PrintJavaScriptPrint("$confirm_message");

    if ( ! keys %{$values} ) {
        print "<p class=\"NotifyText\">$lang_vars{no_resultado_message}</p><br>\n";
        return;
    }

    my $onclick_confirmation_delete = "";
    my $color_helper=0;

    my $anz=keys( %$values );

    print "<p>\n";
    print "<table border=\"0\" style=\"border-collapse:collapse\" cellpadding=\"4\" width=\"100%\">\n";

    print "<tr align=\"center\">";

    foreach my $cn ( @$column_names ) {
        print "<td><font size=\"2\"><b>$cn</b></font></td>";
    }    
    
    print "<td width=\"22px\"></td><td width=\"22px\"></td></tr>\n";


#    my $sort_order_ref = sub {
#        my $A=$values->{$a}->[0];
#        my $B=$values->{$b}->[0];
#        ${A} cmp ${B};
#    };

#    my %value_hash = %$values;
    foreach my $id ( sort { $values{$a}{id} <=> $values{$b}{id} } keys %values ) {
        next if ! $id;
        my $val_hash_ref = $values{$id};
        my %val_hash = %$val_hash_ref;

		my $name = $val_hash{"name"} || "";
		my $values_show = "";
        foreach my $val ( keys %val_hash ) {
            $values_show = "";
            foreach my $cn ( @$column_names ) {
                my $column_name_db_val = $column_names_db->{$cn} || "";
                my $value_found = $val_hash{$column_name_db_val} || "";
                if ( exists ( $id_columns->{$column_name_db_val} )) {
                    $value_found = $id_columns->{$column_name_db_val}{$value_found}[0] || "";
                }
                if ( $value_found && exists ( $symbol_columns->{$cn} )) {
					$value_found = $symbol_columns->{$cn} || "";
                }
                $values_show .= "<td>" . $value_found . "</td>";
            }
        }

        my $onclick_scroll='onclick="saveScrollCoordinates();"';
        if ( $confirmation eq "yes" ) {
            $onclick_confirmation_delete = "onclick=\"saveScrollCoordinates();return confirmation(\'$name\',\'delete\');\"";
        }

        my $stylename_disabled="show_detail_disabled";

        my $changed_id_val = "";
        if ( $id ) {
            if ( defined $changed_id->{"$id"} ) {
                $changed_id_val = $changed_id->{"$id"};
            }
        }

        my $bg_color="white";
        my $bg_color_show="#efefef";

        if ( $id && $changed_id_val ) {
            $bg_color_show="#a6e8a6";
        } elsif ( $color_helper eq "0"  && ( ! $bg_color || $bg_color eq "white" )) {
            $bg_color_show="#efefef";
            $color_helper="1";
        } elsif ( $color_helper eq "1" && ( ! $bg_color || $bg_color eq "white" )) {
            $bg_color_show="white";
            $color_helper="0";
        }

        my $hidden_form_vals="<input name=\"id\" type=\"hidden\" value=\"$id\"><input name=\"client_id\" type=\"hidden\" value=\"$client_id\">";

        print "<tr bgcolor=\"$bg_color_show\" align=\"center\" class=\"$stylename_disabled\">";

		print "$values_show";

        print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/$mod_form\">$hidden_form_vals<input type=\"submit\" value=\"\" name=\"modificar\" class=\"edit_host_button\" style=\"cursor:pointer;\" title=\"$lang_vars{modificar_message}\" $onclick_scroll></form></td>";

        print "<td><form method=\"POST\" action=\"$server_proto://$base_uri/res/$delete_form\">$hidden_form_vals<input name=\"name\" type=\"hidden\" value=\"$name\"><input type=\"submit\" value=\"\" name=\"borrar\" class=\"delete_button\" title=\"$lang_vars{borrar_message}\" $onclick_confirmation_delete></form></td>";


        print "</tr>\n";
    }

    print "</table><p>\n";

#   print "<form name=\"ip_export_dns_server_group_form\" method=\"POST\" action=\"$server_proto://$base_uri/res/ip_export_dns_server_group.cgi\" style=\"display:inline;\"><input type=\"hidden\" name=\"match\" value=\"$match\"><input type=\"hidden\" name=\"client_id\" value=\"$client_id\"><input type=\"submit\" class=\"input_link_w_right\" value=\"$lang_vars{export_message}\" name=\"B1\"></form><p><br>\n";

print "<p><br><p>\n";
print <<EOF;
<SCRIPT LANGUAGE="Javascript" TYPE="text/javascript">
<!--
scrollToCoordinates();
//-->
</SCRIPT>
EOF

}


## LOCAL USERS

sub get_local_users {
	my ($self, $client_id) = @_;

    my $user_file = "/etc/apache2/users-gestioip";

    my @users;

    open(UF,"<$user_file") or croak $self->print_error("$client_id","Can not open user-file: $?"); 
    while (<UF> ) {
        $_ =~ /^(.+):?/;
        my $user = $1;

        push @users, $user;
    }
    close UF;
}


sub get_net_usage {
	my ($self, $usage) = @_;

	$usage =~ /^(\d+),(\d+),(\d+)$/;

    my $all_adds = $1 || 0;
    my $used_adds = $2 || 0;
    my $free_adds = $3 || 0;

	my ($percent_free, $percent_ocu);
    if ( $free_adds == 0 ) {
        $percent_free = 0;
        $percent_ocu = 100;
    } elsif ( $free_adds >= $all_adds ) {
        $percent_free = 100;
        $percent_ocu = 0;
    } else {
        my $free_calc = $free_adds . ".0";
        my $ip_total_calc = $all_adds . ".0";
        $percent_free=100*$free_calc/$ip_total_calc;
        $percent_free =~ /^(\d+\.?\d{0,1}).*/;
        $percent_free = $1;
        $percent_ocu = 100.0 - $percent_free;
        $percent_ocu = sprintf('%.*f', 1, $percent_ocu);
    }
    $used_adds="0" if ! $used_adds;
    $free_adds="0" if ! $free_adds;

	return ( "$all_adds", "$used_adds", "$free_adds", "$percent_free", "$percent_ocu");
}


=pod

=head1 NAME

GestioIP - Perl extension for working with the network/IP management tool GestioIP


=head1 SYNOPSIS

use GestioIP;

my $gip = GestioIP -> new();

my $daten=<STDIN>;

my %daten=$gip->preparer("$daten") if $daten;

my ($lang_vars,$vars_file)=$gip->get_lang();

my @ip=$gip->get_redes();

$gip->CheckInput(\%daten,"$$lang_vars{mal_signo_error_message}","$$lang_vars{redes_dispo_message}","$vars_file");

$gip->PrintRedTabHead("$vars_file");

$gip->PrintRedTab(\@ip,"$vars_file","$$lang_vars{detalles_message}","ip_show.cgi");

$gip->print_end();

=head1 DESCRIPTION

This module provides functions to deal with network/IP management tool GestioIP. GestioIP is a tool designed for network/system administrators to manage networks and IP addresses of an enterprise environment (but works good for smaler organizations/companies, too)

=head1 OBJECT METHODS

B<print_init>

Prints HTML head, left menu and headline

"$gip->print_init("$title","$inhalt","message","$vars_file");"

B<PrintRedTabHead>

Prints the filter-menu of the network list

"$gip->PrintRedTabHead("$vars_file");"

B<PrintRedTab>

Prints the list of networks

"$gip->PrintRedTab("$ip", "$tipo_ele", "$vars_file", "$boton", "$script", "$boton1", "$script1", "$boton2", "$script2"]);"

B<PrintIpTabHead>

Prints the filter-menu of the network list

"$gip->PrintIpTabHead("$tipo", "$script", "$red_num", "$vars_file");"

B<PrintIpTab>

Prints the list of IP addresses

"$gip->PrintIpTab("$ip", "$first_ip_int", "$last_ip_int", "$script", "$knownhosts", "$boton", "$red_num", "$red_loc", "$vars_file");"

B<print_end>

Prints the end of the HTML document

"$gip->print_end();"

B<CheckInput>

Checks the input - calls I<sub print_init>

"$gip->CheckInput("$dat", "$error", "$mensaje", "$vars_file");"

B<CheckInValue>

Prints error message

"$gip->CheckInValue("$value_descr");" 

B<CheckInIP>

Simple check of an IP address

"$gip->CheckInIP("$value", "$value_descr");"

B<get_redes>

Returns a list of the networks

"$gip->get_redes("$tipo_ele_id", "$loc_ele_id");"

B<preparer>

Puts the POST data in a hash

"$gip->preparer("$datenskalar");"

B<get_loc>

Returns a list of all locations

"my @values_locations=$gip->get_loc();"

B<get_cat>

Returns a list of all host categorias

"my @values_categorias=$gip->get_cat();"

B<get_cat_net>

Returns a list of all network categorias

"@values_cat_net=$gip->get_cat_net();"

B<get_utype>

Returns a list of all update types

"my @values_utype=$gip->get_utype();"

B<search_db>

Returns a list of IP addresses

"my @values_ip=$gip->search_db(\@search);"

B<search_db_red>

Returns a list of networks

"my @values_red=$gip->search_db_red(\@search,"$search_index");"

B<delete_ip>

Deletes a IP address FROM the database

"$gip->delete_ip("$ip_int");"

B<get_host>

Returns the IP addresses between $first_ip_int and $last_ip_int

"my @host=$gip->get_host("$first_ip_int","$last_ip_int");"

B<comprueba_red>

Checks if a network exits

"my $red_check=$gip->comprueba_red("$red_num");"

B<delete_red>

Deletes a network FROM table net;

"$gip->delete_red("$red");"

B<delete_red_ip>

Deletes the IP addresses between of red with "red_id" FROM table host;

"$gip->delete_red_ip("$red_id");"

B<check_ip>

"my $red_check=$gip->check_ip("$red");"

B<get_overlap_red>

"my @overlap_redes=$gip->get_overlap_red();"

B<insert_net>

Inserts a network into the database

"$gip->insert_net( "$red_num", "$red", "$BM", "$descr", "$loc_id", "$vigilada", "$comentario", "$cat_net");"

B<get_last_red_num>

Returns the last network number

"my $red_num=$gip->get_last_red_num();"

B<get_last_cat_id>

Returns the last host category number

"my $last_cat_id=$gip->get_last_cat_id();"

B<get_last_cat_net_id>

Returns the last network category number

my "$last_cat_net_id=$gip->get_last_cat_net_id();"

B<get_last_loc_id>

Returns the last location number

"my $last_loc_id=$gip->get_last_loc_id();"

B<get_loc_id>

Returns the location number

"my $loc_id=$gip->get_loc_id("$loc");"

B<get_cat_net_from_id>

Returns the network category FROM a network category ID

"my $cat_net = $gip->get_cat_net_from_id("$cat_net_id");"

B<get_loc_from_redid>

Returns the location of a network

"my $red_loc = $gip->get_loc_from_redid("$red_num");"

B<get_cat_id>

Returns the category ID of an host

"my $cat_id=$gip->get_cat_id("$cat");"

B<get_cat_net_id>

Returns the category ID of an network

"my $cat_net_id=$gip->get_cat_net_id("$cat_net");"

B<reset_host_cat_id>

Resets the category ID of an host FROM table host when they delete the host category

"$gip->reset_host_cat_id("$cat_id");"

B<reset_host_cat_net_id>

Resets the category ID of an network FROM table net when they delete the network category

"$gip->reset_host_cat_net_id("$cat_net_id");"

B<reset_host_loc_id>

Resets the location id FROM table host when the they delete the location

"$gip->reset_host_loc_id("$loc_id");"

B<reset_net_loc_id>

Resets the location id FROM table net when the they delete the location

"$gip->reset_net_loc_id("$loc_id");"

B<get_utypeid>

Returns the update type ID of an update type

"my $utype_id=$gip->get_utypeid("$utype");"

B<update_host_loc_id> 

B<update_ip_mod>

Updates the host table

"$gip->update_ip_mod("$ip_int","$hostname","$host_descr","$loc_id","$int_admin","$cat_id","$comentario","$utype_id","$mydatetime","$red_num");"

B<insert_ip_mod>

Inserts a host into the host table

"$gip->insert_ip_mod("$ip_int","$hostname","$host_descr","$loc_id","$int_admin","$cat_id","$comentario","$utype_id","$mydatetime","$red_num");"

B<get_red>

Returns I<red, BM, descr, loc, vigilada, comentario, categoria> from a given red ID;


"my @values_redes = $gip->get_red("$red_num");"

B<update_redes>

Changes the network in the table net

"$gip->update_redes("$red","$descr","$loc_id","$vigilada","$comentario","$cat_net_id");"

B<loc_del>

Deletes a location

"$gip->loc_del("$loc");"

B<cat_del>

Deletes a host category

"$gip->cat_del("$cat");"

B<cat_net_del>

Deletes a network category

"$gip->cat_net_del("$cat_net");"

B<loc_add>

Adds a location

"$gip->loc_add("$loc","$last_loc_id");"

B<cat_add>

Adds a host category

"$gip->cat_add("$cat","$last_cat_id");"

B<cat_net_add>

Adds a network category

"$gip->cat_net_add("$cat_net","$last_cat_net_id");"

B<resolve_ip>

resolves IP to name

"$gip->resolve_ip("$ip_ad")"

B<resolve_name>

resolves name to IP

"$gip->resolve_name("$name")"

B<get_red_id_from_red>

Returns red_id from given network ID

"$red_id=$gip->get_red_id_from_red("$red")"

B<get_red_nuevo>

Returns Broadcast address, subnet mask and number of hosts

"my ($broad,$mask,$hosts) = $gip->get_red_nuevo("$red","$BM","$vars_file");"

B<update_host_red_id_ip>

B<update_host_red_id_update_type>

B<get_lang>

determines the language

"my ($vars_file, $cookie)=$gip->get_lang();"

B<int_to_ip>

converts integer IP to IP

"my $ip_ad=$gip->int_to_ip($ip_int);"

=head1 BUGS

Net::Ping::External timeout don't works with all versions of "ping"

=head1 AUTHOR

Marc Uebel

=head1 SEE ALSO

L<BDI>, L<Socket>, L<NET::IP>, L<Net::Ping::External>, L<Parallel::ForkManager>

=head1 COPYRIGHT

Copyright (C) 2011 by Marc Uebel <contact@gestioip.net>

This program is  software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut


1;
